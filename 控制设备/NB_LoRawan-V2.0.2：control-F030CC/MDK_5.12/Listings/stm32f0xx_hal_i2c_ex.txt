; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_i2c_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_i2c_ex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_i2c_ex.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_i2c_ex.c]
                          THUMB

                          AREA ||i.HAL_I2CEx_ConfigAnalogFilter||, CODE, READONLY, ALIGN=1

                  HAL_I2CEx_ConfigAnalogFilter PROC
;;;110      */
;;;111    HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
000000  4602              MOV      r2,r0
;;;112    {
;;;113      /* Check the parameters */
;;;114      assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
;;;115      assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
;;;116    
;;;117      if(hi2c->State == HAL_I2C_STATE_READY)
000002  2041              MOVS     r0,#0x41
000004  5c80              LDRB     r0,[r0,r2]
000006  2820              CMP      r0,#0x20
000008  d12f              BNE      |L1.106|
;;;118      {
;;;119        /* Process Locked */
;;;120        __HAL_LOCK(hi2c);
00000a  bf00              NOP      
00000c  2040              MOVS     r0,#0x40
00000e  5c80              LDRB     r0,[r0,r2]
000010  2801              CMP      r0,#1
000012  d101              BNE      |L1.24|
000014  2002              MOVS     r0,#2
                  |L1.22|
;;;121    
;;;122        hi2c->State = HAL_I2C_STATE_BUSY;
;;;123    
;;;124        /* Disable the selected I2C peripheral */
;;;125        __HAL_I2C_DISABLE(hi2c);
;;;126    
;;;127        /* Reset I2Cx ANOFF bit */
;;;128        hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
;;;129    
;;;130        /* Set analog filter bit*/
;;;131        hi2c->Instance->CR1 |= AnalogFilter;
;;;132    
;;;133        __HAL_I2C_ENABLE(hi2c);
;;;134    
;;;135        hi2c->State = HAL_I2C_STATE_READY;
;;;136    
;;;137        /* Process Unlocked */
;;;138        __HAL_UNLOCK(hi2c);
;;;139    
;;;140        return HAL_OK;
;;;141      }
;;;142      else
;;;143      {
;;;144        return HAL_BUSY;
;;;145      }
;;;146    }
000016  4770              BX       lr
                  |L1.24|
000018  2301              MOVS     r3,#1                 ;120
00001a  2040              MOVS     r0,#0x40              ;120
00001c  5483              STRB     r3,[r0,r2]            ;120
00001e  bf00              NOP                            ;120
000020  2324              MOVS     r3,#0x24              ;122
000022  2041              MOVS     r0,#0x41              ;122
000024  5483              STRB     r3,[r0,r2]            ;122
000026  6810              LDR      r0,[r2,#0]            ;125
000028  6800              LDR      r0,[r0,#0]            ;125
00002a  0840              LSRS     r0,r0,#1              ;125
00002c  0040              LSLS     r0,r0,#1              ;125
00002e  6813              LDR      r3,[r2,#0]            ;125
000030  6018              STR      r0,[r3,#0]            ;125
000032  6810              LDR      r0,[r2,#0]            ;128
000034  6800              LDR      r0,[r0,#0]            ;128
000036  2301              MOVS     r3,#1                 ;128
000038  031b              LSLS     r3,r3,#12             ;128
00003a  4398              BICS     r0,r0,r3              ;128
00003c  6813              LDR      r3,[r2,#0]            ;128
00003e  6018              STR      r0,[r3,#0]            ;128
000040  6810              LDR      r0,[r2,#0]            ;131
000042  6800              LDR      r0,[r0,#0]            ;131
000044  4308              ORRS     r0,r0,r1              ;131
000046  6813              LDR      r3,[r2,#0]            ;131
000048  6018              STR      r0,[r3,#0]            ;131
00004a  6810              LDR      r0,[r2,#0]            ;133
00004c  6800              LDR      r0,[r0,#0]            ;133
00004e  2301              MOVS     r3,#1                 ;133
000050  4318              ORRS     r0,r0,r3              ;133
000052  6813              LDR      r3,[r2,#0]            ;133
000054  6018              STR      r0,[r3,#0]            ;133
000056  2320              MOVS     r3,#0x20              ;135
000058  2041              MOVS     r0,#0x41              ;135
00005a  5483              STRB     r3,[r0,r2]            ;135
00005c  bf00              NOP                            ;138
00005e  2300              MOVS     r3,#0                 ;138
000060  2040              MOVS     r0,#0x40              ;138
000062  5483              STRB     r3,[r0,r2]            ;138
000064  bf00              NOP                            ;138
000066  2000              MOVS     r0,#0                 ;140
000068  e7d5              B        |L1.22|
                  |L1.106|
00006a  2002              MOVS     r0,#2                 ;144
00006c  e7d3              B        |L1.22|
;;;147    
                          ENDP


                          AREA ||i.HAL_I2CEx_ConfigDigitalFilter||, CODE, READONLY, ALIGN=1

                  HAL_I2CEx_ConfigDigitalFilter PROC
;;;154      */
;;;155    HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
000000  b510              PUSH     {r4,lr}
;;;156    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;157      uint32_t tmpreg = 0U;
000006  2100              MOVS     r1,#0
;;;158    
;;;159      /* Check the parameters */
;;;160      assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
;;;161      assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
;;;162    
;;;163      if(hi2c->State == HAL_I2C_STATE_READY)
000008  2041              MOVS     r0,#0x41
00000a  5c80              LDRB     r0,[r0,r2]
00000c  2820              CMP      r0,#0x20
00000e  d12e              BNE      |L2.110|
;;;164      {
;;;165        /* Process Locked */
;;;166        __HAL_LOCK(hi2c);
000010  bf00              NOP      
000012  2040              MOVS     r0,#0x40
000014  5c80              LDRB     r0,[r0,r2]
000016  2801              CMP      r0,#1
000018  d101              BNE      |L2.30|
00001a  2002              MOVS     r0,#2
                  |L2.28|
;;;167    
;;;168        hi2c->State = HAL_I2C_STATE_BUSY;
;;;169    
;;;170        /* Disable the selected I2C peripheral */
;;;171        __HAL_I2C_DISABLE(hi2c);
;;;172    
;;;173        /* Get the old register value */
;;;174        tmpreg = hi2c->Instance->CR1;
;;;175    
;;;176        /* Reset I2Cx DNF bits [11:8] */
;;;177        tmpreg &= ~(I2C_CR1_DNF);
;;;178    
;;;179        /* Set I2Cx DNF coefficient */
;;;180        tmpreg |= DigitalFilter << 8U;
;;;181    
;;;182        /* Store the new register value */
;;;183        hi2c->Instance->CR1 = tmpreg;
;;;184    
;;;185        __HAL_I2C_ENABLE(hi2c);
;;;186    
;;;187        hi2c->State = HAL_I2C_STATE_READY;
;;;188    
;;;189        /* Process Unlocked */
;;;190        __HAL_UNLOCK(hi2c);
;;;191    
;;;192        return HAL_OK;
;;;193      }
;;;194      else
;;;195      {
;;;196        return HAL_BUSY;
;;;197      }
;;;198    }
00001c  bd10              POP      {r4,pc}
                  |L2.30|
00001e  2401              MOVS     r4,#1                 ;166
000020  2040              MOVS     r0,#0x40              ;166
000022  5484              STRB     r4,[r0,r2]            ;166
000024  bf00              NOP                            ;166
000026  2424              MOVS     r4,#0x24              ;168
000028  2041              MOVS     r0,#0x41              ;168
00002a  5484              STRB     r4,[r0,r2]            ;168
00002c  6810              LDR      r0,[r2,#0]            ;171
00002e  6800              LDR      r0,[r0,#0]            ;171
000030  0840              LSRS     r0,r0,#1              ;171
000032  0040              LSLS     r0,r0,#1              ;171
000034  6814              LDR      r4,[r2,#0]            ;171
000036  6020              STR      r0,[r4,#0]            ;171
000038  6810              LDR      r0,[r2,#0]            ;174
00003a  6801              LDR      r1,[r0,#0]            ;174
00003c  240f              MOVS     r4,#0xf               ;177
00003e  0224              LSLS     r4,r4,#8              ;177
000040  4608              MOV      r0,r1                 ;177
000042  43a0              BICS     r0,r0,r4              ;177
000044  4601              MOV      r1,r0                 ;177
000046  0218              LSLS     r0,r3,#8              ;180
000048  4301              ORRS     r1,r1,r0              ;180
00004a  6810              LDR      r0,[r2,#0]            ;183
00004c  6001              STR      r1,[r0,#0]            ;183
00004e  6810              LDR      r0,[r2,#0]            ;185
000050  6800              LDR      r0,[r0,#0]            ;185
000052  2401              MOVS     r4,#1                 ;185
000054  4320              ORRS     r0,r0,r4              ;185
000056  6814              LDR      r4,[r2,#0]            ;185
000058  6020              STR      r0,[r4,#0]            ;185
00005a  2420              MOVS     r4,#0x20              ;187
00005c  2041              MOVS     r0,#0x41              ;187
00005e  5484              STRB     r4,[r0,r2]            ;187
000060  bf00              NOP                            ;190
000062  2400              MOVS     r4,#0                 ;190
000064  2040              MOVS     r0,#0x40              ;190
000066  5484              STRB     r4,[r0,r2]            ;190
000068  bf00              NOP                            ;190
00006a  2000              MOVS     r0,#0                 ;192
00006c  e7d6              B        |L2.28|
                  |L2.110|
00006e  2002              MOVS     r0,#2                 ;196
000070  e7d4              B        |L2.28|
;;;199    #if defined(I2C_CR1_WUPEN)
                          ENDP


                          AREA ||i.HAL_I2CEx_DisableFastModePlus||, CODE, READONLY, ALIGN=2

                  HAL_I2CEx_DisableFastModePlus PROC
;;;317      */
;;;318    void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
000000  b508              PUSH     {r3,lr}
;;;319    {
;;;320      /* Check the parameter */
;;;321      assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
;;;322    
;;;323      /* Enable SYSCFG clock */
;;;324      __HAL_RCC_SYSCFG_CLK_ENABLE();
000002  bf00              NOP      
000004  4909              LDR      r1,|L3.44|
000006  6989              LDR      r1,[r1,#0x18]
000008  2201              MOVS     r2,#1
00000a  4311              ORRS     r1,r1,r2
00000c  4a07              LDR      r2,|L3.44|
00000e  6191              STR      r1,[r2,#0x18]
000010  4611              MOV      r1,r2
000012  6989              LDR      r1,[r1,#0x18]
000014  07c9              LSLS     r1,r1,#31
000016  0fc9              LSRS     r1,r1,#31
000018  9100              STR      r1,[sp,#0]
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;325    
;;;326      /* Disable fast mode plus driving capability for selected pin */
;;;327      CLEAR_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
00001e  4904              LDR      r1,|L3.48|
000020  6809              LDR      r1,[r1,#0]
000022  4381              BICS     r1,r1,r0
000024  4a02              LDR      r2,|L3.48|
000026  6011              STR      r1,[r2,#0]
;;;328    }
000028  bd08              POP      {r3,pc}
;;;329    
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      0x40021000
                  |L3.48|
                          DCD      0x40010000

                          AREA ||i.HAL_I2CEx_EnableFastModePlus||, CODE, READONLY, ALIGN=2

                  HAL_I2CEx_EnableFastModePlus PROC
;;;292      */
;;;293    void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
000000  b508              PUSH     {r3,lr}
;;;294    {
;;;295      /* Check the parameter */
;;;296      assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
;;;297    
;;;298      /* Enable SYSCFG clock */
;;;299      __HAL_RCC_SYSCFG_CLK_ENABLE();
000002  bf00              NOP      
000004  4909              LDR      r1,|L4.44|
000006  6989              LDR      r1,[r1,#0x18]
000008  2201              MOVS     r2,#1
00000a  4311              ORRS     r1,r1,r2
00000c  4a07              LDR      r2,|L4.44|
00000e  6191              STR      r1,[r2,#0x18]
000010  4611              MOV      r1,r2
000012  6989              LDR      r1,[r1,#0x18]
000014  07c9              LSLS     r1,r1,#31
000016  0fc9              LSRS     r1,r1,#31
000018  9100              STR      r1,[sp,#0]
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;300    
;;;301      /* Enable fast mode plus driving capability for selected pin */
;;;302      SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
00001e  4904              LDR      r1,|L4.48|
000020  6809              LDR      r1,[r1,#0]
000022  4301              ORRS     r1,r1,r0
000024  4a02              LDR      r2,|L4.48|
000026  6011              STR      r1,[r2,#0]
;;;303    }
000028  bd08              POP      {r3,pc}
;;;304    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40021000
                  |L4.48|
                          DCD      0x40010000

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_i2c_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_i2c_ex_c_a642fad8____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f0xx_hal_i2c_ex_c_a642fad8____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_i2c_ex_c_a642fad8____REVSH|
#line 402
|__asm___22_stm32f0xx_hal_i2c_ex_c_a642fad8____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
