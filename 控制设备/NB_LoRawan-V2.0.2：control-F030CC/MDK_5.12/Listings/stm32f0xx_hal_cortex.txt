; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_cortex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_cortex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_cortex.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_cortex.c]
                          THUMB

                          AREA ||i.HAL_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_ClearPendingIRQ PROC
;;;288      */
;;;289    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  bf00              NOP      
000002  06c2              LSLS     r2,r0,#27
000004  0ed2              LSRS     r2,r2,#27
000006  2101              MOVS     r1,#1
000008  4091              LSLS     r1,r1,r2
00000a  4a02              LDR      r2,|L1.20|
00000c  6011              STR      r1,[r2,#0]
00000e  bf00              NOP      
;;;290    {
;;;291      /* Check the parameters */
;;;292      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;293      
;;;294      /* Clear pending interrupt */
;;;295      NVIC_ClearPendingIRQ(IRQn);
;;;296    }
000010  4770              BX       lr
;;;297    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0xe000e280

                          AREA ||i.HAL_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_DisableIRQ PROC
;;;183      */
;;;184    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  bf00              NOP      
000002  06c2              LSLS     r2,r0,#27
000004  0ed2              LSRS     r2,r2,#27
000006  2101              MOVS     r1,#1
000008  4091              LSLS     r1,r1,r2
00000a  4a02              LDR      r2,|L2.20|
00000c  6011              STR      r1,[r2,#0]
00000e  bf00              NOP      
;;;185    {
;;;186      /* Check the parameters */
;;;187      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;188      
;;;189      /* Disable interrupt */
;;;190      NVIC_DisableIRQ(IRQn);
;;;191    }
000010  4770              BX       lr
;;;192    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0xe000e180

                          AREA ||i.HAL_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_EnableIRQ PROC
;;;167      */
;;;168    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  bf00              NOP      
000002  06c2              LSLS     r2,r0,#27
000004  0ed2              LSRS     r2,r2,#27
000006  2101              MOVS     r1,#1
000008  4091              LSLS     r1,r1,r2
00000a  4a02              LDR      r2,|L3.20|
00000c  6011              STR      r1,[r2,#0]
00000e  bf00              NOP      
;;;169    {
;;;170      /* Check the parameters */
;;;171      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;172      
;;;173      /* Enable interrupt */
;;;174      NVIC_EnableIRQ(IRQn);
;;;175    }
000010  4770              BX       lr
;;;176    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0xe000e100

                          AREA ||i.HAL_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPendingIRQ PROC
;;;272      */
;;;273    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;274    {
000002  4601              MOV      r1,r0
;;;275      /* Check the parameters */
;;;276      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;277      
;;;278      /* Return 1 if pending else 0 */
;;;279      return NVIC_GetPendingIRQ(IRQn);
000004  4608              MOV      r0,r1
000006  4a07              LDR      r2,|L4.36|
000008  6812              LDR      r2,[r2,#0]
00000a  06c4              LSLS     r4,r0,#27
00000c  0ee4              LSRS     r4,r4,#27
00000e  2301              MOVS     r3,#1
000010  40a3              LSLS     r3,r3,r4
000012  401a              ANDS     r2,r2,r3
000014  2a00              CMP      r2,#0
000016  d001              BEQ      |L4.28|
000018  2201              MOVS     r2,#1
00001a  e000              B        |L4.30|
                  |L4.28|
00001c  2200              MOVS     r2,#0
                  |L4.30|
00001e  4610              MOV      r0,r2
;;;280    }
000020  bd10              POP      {r4,pc}
;;;281    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0xe000e200

                          AREA ||i.HAL_NVIC_GetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPriority PROC
;;;241      */
;;;242    uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
000000  4601              MOV      r1,r0
;;;243    {
;;;244      /* Get priority for Cortex-M system or device specific interrupts */
;;;245      return NVIC_GetPriority(IRQn);
000002  4608              MOV      r0,r1
000004  2800              CMP      r0,#0
000006  da0c              BGE      |L5.34|
000008  4a0d              LDR      r2,|L5.64|
00000a  0703              LSLS     r3,r0,#28
00000c  0f1b              LSRS     r3,r3,#28
00000e  3b08              SUBS     r3,r3,#8
000010  089b              LSRS     r3,r3,#2
000012  009b              LSLS     r3,r3,#2
000014  58d2              LDR      r2,[r2,r3]
000016  0783              LSLS     r3,r0,#30
000018  0edb              LSRS     r3,r3,#27
00001a  40da              LSRS     r2,r2,r3
00001c  0612              LSLS     r2,r2,#24
00001e  0f92              LSRS     r2,r2,#30
000020  e00b              B        |L5.58|
                  |L5.34|
000022  4a08              LDR      r2,|L5.68|
000024  2303              MOVS     r3,#3
000026  021b              LSLS     r3,r3,#8
000028  18d2              ADDS     r2,r2,r3
00002a  0883              LSRS     r3,r0,#2
00002c  009b              LSLS     r3,r3,#2
00002e  58d2              LDR      r2,[r2,r3]
000030  0783              LSLS     r3,r0,#30
000032  0edb              LSRS     r3,r3,#27
000034  40da              LSRS     r2,r2,r3
000036  0612              LSLS     r2,r2,#24
000038  0f92              LSRS     r2,r2,#30
                  |L5.58|
00003a  4610              MOV      r0,r2
;;;246    }
00003c  4770              BX       lr
;;;247    
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      0xe000ed1c
                  |L5.68|
                          DCD      0xe000e100

                          AREA ||i.HAL_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPendingIRQ PROC
;;;254      */
;;;255    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  bf00              NOP      
000002  06c2              LSLS     r2,r0,#27
000004  0ed2              LSRS     r2,r2,#27
000006  2101              MOVS     r1,#1
000008  4091              LSLS     r1,r1,r2
00000a  4a02              LDR      r2,|L6.20|
00000c  6011              STR      r1,[r2,#0]
00000e  bf00              NOP      
;;;256    {
;;;257      /* Check the parameters */
;;;258      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;259      
;;;260      /* Set interrupt pending */
;;;261      NVIC_SetPendingIRQ(IRQn);
;;;262    }
000010  4770              BX       lr
;;;263    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      0xe000e200

                          AREA ||i.HAL_NVIC_SetPriority||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_SetPriority PROC
;;;151      */
;;;152    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;153    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;154      /* Check the parameters */
;;;155      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;156      NVIC_SetPriority(IRQn,PreemptPriority);
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       NVIC_SetPriority
;;;157    }
000010  bd70              POP      {r4-r6,pc}
;;;158    
                          ENDP


                          AREA ||i.HAL_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SystemReset PROC
;;;196      */
;;;197    void HAL_NVIC_SystemReset(void)
000000  bf00              NOP      
000002  bf00              NOP      
000004  bf00              NOP      
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f3bf8f4f          DSB      
00000e  bf00              NOP      
000010  bf00              NOP      
000012  bf00              NOP      
000014  4806              LDR      r0,|L8.48|
000016  4907              LDR      r1,|L8.52|
000018  60c8              STR      r0,[r1,#0xc]
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  f3bf8f4f          DSB      
000024  bf00              NOP      
000026  bf00              NOP      
000028  bf00              NOP      
00002a  bf00              NOP      
                  |L8.44|
00002c  bf00              NOP      
00002e  e7fd              B        |L8.44|
;;;198    {
;;;199      /* System Reset */
;;;200      NVIC_SystemReset();
;;;201    }
;;;202    
                          ENDP

                  |L8.48|
                          DCD      0x05fa0004
                  |L8.52|
                          DCD      0xe000ed00

                          AREA ||i.HAL_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=2

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;305      */
;;;306    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  2804              CMP      r0,#4
;;;307    {
;;;308      /* Check the parameters */
;;;309      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;310      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
000002  d106              BNE      |L9.18|
;;;311      {
;;;312        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
000004  4906              LDR      r1,|L9.32|
000006  6909              LDR      r1,[r1,#0x10]
000008  2204              MOVS     r2,#4
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L9.32|
00000e  6111              STR      r1,[r2,#0x10]
000010  e005              B        |L9.30|
                  |L9.18|
;;;313      }
;;;314      else
;;;315      {
;;;316        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000012  4903              LDR      r1,|L9.32|
000014  6909              LDR      r1,[r1,#0x10]
000016  2204              MOVS     r2,#4
000018  4391              BICS     r1,r1,r2
00001a  4a01              LDR      r2,|L9.32|
00001c  6111              STR      r1,[r2,#0x10]
                  |L9.30|
;;;317      }
;;;318    }
00001e  4770              BX       lr
;;;319    
                          ENDP

                  |L9.32|
                          DCD      0xe000e000

                          AREA ||i.HAL_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Callback PROC
;;;332      */
;;;333    __weak void HAL_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;334    {
;;;335      /* NOTE : This function Should not be modified, when the callback is needed,
;;;336                the HAL_SYSTICK_Callback could be implemented in the user file
;;;337       */
;;;338    }
;;;339    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Config||, CODE, READONLY, ALIGN=2

                  HAL_SYSTICK_Config PROC
;;;209      */
;;;210    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000000  b570              PUSH     {r4-r6,lr}
;;;211    {
000002  4604              MOV      r4,r0
;;;212       return SysTick_Config(TicksNumb);
000004  4625              MOV      r5,r4
000006  1e68              SUBS     r0,r5,#1
000008  4909              LDR      r1,|L11.48|
00000a  4288              CMP      r0,r1
00000c  d901              BLS      |L11.18|
00000e  2001              MOVS     r0,#1
000010  e00c              B        |L11.44|
                  |L11.18|
000012  1e68              SUBS     r0,r5,#1
000014  4907              LDR      r1,|L11.52|
000016  6148              STR      r0,[r1,#0x14]
000018  2103              MOVS     r1,#3
00001a  1f08              SUBS     r0,r1,#4
00001c  f7fffffe          BL       NVIC_SetPriority
000020  2000              MOVS     r0,#0
000022  4904              LDR      r1,|L11.52|
000024  6188              STR      r0,[r1,#0x18]
000026  2007              MOVS     r0,#7
000028  6108              STR      r0,[r1,#0x10]
00002a  2000              MOVS     r0,#0
                  |L11.44|
;;;213    }
00002c  bd70              POP      {r4-r6,pc}
;;;214    /**
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      0x00ffffff
                  |L11.52|
                          DCD      0xe000e000

                          AREA ||i.HAL_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_IRQHandler PROC
;;;323      */
;;;324    void HAL_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;325    {
;;;326      HAL_SYSTICK_Callback();
000002  f7fffffe          BL       HAL_SYSTICK_Callback
;;;327    }
000006  bd10              POP      {r4,pc}
;;;328    
                          ENDP


                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;687     */
;;;688    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;689    {
;;;690      if ((int32_t)(IRQn) < 0)
000002  2800              CMP      r0,#0
000004  da19              BGE      |L13.58|
;;;691      {
;;;692        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000006  4a1a              LDR      r2,|L13.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L13.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L13.108|
                  |L13.58|
;;;693           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;694      }
;;;695      else
;;;696      {
;;;697        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L13.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L13.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L13.108|
;;;698           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;699      }
;;;700    }
00006c  bd10              POP      {r4,pc}
;;;701    
                          ENDP

00006e  0000              DCW      0x0000
                  |L13.112|
                          DCD      0xe000ed1c
                  |L13.116|
                          DCD      0xe000e100

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_cortex_c_910ac087____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f0xx_hal_cortex_c_910ac087____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_cortex_c_910ac087____REVSH|
#line 402
|__asm___22_stm32f0xx_hal_cortex_c_910ac087____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
