; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_crc_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_crc_ex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_crc_ex.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_crc_ex.c]
                          THUMB

                          AREA ||i.HAL_CRCEx_Init||, CODE, READONLY, ALIGN=1

                  HAL_CRCEx_Init PROC
;;;99       */             
;;;100    HAL_StatusTypeDef HAL_CRCEx_Init(CRC_HandleTypeDef *hcrc)
000000  4601              MOV      r1,r0
;;;101    {
;;;102    #if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx)
;;;103      /* check whether or not non-default generating polynomial has been 
;;;104       * picked up by user */
;;;105      assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
;;;106      if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
;;;107      {
;;;108        /* initialize IP with default generating polynomial */
;;;109        WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
;;;110        MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
;;;111      }
;;;112      else
;;;113      {
;;;114        /* initialize CRC IP with generating polynomial defined by user */
;;;115        if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
;;;116        {
;;;117          return HAL_ERROR;
;;;118        }
;;;119      }
;;;120    #endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    
;;;121    
;;;122       return HAL_OK;
000002  2000              MOVS     r0,#0
;;;123    }
000004  4770              BX       lr
;;;124    
                          ENDP


                          AREA ||i.HAL_CRCEx_Input_Data_Reverse||, CODE, READONLY, ALIGN=1

                  HAL_CRCEx_Input_Data_Reverse PROC
;;;135      */                                   
;;;136    HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
000000  4602              MOV      r2,r0
;;;137    {  
;;;138      /* Check the parameters */
;;;139      assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));
;;;140      
;;;141      /* Change CRC peripheral state */
;;;142      hcrc->State = HAL_CRC_STATE_BUSY;
000002  2002              MOVS     r0,#2
000004  7750              STRB     r0,[r2,#0x1d]
;;;143    
;;;144      /* set input data inversion mode */
;;;145      MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);    
000006  6810              LDR      r0,[r2,#0]
000008  6880              LDR      r0,[r0,#8]
00000a  2360              MOVS     r3,#0x60
00000c  4398              BICS     r0,r0,r3
00000e  4308              ORRS     r0,r0,r1
000010  6813              LDR      r3,[r2,#0]
000012  6098              STR      r0,[r3,#8]
;;;146      /* Change CRC peripheral state */
;;;147      hcrc->State = HAL_CRC_STATE_READY;
000014  2001              MOVS     r0,#1
000016  7750              STRB     r0,[r2,#0x1d]
;;;148      
;;;149      /* Return function status */
;;;150      return HAL_OK;
000018  2000              MOVS     r0,#0
;;;151    }
00001a  4770              BX       lr
;;;152    
                          ENDP


                          AREA ||i.HAL_CRCEx_Output_Data_Reverse||, CODE, READONLY, ALIGN=1

                  HAL_CRCEx_Output_Data_Reverse PROC
;;;161      */                                   
;;;162    HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
000000  4602              MOV      r2,r0
;;;163    {
;;;164      /* Check the parameters */
;;;165      assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));
;;;166      
;;;167      /* Change CRC peripheral state */
;;;168      hcrc->State = HAL_CRC_STATE_BUSY;
000002  2002              MOVS     r0,#2
000004  7750              STRB     r0,[r2,#0x1d]
;;;169    
;;;170      /* set output data inversion mode */
;;;171      MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode); 
000006  6810              LDR      r0,[r2,#0]
000008  6880              LDR      r0,[r0,#8]
00000a  2380              MOVS     r3,#0x80
00000c  4398              BICS     r0,r0,r3
00000e  4308              ORRS     r0,r0,r1
000010  6813              LDR      r3,[r2,#0]
000012  6098              STR      r0,[r3,#8]
;;;172          
;;;173      /* Change CRC peripheral state */
;;;174      hcrc->State = HAL_CRC_STATE_READY;
000014  2001              MOVS     r0,#1
000016  7750              STRB     r0,[r2,#0x1d]
;;;175      
;;;176      /* Return function status */
;;;177      return HAL_OK;
000018  2000              MOVS     r0,#0
;;;178    }
00001a  4770              BX       lr
;;;179    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_crc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_crc_ex_c_9f5702de____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f0xx_hal_crc_ex_c_9f5702de____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_crc_ex_c_9f5702de____REVSH|
#line 402
|__asm___22_stm32f0xx_hal_crc_ex_c_9f5702de____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
