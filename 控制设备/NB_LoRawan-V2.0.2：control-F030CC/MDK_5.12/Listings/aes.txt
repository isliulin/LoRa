; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\aes.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\aes.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\aes.crf ..\Lib\LoRawan-node\crypto\aes.c]
                          THUMB

                          AREA ||i.add_round_key||, CODE, READONLY, ALIGN=1

                  add_round_key PROC
;;;405    
;;;406    static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
000000  b570              PUSH     {r4-r6,lr}
;;;407    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;408        xor_block(d, k);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       xor_block
;;;409    }
00000e  bd70              POP      {r4-r6,pc}
;;;410    
                          ENDP


                          AREA ||i.aes_cbc_encrypt||, CODE, READONLY, ALIGN=1

                  aes_cbc_encrypt PROC
;;;596    
;;;597    return_type aes_cbc_encrypt( const uint8_t *in, uint8_t *out,
000000  b5f8              PUSH     {r3-r7,lr}
;;;598                             int32_t n_block, uint8_t iv[N_BLOCK], const aes_context ctx[1] )
;;;599    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4617              MOV      r7,r2
000008  461e              MOV      r6,r3
;;;600    
;;;601        while(n_block--)
00000a  e012              B        |L2.50|
                  |L2.12|
;;;602        {
;;;603            xor_block(iv, in);
00000c  4621              MOV      r1,r4
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       xor_block
;;;604            if(aes_encrypt(iv, iv, ctx) != EXIT_SUCCESS)
000014  4631              MOV      r1,r6
000016  4630              MOV      r0,r6
000018  9a06              LDR      r2,[sp,#0x18]
00001a  f7fffffe          BL       aes_encrypt
00001e  2800              CMP      r0,#0
000020  d001              BEQ      |L2.38|
;;;605                return EXIT_FAILURE;
000022  2001              MOVS     r0,#1
                  |L2.36|
;;;606            //memcpy(out, iv, N_BLOCK);
;;;607            block_copy(out, iv);
;;;608            in += N_BLOCK;
;;;609            out += N_BLOCK;
;;;610        }
;;;611        return EXIT_SUCCESS;
;;;612    }
000024  bdf8              POP      {r3-r7,pc}
                  |L2.38|
000026  4631              MOV      r1,r6                 ;607
000028  4628              MOV      r0,r5                 ;607
00002a  f7fffffe          BL       copy_block
00002e  3410              ADDS     r4,r4,#0x10           ;608
000030  3510              ADDS     r5,r5,#0x10           ;609
                  |L2.50|
000032  4638              MOV      r0,r7                 ;601
000034  1e7f              SUBS     r7,r7,#1              ;601
000036  2800              CMP      r0,#0                 ;601
000038  d1e8              BNE      |L2.12|
00003a  bf00              NOP                            ;611
00003c  e7f2              B        |L2.36|
;;;613    
                          ENDP


                          AREA ||i.aes_encrypt||, CODE, READONLY, ALIGN=1

                  aes_encrypt PROC
;;;567    
;;;568    return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
000000  b5f0              PUSH     {r4-r7,lr}
;;;569    {
000002  b085              SUB      sp,sp,#0x14
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;570        if( ctx->rnd )
00000a  20f0              MOVS     r0,#0xf0
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2800              CMP      r0,#0
000010  d01e              BEQ      |L3.80|
;;;571        {
;;;572            uint8_t s1[N_BLOCK], r;
;;;573            copy_and_key( s1, in, ctx->ksch );
000012  4622              MOV      r2,r4
000014  4631              MOV      r1,r6
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       copy_and_key
;;;574    
;;;575            for( r = 1 ; r < ctx->rnd ; ++r )
00001c  2501              MOVS     r5,#1
00001e  e009              B        |L3.52|
                  |L3.32|
;;;576    #if defined( VERSION_1 )
;;;577            {
;;;578                mix_sub_columns( s1 );
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       mix_sub_columns
;;;579                add_round_key( s1, ctx->ksch + r * N_BLOCK);
000026  0128              LSLS     r0,r5,#4
000028  1901              ADDS     r1,r0,r4
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       add_round_key
000030  1c68              ADDS     r0,r5,#1              ;575
000032  b2c5              UXTB     r5,r0                 ;575
                  |L3.52|
000034  20f0              MOVS     r0,#0xf0              ;575
000036  5d00              LDRB     r0,[r0,r4]            ;575
000038  42a8              CMP      r0,r5                 ;575
00003a  dcf1              BGT      |L3.32|
;;;580            }
;;;581    #else
;;;582            {   uint8_t s2[N_BLOCK];
;;;583                mix_sub_columns( s2, s1 );
;;;584                copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
;;;585            }
;;;586    #endif
;;;587            shift_sub_rows( s1 );
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       shift_sub_rows
;;;588            copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
000042  0128              LSLS     r0,r5,#4
000044  1902              ADDS     r2,r0,r4
000046  4669              MOV      r1,sp
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       copy_and_key
;;;589        }
00004e  e002              B        |L3.86|
                  |L3.80|
;;;590        else
;;;591            return ( uint8_t )-1;
000050  20ff              MOVS     r0,#0xff
                  |L3.82|
;;;592        return 0;
;;;593    }
000052  b005              ADD      sp,sp,#0x14
000054  bdf0              POP      {r4-r7,pc}
                  |L3.86|
000056  2000              MOVS     r0,#0                 ;592
000058  e7fb              B        |L3.82|
;;;594    
                          ENDP


                          AREA ||i.aes_set_key||, CODE, READONLY, ALIGN=2

                  aes_set_key PROC
;;;512    
;;;513    return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;514    {
000002  b086              SUB      sp,sp,#0x18
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;515        uint8_t cc, rc, hi;
;;;516    
;;;517        switch( keylen )
000008  2e10              CMP      r6,#0x10
00000a  d004              BEQ      |L4.22|
00000c  2e18              CMP      r6,#0x18
00000e  d003              BEQ      |L4.24|
000010  2e20              CMP      r6,#0x20
000012  d103              BNE      |L4.28|
000014  e001              B        |L4.26|
                  |L4.22|
;;;518        {
;;;519        case 16:
;;;520        case 24:
000016  bf00              NOP      
                  |L4.24|
;;;521        case 32:
000018  bf00              NOP      
                  |L4.26|
;;;522            break;
00001a  e005              B        |L4.40|
                  |L4.28|
;;;523        default: 
;;;524            ctx->rnd = 0; 
00001c  2100              MOVS     r1,#0
00001e  20f0              MOVS     r0,#0xf0
000020  5501              STRB     r1,[r0,r4]
;;;525            return ( uint8_t )-1;
000022  20ff              MOVS     r0,#0xff
                  |L4.36|
;;;526        }
;;;527        block_copy_nn(ctx->ksch, key, keylen);
;;;528        hi = (keylen + 28) << 2;
;;;529        ctx->rnd = (hi >> 4) - 1;
;;;530        for( cc = keylen, rc = 1; cc < hi; cc += 4 )
;;;531        {   uint8_t tt, t0, t1, t2, t3;
;;;532    
;;;533            t0 = ctx->ksch[cc - 4];
;;;534            t1 = ctx->ksch[cc - 3];
;;;535            t2 = ctx->ksch[cc - 2];
;;;536            t3 = ctx->ksch[cc - 1];
;;;537            if( cc % keylen == 0 )
;;;538            {
;;;539                tt = t0;
;;;540                t0 = s_box(t1) ^ rc;
;;;541                t1 = s_box(t2);
;;;542                t2 = s_box(t3);
;;;543                t3 = s_box(tt);
;;;544                rc = f2(rc);
;;;545            }
;;;546            else if( keylen > 24 && cc % keylen == 16 )
;;;547            {
;;;548                t0 = s_box(t0);
;;;549                t1 = s_box(t1);
;;;550                t2 = s_box(t2);
;;;551                t3 = s_box(t3);
;;;552            }
;;;553            tt = cc - keylen;
;;;554            ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
;;;555            ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
;;;556            ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
;;;557            ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
;;;558        }
;;;559        return 0;
;;;560    }
000024  b009              ADD      sp,sp,#0x24
000026  bdf0              POP      {r4-r7,pc}
                  |L4.40|
000028  bf00              NOP                            ;522
00002a  4632              MOV      r2,r6                 ;527
00002c  4620              MOV      r0,r4                 ;527
00002e  9906              LDR      r1,[sp,#0x18]         ;527
000030  f7fffffe          BL       copy_block_nn
000034  4630              MOV      r0,r6                 ;528
000036  301c              ADDS     r0,r0,#0x1c           ;528
000038  0680              LSLS     r0,r0,#26             ;528
00003a  0e00              LSRS     r0,r0,#24             ;528
00003c  9004              STR      r0,[sp,#0x10]         ;528
00003e  9804              LDR      r0,[sp,#0x10]         ;529
000040  1100              ASRS     r0,r0,#4              ;529
000042  1e40              SUBS     r0,r0,#1              ;529
000044  b2c1              UXTB     r1,r0                 ;529
000046  20f0              MOVS     r0,#0xf0              ;529
000048  5501              STRB     r1,[r0,r4]            ;529
00004a  4635              MOV      r5,r6                 ;530
00004c  2001              MOVS     r0,#1                 ;530
00004e  9005              STR      r0,[sp,#0x14]         ;530
000050  e05d              B        |L4.270|
                  |L4.82|
000052  1f28              SUBS     r0,r5,#4              ;533
000054  5c20              LDRB     r0,[r4,r0]            ;533
000056  9003              STR      r0,[sp,#0xc]          ;533
000058  1ee8              SUBS     r0,r5,#3              ;534
00005a  5c20              LDRB     r0,[r4,r0]            ;534
00005c  9002              STR      r0,[sp,#8]            ;534
00005e  1ea8              SUBS     r0,r5,#2              ;535
000060  5c20              LDRB     r0,[r4,r0]            ;535
000062  9001              STR      r0,[sp,#4]            ;535
000064  1e68              SUBS     r0,r5,#1              ;536
000066  5c20              LDRB     r0,[r4,r0]            ;536
000068  9000              STR      r0,[sp,#0]            ;536
00006a  4631              MOV      r1,r6                 ;537
00006c  4628              MOV      r0,r5                 ;537
00006e  f7fffffe          BL       __aeabi_idivmod
000072  2900              CMP      r1,#0                 ;537
000074  d11c              BNE      |L4.176|
000076  9f03              LDR      r7,[sp,#0xc]          ;539
000078  4927              LDR      r1,|L4.280|
00007a  9802              LDR      r0,[sp,#8]            ;540
00007c  5c08              LDRB     r0,[r1,r0]            ;540
00007e  9905              LDR      r1,[sp,#0x14]         ;540
000080  4048              EORS     r0,r0,r1              ;540
000082  9003              STR      r0,[sp,#0xc]          ;540
000084  4924              LDR      r1,|L4.280|
000086  9801              LDR      r0,[sp,#4]            ;541
000088  5c08              LDRB     r0,[r1,r0]            ;541
00008a  9002              STR      r0,[sp,#8]            ;541
00008c  9800              LDR      r0,[sp,#0]            ;542
00008e  5c08              LDRB     r0,[r1,r0]            ;542
000090  9001              STR      r0,[sp,#4]            ;542
000092  4608              MOV      r0,r1                 ;543
000094  5dc0              LDRB     r0,[r0,r7]            ;543
000096  9000              STR      r0,[sp,#0]            ;543
000098  9805              LDR      r0,[sp,#0x14]         ;544
00009a  0040              LSLS     r0,r0,#1              ;544
00009c  9905              LDR      r1,[sp,#0x14]         ;544
00009e  0609              LSLS     r1,r1,#24             ;544
0000a0  0fc9              LSRS     r1,r1,#31             ;544
0000a2  22ff              MOVS     r2,#0xff              ;544
0000a4  321c              ADDS     r2,r2,#0x1c           ;544
0000a6  4351              MULS     r1,r2,r1              ;544
0000a8  4048              EORS     r0,r0,r1              ;544
0000aa  b2c0              UXTB     r0,r0                 ;544
0000ac  9005              STR      r0,[sp,#0x14]         ;544
0000ae  e014              B        |L4.218|
                  |L4.176|
0000b0  2e18              CMP      r6,#0x18              ;546
0000b2  dd12              BLE      |L4.218|
0000b4  4631              MOV      r1,r6                 ;546
0000b6  4628              MOV      r0,r5                 ;546
0000b8  f7fffffe          BL       __aeabi_idivmod
0000bc  2910              CMP      r1,#0x10              ;546
0000be  d10c              BNE      |L4.218|
0000c0  4915              LDR      r1,|L4.280|
0000c2  9803              LDR      r0,[sp,#0xc]          ;548
0000c4  5c08              LDRB     r0,[r1,r0]            ;548
0000c6  9003              STR      r0,[sp,#0xc]          ;548
0000c8  9802              LDR      r0,[sp,#8]            ;549
0000ca  5c08              LDRB     r0,[r1,r0]            ;549
0000cc  9002              STR      r0,[sp,#8]            ;549
0000ce  9801              LDR      r0,[sp,#4]            ;550
0000d0  5c08              LDRB     r0,[r1,r0]            ;550
0000d2  9001              STR      r0,[sp,#4]            ;550
0000d4  9800              LDR      r0,[sp,#0]            ;551
0000d6  5c08              LDRB     r0,[r1,r0]            ;551
0000d8  9000              STR      r0,[sp,#0]            ;551
                  |L4.218|
0000da  1ba8              SUBS     r0,r5,r6              ;553
0000dc  b2c7              UXTB     r7,r0                 ;553
0000de  5de0              LDRB     r0,[r4,r7]            ;554
0000e0  9903              LDR      r1,[sp,#0xc]          ;554
0000e2  4048              EORS     r0,r0,r1              ;554
0000e4  5560              STRB     r0,[r4,r5]            ;554
0000e6  1c78              ADDS     r0,r7,#1              ;555
0000e8  5c20              LDRB     r0,[r4,r0]            ;555
0000ea  9902              LDR      r1,[sp,#8]            ;555
0000ec  4048              EORS     r0,r0,r1              ;555
0000ee  1c69              ADDS     r1,r5,#1              ;555
0000f0  5460              STRB     r0,[r4,r1]            ;555
0000f2  1cb8              ADDS     r0,r7,#2              ;556
0000f4  5c20              LDRB     r0,[r4,r0]            ;556
0000f6  9901              LDR      r1,[sp,#4]            ;556
0000f8  4048              EORS     r0,r0,r1              ;556
0000fa  1ca9              ADDS     r1,r5,#2              ;556
0000fc  5460              STRB     r0,[r4,r1]            ;556
0000fe  1cf8              ADDS     r0,r7,#3              ;557
000100  5c20              LDRB     r0,[r4,r0]            ;557
000102  9900              LDR      r1,[sp,#0]            ;557
000104  4048              EORS     r0,r0,r1              ;557
000106  1ce9              ADDS     r1,r5,#3              ;557
000108  5460              STRB     r0,[r4,r1]            ;557
00010a  1d28              ADDS     r0,r5,#4              ;530
00010c  b2c5              UXTB     r5,r0                 ;530
                  |L4.270|
00010e  9804              LDR      r0,[sp,#0x10]         ;530
000110  4285              CMP      r5,r0                 ;530
000112  db9e              BLT      |L4.82|
000114  2000              MOVS     r0,#0                 ;559
000116  e785              B        |L4.36|
;;;561    
                          ENDP

                  |L4.280|
                          DCD      sbox

                          AREA ||i.copy_and_key||, CODE, READONLY, ALIGN=1

                  copy_and_key PROC
;;;375    
;;;376    static void copy_and_key( void *d, const void *s, const void *k )
000000  b510              PUSH     {r4,lr}
;;;377    {
;;;378    #if defined( HAVE_UINT_32T )
;;;379        ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
000002  680b              LDR      r3,[r1,#0]
000004  6814              LDR      r4,[r2,#0]
000006  4063              EORS     r3,r3,r4
000008  6003              STR      r3,[r0,#0]
;;;380        ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
00000a  684b              LDR      r3,[r1,#4]
00000c  6854              LDR      r4,[r2,#4]
00000e  4063              EORS     r3,r3,r4
000010  6043              STR      r3,[r0,#4]
;;;381        ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
000012  688b              LDR      r3,[r1,#8]
000014  6894              LDR      r4,[r2,#8]
000016  4063              EORS     r3,r3,r4
000018  6083              STR      r3,[r0,#8]
;;;382        ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
00001a  68cb              LDR      r3,[r1,#0xc]
00001c  68d4              LDR      r4,[r2,#0xc]
00001e  4063              EORS     r3,r3,r4
000020  60c3              STR      r3,[r0,#0xc]
;;;383    #elif 1
;;;384        ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
;;;385        ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
;;;386        ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
;;;387        ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
;;;388        ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
;;;389        ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
;;;390        ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
;;;391        ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
;;;392        ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
;;;393        ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
;;;394        ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
;;;395        ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
;;;396        ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
;;;397        ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
;;;398        ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
;;;399        ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
;;;400    #else
;;;401        block_copy(d, s);
;;;402        xor_block(d, k);
;;;403    #endif
;;;404    }
000022  bd10              POP      {r4,pc}
;;;405    
                          ENDP


                          AREA ||i.copy_block||, CODE, READONLY, ALIGN=1

                  copy_block PROC
;;;314    
;;;315    static void copy_block( void *d, const void *s )
000000  680a              LDR      r2,[r1,#0]
;;;316    {
;;;317    #if defined( HAVE_UINT_32T )
;;;318        ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
000002  6002              STR      r2,[r0,#0]
;;;319        ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
000004  684a              LDR      r2,[r1,#4]
000006  6042              STR      r2,[r0,#4]
;;;320        ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
000008  688a              LDR      r2,[r1,#8]
00000a  6082              STR      r2,[r0,#8]
;;;321        ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
00000c  68ca              LDR      r2,[r1,#0xc]
00000e  60c2              STR      r2,[r0,#0xc]
;;;322    #else
;;;323        ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
;;;324        ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
;;;325        ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
;;;326        ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
;;;327        ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
;;;328        ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
;;;329        ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
;;;330        ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
;;;331        ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
;;;332        ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
;;;333        ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
;;;334        ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
;;;335        ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
;;;336        ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
;;;337        ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
;;;338        ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
;;;339    #endif
;;;340    }
000010  4770              BX       lr
;;;341    
                          ENDP


                          AREA ||i.copy_block_nn||, CODE, READONLY, ALIGN=1

                  copy_block_nn PROC
;;;341    
;;;342    static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
000000  b510              PUSH     {r4,lr}
;;;343    {
;;;344        while( nn-- )
000002  e003              B        |L7.12|
                  |L7.4|
;;;345            //*((uint8_t*)d)++ = *((uint8_t*)s)++;
;;;346            *d++ = *s++;
000004  780b              LDRB     r3,[r1,#0]
000006  7003              STRB     r3,[r0,#0]
000008  1c49              ADDS     r1,r1,#1
00000a  1c40              ADDS     r0,r0,#1
                  |L7.12|
00000c  4613              MOV      r3,r2                 ;344
00000e  1e54              SUBS     r4,r2,#1              ;344
000010  b2e2              UXTB     r2,r4                 ;344
000012  2b00              CMP      r3,#0                 ;344
000014  d1f6              BNE      |L7.4|
;;;347    }
000016  bd10              POP      {r4,pc}
;;;348    
                          ENDP


                          AREA ||i.mix_sub_columns||, CODE, READONLY, ALIGN=2

                  mix_sub_columns PROC
;;;447    #if defined( VERSION_1 )
;;;448      static void mix_sub_columns( uint8_t dt[N_BLOCK] )
000000  b51f              PUSH     {r0-r4,lr}
;;;449      { uint8_t st[N_BLOCK];
000002  4604              MOV      r4,r0
;;;450        block_copy(st, dt);
000004  4621              MOV      r1,r4
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       copy_block
;;;451    #else
;;;452      static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
;;;453      {
;;;454    #endif
;;;455        dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
00000c  4669              MOV      r1,sp
00000e  7808              LDRB     r0,[r1,#0]
000010  4999              LDR      r1,|L8.632|
000012  5c08              LDRB     r0,[r1,r0]
000014  4669              MOV      r1,sp
000016  7949              LDRB     r1,[r1,#5]
000018  4a98              LDR      r2,|L8.636|
00001a  5c51              LDRB     r1,[r2,r1]
00001c  4048              EORS     r0,r0,r1
00001e  4669              MOV      r1,sp
000020  7a89              LDRB     r1,[r1,#0xa]
000022  4a97              LDR      r2,|L8.640|
000024  5c51              LDRB     r1,[r2,r1]
000026  4048              EORS     r0,r0,r1
000028  4669              MOV      r1,sp
00002a  7bc9              LDRB     r1,[r1,#0xf]
00002c  5c51              LDRB     r1,[r2,r1]
00002e  4048              EORS     r0,r0,r1
000030  7020              STRB     r0,[r4,#0]
;;;456        dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
000032  4669              MOV      r1,sp
000034  7808              LDRB     r0,[r1,#0]
000036  4611              MOV      r1,r2
000038  5c08              LDRB     r0,[r1,r0]
00003a  4669              MOV      r1,sp
00003c  7949              LDRB     r1,[r1,#5]
00003e  4a8e              LDR      r2,|L8.632|
000040  5c51              LDRB     r1,[r2,r1]
000042  4048              EORS     r0,r0,r1
000044  4669              MOV      r1,sp
000046  7a89              LDRB     r1,[r1,#0xa]
000048  4a8c              LDR      r2,|L8.636|
00004a  5c51              LDRB     r1,[r2,r1]
00004c  4048              EORS     r0,r0,r1
00004e  4669              MOV      r1,sp
000050  7bc9              LDRB     r1,[r1,#0xf]
000052  4a8b              LDR      r2,|L8.640|
000054  5c51              LDRB     r1,[r2,r1]
000056  4048              EORS     r0,r0,r1
000058  7060              STRB     r0,[r4,#1]
;;;457        dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
00005a  4669              MOV      r1,sp
00005c  7808              LDRB     r0,[r1,#0]
00005e  4611              MOV      r1,r2
000060  5c08              LDRB     r0,[r1,r0]
000062  4669              MOV      r1,sp
000064  7949              LDRB     r1,[r1,#5]
000066  5c51              LDRB     r1,[r2,r1]
000068  4048              EORS     r0,r0,r1
00006a  4669              MOV      r1,sp
00006c  7a89              LDRB     r1,[r1,#0xa]
00006e  4a82              LDR      r2,|L8.632|
000070  5c51              LDRB     r1,[r2,r1]
000072  4048              EORS     r0,r0,r1
000074  4669              MOV      r1,sp
000076  7bc9              LDRB     r1,[r1,#0xf]
000078  4a80              LDR      r2,|L8.636|
00007a  5c51              LDRB     r1,[r2,r1]
00007c  4048              EORS     r0,r0,r1
00007e  70a0              STRB     r0,[r4,#2]
;;;458        dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
000080  4669              MOV      r1,sp
000082  7808              LDRB     r0,[r1,#0]
000084  4611              MOV      r1,r2
000086  5c08              LDRB     r0,[r1,r0]
000088  4669              MOV      r1,sp
00008a  7949              LDRB     r1,[r1,#5]
00008c  4a7c              LDR      r2,|L8.640|
00008e  5c51              LDRB     r1,[r2,r1]
000090  4048              EORS     r0,r0,r1
000092  4669              MOV      r1,sp
000094  7a89              LDRB     r1,[r1,#0xa]
000096  5c51              LDRB     r1,[r2,r1]
000098  4048              EORS     r0,r0,r1
00009a  4669              MOV      r1,sp
00009c  7bc9              LDRB     r1,[r1,#0xf]
00009e  4a76              LDR      r2,|L8.632|
0000a0  5c51              LDRB     r1,[r2,r1]
0000a2  4048              EORS     r0,r0,r1
0000a4  70e0              STRB     r0,[r4,#3]
;;;459    
;;;460        dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
0000a6  4669              MOV      r1,sp
0000a8  7908              LDRB     r0,[r1,#4]
0000aa  4611              MOV      r1,r2
0000ac  5c08              LDRB     r0,[r1,r0]
0000ae  4669              MOV      r1,sp
0000b0  7a49              LDRB     r1,[r1,#9]
0000b2  4a72              LDR      r2,|L8.636|
0000b4  5c51              LDRB     r1,[r2,r1]
0000b6  4048              EORS     r0,r0,r1
0000b8  4669              MOV      r1,sp
0000ba  7b89              LDRB     r1,[r1,#0xe]
0000bc  4a70              LDR      r2,|L8.640|
0000be  5c51              LDRB     r1,[r2,r1]
0000c0  4048              EORS     r0,r0,r1
0000c2  4669              MOV      r1,sp
0000c4  78c9              LDRB     r1,[r1,#3]
0000c6  5c51              LDRB     r1,[r2,r1]
0000c8  4048              EORS     r0,r0,r1
0000ca  7120              STRB     r0,[r4,#4]
;;;461        dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
0000cc  4669              MOV      r1,sp
0000ce  7908              LDRB     r0,[r1,#4]
0000d0  4611              MOV      r1,r2
0000d2  5c08              LDRB     r0,[r1,r0]
0000d4  4669              MOV      r1,sp
0000d6  7a49              LDRB     r1,[r1,#9]
0000d8  4a67              LDR      r2,|L8.632|
0000da  5c51              LDRB     r1,[r2,r1]
0000dc  4048              EORS     r0,r0,r1
0000de  4669              MOV      r1,sp
0000e0  7b89              LDRB     r1,[r1,#0xe]
0000e2  4a66              LDR      r2,|L8.636|
0000e4  5c51              LDRB     r1,[r2,r1]
0000e6  4048              EORS     r0,r0,r1
0000e8  4669              MOV      r1,sp
0000ea  78c9              LDRB     r1,[r1,#3]
0000ec  4a64              LDR      r2,|L8.640|
0000ee  5c51              LDRB     r1,[r2,r1]
0000f0  4048              EORS     r0,r0,r1
0000f2  7160              STRB     r0,[r4,#5]
;;;462        dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
0000f4  4669              MOV      r1,sp
0000f6  7908              LDRB     r0,[r1,#4]
0000f8  4611              MOV      r1,r2
0000fa  5c08              LDRB     r0,[r1,r0]
0000fc  4669              MOV      r1,sp
0000fe  7a49              LDRB     r1,[r1,#9]
000100  5c51              LDRB     r1,[r2,r1]
000102  4048              EORS     r0,r0,r1
000104  4669              MOV      r1,sp
000106  7b89              LDRB     r1,[r1,#0xe]
000108  4a5b              LDR      r2,|L8.632|
00010a  5c51              LDRB     r1,[r2,r1]
00010c  4048              EORS     r0,r0,r1
00010e  4669              MOV      r1,sp
000110  78c9              LDRB     r1,[r1,#3]
000112  4a5a              LDR      r2,|L8.636|
000114  5c51              LDRB     r1,[r2,r1]
000116  4048              EORS     r0,r0,r1
000118  71a0              STRB     r0,[r4,#6]
;;;463        dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
00011a  4669              MOV      r1,sp
00011c  7908              LDRB     r0,[r1,#4]
00011e  4611              MOV      r1,r2
000120  5c08              LDRB     r0,[r1,r0]
000122  4669              MOV      r1,sp
000124  7a49              LDRB     r1,[r1,#9]
000126  4a56              LDR      r2,|L8.640|
000128  5c51              LDRB     r1,[r2,r1]
00012a  4048              EORS     r0,r0,r1
00012c  4669              MOV      r1,sp
00012e  7b89              LDRB     r1,[r1,#0xe]
000130  5c51              LDRB     r1,[r2,r1]
000132  4048              EORS     r0,r0,r1
000134  4669              MOV      r1,sp
000136  78c9              LDRB     r1,[r1,#3]
000138  4a4f              LDR      r2,|L8.632|
00013a  5c51              LDRB     r1,[r2,r1]
00013c  4048              EORS     r0,r0,r1
00013e  71e0              STRB     r0,[r4,#7]
;;;464    
;;;465        dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
000140  4669              MOV      r1,sp
000142  7a08              LDRB     r0,[r1,#8]
000144  4611              MOV      r1,r2
000146  5c08              LDRB     r0,[r1,r0]
000148  4669              MOV      r1,sp
00014a  7b49              LDRB     r1,[r1,#0xd]
00014c  4a4b              LDR      r2,|L8.636|
00014e  5c51              LDRB     r1,[r2,r1]
000150  4048              EORS     r0,r0,r1
000152  4669              MOV      r1,sp
000154  7889              LDRB     r1,[r1,#2]
000156  4a4a              LDR      r2,|L8.640|
000158  5c51              LDRB     r1,[r2,r1]
00015a  4048              EORS     r0,r0,r1
00015c  4669              MOV      r1,sp
00015e  79c9              LDRB     r1,[r1,#7]
000160  5c51              LDRB     r1,[r2,r1]
000162  4048              EORS     r0,r0,r1
000164  7220              STRB     r0,[r4,#8]
;;;466        dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
000166  4669              MOV      r1,sp
000168  7a08              LDRB     r0,[r1,#8]
00016a  4611              MOV      r1,r2
00016c  5c08              LDRB     r0,[r1,r0]
00016e  4669              MOV      r1,sp
000170  7b49              LDRB     r1,[r1,#0xd]
000172  4a41              LDR      r2,|L8.632|
000174  5c51              LDRB     r1,[r2,r1]
000176  4048              EORS     r0,r0,r1
000178  4669              MOV      r1,sp
00017a  7889              LDRB     r1,[r1,#2]
00017c  4a3f              LDR      r2,|L8.636|
00017e  5c51              LDRB     r1,[r2,r1]
000180  4048              EORS     r0,r0,r1
000182  4669              MOV      r1,sp
000184  79c9              LDRB     r1,[r1,#7]
000186  4a3e              LDR      r2,|L8.640|
000188  5c51              LDRB     r1,[r2,r1]
00018a  4048              EORS     r0,r0,r1
00018c  7260              STRB     r0,[r4,#9]
;;;467        dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
00018e  4669              MOV      r1,sp
000190  7a08              LDRB     r0,[r1,#8]
000192  4611              MOV      r1,r2
000194  5c08              LDRB     r0,[r1,r0]
000196  4669              MOV      r1,sp
000198  7b49              LDRB     r1,[r1,#0xd]
00019a  5c51              LDRB     r1,[r2,r1]
00019c  4048              EORS     r0,r0,r1
00019e  4669              MOV      r1,sp
0001a0  7889              LDRB     r1,[r1,#2]
0001a2  4a35              LDR      r2,|L8.632|
0001a4  5c51              LDRB     r1,[r2,r1]
0001a6  4048              EORS     r0,r0,r1
0001a8  4669              MOV      r1,sp
0001aa  79c9              LDRB     r1,[r1,#7]
0001ac  4a33              LDR      r2,|L8.636|
0001ae  5c51              LDRB     r1,[r2,r1]
0001b0  4048              EORS     r0,r0,r1
0001b2  72a0              STRB     r0,[r4,#0xa]
;;;468        dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
0001b4  4669              MOV      r1,sp
0001b6  7a08              LDRB     r0,[r1,#8]
0001b8  4611              MOV      r1,r2
0001ba  5c08              LDRB     r0,[r1,r0]
0001bc  4669              MOV      r1,sp
0001be  7b49              LDRB     r1,[r1,#0xd]
0001c0  4a2f              LDR      r2,|L8.640|
0001c2  5c51              LDRB     r1,[r2,r1]
0001c4  4048              EORS     r0,r0,r1
0001c6  4669              MOV      r1,sp
0001c8  7889              LDRB     r1,[r1,#2]
0001ca  5c51              LDRB     r1,[r2,r1]
0001cc  4048              EORS     r0,r0,r1
0001ce  4669              MOV      r1,sp
0001d0  79c9              LDRB     r1,[r1,#7]
0001d2  4a29              LDR      r2,|L8.632|
0001d4  5c51              LDRB     r1,[r2,r1]
0001d6  4048              EORS     r0,r0,r1
0001d8  72e0              STRB     r0,[r4,#0xb]
;;;469    
;;;470        dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
0001da  4668              MOV      r0,sp
0001dc  7b00              LDRB     r0,[r0,#0xc]
0001de  4611              MOV      r1,r2
0001e0  5c09              LDRB     r1,[r1,r0]
0001e2  4668              MOV      r0,sp
0001e4  7840              LDRB     r0,[r0,#1]
0001e6  4a25              LDR      r2,|L8.636|
0001e8  5c10              LDRB     r0,[r2,r0]
0001ea  4048              EORS     r0,r0,r1
0001ec  4669              MOV      r1,sp
0001ee  7989              LDRB     r1,[r1,#6]
0001f0  4a23              LDR      r2,|L8.640|
0001f2  5c51              LDRB     r1,[r2,r1]
0001f4  4048              EORS     r0,r0,r1
0001f6  4669              MOV      r1,sp
0001f8  7ac9              LDRB     r1,[r1,#0xb]
0001fa  5c51              LDRB     r1,[r2,r1]
0001fc  4048              EORS     r0,r0,r1
0001fe  7320              STRB     r0,[r4,#0xc]
;;;471        dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
000200  4669              MOV      r1,sp
000202  7b08              LDRB     r0,[r1,#0xc]
000204  4611              MOV      r1,r2
000206  5c08              LDRB     r0,[r1,r0]
000208  4669              MOV      r1,sp
00020a  7849              LDRB     r1,[r1,#1]
00020c  4a1a              LDR      r2,|L8.632|
00020e  5c51              LDRB     r1,[r2,r1]
000210  4048              EORS     r0,r0,r1
000212  4669              MOV      r1,sp
000214  7989              LDRB     r1,[r1,#6]
000216  4a19              LDR      r2,|L8.636|
000218  5c51              LDRB     r1,[r2,r1]
00021a  4048              EORS     r0,r0,r1
00021c  4669              MOV      r1,sp
00021e  7ac9              LDRB     r1,[r1,#0xb]
000220  4a17              LDR      r2,|L8.640|
000222  5c51              LDRB     r1,[r2,r1]
000224  4048              EORS     r0,r0,r1
000226  7360              STRB     r0,[r4,#0xd]
;;;472        dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
000228  4669              MOV      r1,sp
00022a  7b08              LDRB     r0,[r1,#0xc]
00022c  4611              MOV      r1,r2
00022e  5c08              LDRB     r0,[r1,r0]
000230  4669              MOV      r1,sp
000232  7849              LDRB     r1,[r1,#1]
000234  5c51              LDRB     r1,[r2,r1]
000236  4048              EORS     r0,r0,r1
000238  4669              MOV      r1,sp
00023a  7989              LDRB     r1,[r1,#6]
00023c  4a0e              LDR      r2,|L8.632|
00023e  5c51              LDRB     r1,[r2,r1]
000240  4048              EORS     r0,r0,r1
000242  4669              MOV      r1,sp
000244  7ac9              LDRB     r1,[r1,#0xb]
000246  4a0d              LDR      r2,|L8.636|
000248  5c51              LDRB     r1,[r2,r1]
00024a  4048              EORS     r0,r0,r1
00024c  73a0              STRB     r0,[r4,#0xe]
;;;473        dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
00024e  4669              MOV      r1,sp
000250  7b08              LDRB     r0,[r1,#0xc]
000252  4611              MOV      r1,r2
000254  5c08              LDRB     r0,[r1,r0]
000256  4669              MOV      r1,sp
000258  7849              LDRB     r1,[r1,#1]
00025a  4a09              LDR      r2,|L8.640|
00025c  5c51              LDRB     r1,[r2,r1]
00025e  4048              EORS     r0,r0,r1
000260  4669              MOV      r1,sp
000262  7989              LDRB     r1,[r1,#6]
000264  5c51              LDRB     r1,[r2,r1]
000266  4048              EORS     r0,r0,r1
000268  4669              MOV      r1,sp
00026a  7ac9              LDRB     r1,[r1,#0xb]
00026c  4a02              LDR      r2,|L8.632|
00026e  5c51              LDRB     r1,[r2,r1]
000270  4048              EORS     r0,r0,r1
000272  73e0              STRB     r0,[r4,#0xf]
;;;474      }
000274  bd1f              POP      {r0-r4,pc}
;;;475    
                          ENDP

000276  0000              DCW      0x0000
                  |L8.632|
                          DCD      gfm2_sbox
                  |L8.636|
                          DCD      gfm3_sbox
                  |L8.640|
                          DCD      sbox

                          AREA ||i.shift_sub_rows||, CODE, READONLY, ALIGN=2

                  shift_sub_rows PROC
;;;410    
;;;411    static void shift_sub_rows( uint8_t st[N_BLOCK] )
000000  7802              LDRB     r2,[r0,#0]
;;;412    {   uint8_t tt;
;;;413    
;;;414        st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
000002  4b1a              LDR      r3,|L9.108|
000004  5c9a              LDRB     r2,[r3,r2]
000006  7002              STRB     r2,[r0,#0]
000008  7902              LDRB     r2,[r0,#4]
00000a  5c9a              LDRB     r2,[r3,r2]
00000c  7102              STRB     r2,[r0,#4]
;;;415        st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
00000e  7a02              LDRB     r2,[r0,#8]
000010  5c9a              LDRB     r2,[r3,r2]
000012  7202              STRB     r2,[r0,#8]
000014  7b02              LDRB     r2,[r0,#0xc]
000016  5c9a              LDRB     r2,[r3,r2]
000018  7302              STRB     r2,[r0,#0xc]
;;;416    
;;;417        tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
00001a  7841              LDRB     r1,[r0,#1]
00001c  7942              LDRB     r2,[r0,#5]
00001e  5c9a              LDRB     r2,[r3,r2]
000020  7042              STRB     r2,[r0,#1]
000022  7a42              LDRB     r2,[r0,#9]
000024  5c9a              LDRB     r2,[r3,r2]
000026  7142              STRB     r2,[r0,#5]
;;;418        st[ 9] = s_box(st[13]); st[13] = s_box( tt );
000028  7b42              LDRB     r2,[r0,#0xd]
00002a  5c9a              LDRB     r2,[r3,r2]
00002c  7242              STRB     r2,[r0,#9]
00002e  461a              MOV      r2,r3
000030  5c52              LDRB     r2,[r2,r1]
000032  7342              STRB     r2,[r0,#0xd]
;;;419    
;;;420        tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
000034  7881              LDRB     r1,[r0,#2]
000036  7a82              LDRB     r2,[r0,#0xa]
000038  5c9a              LDRB     r2,[r3,r2]
00003a  7082              STRB     r2,[r0,#2]
00003c  461a              MOV      r2,r3
00003e  5c52              LDRB     r2,[r2,r1]
000040  7282              STRB     r2,[r0,#0xa]
;;;421        tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
000042  7981              LDRB     r1,[r0,#6]
000044  7b82              LDRB     r2,[r0,#0xe]
000046  5c9a              LDRB     r2,[r3,r2]
000048  7182              STRB     r2,[r0,#6]
00004a  461a              MOV      r2,r3
00004c  5c52              LDRB     r2,[r2,r1]
00004e  7382              STRB     r2,[r0,#0xe]
;;;422    
;;;423        tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
000050  7bc1              LDRB     r1,[r0,#0xf]
000052  7ac2              LDRB     r2,[r0,#0xb]
000054  5c9a              LDRB     r2,[r3,r2]
000056  73c2              STRB     r2,[r0,#0xf]
000058  79c2              LDRB     r2,[r0,#7]
00005a  5c9a              LDRB     r2,[r3,r2]
00005c  72c2              STRB     r2,[r0,#0xb]
;;;424        st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
00005e  78c2              LDRB     r2,[r0,#3]
000060  5c9a              LDRB     r2,[r3,r2]
000062  71c2              STRB     r2,[r0,#7]
000064  461a              MOV      r2,r3
000066  5c52              LDRB     r2,[r2,r1]
000068  70c2              STRB     r2,[r0,#3]
;;;425    }
00006a  4770              BX       lr
;;;426    
                          ENDP

                  |L9.108|
                          DCD      sbox

                          AREA ||i.xor_block||, CODE, READONLY, ALIGN=1

                  xor_block PROC
;;;348    
;;;349    static void xor_block( void *d, const void *s )
000000  6802              LDR      r2,[r0,#0]
;;;350    {
;;;351    #if defined( HAVE_UINT_32T )
;;;352        ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
000002  680b              LDR      r3,[r1,#0]
000004  405a              EORS     r2,r2,r3
000006  6002              STR      r2,[r0,#0]
;;;353        ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
000008  6842              LDR      r2,[r0,#4]
00000a  684b              LDR      r3,[r1,#4]
00000c  405a              EORS     r2,r2,r3
00000e  6042              STR      r2,[r0,#4]
;;;354        ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
000010  6882              LDR      r2,[r0,#8]
000012  688b              LDR      r3,[r1,#8]
000014  405a              EORS     r2,r2,r3
000016  6082              STR      r2,[r0,#8]
;;;355        ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
000018  68c2              LDR      r2,[r0,#0xc]
00001a  68cb              LDR      r3,[r1,#0xc]
00001c  405a              EORS     r2,r2,r3
00001e  60c2              STR      r2,[r0,#0xc]
;;;356    #else
;;;357        ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
;;;358        ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
;;;359        ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
;;;360        ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
;;;361        ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
;;;362        ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
;;;363        ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
;;;364        ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
;;;365        ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
;;;366        ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
;;;367        ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
;;;368        ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
;;;369        ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
;;;370        ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
;;;371        ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
;;;372        ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
;;;373    #endif
;;;374    }
000020  4770              BX       lr
;;;375    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sbox
000000  637c777b          DCB      0x63,0x7c,0x77,0x7b
000004  f26b6fc5          DCB      0xf2,0x6b,0x6f,0xc5
000008  3001672b          DCB      0x30,0x01,0x67,0x2b
00000c  fed7ab76          DCB      0xfe,0xd7,0xab,0x76
000010  ca82c97d          DCB      0xca,0x82,0xc9,0x7d
000014  fa5947f0          DCB      0xfa,0x59,0x47,0xf0
000018  add4a2af          DCB      0xad,0xd4,0xa2,0xaf
00001c  9ca472c0          DCB      0x9c,0xa4,0x72,0xc0
000020  b7fd9326          DCB      0xb7,0xfd,0x93,0x26
000024  363ff7cc          DCB      0x36,0x3f,0xf7,0xcc
000028  34a5e5f1          DCB      0x34,0xa5,0xe5,0xf1
00002c  71d83115          DCB      0x71,0xd8,0x31,0x15
000030  04c723c3          DCB      0x04,0xc7,0x23,0xc3
000034  1896059a          DCB      0x18,0x96,0x05,0x9a
000038  071280e2          DCB      0x07,0x12,0x80,0xe2
00003c  eb27b275          DCB      0xeb,0x27,0xb2,0x75
000040  09832c1a          DCB      0x09,0x83,0x2c,0x1a
000044  1b6e5aa0          DCB      0x1b,0x6e,0x5a,0xa0
000048  523bd6b3          DCB      0x52,0x3b,0xd6,0xb3
00004c  29e32f84          DCB      0x29,0xe3,0x2f,0x84
000050  53d100ed          DCB      0x53,0xd1,0x00,0xed
000054  20fcb15b          DCB      0x20,0xfc,0xb1,0x5b
000058  6acbbe39          DCB      0x6a,0xcb,0xbe,0x39
00005c  4a4c58cf          DCB      0x4a,0x4c,0x58,0xcf
000060  d0efaafb          DCB      0xd0,0xef,0xaa,0xfb
000064  434d3385          DCB      0x43,0x4d,0x33,0x85
000068  45f9027f          DCB      0x45,0xf9,0x02,0x7f
00006c  503c9fa8          DCB      0x50,0x3c,0x9f,0xa8
000070  51a3408f          DCB      0x51,0xa3,0x40,0x8f
000074  929d38f5          DCB      0x92,0x9d,0x38,0xf5
000078  bcb6da21          DCB      0xbc,0xb6,0xda,0x21
00007c  10fff3d2          DCB      0x10,0xff,0xf3,0xd2
000080  cd0c13ec          DCB      0xcd,0x0c,0x13,0xec
000084  5f974417          DCB      0x5f,0x97,0x44,0x17
000088  c4a77e3d          DCB      0xc4,0xa7,0x7e,0x3d
00008c  645d1973          DCB      0x64,0x5d,0x19,0x73
000090  60814fdc          DCB      0x60,0x81,0x4f,0xdc
000094  222a9088          DCB      0x22,0x2a,0x90,0x88
000098  46eeb814          DCB      0x46,0xee,0xb8,0x14
00009c  de5e0bdb          DCB      0xde,0x5e,0x0b,0xdb
0000a0  e0323a0a          DCB      0xe0,0x32,0x3a,0x0a
0000a4  4906245c          DCB      0x49,0x06,0x24,0x5c
0000a8  c2d3ac62          DCB      0xc2,0xd3,0xac,0x62
0000ac  9195e479          DCB      0x91,0x95,0xe4,0x79
0000b0  e7c8376d          DCB      0xe7,0xc8,0x37,0x6d
0000b4  8dd54ea9          DCB      0x8d,0xd5,0x4e,0xa9
0000b8  6c56f4ea          DCB      0x6c,0x56,0xf4,0xea
0000bc  657aae08          DCB      0x65,0x7a,0xae,0x08
0000c0  ba78252e          DCB      0xba,0x78,0x25,0x2e
0000c4  1ca6b4c6          DCB      0x1c,0xa6,0xb4,0xc6
0000c8  e8dd741f          DCB      0xe8,0xdd,0x74,0x1f
0000cc  4bbd8b8a          DCB      0x4b,0xbd,0x8b,0x8a
0000d0  703eb566          DCB      0x70,0x3e,0xb5,0x66
0000d4  4803f60e          DCB      0x48,0x03,0xf6,0x0e
0000d8  613557b9          DCB      0x61,0x35,0x57,0xb9
0000dc  86c11d9e          DCB      0x86,0xc1,0x1d,0x9e
0000e0  e1f89811          DCB      0xe1,0xf8,0x98,0x11
0000e4  69d98e94          DCB      0x69,0xd9,0x8e,0x94
0000e8  9b1e87e9          DCB      0x9b,0x1e,0x87,0xe9
0000ec  ce5528df          DCB      0xce,0x55,0x28,0xdf
0000f0  8ca1890d          DCB      0x8c,0xa1,0x89,0x0d
0000f4  bfe64268          DCB      0xbf,0xe6,0x42,0x68
0000f8  41992d0f          DCB      0x41,0x99,0x2d,0x0f
0000fc  b054bb16          DCB      0xb0,0x54,0xbb,0x16
                  gfm2_sbox
000100  c6f8eef6          DCB      0xc6,0xf8,0xee,0xf6
000104  ffd6de91          DCB      0xff,0xd6,0xde,0x91
000108  6002ce56          DCB      0x60,0x02,0xce,0x56
00010c  e7b54dec          DCB      0xe7,0xb5,0x4d,0xec
000110  8f1f89fa          DCB      0x8f,0x1f,0x89,0xfa
000114  efb28efb          DCB      0xef,0xb2,0x8e,0xfb
000118  41b35f45          DCB      0x41,0xb3,0x5f,0x45
00011c  2353e49b          DCB      0x23,0x53,0xe4,0x9b
000120  75e13d4c          DCB      0x75,0xe1,0x3d,0x4c
000124  6c7ef583          DCB      0x6c,0x7e,0xf5,0x83
000128  6851d1f9          DCB      0x68,0x51,0xd1,0xf9
00012c  e2ab622a          DCB      0xe2,0xab,0x62,0x2a
000130  0895469d          DCB      0x08,0x95,0x46,0x9d
000134  30370a2f          DCB      0x30,0x37,0x0a,0x2f
000138  0e241bdf          DCB      0x0e,0x24,0x1b,0xdf
00013c  cd4e7fea          DCB      0xcd,0x4e,0x7f,0xea
000140  121d5834          DCB      0x12,0x1d,0x58,0x34
000144  36dcb45b          DCB      0x36,0xdc,0xb4,0x5b
000148  a476b77d          DCB      0xa4,0x76,0xb7,0x7d
00014c  52dd5e13          DCB      0x52,0xdd,0x5e,0x13
000150  a6b900c1          DCB      0xa6,0xb9,0x00,0xc1
000154  40e379b6          DCB      0x40,0xe3,0x79,0xb6
000158  d48d6772          DCB      0xd4,0x8d,0x67,0x72
00015c  9498b085          DCB      0x94,0x98,0xb0,0x85
000160  bbc54fed          DCB      0xbb,0xc5,0x4f,0xed
000164  869a6611          DCB      0x86,0x9a,0x66,0x11
000168  8ae904fe          DCB      0x8a,0xe9,0x04,0xfe
00016c  a078254b          DCB      0xa0,0x78,0x25,0x4b
000170  a25d8005          DCB      0xa2,0x5d,0x80,0x05
000174  3f2170f1          DCB      0x3f,0x21,0x70,0xf1
000178  6377af42          DCB      0x63,0x77,0xaf,0x42
00017c  20e5fdbf          DCB      0x20,0xe5,0xfd,0xbf
000180  811826c3          DCB      0x81,0x18,0x26,0xc3
000184  be35882e          DCB      0xbe,0x35,0x88,0x2e
000188  9355fc7a          DCB      0x93,0x55,0xfc,0x7a
00018c  c8ba32e6          DCB      0xc8,0xba,0x32,0xe6
000190  c0199ea3          DCB      0xc0,0x19,0x9e,0xa3
000194  44543b0b          DCB      0x44,0x54,0x3b,0x0b
000198  8cc76b28          DCB      0x8c,0xc7,0x6b,0x28
00019c  a7bc16ad          DCB      0xa7,0xbc,0x16,0xad
0001a0  db647414          DCB      0xdb,0x64,0x74,0x14
0001a4  920c48b8          DCB      0x92,0x0c,0x48,0xb8
0001a8  9fbd43c4          DCB      0x9f,0xbd,0x43,0xc4
0001ac  3931d3f2          DCB      0x39,0x31,0xd3,0xf2
0001b0  d58b6eda          DCB      0xd5,0x8b,0x6e,0xda
0001b4  01b19c49          DCB      0x01,0xb1,0x9c,0x49
0001b8  d8acf3cf          DCB      0xd8,0xac,0xf3,0xcf
0001bc  caf44710          DCB      0xca,0xf4,0x47,0x10
0001c0  6ff04a5c          DCB      0x6f,0xf0,0x4a,0x5c
0001c4  38577397          DCB      0x38,0x57,0x73,0x97
0001c8  cba1e83e          DCB      0xcb,0xa1,0xe8,0x3e
0001cc  96610d0f          DCB      0x96,0x61,0x0d,0x0f
0001d0  e07c71cc          DCB      0xe0,0x7c,0x71,0xcc
0001d4  9006f71c          DCB      0x90,0x06,0xf7,0x1c
0001d8  c26aae69          DCB      0xc2,0x6a,0xae,0x69
0001dc  17993a27          DCB      0x17,0x99,0x3a,0x27
0001e0  d9eb2b22          DCB      0xd9,0xeb,0x2b,0x22
0001e4  d2a90733          DCB      0xd2,0xa9,0x07,0x33
0001e8  2d3c15c9          DCB      0x2d,0x3c,0x15,0xc9
0001ec  87aa50a5          DCB      0x87,0xaa,0x50,0xa5
0001f0  0359091a          DCB      0x03,0x59,0x09,0x1a
0001f4  65d784d0          DCB      0x65,0xd7,0x84,0xd0
0001f8  82295a1e          DCB      0x82,0x29,0x5a,0x1e
0001fc  7ba86d2c          DCB      0x7b,0xa8,0x6d,0x2c
                  gfm3_sbox
000200  a584998d          DCB      0xa5,0x84,0x99,0x8d
000204  0dbdb154          DCB      0x0d,0xbd,0xb1,0x54
000208  5003a97d          DCB      0x50,0x03,0xa9,0x7d
00020c  1962e69a          DCB      0x19,0x62,0xe6,0x9a
000210  459d4087          DCB      0x45,0x9d,0x40,0x87
000214  15ebc90b          DCB      0x15,0xeb,0xc9,0x0b
000218  ec67fdea          DCB      0xec,0x67,0xfd,0xea
00021c  bff7965b          DCB      0xbf,0xf7,0x96,0x5b
000220  c21cae6a          DCB      0xc2,0x1c,0xae,0x6a
000224  5a41024f          DCB      0x5a,0x41,0x02,0x4f
000228  5cf43408          DCB      0x5c,0xf4,0x34,0x08
00022c  9373533f          DCB      0x93,0x73,0x53,0x3f
000230  0c52655e          DCB      0x0c,0x52,0x65,0x5e
000234  28a10fb5          DCB      0x28,0xa1,0x0f,0xb5
000238  09369b3d          DCB      0x09,0x36,0x9b,0x3d
00023c  2669cd9f          DCB      0x26,0x69,0xcd,0x9f
000240  1b9e742e          DCB      0x1b,0x9e,0x74,0x2e
000244  2db2eefb          DCB      0x2d,0xb2,0xee,0xfb
000248  f64d61ce          DCB      0xf6,0x4d,0x61,0xce
00024c  7b3e7197          DCB      0x7b,0x3e,0x71,0x97
000250  f568002c          DCB      0xf5,0x68,0x00,0x2c
000254  601fc8ed          DCB      0x60,0x1f,0xc8,0xed
000258  be46d94b          DCB      0xbe,0x46,0xd9,0x4b
00025c  ded4e84a          DCB      0xde,0xd4,0xe8,0x4a
000260  6b2ae516          DCB      0x6b,0x2a,0xe5,0x16
000264  c5d75594          DCB      0xc5,0xd7,0x55,0x94
000268  cf100681          DCB      0xcf,0x10,0x06,0x81
00026c  f044bae3          DCB      0xf0,0x44,0xba,0xe3
000270  f3fec08a          DCB      0xf3,0xfe,0xc0,0x8a
000274  adbc4804          DCB      0xad,0xbc,0x48,0x04
000278  dfc17563          DCB      0xdf,0xc1,0x75,0x63
00027c  301a0e6d          DCB      0x30,0x1a,0x0e,0x6d
000280  4c14352f          DCB      0x4c,0x14,0x35,0x2f
000284  e1a2cc39          DCB      0xe1,0xa2,0xcc,0x39
000288  57f28247          DCB      0x57,0xf2,0x82,0x47
00028c  ace72b95          DCB      0xac,0xe7,0x2b,0x95
000290  a098d17f          DCB      0xa0,0x98,0xd1,0x7f
000294  667eab83          DCB      0x66,0x7e,0xab,0x83
000298  ca29d33c          DCB      0xca,0x29,0xd3,0x3c
00029c  79e21d76          DCB      0x79,0xe2,0x1d,0x76
0002a0  3b564e1e          DCB      0x3b,0x56,0x4e,0x1e
0002a4  db0a6ce4          DCB      0xdb,0x0a,0x6c,0xe4
0002a8  5d6eefa6          DCB      0x5d,0x6e,0xef,0xa6
0002ac  a8a4378b          DCB      0xa8,0xa4,0x37,0x8b
0002b0  324359b7          DCB      0x32,0x43,0x59,0xb7
0002b4  8c64d2e0          DCB      0x8c,0x64,0xd2,0xe0
0002b8  b4fa0725          DCB      0xb4,0xfa,0x07,0x25
0002bc  af8ee918          DCB      0xaf,0x8e,0xe9,0x18
0002c0  d5886f72          DCB      0xd5,0x88,0x6f,0x72
0002c4  24f1c751          DCB      0x24,0xf1,0xc7,0x51
0002c8  237c9c21          DCB      0x23,0x7c,0x9c,0x21
0002cc  dddc8685          DCB      0xdd,0xdc,0x86,0x85
0002d0  9042c4aa          DCB      0x90,0x42,0xc4,0xaa
0002d4  d8050112          DCB      0xd8,0x05,0x01,0x12
0002d8  a35ff9d0          DCB      0xa3,0x5f,0xf9,0xd0
0002dc  915827b9          DCB      0x91,0x58,0x27,0xb9
0002e0  3813b333          DCB      0x38,0x13,0xb3,0x33
0002e4  bb7089a7          DCB      0xbb,0x70,0x89,0xa7
0002e8  b6229220          DCB      0xb6,0x22,0x92,0x20
0002ec  49ff787a          DCB      0x49,0xff,0x78,0x7a
0002f0  8ff88017          DCB      0x8f,0xf8,0x80,0x17
0002f4  da31c6b8          DCB      0xda,0x31,0xc6,0xb8
0002f8  c3b07711          DCB      0xc3,0xb0,0x77,0x11
0002fc  cbfcd63a          DCB      0xcb,0xfc,0xd6,0x3a
