; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\sx1276.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sx1276.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\sx1276.crf ..\Lib\LoRawan-node\radio\sx1276\sx1276.c]
                          THUMB

                          AREA ||i.GetFskBandwidthRegValue||, CODE, READONLY, ALIGN=2

                  GetFskBandwidthRegValue PROC
;;;351     */
;;;352    static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
000000  4602              MOV      r2,r0
;;;353    {
;;;354        uint8_t i;
;;;355    
;;;356        for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
000002  2100              MOVS     r1,#0
000004  e00f              B        |L1.38|
                  |L1.6|
;;;357        {
;;;358            if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
000006  00c8              LSLS     r0,r1,#3
000008  4b09              LDR      r3,|L1.48|
00000a  5818              LDR      r0,[r3,r0]
00000c  4290              CMP      r0,r2
00000e  d808              BHI      |L1.34|
000010  1c48              ADDS     r0,r1,#1
000012  00c0              LSLS     r0,r0,#3
000014  5818              LDR      r0,[r3,r0]
000016  4290              CMP      r0,r2
000018  d903              BLS      |L1.34|
;;;359            {
;;;360                return FskBandwidths[i].RegValue;
00001a  00c8              LSLS     r0,r1,#3
00001c  18c0              ADDS     r0,r0,r3
00001e  7900              LDRB     r0,[r0,#4]
;;;361            }
;;;362        }
;;;363        // ERROR: Value not found
;;;364        while( 1 );
;;;365    }
000020  4770              BX       lr
                  |L1.34|
000022  1c48              ADDS     r0,r1,#1              ;356
000024  b2c1              UXTB     r1,r0                 ;356
                  |L1.38|
000026  2915              CMP      r1,#0x15              ;356
000028  d3ed              BCC      |L1.6|
00002a  bf00              NOP                            ;364
                  |L1.44|
00002c  e7fe              B        |L1.44|
;;;366    
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      FskBandwidths

                          AREA ||i.RxChainCalibration||, CODE, READONLY, ALIGN=2

                  RxChainCalibration PROC
;;;311     */
;;;312    static void RxChainCalibration( void )
000000  b5f0              PUSH     {r4-r7,lr}
;;;313    {
000002  b085              SUB      sp,sp,#0x14
;;;314        uint8_t regPaConfigInitVal;
;;;315        uint32_t initialFreq;
;;;316    
;;;317        // Save context
;;;318        regPaConfigInitVal = SX1276Read( REG_PACONFIG );
000004  2009              MOVS     r0,#9
000006  f7fffffe          BL       SX1276Read
00000a  9003              STR      r0,[sp,#0xc]
;;;319        initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
00000c  2006              MOVS     r0,#6
00000e  f7fffffe          BL       SX1276Read
000012  0407              LSLS     r7,r0,#16
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       SX1276Read
00001a  0200              LSLS     r0,r0,#8
00001c  4307              ORRS     r7,r7,r0
00001e  2008              MOVS     r0,#8
000020  f7fffffe          BL       SX1276Read
000024  4307              ORRS     r7,r7,r0
000026  463c              MOV      r4,r7
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       __aeabi_ui2d
00002e  2200              MOVS     r2,#0
000030  4b1f              LDR      r3,|L2.176|
000032  9101              STR      r1,[sp,#4]
000034  9000              STR      r0,[sp,#0]
000036  f7fffffe          BL       __aeabi_dmul
00003a  4605              MOV      r5,r0
00003c  f7fffffe          BL       __aeabi_d2uiz
000040  9002              STR      r0,[sp,#8]
;;;320                                  ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
;;;321                                  ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
;;;322    
;;;323        // Cut the PA just in case, RFO output, power = -1 dBm
;;;324        SX1276Write( REG_PACONFIG, 0x00 );
000042  2100              MOVS     r1,#0
000044  2009              MOVS     r0,#9
000046  f7fffffe          BL       SX1276Write
;;;325    
;;;326        // Launch Rx chain calibration for LF band
;;;327        SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
00004a  203b              MOVS     r0,#0x3b
00004c  f7fffffe          BL       SX1276Read
000050  21bf              MOVS     r1,#0xbf
000052  4008              ANDS     r0,r0,r1
000054  4604              MOV      r4,r0
000056  3440              ADDS     r4,r4,#0x40
000058  4621              MOV      r1,r4
00005a  203b              MOVS     r0,#0x3b
00005c  f7fffffe          BL       SX1276Write
;;;328        while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
000060  bf00              NOP      
                  |L2.98|
000062  203b              MOVS     r0,#0x3b
000064  f7fffffe          BL       SX1276Read
000068  2120              MOVS     r1,#0x20
00006a  4008              ANDS     r0,r0,r1
00006c  2820              CMP      r0,#0x20
00006e  d0f8              BEQ      |L2.98|
;;;329        {
;;;330        }
;;;331    
;;;332        // Sets a Frequency in HF band
;;;333        SX1276SetChannel( 868000000 );
000070  4810              LDR      r0,|L2.180|
000072  f7fffffe          BL       SX1276SetChannel
;;;334    
;;;335        // Launch Rx chain calibration for HF band 
;;;336        SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
000076  203b              MOVS     r0,#0x3b
000078  f7fffffe          BL       SX1276Read
00007c  21bf              MOVS     r1,#0xbf
00007e  4008              ANDS     r0,r0,r1
000080  4604              MOV      r4,r0
000082  3440              ADDS     r4,r4,#0x40
000084  4621              MOV      r1,r4
000086  203b              MOVS     r0,#0x3b
000088  f7fffffe          BL       SX1276Write
;;;337        while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
00008c  bf00              NOP      
                  |L2.142|
00008e  203b              MOVS     r0,#0x3b
000090  f7fffffe          BL       SX1276Read
000094  2120              MOVS     r1,#0x20
000096  4008              ANDS     r0,r0,r1
000098  2820              CMP      r0,#0x20
00009a  d0f8              BEQ      |L2.142|
;;;338        {
;;;339        }
;;;340    
;;;341        // Restore context
;;;342        SX1276Write( REG_PACONFIG, regPaConfigInitVal );
00009c  2009              MOVS     r0,#9
00009e  9903              LDR      r1,[sp,#0xc]
0000a0  f7fffffe          BL       SX1276Write
;;;343        SX1276SetChannel( initialFreq );
0000a4  9802              LDR      r0,[sp,#8]
0000a6  f7fffffe          BL       SX1276SetChannel
;;;344    }
0000aa  b005              ADD      sp,sp,#0x14
0000ac  bdf0              POP      {r4-r7,pc}
;;;345    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L2.176|
                          DCD      0x404e8480
                  |L2.180|
                          DCD      0x33bca100

                          AREA ||i.SX1276GetStatus||, CODE, READONLY, ALIGN=2

                  SX1276GetStatus PROC
;;;233    
;;;234    RadioState_t SX1276GetStatus( void )
000000  4801              LDR      r0,|L3.8|
;;;235    {
;;;236        return SX1276.Settings.State;
000002  7900              LDRB     r0,[r0,#4]  ; SX1276
;;;237    }
000004  4770              BX       lr
;;;238    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      SX1276

                          AREA ||i.SX1276GetTimeOnAir||, CODE, READONLY, ALIGN=2

                  SX1276GetTimeOnAir PROC
;;;733    bool sendwkup = false;
;;;734    uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;735    {
000002  b097              SUB      sp,sp,#0x5c
;;;736        uint32_t airTime = 0;
000004  2000              MOVS     r0,#0
000006  9016              STR      r0,[sp,#0x58]
;;;737    
;;;738        switch( modem )
000008  9817              LDR      r0,[sp,#0x5c]
00000a  2800              CMP      r0,#0
00000c  d002              BEQ      |L4.20|
00000e  2801              CMP      r0,#1
000010  d171              BNE      |L4.246|
000012  e071              B        |L4.248|
                  |L4.20|
;;;739        {
;;;740        case MODEM_FSK:
;;;741            {
;;;742                airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
000014  49b7              LDR      r1,|L4.756|
000016  69c8              LDR      r0,[r1,#0x1c]
000018  f7fffffe          BL       __aeabi_ui2d
00001c  910f              STR      r1,[sp,#0x3c]
00001e  900e              STR      r0,[sp,#0x38]
000020  9818              LDR      r0,[sp,#0x60]
000022  f7fffffe          BL       __aeabi_ui2d
000026  9107              STR      r1,[sp,#0x1c]
000028  9006              STR      r0,[sp,#0x18]
00002a  2030              MOVS     r0,#0x30
00002c  f7fffffe          BL       SX1276Read
000030  21f9              MOVS     r1,#0xf9
000032  4388              BICS     r0,r0,r1
000034  2800              CMP      r0,#0
000036  d002              BEQ      |L4.62|
;;;743                                         ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
;;;744                                         ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
;;;745                                         ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
000038  2000              MOVS     r0,#0
00003a  49af              LDR      r1,|L4.760|
00003c  e001              B        |L4.66|
                  |L4.62|
00003e  2000              MOVS     r0,#0
000040  4601              MOV      r1,r0
                  |L4.66|
000042  9105              STR      r1,[sp,#0x14]
000044  9004              STR      r0,[sp,#0x10]
000046  2027              MOVS     r0,#0x27
000048  f7fffffe          BL       SX1276Read
00004c  21f8              MOVS     r1,#0xf8
00004e  4388              BICS     r0,r0,r1
000050  1c41              ADDS     r1,r0,#1
000052  48a8              LDR      r0,|L4.756|
000054  8c00              LDRH     r0,[r0,#0x20]
000056  1808              ADDS     r0,r1,r0
000058  9001              STR      r0,[sp,#4]
00005a  f7fffffe          BL       __aeabi_i2d
00005e  9103              STR      r1,[sp,#0xc]
000060  9002              STR      r0,[sp,#8]
000062  48a4              LDR      r0,|L4.756|
000064  1d00              ADDS     r0,r0,#4
000066  7f80              LDRB     r0,[r0,#0x1e]
000068  2801              CMP      r0,#1
00006a  d102              BNE      |L4.114|
00006c  2000              MOVS     r0,#0                 ;744
00006e  4603              MOV      r3,r0                 ;744
000070  e001              B        |L4.118|
                  |L4.114|
000072  2000              MOVS     r0,#0                 ;744
000074  4ba0              LDR      r3,|L4.760|
                  |L4.118|
000076  4602              MOV      r2,r0                 ;744
000078  9301              STR      r3,[sp,#4]            ;744
00007a  9000              STR      r0,[sp,#0]            ;744
00007c  9903              LDR      r1,[sp,#0xc]          ;744
00007e  9802              LDR      r0,[sp,#8]            ;744
000080  f7fffffe          BL       __aeabi_dadd
000084  4606              MOV      r6,r0                 ;744
000086  9b05              LDR      r3,[sp,#0x14]         ;744
000088  9a04              LDR      r2,[sp,#0x10]         ;744
00008a  f7fffffe          BL       __aeabi_dadd
00008e  4604              MOV      r4,r0                 ;744
000090  9b07              LDR      r3,[sp,#0x1c]         ;744
000092  9a06              LDR      r2,[sp,#0x18]         ;744
000094  f7fffffe          BL       __aeabi_dadd
000098  9109              STR      r1,[sp,#0x24]         ;744
00009a  9008              STR      r0,[sp,#0x20]         ;744
00009c  4895              LDR      r0,|L4.756|
00009e  300c              ADDS     r0,r0,#0xc            ;744
0000a0  7e00              LDRB     r0,[r0,#0x18]         ;744
0000a2  2801              CMP      r0,#1                 ;744
0000a4  d103              BNE      |L4.174|
;;;746                                         pktLen +
;;;747                                         ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
0000a6  2000              MOVS     r0,#0
0000a8  2101              MOVS     r1,#1
0000aa  0789              LSLS     r1,r1,#30
0000ac  e001              B        |L4.178|
                  |L4.174|
0000ae  2000              MOVS     r0,#0
0000b0  4601              MOV      r1,r0
                  |L4.178|
0000b2  4604              MOV      r4,r0
0000b4  4622              MOV      r2,r4
0000b6  460b              MOV      r3,r1
0000b8  9909              LDR      r1,[sp,#0x24]
0000ba  9808              LDR      r0,[sp,#0x20]
0000bc  f7fffffe          BL       __aeabi_dadd
0000c0  2200              MOVS     r2,#0
0000c2  4b8e              LDR      r3,|L4.764|
0000c4  910b              STR      r1,[sp,#0x2c]
0000c6  900a              STR      r0,[sp,#0x28]
0000c8  f7fffffe          BL       __aeabi_dmul
0000cc  910d              STR      r1,[sp,#0x34]
0000ce  900c              STR      r0,[sp,#0x30]
0000d0  9b0f              LDR      r3,[sp,#0x3c]
0000d2  9a0e              LDR      r2,[sp,#0x38]
0000d4  f7fffffe          BL       __aeabi_ddiv
0000d8  2200              MOVS     r2,#0
0000da  4b89              LDR      r3,|L4.768|
0000dc  9111              STR      r1,[sp,#0x44]
0000de  9010              STR      r0,[sp,#0x40]
0000e0  f7fffffe          BL       __aeabi_dmul
0000e4  9113              STR      r1,[sp,#0x4c]
0000e6  9012              STR      r0,[sp,#0x48]
0000e8  f7fffffe          BL       round
0000ec  9115              STR      r1,[sp,#0x54]
0000ee  9014              STR      r0,[sp,#0x50]
0000f0  f7fffffe          BL       __aeabi_d2uiz
0000f4  9016              STR      r0,[sp,#0x58]
                  |L4.246|
;;;748                                         SX1276.Settings.Fsk.Datarate ) * 1e6 );
;;;749            }
;;;750            break;
0000f6  e0f9              B        |L4.748|
                  |L4.248|
;;;751        case MODEM_LORA:
;;;752            {
;;;753    						if(sendwkup == false) ///第一次上电设置发送数据参数，获取空速
0000f8  4882              LDR      r0,|L4.772|
0000fa  7800              LDRB     r0,[r0,#0]  ; sendwkup
0000fc  2800              CMP      r0,#0
0000fe  d13b              BNE      |L4.376|
;;;754    						{
;;;755    							SX1276.Settings.LoRa.Bandwidth = 7;
000100  2107              MOVS     r1,#7
000102  487c              LDR      r0,|L4.756|
000104  6401              STR      r1,[r0,#0x40]
;;;756    							switch(RF_Send_Data.ADR_Datarate)
000106  4880              LDR      r0,|L4.776|
000108  7c40              LDRB     r0,[r0,#0x11]  ; RF_Send_Data
00010a  0003              MOVS     r3,r0
00010c  f7fffffe          BL       __ARM_common_switch8
000110  0604080c          DCB      0x06,0x04,0x08,0x0c
000114  1014181c          DCB      0x10,0x14,0x18,0x1c
;;;757    							{
;;;758    								case 0 : SX1276.Settings.LoRa.Datarate = 12;
000118  210c              MOVS     r1,#0xc
00011a  4876              LDR      r0,|L4.756|
00011c  6441              STR      r1,[r0,#0x44]
;;;759    										break;
00011e  e014              B        |L4.330|
;;;760    								
;;;761    								case 1 : SX1276.Settings.LoRa.Datarate = 11;
000120  210b              MOVS     r1,#0xb
000122  4874              LDR      r0,|L4.756|
000124  6441              STR      r1,[r0,#0x44]
;;;762    										break;
000126  e010              B        |L4.330|
;;;763    								
;;;764    								case 2 : SX1276.Settings.LoRa.Datarate = 10;
000128  210a              MOVS     r1,#0xa
00012a  4872              LDR      r0,|L4.756|
00012c  6441              STR      r1,[r0,#0x44]
;;;765    										break;
00012e  e00c              B        |L4.330|
;;;766    								
;;;767    								case 3 : SX1276.Settings.LoRa.Datarate = 9;
000130  2109              MOVS     r1,#9
000132  4870              LDR      r0,|L4.756|
000134  6441              STR      r1,[r0,#0x44]
;;;768    										break;
000136  e008              B        |L4.330|
;;;769    								
;;;770    								case 4 : SX1276.Settings.LoRa.Datarate = 8;
000138  2108              MOVS     r1,#8
00013a  486e              LDR      r0,|L4.756|
00013c  6441              STR      r1,[r0,#0x44]
;;;771    										break;
00013e  e004              B        |L4.330|
;;;772    								
;;;773    								case 5 : SX1276.Settings.LoRa.Datarate = 7;
000140  2107              MOVS     r1,#7
000142  486c              LDR      r0,|L4.756|
000144  6441              STR      r1,[r0,#0x44]
;;;774    										break;
000146  e000              B        |L4.330|
;;;775    								
;;;776    								default: break;
000148  bf00              NOP      
                  |L4.330|
00014a  bf00              NOP                            ;759
;;;777    							}						
;;;778    							
;;;779    							if(SX1276.Settings.LoRa.Datarate>10)
00014c  4869              LDR      r0,|L4.756|
00014e  6c40              LDR      r0,[r0,#0x44]
000150  280a              CMP      r0,#0xa
000152  d904              BLS      |L4.350|
;;;780    							SX1276.Settings.LoRa.PreambleLen = 10;
000154  210a              MOVS     r1,#0xa
000156  4867              LDR      r0,|L4.756|
000158  303c              ADDS     r0,r0,#0x3c
00015a  81c1              STRH     r1,[r0,#0xe]
00015c  e003              B        |L4.358|
                  |L4.350|
;;;781    							else
;;;782    								SX1276.Settings.LoRa.PreambleLen = 8;
00015e  2108              MOVS     r1,#8
000160  4864              LDR      r0,|L4.756|
000162  303c              ADDS     r0,r0,#0x3c
000164  81c1              STRH     r1,[r0,#0xe]
                  |L4.358|
;;;783    							SX1276.Settings.LoRa.CrcOn = true;
000166  2101              MOVS     r1,#1
000168  4862              LDR      r0,|L4.756|
00016a  303c              ADDS     r0,r0,#0x3c
00016c  7481              STRB     r1,[r0,#0x12]
;;;784    							SX1276.Settings.LoRa.Coderate = 1;
00016e  7341              STRB     r1,[r0,#0xd]
;;;785    							SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
000170  7301              STRB     r1,[r0,#0xc]
;;;786    							sendwkup = true;
000172  2001              MOVS     r0,#1
000174  4963              LDR      r1,|L4.772|
000176  7008              STRB     r0,[r1,#0]
                  |L4.376|
;;;787    						}
;;;788    						
;;;789    						DEBUG(3,"data = %d loradata = %d\r\n",SX1276.Settings.LoRa.Datarate,SX1276.Settings.LoRa.Datarate);
;;;790                double bw = 0.0;
000178  2400              MOVS     r4,#0
00017a  4625              MOV      r5,r4
;;;791                // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
;;;792                switch( SX1276.Settings.LoRa.Bandwidth )
00017c  485d              LDR      r0,|L4.756|
00017e  6c00              LDR      r0,[r0,#0x40]
000180  2807              CMP      r0,#7
000182  d004              BEQ      |L4.398|
000184  2808              CMP      r0,#8
000186  d005              BEQ      |L4.404|
000188  2809              CMP      r0,#9
00018a  d109              BNE      |L4.416|
00018c  e005              B        |L4.410|
                  |L4.398|
;;;793                {
;;;794                //case 0: // 7.8 kHz
;;;795                //    bw = 78e2;
;;;796                //    break;
;;;797                //case 1: // 10.4 kHz
;;;798                //    bw = 104e2;
;;;799                //    break;
;;;800                //case 2: // 15.6 kHz
;;;801                //    bw = 156e2;
;;;802                //    break;
;;;803                //case 3: // 20.8 kHz
;;;804                //    bw = 208e2;
;;;805                //    break;
;;;806                //case 4: // 31.2 kHz
;;;807                //    bw = 312e2;
;;;808                //    break;
;;;809                //case 5: // 41.4 kHz
;;;810                //    bw = 414e2;
;;;811                //    break;
;;;812                //case 6: // 62.5 kHz
;;;813                //    bw = 625e2;
;;;814                //    break;
;;;815                case 7: // 125 kHz
;;;816                    bw = 125e3;
00018e  2400              MOVS     r4,#0
000190  4d5e              LDR      r5,|L4.780|
;;;817                    break;
000192  e005              B        |L4.416|
                  |L4.404|
;;;818                case 8: // 250 kHz
;;;819                    bw = 250e3;
000194  2400              MOVS     r4,#0
000196  4d5e              LDR      r5,|L4.784|
;;;820                    break;
000198  e002              B        |L4.416|
                  |L4.410|
;;;821                case 9: // 500 kHz
;;;822                    bw = 500e3;
00019a  2400              MOVS     r4,#0
00019c  4d5d              LDR      r5,|L4.788|
;;;823                    break;
00019e  bf00              NOP      
                  |L4.416|
0001a0  bf00              NOP                            ;817
;;;824                }
;;;825    
;;;826                // Symbol rate : time for one symbol (secs)
;;;827                double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
0001a2  4954              LDR      r1,|L4.756|
0001a4  313c              ADDS     r1,r1,#0x3c
0001a6  7a0a              LDRB     r2,[r1,#8]
0001a8  2101              MOVS     r1,#1
0001aa  4091              LSLS     r1,r1,r2
0001ac  4608              MOV      r0,r1
0001ae  f7fffffe          BL       __aeabi_i2d
0001b2  4606              MOV      r6,r0
0001b4  4632              MOV      r2,r6
0001b6  460b              MOV      r3,r1
0001b8  4620              MOV      r0,r4
0001ba  4629              MOV      r1,r5
0001bc  f7fffffe          BL       __aeabi_ddiv
0001c0  9115              STR      r1,[sp,#0x54]
0001c2  9014              STR      r0,[sp,#0x50]
;;;828                double ts = 1 / rs;
0001c4  2000              MOVS     r0,#0
0001c6  494c              LDR      r1,|L4.760|
0001c8  9b15              LDR      r3,[sp,#0x54]
0001ca  9a14              LDR      r2,[sp,#0x50]
0001cc  f7fffffe          BL       __aeabi_ddiv
0001d0  9113              STR      r1,[sp,#0x4c]
0001d2  9012              STR      r0,[sp,#0x48]
;;;829                // time of preamble
;;;830                double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
0001d4  4947              LDR      r1,|L4.756|
0001d6  313c              ADDS     r1,r1,#0x3c
0001d8  89c8              LDRH     r0,[r1,#0xe]
0001da  f7fffffe          BL       __aeabi_ui2d
0001de  4606              MOV      r6,r0
0001e0  2200              MOVS     r2,#0
0001e2  4b4d              LDR      r3,|L4.792|
0001e4  f7fffffe          BL       __aeabi_dadd
0001e8  9107              STR      r1,[sp,#0x1c]
0001ea  9006              STR      r0,[sp,#0x18]
0001ec  9b13              LDR      r3,[sp,#0x4c]
0001ee  9a12              LDR      r2,[sp,#0x48]
0001f0  f7fffffe          BL       __aeabi_dmul
0001f4  9111              STR      r1,[sp,#0x44]
0001f6  9010              STR      r0,[sp,#0x40]
;;;831                // Symbol length of payload and time
;;;832                double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
0001f8  493e              LDR      r1,|L4.756|
0001fa  313c              ADDS     r1,r1,#0x3c
0001fc  7b49              LDRB     r1,[r1,#0xd]
0001fe  1d08              ADDS     r0,r1,#4
000200  f7fffffe          BL       __aeabi_i2d
000204  9107              STR      r1,[sp,#0x1c]
000206  9006              STR      r0,[sp,#0x18]
000208  493a              LDR      r1,|L4.756|
00020a  6c49              LDR      r1,[r1,#0x44]
00020c  008a              LSLS     r2,r1,#2
00020e  4939              LDR      r1,|L4.756|
000210  313c              ADDS     r1,r1,#0x3c
000212  7b09              LDRB     r1,[r1,#0xc]
000214  2900              CMP      r1,#0
000216  dd01              BLE      |L4.540|
;;;833                                     28 + 16 * SX1276.Settings.LoRa.CrcOn -
;;;834                                     ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
;;;835                                     ( double )( 4 * SX1276.Settings.LoRa.Datarate -
;;;836                                     ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
000218  2102              MOVS     r1,#2
00021a  e000              B        |L4.542|
                  |L4.540|
00021c  2100              MOVS     r1,#0
                  |L4.542|
00021e  1a50              SUBS     r0,r2,r1
000220  f7fffffe          BL       __aeabi_ui2d
000224  9101              STR      r1,[sp,#4]
000226  9000              STR      r0,[sp,#0]
000228  9918              LDR      r1,[sp,#0x60]
00022a  00ca              LSLS     r2,r1,#3
00022c  4931              LDR      r1,|L4.756|
00022e  6c49              LDR      r1,[r1,#0x44]
000230  0089              LSLS     r1,r1,#2
000232  1a52              SUBS     r2,r2,r1
000234  321c              ADDS     r2,r2,#0x1c
000236  492f              LDR      r1,|L4.756|
000238  313c              ADDS     r1,r1,#0x3c
00023a  7c89              LDRB     r1,[r1,#0x12]
00023c  0109              LSLS     r1,r1,#4
00023e  1852              ADDS     r2,r2,r1
000240  492c              LDR      r1,|L4.756|
000242  313c              ADDS     r1,r1,#0x3c
000244  7c09              LDRB     r1,[r1,#0x10]
000246  2900              CMP      r1,#0
000248  d001              BEQ      |L4.590|
00024a  2114              MOVS     r1,#0x14              ;834
00024c  e000              B        |L4.592|
                  |L4.590|
00024e  2100              MOVS     r1,#0                 ;834
                  |L4.592|
000250  1a50              SUBS     r0,r2,r1              ;834
000252  f7fffffe          BL       __aeabi_ui2d
000256  4606              MOV      r6,r0                 ;834
000258  9b01              LDR      r3,[sp,#4]            ;834
00025a  9a00              LDR      r2,[sp,#0]            ;834
00025c  f7fffffe          BL       __aeabi_ddiv
000260  9103              STR      r1,[sp,#0xc]          ;834
000262  9002              STR      r0,[sp,#8]            ;834
000264  f7fffffe          BL       ceil
000268  9105              STR      r1,[sp,#0x14]         ;834
00026a  9004              STR      r0,[sp,#0x10]         ;834
00026c  9b07              LDR      r3,[sp,#0x1c]         ;834
00026e  9a06              LDR      r2,[sp,#0x18]         ;834
000270  f7fffffe          BL       __aeabi_dmul
000274  910f              STR      r1,[sp,#0x3c]         ;834
000276  900e              STR      r0,[sp,#0x38]         ;834
;;;837                                     ( SX1276.Settings.LoRa.Coderate + 4 );
;;;838                double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
000278  2200              MOVS     r2,#0
00027a  4613              MOV      r3,r2
00027c  990f              LDR      r1,[sp,#0x3c]
00027e  980e              LDR      r0,[sp,#0x38]
000280  f7fffffe          BL       __aeabi_cdrcmple
000284  d202              BCS      |L4.652|
000286  990f              LDR      r1,[sp,#0x3c]
000288  980e              LDR      r0,[sp,#0x38]
00028a  e001              B        |L4.656|
                  |L4.652|
00028c  2000              MOVS     r0,#0
00028e  4601              MOV      r1,r0
                  |L4.656|
000290  4606              MOV      r6,r0
000292  4632              MOV      r2,r6
000294  460b              MOV      r3,r1
000296  2000              MOVS     r0,#0
000298  4918              LDR      r1,|L4.764|
00029a  f7fffffe          BL       __aeabi_dadd
00029e  910d              STR      r1,[sp,#0x34]
0002a0  900c              STR      r0,[sp,#0x30]
;;;839                double tPayload = nPayload * ts;
0002a2  9b13              LDR      r3,[sp,#0x4c]
0002a4  9a12              LDR      r2,[sp,#0x48]
0002a6  990d              LDR      r1,[sp,#0x34]
0002a8  980c              LDR      r0,[sp,#0x30]
0002aa  f7fffffe          BL       __aeabi_dmul
0002ae  910b              STR      r1,[sp,#0x2c]
0002b0  900a              STR      r0,[sp,#0x28]
;;;840                // Time on air 
;;;841                double tOnAir = tPreamble + tPayload;
0002b2  9b0b              LDR      r3,[sp,#0x2c]
0002b4  9a0a              LDR      r2,[sp,#0x28]
0002b6  9911              LDR      r1,[sp,#0x44]
0002b8  9810              LDR      r0,[sp,#0x40]
0002ba  f7fffffe          BL       __aeabi_dadd
0002be  9109              STR      r1,[sp,#0x24]
0002c0  9008              STR      r0,[sp,#0x20]
;;;842                // return us secs
;;;843                airTime = floor( tOnAir * 1e6 + 0.999 );
0002c2  2200              MOVS     r2,#0
0002c4  4b0e              LDR      r3,|L4.768|
0002c6  9909              LDR      r1,[sp,#0x24]
0002c8  9808              LDR      r0,[sp,#0x20]
0002ca  f7fffffe          BL       __aeabi_dmul
0002ce  4606              MOV      r6,r0
0002d0  4a12              LDR      r2,|L4.796|
0002d2  4b13              LDR      r3,|L4.800|
0002d4  f7fffffe          BL       __aeabi_dadd
0002d8  9105              STR      r1,[sp,#0x14]
0002da  9004              STR      r0,[sp,#0x10]
0002dc  f7fffffe          BL       floor
0002e0  9107              STR      r1,[sp,#0x1c]
0002e2  9006              STR      r0,[sp,#0x18]
0002e4  f7fffffe          BL       __aeabi_d2uiz
0002e8  9016              STR      r0,[sp,#0x58]
;;;844            }
;;;845            break;
0002ea  bf00              NOP      
                  |L4.748|
0002ec  bf00              NOP                            ;750
;;;846        }
;;;847        return airTime;
0002ee  9816              LDR      r0,[sp,#0x58]
;;;848    }
0002f0  b019              ADD      sp,sp,#0x64
0002f2  bdf0              POP      {r4-r7,pc}
;;;849    
                          ENDP

                  |L4.756|
                          DCD      SX1276
                  |L4.760|
                          DCD      0x3ff00000
                  |L4.764|
                          DCD      0x40200000
                  |L4.768|
                          DCD      0x412e8480
                  |L4.772|
                          DCD      sendwkup
                  |L4.776|
                          DCD      RF_Send_Data
                  |L4.780|
                          DCD      0x40fe8480
                  |L4.784|
                          DCD      0x410e8480
                  |L4.788|
                          DCD      0x411e8480
                  |L4.792|
                          DCD      0x40110000
                  |L4.796|
                          DCD      0xd916872b
                  |L4.800|
                          DCD      0x3feff7ce

                          AREA ||i.SX1276Init||, CODE, READONLY, ALIGN=2

                  SX1276Init PROC
;;;205    
;;;206    void SX1276Init( RadioEvents_t *events )
000000  b570              PUSH     {r4-r6,lr}
;;;207    {
000002  4605              MOV      r5,r0
;;;208        uint8_t i;
;;;209    
;;;210        RadioEvents = events;
000004  4819              LDR      r0,|L5.108|
000006  6005              STR      r5,[r0,#0]  ; RadioEvents
;;;211    
;;;212        // Initialize driver timeout timers
;;;213        TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
000008  4919              LDR      r1,|L5.112|
00000a  481a              LDR      r0,|L5.116|
00000c  f7fffffe          BL       TimerInit
;;;214        TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
000010  4917              LDR      r1,|L5.112|
000012  4819              LDR      r0,|L5.120|
000014  f7fffffe          BL       TimerInit
;;;215        TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
000018  4915              LDR      r1,|L5.112|
00001a  4818              LDR      r0,|L5.124|
00001c  f7fffffe          BL       TimerInit
;;;216        
;;;217        SX1276Reset( );
000020  f7fffffe          BL       SX1276Reset
;;;218    		
;;;219        RxChainCalibration( );
000024  f7fffffe          BL       RxChainCalibration
;;;220    	
;;;221        SX1276SetOpMode( RF_OPMODE_SLEEP );
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       SX1276SetOpMode
;;;222            
;;;223        for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
00002e  2400              MOVS     r4,#0
000030  e012              B        |L5.88|
                  |L5.50|
;;;224        {
;;;225            SX1276SetModem( RadioRegsInit[i].Modem );
000032  0061              LSLS     r1,r4,#1
000034  1861              ADDS     r1,r4,r1
000036  4a12              LDR      r2,|L5.128|
000038  5c50              LDRB     r0,[r2,r1]
00003a  f7fffffe          BL       SX1276SetModem
;;;226            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
00003e  0062              LSLS     r2,r4,#1
000040  18a2              ADDS     r2,r4,r2
000042  4b0f              LDR      r3,|L5.128|
000044  18d2              ADDS     r2,r2,r3
000046  7891              LDRB     r1,[r2,#2]
000048  0062              LSLS     r2,r4,#1
00004a  18a2              ADDS     r2,r4,r2
00004c  18d2              ADDS     r2,r2,r3
00004e  7850              LDRB     r0,[r2,#1]
000050  f7fffffe          BL       SX1276Write
000054  1c60              ADDS     r0,r4,#1              ;223
000056  b2c4              UXTB     r4,r0                 ;223
                  |L5.88|
000058  2c0f              CMP      r4,#0xf               ;223
00005a  d3ea              BCC      |L5.50|
;;;227        }
;;;228    
;;;229        SX1276SetModem( MODEM_FSK );
00005c  2000              MOVS     r0,#0
00005e  f7fffffe          BL       SX1276SetModem
;;;230    
;;;231        SX1276.Settings.State = RF_IDLE;
000062  2000              MOVS     r0,#0
000064  4907              LDR      r1,|L5.132|
000066  7108              STRB     r0,[r1,#4]
;;;232    }
000068  bd70              POP      {r4-r6,pc}
;;;233    
                          ENDP

00006a  0000              DCW      0x0000
                  |L5.108|
                          DCD      RadioEvents
                  |L5.112|
                          DCD      SX1276OnTimeoutIrq
                  |L5.116|
                          DCD      TxTimeoutTimer
                  |L5.120|
                          DCD      RxTimeoutTimer
                  |L5.124|
                          DCD      RxTimeoutSyncWord
                  |L5.128|
                          DCD      RadioRegsInit
                  |L5.132|
                          DCD      SX1276

                          AREA ||i.SX1276IsChannelFree||, CODE, READONLY, ALIGN=1

                  SX1276IsChannelFree PROC
;;;247    
;;;248    bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
000000  b5f8              PUSH     {r3-r7,lr}
;;;249    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;250        int16_t rssi = 0;
000008  2700              MOVS     r7,#0
;;;251        
;;;252        SX1276SetModem( modem );
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       SX1276SetModem
;;;253    
;;;254        SX1276SetChannel( freq );
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SX1276SetChannel
;;;255        
;;;256        SX1276SetOpMode( RF_OPMODE_RECEIVER );
000016  2005              MOVS     r0,#5
000018  f7fffffe          BL       SX1276SetOpMode
;;;257    
;;;258        DelayMs( 1 );
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       DelayMs
;;;259        
;;;260        rssi = SX1276ReadRssi( modem );
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       SX1276ReadRssi
000028  4607              MOV      r7,r0
;;;261        
;;;262        SX1276SetSleep( );
00002a  f7fffffe          BL       SX1276SetSleep
;;;263        
;;;264        if( rssi > rssiThresh )
00002e  42af              CMP      r7,r5
000030  dd01              BLE      |L6.54|
;;;265        {
;;;266            return false;
000032  2000              MOVS     r0,#0
                  |L6.52|
;;;267        }
;;;268        return true;
;;;269    }
000034  bdf8              POP      {r3-r7,pc}
                  |L6.54|
000036  2001              MOVS     r0,#1                 ;268
000038  e7fc              B        |L6.52|
;;;270    
                          ENDP


                          AREA ||i.SX1276OnDio0Irq||, CODE, READONLY, ALIGN=2

                  SX1276OnDio0Irq PROC
;;;1438   
;;;1439   void SX1276OnDio0Irq( void )
000000  b5f8              PUSH     {r3-r7,lr}
;;;1440   {
;;;1441       volatile uint8_t irqFlags = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;1442   	
;;;1443   		DEBUG(3, "%s\r\n",__func__);
;;;1444    
;;;1445       switch( SX1276.Settings.State )
000006  48e9              LDR      r0,|L7.940|
000008  7900              LDRB     r0,[r0,#4]  ; SX1276
00000a  2801              CMP      r0,#1
00000c  d004              BEQ      |L7.24|
00000e  2802              CMP      r0,#2
000010  d07e              BEQ      |L7.272|
000012  2803              CMP      r0,#3
000014  d17d              BNE      |L7.274|
000016  e1a9              B        |L7.876|
                  |L7.24|
;;;1446       {                
;;;1447           case RF_RX_RUNNING:
;;;1448               //TimerStop( &RxTimeoutTimer );
;;;1449               // RxDone interrupt
;;;1450               switch( SX1276.Settings.Modem )
000018  48e4              LDR      r0,|L7.940|
00001a  7940              LDRB     r0,[r0,#5]
00001c  2800              CMP      r0,#0
00001e  d002              BEQ      |L7.38|
000020  2801              CMP      r0,#1
000022  d177              BNE      |L7.276|
000024  e0c6              B        |L7.436|
                  |L7.38|
;;;1451               {
;;;1452               case MODEM_FSK:
;;;1453                   if( SX1276.Settings.Fsk.CrcOn == true )
000026  48e1              LDR      r0,|L7.940|
000028  300c              ADDS     r0,r0,#0xc
00002a  7e00              LDRB     r0,[r0,#0x18]
00002c  2801              CMP      r0,#1
00002e  d140              BNE      |L7.178|
;;;1454                   {
;;;1455                       irqFlags = SX1276Read( REG_IRQFLAGS2 );
000030  203f              MOVS     r0,#0x3f
000032  f7fffffe          BL       SX1276Read
000036  9000              STR      r0,[sp,#0]
;;;1456                       if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
000038  4669              MOV      r1,sp
00003a  7808              LDRB     r0,[r1,#0]
00003c  2102              MOVS     r1,#2
00003e  4008              ANDS     r0,r0,r1
000040  2802              CMP      r0,#2
000042  d036              BEQ      |L7.178|
;;;1457                       {
;;;1458                           // Clear Irqs
;;;1459                           SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI | 
000044  210b              MOVS     r1,#0xb
000046  203e              MOVS     r0,#0x3e
000048  f7fffffe          BL       SX1276Write
;;;1460                                                       RF_IRQFLAGS1_PREAMBLEDETECT |
;;;1461                                                       RF_IRQFLAGS1_SYNCADDRESSMATCH );
;;;1462                           SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
00004c  2110              MOVS     r1,#0x10
00004e  203f              MOVS     r0,#0x3f
000050  f7fffffe          BL       SX1276Write
;;;1463   
;;;1464                           if( SX1276.Settings.Fsk.RxContinuous == false )
000054  48d5              LDR      r0,|L7.940|
000056  300c              ADDS     r0,r0,#0xc
000058  7e80              LDRB     r0,[r0,#0x1a]
00005a  2800              CMP      r0,#0
00005c  d105              BNE      |L7.106|
;;;1465                           {
;;;1466                               SX1276.Settings.State = RF_IDLE;
00005e  49d3              LDR      r1,|L7.940|
000060  7108              STRB     r0,[r1,#4]
;;;1467                               TimerStart( &RxTimeoutSyncWord );
000062  48d3              LDR      r0,|L7.944|
000064  f7fffffe          BL       TimerStart
000068  e009              B        |L7.126|
                  |L7.106|
;;;1468                           }
;;;1469                           else
;;;1470                           {
;;;1471                               // Continuous mode restart Rx chain
;;;1472                               SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
00006a  200d              MOVS     r0,#0xd
00006c  f7fffffe          BL       SX1276Read
000070  2140              MOVS     r1,#0x40
000072  4308              ORRS     r0,r0,r1
000074  4604              MOV      r4,r0
000076  4621              MOV      r1,r4
000078  200d              MOVS     r0,#0xd
00007a  f7fffffe          BL       SX1276Write
                  |L7.126|
;;;1473                           }
;;;1474                           TimerStop( &RxTimeoutTimer );
00007e  48cd              LDR      r0,|L7.948|
000080  f7fffffe          BL       TimerStop
;;;1475   
;;;1476                           if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
000084  48cc              LDR      r0,|L7.952|
000086  6800              LDR      r0,[r0,#0]  ; RadioEvents
000088  2800              CMP      r0,#0
00008a  d008              BEQ      |L7.158|
00008c  48ca              LDR      r0,|L7.952|
00008e  6800              LDR      r0,[r0,#0]  ; RadioEvents
000090  6900              LDR      r0,[r0,#0x10]
000092  2800              CMP      r0,#0
000094  d003              BEQ      |L7.158|
;;;1477                           {
;;;1478                               RadioEvents->RxError( ); 
000096  49c8              LDR      r1,|L7.952|
000098  6809              LDR      r1,[r1,#0]  ; RadioEvents
00009a  6908              LDR      r0,[r1,#0x10]
00009c  4780              BLX      r0
                  |L7.158|
;;;1479                           }
;;;1480                           SX1276.Settings.FskPacketHandler.PreambleDetected = false;
00009e  2100              MOVS     r1,#0
0000a0  48c2              LDR      r0,|L7.940|
0000a2  3024              ADDS     r0,r0,#0x24
0000a4  7201              STRB     r1,[r0,#8]
;;;1481                           SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
0000a6  3008              ADDS     r0,r0,#8
0000a8  7041              STRB     r1,[r0,#1]
;;;1482                           SX1276.Settings.FskPacketHandler.NbBytes = 0;
0000aa  382c              SUBS     r0,r0,#0x2c
0000ac  8701              STRH     r1,[r0,#0x38]
;;;1483                           SX1276.Settings.FskPacketHandler.Size = 0;
0000ae  86c1              STRH     r1,[r0,#0x36]
;;;1484                           break;
0000b0  e138              B        |L7.804|
                  |L7.178|
;;;1485                       }
;;;1486                   }
;;;1487                   
;;;1488                   // Read received packet size
;;;1489                   if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
0000b2  48be              LDR      r0,|L7.940|
0000b4  8ec0              LDRH     r0,[r0,#0x36]
0000b6  2800              CMP      r0,#0
0000b8  d12f              BNE      |L7.282|
0000ba  48bc              LDR      r0,|L7.940|
0000bc  8f00              LDRH     r0,[r0,#0x38]
0000be  2800              CMP      r0,#0
0000c0  d12b              BNE      |L7.282|
;;;1490                   {
;;;1491                       if( SX1276.Settings.Fsk.FixLen == false )
0000c2  48ba              LDR      r0,|L7.940|
0000c4  1d00              ADDS     r0,r0,#4
0000c6  7f80              LDRB     r0,[r0,#0x1e]
0000c8  2800              CMP      r0,#0
0000ca  d105              BNE      |L7.216|
;;;1492                       {
;;;1493                           SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
0000cc  2101              MOVS     r1,#1
0000ce  48b7              LDR      r0,|L7.940|
0000d0  3036              ADDS     r0,r0,#0x36
0000d2  f7fffffe          BL       SX1276ReadFifo
0000d6  e005              B        |L7.228|
                  |L7.216|
;;;1494                       }
;;;1495                       else
;;;1496                       {
;;;1497                           SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
0000d8  2032              MOVS     r0,#0x32
0000da  f7fffffe          BL       SX1276Read
0000de  4601              MOV      r1,r0
0000e0  48b2              LDR      r0,|L7.940|
0000e2  86c1              STRH     r1,[r0,#0x36]
                  |L7.228|
;;;1498                       }
;;;1499                       SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
0000e4  4ab1              LDR      r2,|L7.940|
0000e6  322c              ADDS     r2,r2,#0x2c
0000e8  7a93              LDRB     r3,[r2,#0xa]
0000ea  7b12              LDRB     r2,[r2,#0xc]
0000ec  1a9a              SUBS     r2,r3,r2
0000ee  b2d1              UXTB     r1,r2
0000f0  4aae              LDR      r2,|L7.940|
0000f2  8f12              LDRH     r2,[r2,#0x38]
0000f4  4bb1              LDR      r3,|L7.956|
0000f6  18d0              ADDS     r0,r2,r3
0000f8  f7fffffe          BL       SX1276ReadFifo
;;;1500                       SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
0000fc  48ab              LDR      r0,|L7.940|
0000fe  8ec1              LDRH     r1,[r0,#0x36]
000100  8f00              LDRH     r0,[r0,#0x38]
000102  1a09              SUBS     r1,r1,r0
000104  48a9              LDR      r0,|L7.940|
000106  8f00              LDRH     r0,[r0,#0x38]
000108  1808              ADDS     r0,r1,r0
00010a  b281              UXTH     r1,r0
00010c  48a7              LDR      r0,|L7.940|
00010e  e002              B        |L7.278|
                  |L7.272|
000110  e10a              B        |L7.808|
                  |L7.274|
000112  e148              B        |L7.934|
                  |L7.276|
000114  e105              B        |L7.802|
                  |L7.278|
000116  8701              STRH     r1,[r0,#0x38]
000118  e015              B        |L7.326|
                  |L7.282|
;;;1501                   }
;;;1502                   else
;;;1503                   {
;;;1504                       SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
00011a  4aa4              LDR      r2,|L7.940|
00011c  322c              ADDS     r2,r2,#0x2c
00011e  7a93              LDRB     r3,[r2,#0xa]
000120  7b12              LDRB     r2,[r2,#0xc]
000122  1a9a              SUBS     r2,r3,r2
000124  b2d1              UXTB     r1,r2
000126  4aa1              LDR      r2,|L7.940|
000128  8f12              LDRH     r2,[r2,#0x38]
00012a  4ba4              LDR      r3,|L7.956|
00012c  18d0              ADDS     r0,r2,r3
00012e  f7fffffe          BL       SX1276ReadFifo
;;;1505                       SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
000132  489e              LDR      r0,|L7.940|
000134  8ec1              LDRH     r1,[r0,#0x36]
000136  8f00              LDRH     r0,[r0,#0x38]
000138  1a09              SUBS     r1,r1,r0
00013a  489c              LDR      r0,|L7.940|
00013c  8f00              LDRH     r0,[r0,#0x38]
00013e  1808              ADDS     r0,r1,r0
000140  b281              UXTH     r1,r0
000142  489a              LDR      r0,|L7.940|
000144  8701              STRH     r1,[r0,#0x38]
                  |L7.326|
;;;1506                   }
;;;1507   
;;;1508                   if( SX1276.Settings.Fsk.RxContinuous == false )
000146  4899              LDR      r0,|L7.940|
000148  300c              ADDS     r0,r0,#0xc
00014a  7e80              LDRB     r0,[r0,#0x1a]
00014c  2800              CMP      r0,#0
00014e  d105              BNE      |L7.348|
;;;1509                   {
;;;1510                       SX1276.Settings.State = RF_IDLE;
000150  4996              LDR      r1,|L7.940|
000152  7108              STRB     r0,[r1,#4]
;;;1511                       TimerStart( &RxTimeoutSyncWord );
000154  4896              LDR      r0,|L7.944|
000156  f7fffffe          BL       TimerStart
00015a  e009              B        |L7.368|
                  |L7.348|
;;;1512                   }
;;;1513                   else
;;;1514                   {
;;;1515                       // Continuous mode restart Rx chain
;;;1516                       SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
00015c  200d              MOVS     r0,#0xd
00015e  f7fffffe          BL       SX1276Read
000162  2140              MOVS     r1,#0x40
000164  4308              ORRS     r0,r0,r1
000166  4604              MOV      r4,r0
000168  4621              MOV      r1,r4
00016a  200d              MOVS     r0,#0xd
00016c  f7fffffe          BL       SX1276Write
                  |L7.368|
;;;1517                   }
;;;1518                   TimerStop( &RxTimeoutTimer );
000170  4890              LDR      r0,|L7.948|
000172  f7fffffe          BL       TimerStop
;;;1519   
;;;1520                   if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
000176  4890              LDR      r0,|L7.952|
000178  6800              LDR      r0,[r0,#0]  ; RadioEvents
00017a  2800              CMP      r0,#0
00017c  d010              BEQ      |L7.416|
00017e  488e              LDR      r0,|L7.952|
000180  6800              LDR      r0,[r0,#0]  ; RadioEvents
000182  6880              LDR      r0,[r0,#8]
000184  2800              CMP      r0,#0
000186  d00b              BEQ      |L7.416|
;;;1521                   {
;;;1522                       RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );  
000188  4888              LDR      r0,|L7.940|
00018a  302c              ADDS     r0,r0,#0x2c
00018c  2202              MOVS     r2,#2
00018e  5682              LDRSB    r2,[r0,r2]
000190  382c              SUBS     r0,r0,#0x2c
000192  8ec1              LDRH     r1,[r0,#0x36]
000194  4888              LDR      r0,|L7.952|
000196  6800              LDR      r0,[r0,#0]  ; RadioEvents
000198  2300              MOVS     r3,#0
00019a  6884              LDR      r4,[r0,#8]
00019c  4887              LDR      r0,|L7.956|
00019e  47a0              BLX      r4
                  |L7.416|
;;;1523                       DEBUG(3,"break RXDone\r\n");
;;;1524                   } 
;;;1525                   SX1276.Settings.FskPacketHandler.PreambleDetected = false;
0001a0  2100              MOVS     r1,#0
0001a2  4882              LDR      r0,|L7.940|
0001a4  3024              ADDS     r0,r0,#0x24
0001a6  7201              STRB     r1,[r0,#8]
;;;1526                   SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
0001a8  3008              ADDS     r0,r0,#8
0001aa  7041              STRB     r1,[r0,#1]
;;;1527                   SX1276.Settings.FskPacketHandler.NbBytes = 0;
0001ac  382c              SUBS     r0,r0,#0x2c
0001ae  8701              STRH     r1,[r0,#0x38]
;;;1528                   SX1276.Settings.FskPacketHandler.Size = 0;
0001b0  86c1              STRH     r1,[r0,#0x36]
;;;1529                   break;
0001b2  e0b7              B        |L7.804|
                  |L7.436|
;;;1530               case MODEM_LORA:
;;;1531                   {
;;;1532                       int8_t snr = 0;
0001b4  2500              MOVS     r5,#0
;;;1533   
;;;1534                       // Clear Irq
;;;1535                       SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
0001b6  2140              MOVS     r1,#0x40
0001b8  2012              MOVS     r0,#0x12
0001ba  f7fffffe          BL       SX1276Write
;;;1536   
;;;1537                       irqFlags = SX1276Read( REG_LR_IRQFLAGS );
0001be  2012              MOVS     r0,#0x12
0001c0  f7fffffe          BL       SX1276Read
0001c4  9000              STR      r0,[sp,#0]
;;;1538                       if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
0001c6  4669              MOV      r1,sp
0001c8  7808              LDRB     r0,[r1,#0]
0001ca  2120              MOVS     r1,#0x20
0001cc  4008              ANDS     r0,r0,r1
0001ce  2820              CMP      r0,#0x20
0001d0  d11a              BNE      |L7.520|
;;;1539                       {
;;;1540                           // Clear Irq
;;;1541                           SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
0001d2  2012              MOVS     r0,#0x12
0001d4  f7fffffe          BL       SX1276Write
;;;1542   
;;;1543                           if( SX1276.Settings.LoRa.RxContinuous == false )
0001d8  4874              LDR      r0,|L7.940|
0001da  303c              ADDS     r0,r0,#0x3c
0001dc  7d80              LDRB     r0,[r0,#0x16]
0001de  2800              CMP      r0,#0
0001e0  d101              BNE      |L7.486|
;;;1544                           {
;;;1545                               SX1276.Settings.State = RF_IDLE;
0001e2  4972              LDR      r1,|L7.940|
0001e4  7108              STRB     r0,[r1,#4]
                  |L7.486|
;;;1546                           }
;;;1547                           TimerStop( &RxTimeoutTimer );
0001e6  4873              LDR      r0,|L7.948|
0001e8  f7fffffe          BL       TimerStop
;;;1548   
;;;1549                           if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
0001ec  4872              LDR      r0,|L7.952|
0001ee  6800              LDR      r0,[r0,#0]  ; RadioEvents
0001f0  2800              CMP      r0,#0
0001f2  d008              BEQ      |L7.518|
0001f4  4870              LDR      r0,|L7.952|
0001f6  6800              LDR      r0,[r0,#0]  ; RadioEvents
0001f8  6900              LDR      r0,[r0,#0x10]
0001fa  2800              CMP      r0,#0
0001fc  d003              BEQ      |L7.518|
;;;1550                           {
;;;1551                               RadioEvents->RxError( ); 
0001fe  496e              LDR      r1,|L7.952|
000200  6809              LDR      r1,[r1,#0]  ; RadioEvents
000202  6908              LDR      r0,[r1,#0x10]
000204  4780              BLX      r0
                  |L7.518|
;;;1552                           }
;;;1553                           break;
000206  e08d              B        |L7.804|
                  |L7.520|
;;;1554                       }
;;;1555   
;;;1556                       SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
000208  2019              MOVS     r0,#0x19
00020a  f7fffffe          BL       SX1276Read
00020e  b241              SXTB     r1,r0
000210  4866              LDR      r0,|L7.940|
000212  3044              ADDS     r0,r0,#0x44
000214  7501              STRB     r1,[r0,#0x14]
;;;1557                       if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
000216  4601              MOV      r1,r0
000218  2014              MOVS     r0,#0x14
00021a  5608              LDRSB    r0,[r1,r0]
00021c  2180              MOVS     r1,#0x80
00021e  4008              ANDS     r0,r0,r1
000220  2800              CMP      r0,#0
000222  d008              BEQ      |L7.566|
;;;1558                       {
;;;1559                           // Invert and divide by 4
;;;1560                           snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
000224  4861              LDR      r0,|L7.940|
000226  3044              ADDS     r0,r0,#0x44
000228  7d00              LDRB     r0,[r0,#0x14]
00022a  43c0              MVNS     r0,r0
00022c  1c40              ADDS     r0,r0,#1
00022e  0600              LSLS     r0,r0,#24
000230  0e85              LSRS     r5,r0,#26
;;;1561                           snr = -snr;
000232  426d              RSBS     r5,r5,#0
000234  e003              B        |L7.574|
                  |L7.566|
;;;1562                       }
;;;1563                       else
;;;1564                       {
;;;1565                           // Divide by 4
;;;1566                           snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
000236  485d              LDR      r0,|L7.940|
000238  3044              ADDS     r0,r0,#0x44
00023a  7d00              LDRB     r0,[r0,#0x14]
00023c  1085              ASRS     r5,r0,#2
                  |L7.574|
;;;1567                       }
;;;1568   
;;;1569                       int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
00023e  201a              MOVS     r0,#0x1a
000240  f7fffffe          BL       SX1276Read
000244  4604              MOV      r4,r0
;;;1570                       if( snr < 0 )
000246  2d00              CMP      r5,#0
000248  da18              BGE      |L7.636|
;;;1571                       {
;;;1572                           if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
00024a  4858              LDR      r0,|L7.940|
00024c  6880              LDR      r0,[r0,#8]
00024e  495c              LDR      r1,|L7.960|
000250  4288              CMP      r0,r1
000252  d909              BLS      |L7.616|
;;;1573                           {
;;;1574                               SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
000254  4620              MOV      r0,r4
000256  389d              SUBS     r0,r0,#0x9d
000258  1121              ASRS     r1,r4,#4
00025a  1840              ADDS     r0,r0,r1
00025c  1940              ADDS     r0,r0,r5
00025e  b201              SXTH     r1,r0
000260  4852              LDR      r0,|L7.940|
000262  3058              ADDS     r0,r0,#0x58
000264  8041              STRH     r1,[r0,#2]
000266  e01f              B        |L7.680|
                  |L7.616|
;;;1575                                                                             snr;
;;;1576                           }
;;;1577                           else
;;;1578                           {
;;;1579                               SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
000268  4620              MOV      r0,r4
00026a  38a4              SUBS     r0,r0,#0xa4
00026c  1121              ASRS     r1,r4,#4
00026e  1840              ADDS     r0,r0,r1
000270  1940              ADDS     r0,r0,r5
000272  b201              SXTH     r1,r0
000274  484d              LDR      r0,|L7.940|
000276  3058              ADDS     r0,r0,#0x58
000278  8041              STRH     r1,[r0,#2]
00027a  e015              B        |L7.680|
                  |L7.636|
;;;1580                                                                             snr;
;;;1581                           }
;;;1582                       }
;;;1583                       else
;;;1584                       {    
;;;1585                           if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
00027c  484b              LDR      r0,|L7.940|
00027e  6880              LDR      r0,[r0,#8]
000280  494f              LDR      r1,|L7.960|
000282  4288              CMP      r0,r1
000284  d908              BLS      |L7.664|
;;;1586                           {
;;;1587                               SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
000286  4620              MOV      r0,r4
000288  389d              SUBS     r0,r0,#0x9d
00028a  1121              ASRS     r1,r4,#4
00028c  1840              ADDS     r0,r0,r1
00028e  b201              SXTH     r1,r0
000290  4846              LDR      r0,|L7.940|
000292  3058              ADDS     r0,r0,#0x58
000294  8041              STRH     r1,[r0,#2]
000296  e007              B        |L7.680|
                  |L7.664|
;;;1588                           }
;;;1589                           else
;;;1590                           {
;;;1591                               SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
000298  4620              MOV      r0,r4
00029a  38a4              SUBS     r0,r0,#0xa4
00029c  1121              ASRS     r1,r4,#4
00029e  1840              ADDS     r0,r0,r1
0002a0  b201              SXTH     r1,r0
0002a2  4842              LDR      r0,|L7.940|
0002a4  3058              ADDS     r0,r0,#0x58
0002a6  8041              STRH     r1,[r0,#2]
                  |L7.680|
;;;1592                           }
;;;1593                       }
;;;1594   
;;;1595                       SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
0002a8  2013              MOVS     r0,#0x13
0002aa  f7fffffe          BL       SX1276Read
0002ae  4601              MOV      r1,r0
0002b0  483e              LDR      r0,|L7.940|
0002b2  3058              ADDS     r0,r0,#0x58
0002b4  7101              STRB     r1,[r0,#4]
;;;1596   					readfifo = true;
0002b6  2001              MOVS     r0,#1
0002b8  4942              LDR      r1,|L7.964|
0002ba  7008              STRB     r0,[r1,#0]
;;;1597                       SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
0002bc  483b              LDR      r0,|L7.940|
0002be  3058              ADDS     r0,r0,#0x58
0002c0  7901              LDRB     r1,[r0,#4]
0002c2  483e              LDR      r0,|L7.956|
0002c4  f7fffffe          BL       SX1276ReadFifo
;;;1598   					readfifo = false;
0002c8  2000              MOVS     r0,#0
0002ca  493e              LDR      r1,|L7.964|
0002cc  7008              STRB     r0,[r1,#0]
;;;1599                   
;;;1600                       if( SX1276.Settings.LoRa.RxContinuous == false )
0002ce  4837              LDR      r0,|L7.940|
0002d0  303c              ADDS     r0,r0,#0x3c
0002d2  7d80              LDRB     r0,[r0,#0x16]
0002d4  2800              CMP      r0,#0
0002d6  d101              BNE      |L7.732|
;;;1601                       {
;;;1602                           SX1276.Settings.State = RF_IDLE;
0002d8  4934              LDR      r1,|L7.940|
0002da  7108              STRB     r0,[r1,#4]
                  |L7.732|
;;;1603                       }
;;;1604                       TimerStop( &RxTimeoutTimer );
0002dc  4835              LDR      r0,|L7.948|
0002de  f7fffffe          BL       TimerStop
;;;1605   
;;;1606                       if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
0002e2  4835              LDR      r0,|L7.952|
0002e4  6800              LDR      r0,[r0,#0]  ; RadioEvents
0002e6  2800              CMP      r0,#0
0002e8  d01a              BEQ      |L7.800|
0002ea  4833              LDR      r0,|L7.952|
0002ec  6800              LDR      r0,[r0,#0]  ; RadioEvents
0002ee  6880              LDR      r0,[r0,#8]
0002f0  2800              CMP      r0,#0
0002f2  d015              BEQ      |L7.800|
;;;1607                       {          
;;;1608                            DEBUG(3,"bufferr --");
;;;1609                            for(uint8_t i = 0; i < SX1276.Settings.LoRaPacketHandler.Size; i++)
0002f4  2000              MOVS     r0,#0
0002f6  e001              B        |L7.764|
                  |L7.760|
0002f8  1c41              ADDS     r1,r0,#1
0002fa  b2c8              UXTB     r0,r1
                  |L7.764|
0002fc  492b              LDR      r1,|L7.940|
0002fe  3158              ADDS     r1,r1,#0x58
000300  7909              LDRB     r1,[r1,#4]
000302  4281              CMP      r1,r0
000304  dcf8              BGT      |L7.760|
;;;1610                            DEBUG(3,"%x", RxTxBuffer[i]);
;;;1611                            DEBUG(3,"\r\n");
;;;1612                           RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );                       
000306  4829              LDR      r0,|L7.940|
000308  3044              ADDS     r0,r0,#0x44
00030a  2314              MOVS     r3,#0x14
00030c  56c3              LDRSB    r3,[r0,r3]
00030e  3014              ADDS     r0,r0,#0x14
000310  2202              MOVS     r2,#2
000312  5e82              LDRSH    r2,[r0,r2]
000314  7901              LDRB     r1,[r0,#4]
000316  4828              LDR      r0,|L7.952|
000318  6800              LDR      r0,[r0,#0]  ; RadioEvents
00031a  6886              LDR      r6,[r0,#8]
00031c  4827              LDR      r0,|L7.956|
00031e  47b0              BLX      r6
                  |L7.800|
;;;1613                       }
;;;1614                   }
;;;1615                   break;
000320  e000              B        |L7.804|
                  |L7.802|
;;;1616               default:
;;;1617                   break;
000322  bf00              NOP      
                  |L7.804|
000324  bf00              NOP                            ;1484
;;;1618               }
;;;1619               break;
000326  e03f              B        |L7.936|
                  |L7.808|
;;;1620           case RF_TX_RUNNING:
;;;1621               TimerStop( &TxTimeoutTimer );
000328  4827              LDR      r0,|L7.968|
00032a  f7fffffe          BL       TimerStop
;;;1622               // TxDone interrupt
;;;1623               switch( SX1276.Settings.Modem )
00032e  481f              LDR      r0,|L7.940|
000330  7940              LDRB     r0,[r0,#5]
000332  2800              CMP      r0,#0
000334  d007              BEQ      |L7.838|
000336  2801              CMP      r0,#1
000338  d104              BNE      |L7.836|
;;;1624               {
;;;1625               case MODEM_LORA:
;;;1626                   // Clear Irq
;;;1627                   SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
00033a  2108              MOVS     r1,#8
00033c  2012              MOVS     r0,#0x12
00033e  f7fffffe          BL       SX1276Write
;;;1628            
;;;1629                   // Intentional fall through
;;;1630               case MODEM_FSK:
000342  bf00              NOP      
                  |L7.836|
000344  bf00              NOP      
                  |L7.838|
;;;1631               default:
;;;1632                   SX1276.Settings.State = RF_IDLE;
000346  2000              MOVS     r0,#0
000348  4918              LDR      r1,|L7.940|
00034a  7108              STRB     r0,[r1,#4]
;;;1633                   if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
00034c  481a              LDR      r0,|L7.952|
00034e  6800              LDR      r0,[r0,#0]  ; RadioEvents
000350  2800              CMP      r0,#0
000352  d008              BEQ      |L7.870|
000354  4818              LDR      r0,|L7.952|
000356  6800              LDR      r0,[r0,#0]  ; RadioEvents
000358  6800              LDR      r0,[r0,#0]
00035a  2800              CMP      r0,#0
00035c  d003              BEQ      |L7.870|
;;;1634                   {
;;;1635                       RadioEvents->TxDone( );
00035e  4916              LDR      r1,|L7.952|
000360  6809              LDR      r1,[r1,#0]  ; RadioEvents
000362  6808              LDR      r0,[r1,#0]
000364  4780              BLX      r0
                  |L7.870|
;;;1636                   } 
;;;1637                   break;
000366  bf00              NOP      
000368  bf00              NOP      
;;;1638               }
;;;1639               break;
00036a  e01d              B        |L7.936|
                  |L7.876|
;;;1640   						
;;;1641   					  case RF_CAD:
;;;1642   					
;;;1643   							 if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
00036c  2012              MOVS     r0,#0x12
00036e  f7fffffe          BL       SX1276Read
000372  07c0              LSLS     r0,r0,#31
000374  0fc0              LSRS     r0,r0,#31
000376  2800              CMP      r0,#0
000378  d00a              BEQ      |L7.912|
;;;1644   							{															
;;;1645   									// Clear Irq
;;;1646   									SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
00037a  2105              MOVS     r1,#5
00037c  2012              MOVS     r0,#0x12
00037e  f7fffffe          BL       SX1276Write
;;;1647   //									if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
;;;1648   									{	
;;;1649   	//				   						RadioEvents->CadDone( true );
;;;1650   											DEBUG(2,"Cad_State = CadDetect \r\n");
000382  a012              ADR      r0,|L7.972|
000384  f7fffffe          BL       __2printf
;;;1651   //											Radio.Standby();
;;;1652   												
;;;1653   											LoRaCad.Cad_Detect = true;
000388  2001              MOVS     r0,#1
00038a  4917              LDR      r1,|L7.1000|
00038c  7088              STRB     r0,[r1,#2]
00038e  e009              B        |L7.932|
                  |L7.912|
;;;1654   									 }
;;;1655   							}
;;;1656   							else
;;;1657   							{        
;;;1658   									// Clear Irq
;;;1659   									SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
000390  2104              MOVS     r1,#4
000392  2012              MOVS     r0,#0x12
000394  f7fffffe          BL       SX1276Write
;;;1660   //									if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
;;;1661   									{							
;;;1662   											DEBUG(2,"Cad_State = CadDone \r\n");
000398  a014              ADR      r0,|L7.1004|
00039a  f7fffffe          BL       __2printf
;;;1663   	//										RadioEvents->CadDone( false );
;;;1664   											LoRaCad.Cad_Done = true;									
00039e  2001              MOVS     r0,#1
0003a0  4911              LDR      r1,|L7.1000|
0003a2  7048              STRB     r0,[r1,#1]
                  |L7.932|
;;;1665   									}
;;;1666   							}
;;;1667   						break;
0003a4  e000              B        |L7.936|
                  |L7.934|
;;;1668   
;;;1669           default:
;;;1670               break;
0003a6  bf00              NOP      
                  |L7.936|
0003a8  bf00              NOP                            ;1619
;;;1671       }
;;;1672   		
;;;1673   }
0003aa  bdf8              POP      {r3-r7,pc}
;;;1674   
                          ENDP

                  |L7.940|
                          DCD      SX1276
                  |L7.944|
                          DCD      RxTimeoutSyncWord
                  |L7.948|
                          DCD      RxTimeoutTimer
                  |L7.952|
                          DCD      RadioEvents
                  |L7.956|
                          DCD      RxTxBuffer
                  |L7.960|
                          DCD      0x3689cac0
                  |L7.964|
                          DCD      readfifo
                  |L7.968|
                          DCD      TxTimeoutTimer
                  |L7.972|
0003cc  4361645f          DCB      "Cad_State = CadDetect \r\n",0
0003d0  53746174
0003d4  65203d20
0003d8  43616444
0003dc  65746563
0003e0  74200d0a
0003e4  00      
0003e5  00                DCB      0
0003e6  00                DCB      0
0003e7  00                DCB      0
                  |L7.1000|
                          DCD      LoRaCad
                  |L7.1004|
0003ec  4361645f          DCB      "Cad_State = CadDone \r\n",0
0003f0  53746174
0003f4  65203d20
0003f8  43616444
0003fc  6f6e6520
000400  0d0a00  
000403  00                DCB      0

                          AREA ||i.SX1276OnDio1Irq||, CODE, READONLY, ALIGN=2

                  SX1276OnDio1Irq PROC
;;;1674   
;;;1675   void SX1276OnDio1Irq( void )
000000  b510              PUSH     {r4,lr}
;;;1676   {
;;;1677   	  DEBUG(3,"%s\r\n",__func__);
;;;1678       switch( SX1276.Settings.State )
000002  4858              LDR      r0,|L8.356|
000004  7900              LDRB     r0,[r0,#4]  ; SX1276
000006  2801              CMP      r0,#1
000008  d002              BEQ      |L8.16|
00000a  2802              CMP      r0,#2
00000c  d170              BNE      |L8.240|
00000e  e068              B        |L8.226|
                  |L8.16|
;;;1679       {                
;;;1680           case RF_RX_RUNNING:
;;;1681               switch( SX1276.Settings.Modem )
000010  4854              LDR      r0,|L8.356|
000012  7940              LDRB     r0,[r0,#5]
000014  2800              CMP      r0,#0
000016  d002              BEQ      |L8.30|
000018  2801              CMP      r0,#1
00001a  d15f              BNE      |L8.220|
00001c  e04a              B        |L8.180|
                  |L8.30|
;;;1682               {
;;;1683               case MODEM_FSK:
;;;1684                   // FifoLevel interrupt
;;;1685                   // Read received packet size
;;;1686                   if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
00001e  4851              LDR      r0,|L8.356|
000020  8ec0              LDRH     r0,[r0,#0x36]
000022  2800              CMP      r0,#0
000024  d114              BNE      |L8.80|
000026  484f              LDR      r0,|L8.356|
000028  8f00              LDRH     r0,[r0,#0x38]
00002a  2800              CMP      r0,#0
00002c  d110              BNE      |L8.80|
;;;1687                   {
;;;1688                       if( SX1276.Settings.Fsk.FixLen == false )
00002e  484d              LDR      r0,|L8.356|
000030  1d00              ADDS     r0,r0,#4
000032  7f80              LDRB     r0,[r0,#0x1e]
000034  2800              CMP      r0,#0
000036  d105              BNE      |L8.68|
;;;1689                       {
;;;1690                           SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
000038  2101              MOVS     r1,#1
00003a  484a              LDR      r0,|L8.356|
00003c  3036              ADDS     r0,r0,#0x36
00003e  f7fffffe          BL       SX1276ReadFifo
000042  e005              B        |L8.80|
                  |L8.68|
;;;1691                       }
;;;1692                       else
;;;1693                       {
;;;1694                           SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
000044  2032              MOVS     r0,#0x32
000046  f7fffffe          BL       SX1276Read
00004a  4601              MOV      r1,r0
00004c  4845              LDR      r0,|L8.356|
00004e  86c1              STRH     r1,[r0,#0x36]
                  |L8.80|
;;;1695                       }
;;;1696                   }
;;;1697   
;;;1698                   if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
000050  4844              LDR      r0,|L8.356|
000052  8ec1              LDRH     r1,[r0,#0x36]
000054  8f00              LDRH     r0,[r0,#0x38]
000056  1a09              SUBS     r1,r1,r0
000058  4842              LDR      r0,|L8.356|
00005a  302c              ADDS     r0,r0,#0x2c
00005c  7b80              LDRB     r0,[r0,#0xe]
00005e  4281              CMP      r1,r0
000060  dd11              BLE      |L8.134|
;;;1699                   {
;;;1700                       SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
000062  4a40              LDR      r2,|L8.356|
000064  322c              ADDS     r2,r2,#0x2c
000066  7b91              LDRB     r1,[r2,#0xe]
000068  3a2c              SUBS     r2,r2,#0x2c
00006a  8f12              LDRH     r2,[r2,#0x38]
00006c  4b3e              LDR      r3,|L8.360|
00006e  18d0              ADDS     r0,r2,r3
000070  f7fffffe          BL       SX1276ReadFifo
;;;1701                       SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
000074  483b              LDR      r0,|L8.356|
000076  8f01              LDRH     r1,[r0,#0x38]
000078  302c              ADDS     r0,r0,#0x2c
00007a  7b80              LDRB     r0,[r0,#0xe]
00007c  1808              ADDS     r0,r1,r0
00007e  b281              UXTH     r1,r0
000080  4838              LDR      r0,|L8.356|
000082  8701              STRH     r1,[r0,#0x38]
000084  e015              B        |L8.178|
                  |L8.134|
;;;1702                   }
;;;1703                   else
;;;1704                   {
;;;1705                       SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
000086  4a37              LDR      r2,|L8.356|
000088  322c              ADDS     r2,r2,#0x2c
00008a  7a93              LDRB     r3,[r2,#0xa]
00008c  7b12              LDRB     r2,[r2,#0xc]
00008e  1a9a              SUBS     r2,r3,r2
000090  b2d1              UXTB     r1,r2
000092  4a34              LDR      r2,|L8.356|
000094  8f12              LDRH     r2,[r2,#0x38]
000096  4b34              LDR      r3,|L8.360|
000098  18d0              ADDS     r0,r2,r3
00009a  f7fffffe          BL       SX1276ReadFifo
;;;1706                       SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
00009e  4831              LDR      r0,|L8.356|
0000a0  8ec1              LDRH     r1,[r0,#0x36]
0000a2  8f00              LDRH     r0,[r0,#0x38]
0000a4  1a09              SUBS     r1,r1,r0
0000a6  482f              LDR      r0,|L8.356|
0000a8  8f00              LDRH     r0,[r0,#0x38]
0000aa  1808              ADDS     r0,r1,r0
0000ac  b281              UXTH     r1,r0
0000ae  482d              LDR      r0,|L8.356|
0000b0  8701              STRH     r1,[r0,#0x38]
                  |L8.178|
;;;1707                   }
;;;1708                   break;
0000b2  e014              B        |L8.222|
                  |L8.180|
;;;1709               case MODEM_LORA:
;;;1710                   // Sync time out
;;;1711                   TimerStop( &RxTimeoutTimer );
0000b4  482d              LDR      r0,|L8.364|
0000b6  f7fffffe          BL       TimerStop
;;;1712                   SX1276.Settings.State = RF_IDLE;
0000ba  2000              MOVS     r0,#0
0000bc  4929              LDR      r1,|L8.356|
0000be  7108              STRB     r0,[r1,#4]
;;;1713                   if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
0000c0  482b              LDR      r0,|L8.368|
0000c2  6800              LDR      r0,[r0,#0]  ; RadioEvents
0000c4  2800              CMP      r0,#0
0000c6  d008              BEQ      |L8.218|
0000c8  4829              LDR      r0,|L8.368|
0000ca  6800              LDR      r0,[r0,#0]  ; RadioEvents
0000cc  68c0              LDR      r0,[r0,#0xc]
0000ce  2800              CMP      r0,#0
0000d0  d003              BEQ      |L8.218|
;;;1714                   {
;;;1715                       RadioEvents->RxTimeout( );
0000d2  4927              LDR      r1,|L8.368|
0000d4  6809              LDR      r1,[r1,#0]  ; RadioEvents
0000d6  68c8              LDR      r0,[r1,#0xc]
0000d8  4780              BLX      r0
                  |L8.218|
;;;1716                   }
;;;1717                   break;
0000da  e000              B        |L8.222|
                  |L8.220|
;;;1718               default:
;;;1719                   break;
0000dc  bf00              NOP      
                  |L8.222|
0000de  bf00              NOP                            ;1708
;;;1720               }
;;;1721               break;
0000e0  e03e              B        |L8.352|
                  |L8.226|
;;;1722           case RF_TX_RUNNING:
;;;1723               switch( SX1276.Settings.Modem )
0000e2  4820              LDR      r0,|L8.356|
0000e4  7940              LDRB     r0,[r0,#5]
0000e6  2800              CMP      r0,#0
0000e8  d003              BEQ      |L8.242|
0000ea  2801              CMP      r0,#1
0000ec  d134              BNE      |L8.344|
0000ee  e032              B        |L8.342|
                  |L8.240|
0000f0  e035              B        |L8.350|
                  |L8.242|
;;;1724               {
;;;1725               case MODEM_FSK:
;;;1726                   // FifoEmpty interrupt
;;;1727                   if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
0000f2  481c              LDR      r0,|L8.356|
0000f4  8ec1              LDRH     r1,[r0,#0x36]
0000f6  8f00              LDRH     r0,[r0,#0x38]
0000f8  1a09              SUBS     r1,r1,r0
0000fa  481a              LDR      r0,|L8.356|
0000fc  302c              ADDS     r0,r0,#0x2c
0000fe  7bc0              LDRB     r0,[r0,#0xf]
000100  4281              CMP      r1,r0
000102  dd11              BLE      |L8.296|
;;;1728                   {
;;;1729                       SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
000104  4a17              LDR      r2,|L8.356|
000106  322c              ADDS     r2,r2,#0x2c
000108  7bd1              LDRB     r1,[r2,#0xf]
00010a  3a2c              SUBS     r2,r2,#0x2c
00010c  8f12              LDRH     r2,[r2,#0x38]
00010e  4b16              LDR      r3,|L8.360|
000110  18d0              ADDS     r0,r2,r3
000112  f7fffffe          BL       SX1276WriteFifo
;;;1730                       SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
000116  4813              LDR      r0,|L8.356|
000118  8f01              LDRH     r1,[r0,#0x38]
00011a  302c              ADDS     r0,r0,#0x2c
00011c  7bc0              LDRB     r0,[r0,#0xf]
00011e  1808              ADDS     r0,r1,r0
000120  b281              UXTH     r1,r0
000122  4810              LDR      r0,|L8.356|
000124  8701              STRH     r1,[r0,#0x38]
000126  e015              B        |L8.340|
                  |L8.296|
;;;1731                   }
;;;1732                   else 
;;;1733                   {
;;;1734                       // Write the last chunk of data
;;;1735                       SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
000128  4a0e              LDR      r2,|L8.356|
00012a  322c              ADDS     r2,r2,#0x2c
00012c  7a93              LDRB     r3,[r2,#0xa]
00012e  7b12              LDRB     r2,[r2,#0xc]
000130  1a9a              SUBS     r2,r3,r2
000132  b2d1              UXTB     r1,r2
000134  4a0b              LDR      r2,|L8.356|
000136  8f12              LDRH     r2,[r2,#0x38]
000138  4b0b              LDR      r3,|L8.360|
00013a  18d0              ADDS     r0,r2,r3
00013c  f7fffffe          BL       SX1276WriteFifo
;;;1736                       SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
000140  4808              LDR      r0,|L8.356|
000142  8ec1              LDRH     r1,[r0,#0x36]
000144  8f00              LDRH     r0,[r0,#0x38]
000146  1a09              SUBS     r1,r1,r0
000148  4806              LDR      r0,|L8.356|
00014a  8f00              LDRH     r0,[r0,#0x38]
00014c  1808              ADDS     r0,r1,r0
00014e  b281              UXTH     r1,r0
000150  4804              LDR      r0,|L8.356|
000152  8701              STRH     r1,[r0,#0x38]
                  |L8.340|
;;;1737                   }
;;;1738                   break;
000154  e001              B        |L8.346|
                  |L8.342|
;;;1739               case MODEM_LORA:
;;;1740                   break;
000156  e000              B        |L8.346|
                  |L8.344|
;;;1741               default:
;;;1742                   break;
000158  bf00              NOP      
                  |L8.346|
00015a  bf00              NOP                            ;1738
;;;1743               }
;;;1744               break;      
00015c  e000              B        |L8.352|
                  |L8.350|
;;;1745           default:
;;;1746               break;
00015e  bf00              NOP      
                  |L8.352|
000160  bf00              NOP                            ;1721
;;;1747       }
;;;1748   		
;;;1749   }
000162  bd10              POP      {r4,pc}
;;;1750   
                          ENDP

                  |L8.356|
                          DCD      SX1276
                  |L8.360|
                          DCD      RxTxBuffer
                  |L8.364|
                          DCD      RxTimeoutTimer
                  |L8.368|
                          DCD      RadioEvents

                          AREA ||i.SX1276OnDio2Irq||, CODE, READONLY, ALIGN=2

                  SX1276OnDio2Irq PROC
;;;1750   
;;;1751   void SX1276OnDio2Irq( void )
000000  b5f0              PUSH     {r4-r7,lr}
;;;1752   {
000002  b087              SUB      sp,sp,#0x1c
;;;1753   		DEBUG(3,"%s\r\n",__func__);
;;;1754       switch( SX1276.Settings.State )
000004  484d              LDR      r0,|L9.316|
000006  7900              LDRB     r0,[r0,#4]  ; SX1276
000008  2801              CMP      r0,#1
00000a  d002              BEQ      |L9.18|
00000c  2802              CMP      r0,#2
00000e  d16f              BNE      |L9.240|
000010  e067              B        |L9.226|
                  |L9.18|
;;;1755       {                
;;;1756           case RF_RX_RUNNING:
;;;1757               switch( SX1276.Settings.Modem )
000012  484a              LDR      r0,|L9.316|
000014  7940              LDRB     r0,[r0,#5]
000016  2800              CMP      r0,#0
000018  d002              BEQ      |L9.32|
00001a  2801              CMP      r0,#1
00001c  d15e              BNE      |L9.220|
00001e  e040              B        |L9.162|
                  |L9.32|
;;;1758               {
;;;1759               case MODEM_FSK:
;;;1760                   if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
000020  4846              LDR      r0,|L9.316|
000022  3024              ADDS     r0,r0,#0x24
000024  7a00              LDRB     r0,[r0,#8]
000026  2801              CMP      r0,#1
000028  d13a              BNE      |L9.160|
00002a  4844              LDR      r0,|L9.316|
00002c  302c              ADDS     r0,r0,#0x2c
00002e  7840              LDRB     r0,[r0,#1]
000030  2800              CMP      r0,#0
000032  d135              BNE      |L9.160|
;;;1761                   {
;;;1762                       TimerStop( &RxTimeoutSyncWord );
000034  4842              LDR      r0,|L9.320|
000036  f7fffffe          BL       TimerStop
;;;1763                       
;;;1764                       SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
00003a  2101              MOVS     r1,#1
00003c  483f              LDR      r0,|L9.316|
00003e  302c              ADDS     r0,r0,#0x2c
000040  7041              STRB     r1,[r0,#1]
;;;1765                   
;;;1766                       SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
000042  2011              MOVS     r0,#0x11
000044  f7fffffe          BL       SX1276Read
000048  1040              ASRS     r0,r0,#1
00004a  4240              RSBS     r0,r0,#0
00004c  b241              SXTB     r1,r0
00004e  483b              LDR      r0,|L9.316|
000050  302c              ADDS     r0,r0,#0x2c
000052  7081              STRB     r1,[r0,#2]
;;;1767   
;;;1768                       SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
000054  201b              MOVS     r0,#0x1b
000056  f7fffffe          BL       SX1276Read
00005a  0207              LSLS     r7,r0,#8
00005c  201c              MOVS     r0,#0x1c
00005e  f7fffffe          BL       SX1276Read
000062  4307              ORRS     r7,r7,r0
000064  463e              MOV      r6,r7
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       __aeabi_i2d
00006c  9101              STR      r1,[sp,#4]
00006e  9000              STR      r0,[sp,#0]
000070  f7fffffe          BL       __aeabi_d2iz
000074  9003              STR      r0,[sp,#0xc]
000076  f7fffffe          BL       __aeabi_i2d
00007a  4604              MOV      r4,r0
00007c  2200              MOVS     r2,#0
00007e  4b31              LDR      r3,|L9.324|
000080  f7fffffe          BL       __aeabi_dmul
000084  9105              STR      r1,[sp,#0x14]
000086  9004              STR      r0,[sp,#0x10]
000088  f7fffffe          BL       __aeabi_d2iz
00008c  4601              MOV      r1,r0
00008e  482b              LDR      r0,|L9.316|
000090  6301              STR      r1,[r0,#0x30]
;;;1769                                                                              ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
;;;1770                                                                              ( double )FREQ_STEP;
;;;1771                       SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
000092  200c              MOVS     r0,#0xc
000094  f7fffffe          BL       SX1276Read
000098  1141              ASRS     r1,r0,#5
00009a  4828              LDR      r0,|L9.316|
00009c  302c              ADDS     r0,r0,#0x2c
00009e  7201              STRB     r1,[r0,#8]
                  |L9.160|
;;;1772                   }
;;;1773                   break;
0000a0  e01d              B        |L9.222|
                  |L9.162|
;;;1774               case MODEM_LORA:
;;;1775                   if( SX1276.Settings.LoRa.FreqHopOn == true )
0000a2  4826              LDR      r0,|L9.316|
0000a4  303c              ADDS     r0,r0,#0x3c
0000a6  7cc0              LDRB     r0,[r0,#0x13]
0000a8  2801              CMP      r0,#1
0000aa  d116              BNE      |L9.218|
;;;1776                   {
;;;1777                       // Clear Irq
;;;1778                       SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
0000ac  2102              MOVS     r1,#2
0000ae  2012              MOVS     r0,#0x12
0000b0  f7fffffe          BL       SX1276Write
;;;1779                       
;;;1780                       if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
0000b4  4824              LDR      r0,|L9.328|
0000b6  6800              LDR      r0,[r0,#0]  ; RadioEvents
0000b8  2800              CMP      r0,#0
0000ba  d00e              BEQ      |L9.218|
0000bc  4822              LDR      r0,|L9.328|
0000be  6800              LDR      r0,[r0,#0]  ; RadioEvents
0000c0  6940              LDR      r0,[r0,#0x14]
0000c2  2800              CMP      r0,#0
0000c4  d009              BEQ      |L9.218|
;;;1781                       {
;;;1782                           RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
0000c6  201c              MOVS     r0,#0x1c
0000c8  f7fffffe          BL       SX1276Read
0000cc  0684              LSLS     r4,r0,#26
0000ce  0ea4              LSRS     r4,r4,#26
0000d0  481d              LDR      r0,|L9.328|
0000d2  6800              LDR      r0,[r0,#0]  ; RadioEvents
0000d4  6941              LDR      r1,[r0,#0x14]
0000d6  4620              MOV      r0,r4
0000d8  4788              BLX      r1
                  |L9.218|
;;;1783                       }
;;;1784                   }
;;;1785                   break;
0000da  e000              B        |L9.222|
                  |L9.220|
;;;1786               default:
;;;1787                   break;
0000dc  bf00              NOP      
                  |L9.222|
0000de  bf00              NOP                            ;1773
;;;1788               }
;;;1789               break;
0000e0  e029              B        |L9.310|
                  |L9.226|
;;;1790           case RF_TX_RUNNING:
;;;1791               switch( SX1276.Settings.Modem )
0000e2  4816              LDR      r0,|L9.316|
0000e4  7940              LDRB     r0,[r0,#5]
0000e6  2800              CMP      r0,#0
0000e8  d003              BEQ      |L9.242|
0000ea  2801              CMP      r0,#1
0000ec  d11f              BNE      |L9.302|
0000ee  e001              B        |L9.244|
                  |L9.240|
0000f0  e020              B        |L9.308|
                  |L9.242|
;;;1792               {
;;;1793               case MODEM_FSK:
;;;1794                   break;
0000f2  e01d              B        |L9.304|
                  |L9.244|
;;;1795               case MODEM_LORA:
;;;1796                   if( SX1276.Settings.LoRa.FreqHopOn == true )
0000f4  4811              LDR      r0,|L9.316|
0000f6  303c              ADDS     r0,r0,#0x3c
0000f8  7cc0              LDRB     r0,[r0,#0x13]
0000fa  2801              CMP      r0,#1
0000fc  d116              BNE      |L9.300|
;;;1797                   {
;;;1798                       // Clear Irq
;;;1799                       SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
0000fe  2102              MOVS     r1,#2
000100  2012              MOVS     r0,#0x12
000102  f7fffffe          BL       SX1276Write
;;;1800                       
;;;1801                       if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
000106  4810              LDR      r0,|L9.328|
000108  6800              LDR      r0,[r0,#0]  ; RadioEvents
00010a  2800              CMP      r0,#0
00010c  d00e              BEQ      |L9.300|
00010e  480e              LDR      r0,|L9.328|
000110  6800              LDR      r0,[r0,#0]  ; RadioEvents
000112  6940              LDR      r0,[r0,#0x14]
000114  2800              CMP      r0,#0
000116  d009              BEQ      |L9.300|
;;;1802                       {
;;;1803                           RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
000118  201c              MOVS     r0,#0x1c
00011a  f7fffffe          BL       SX1276Read
00011e  0684              LSLS     r4,r0,#26
000120  0ea4              LSRS     r4,r4,#26
000122  4809              LDR      r0,|L9.328|
000124  6800              LDR      r0,[r0,#0]  ; RadioEvents
000126  6941              LDR      r1,[r0,#0x14]
000128  4620              MOV      r0,r4
00012a  4788              BLX      r1
                  |L9.300|
;;;1804                       }
;;;1805                   }
;;;1806                   break;
00012c  e000              B        |L9.304|
                  |L9.302|
;;;1807               default:
;;;1808                   break;
00012e  bf00              NOP      
                  |L9.304|
000130  bf00              NOP                            ;1794
;;;1809               }
;;;1810               break;      
000132  e000              B        |L9.310|
                  |L9.308|
;;;1811           default:
;;;1812               break;
000134  bf00              NOP      
                  |L9.310|
000136  bf00              NOP                            ;1789
;;;1813       }
;;;1814   	
;;;1815   }
000138  b007              ADD      sp,sp,#0x1c
00013a  bdf0              POP      {r4-r7,pc}
;;;1816   
                          ENDP

                  |L9.316|
                          DCD      SX1276
                  |L9.320|
                          DCD      RxTimeoutSyncWord
                  |L9.324|
                          DCD      0x404e8480
                  |L9.328|
                          DCD      RadioEvents

                          AREA ||i.SX1276OnDio3Irq||, CODE, READONLY, ALIGN=2

                  SX1276OnDio3Irq PROC
;;;1816   
;;;1817   void SX1276OnDio3Irq( void )
000000  b510              PUSH     {r4,lr}
;;;1818   {
;;;1819   	  DEBUG(3,"%s\r\n",__func__);
;;;1820       switch( SX1276.Settings.Modem )
000002  481c              LDR      r0,|L10.116|
000004  7940              LDRB     r0,[r0,#5]
000006  2800              CMP      r0,#0
000008  d002              BEQ      |L10.16|
00000a  2801              CMP      r0,#1
00000c  d12e              BNE      |L10.108|
00000e  e000              B        |L10.18|
                  |L10.16|
;;;1821       {
;;;1822       case MODEM_FSK:
;;;1823           break;
000010  e02d              B        |L10.110|
                  |L10.18|
;;;1824       case MODEM_LORA:
;;;1825           if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
000012  2012              MOVS     r0,#0x12
000014  f7fffffe          BL       SX1276Read
000018  07c0              LSLS     r0,r0,#31
00001a  0fc0              LSRS     r0,r0,#31
00001c  2800              CMP      r0,#0
00001e  d012              BEQ      |L10.70|
;;;1826           {
;;;1827               // Clear Irq
;;;1828               SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
000020  2105              MOVS     r1,#5
000022  2012              MOVS     r0,#0x12
000024  f7fffffe          BL       SX1276Write
;;;1829               if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
000028  4813              LDR      r0,|L10.120|
00002a  6800              LDR      r0,[r0,#0]  ; RadioEvents
00002c  2800              CMP      r0,#0
00002e  d01c              BEQ      |L10.106|
000030  4811              LDR      r0,|L10.120|
000032  6800              LDR      r0,[r0,#0]  ; RadioEvents
000034  6980              LDR      r0,[r0,#0x18]
000036  2800              CMP      r0,#0
000038  d017              BEQ      |L10.106|
;;;1830               {
;;;1831                   RadioEvents->CadDone( true );
00003a  480f              LDR      r0,|L10.120|
00003c  6800              LDR      r0,[r0,#0]  ; RadioEvents
00003e  6981              LDR      r1,[r0,#0x18]
000040  2001              MOVS     r0,#1
000042  4788              BLX      r1
000044  e011              B        |L10.106|
                  |L10.70|
;;;1832               }
;;;1833           }
;;;1834           else
;;;1835           {        
;;;1836               // Clear Irq
;;;1837               SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
000046  2104              MOVS     r1,#4
000048  2012              MOVS     r0,#0x12
00004a  f7fffffe          BL       SX1276Write
;;;1838               if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
00004e  480a              LDR      r0,|L10.120|
000050  6800              LDR      r0,[r0,#0]  ; RadioEvents
000052  2800              CMP      r0,#0
000054  d009              BEQ      |L10.106|
000056  4808              LDR      r0,|L10.120|
000058  6800              LDR      r0,[r0,#0]  ; RadioEvents
00005a  6980              LDR      r0,[r0,#0x18]
00005c  2800              CMP      r0,#0
00005e  d004              BEQ      |L10.106|
;;;1839               {
;;;1840                   RadioEvents->CadDone( false );
000060  4805              LDR      r0,|L10.120|
000062  6800              LDR      r0,[r0,#0]  ; RadioEvents
000064  6981              LDR      r1,[r0,#0x18]
000066  2000              MOVS     r0,#0
000068  4788              BLX      r1
                  |L10.106|
;;;1841               }
;;;1842           }
;;;1843           break;
00006a  e000              B        |L10.110|
                  |L10.108|
;;;1844       default:
;;;1845           break;
00006c  bf00              NOP      
                  |L10.110|
00006e  bf00              NOP                            ;1823
;;;1846       }
;;;1847   		
;;;1848   }
000070  bd10              POP      {r4,pc}
;;;1849   
                          ENDP

000072  0000              DCW      0x0000
                  |L10.116|
                          DCD      SX1276
                  |L10.120|
                          DCD      RadioEvents

                          AREA ||i.SX1276OnDio4Irq||, CODE, READONLY, ALIGN=2

                  SX1276OnDio4Irq PROC
;;;1849   
;;;1850   void SX1276OnDio4Irq( void )
000000  480a              LDR      r0,|L11.44|
;;;1851   {
;;;1852   		DEBUG(3,"%s\r\n",__func__);
;;;1853       switch( SX1276.Settings.Modem )
000002  7940              LDRB     r0,[r0,#5]
000004  2800              CMP      r0,#0
000006  d002              BEQ      |L11.14|
000008  2801              CMP      r0,#1
00000a  d10b              BNE      |L11.36|
00000c  e009              B        |L11.34|
                  |L11.14|
;;;1854       {
;;;1855       case MODEM_FSK:
;;;1856           {
;;;1857               if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
00000e  4807              LDR      r0,|L11.44|
000010  3024              ADDS     r0,r0,#0x24
000012  7a00              LDRB     r0,[r0,#8]
000014  2800              CMP      r0,#0
000016  d103              BNE      |L11.32|
;;;1858               {
;;;1859                   SX1276.Settings.FskPacketHandler.PreambleDetected = true;
000018  2101              MOVS     r1,#1
00001a  4804              LDR      r0,|L11.44|
00001c  3024              ADDS     r0,r0,#0x24
00001e  7201              STRB     r1,[r0,#8]
                  |L11.32|
;;;1860               }    
;;;1861           }
;;;1862           break;
000020  e001              B        |L11.38|
                  |L11.34|
;;;1863       case MODEM_LORA:
;;;1864           break;
000022  e000              B        |L11.38|
                  |L11.36|
;;;1865       default:
;;;1866           break;
000024  bf00              NOP      
                  |L11.38|
000026  bf00              NOP                            ;1862
;;;1867       }
;;;1868   		
;;;1869   }
000028  4770              BX       lr
;;;1870   
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      SX1276

                          AREA ||i.SX1276OnDio5Irq||, CODE, READONLY, ALIGN=2

                  SX1276OnDio5Irq PROC
;;;1870   
;;;1871   void SX1276OnDio5Irq( void )
000000  4805              LDR      r0,|L12.24|
;;;1872   {
;;;1873   		DEBUG(3,"%s\r\n",__func__);
;;;1874       switch( SX1276.Settings.Modem )
000002  7940              LDRB     r0,[r0,#5]
000004  2800              CMP      r0,#0
000006  d002              BEQ      |L12.14|
000008  2801              CMP      r0,#1
00000a  d102              BNE      |L12.18|
00000c  e000              B        |L12.16|
                  |L12.14|
;;;1875       {
;;;1876       case MODEM_FSK:
;;;1877           break;
00000e  e001              B        |L12.20|
                  |L12.16|
;;;1878       case MODEM_LORA:
;;;1879           break;
000010  e000              B        |L12.20|
                  |L12.18|
;;;1880       default:
;;;1881           break;
000012  bf00              NOP      
                  |L12.20|
000014  bf00              NOP                            ;1877
;;;1882       }
;;;1883   		
;;;1884   }
000016  4770              BX       lr
                          ENDP

                  |L12.24|
                          DCD      SX1276

                          AREA ||i.SX1276OnTimeoutIrq||, CODE, READONLY, ALIGN=2

                  SX1276OnTimeoutIrq PROC
;;;1387   
;;;1388   void SX1276OnTimeoutIrq( void )
000000  b510              PUSH     {r4,lr}
;;;1389   {
;;;1390       
;;;1391       switch( SX1276.Settings.State )
000002  482d              LDR      r0,|L13.184|
000004  7900              LDRB     r0,[r0,#4]  ; SX1276
000006  2801              CMP      r0,#1
000008  d002              BEQ      |L13.16|
00000a  2802              CMP      r0,#2
00000c  d150              BNE      |L13.176|
00000e  e03b              B        |L13.136|
                  |L13.16|
;;;1392       {
;;;1393       case RF_RX_RUNNING:
;;;1394           if( SX1276.Settings.Modem == MODEM_FSK )
000010  4829              LDR      r0,|L13.184|
000012  7940              LDRB     r0,[r0,#5]
000014  2800              CMP      r0,#0
000016  d126              BNE      |L13.102|
;;;1395           {
;;;1396               SX1276.Settings.FskPacketHandler.PreambleDetected = false;
000018  2100              MOVS     r1,#0
00001a  4827              LDR      r0,|L13.184|
00001c  3024              ADDS     r0,r0,#0x24
00001e  7201              STRB     r1,[r0,#8]
;;;1397               SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
000020  3008              ADDS     r0,r0,#8
000022  7041              STRB     r1,[r0,#1]
;;;1398               SX1276.Settings.FskPacketHandler.NbBytes = 0;
000024  382c              SUBS     r0,r0,#0x2c
000026  8701              STRH     r1,[r0,#0x38]
;;;1399               SX1276.Settings.FskPacketHandler.Size = 0;
000028  86c1              STRH     r1,[r0,#0x36]
;;;1400   
;;;1401               // Clear Irqs
;;;1402               SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI | 
00002a  210b              MOVS     r1,#0xb
00002c  203e              MOVS     r0,#0x3e
00002e  f7fffffe          BL       SX1276Write
;;;1403                                           RF_IRQFLAGS1_PREAMBLEDETECT |
;;;1404                                           RF_IRQFLAGS1_SYNCADDRESSMATCH );
;;;1405               SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
000032  2110              MOVS     r1,#0x10
000034  203f              MOVS     r0,#0x3f
000036  f7fffffe          BL       SX1276Write
;;;1406   
;;;1407               if( SX1276.Settings.Fsk.RxContinuous == true )
00003a  481f              LDR      r0,|L13.184|
00003c  300c              ADDS     r0,r0,#0xc
00003e  7e80              LDRB     r0,[r0,#0x1a]
000040  2801              CMP      r0,#1
000042  d10a              BNE      |L13.90|
;;;1408               {
;;;1409                   // Continuous mode restart Rx chain
;;;1410                   SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
000044  200d              MOVS     r0,#0xd
000046  f7fffffe          BL       SX1276Read
00004a  2140              MOVS     r1,#0x40
00004c  4308              ORRS     r0,r0,r1
00004e  4604              MOV      r4,r0
000050  4621              MOV      r1,r4
000052  200d              MOVS     r0,#0xd
000054  f7fffffe          BL       SX1276Write
000058  e005              B        |L13.102|
                  |L13.90|
;;;1411               }
;;;1412               else
;;;1413               {
;;;1414                   SX1276.Settings.State = RF_IDLE;
00005a  2000              MOVS     r0,#0
00005c  4916              LDR      r1,|L13.184|
00005e  7108              STRB     r0,[r1,#4]
;;;1415                   TimerStop( &RxTimeoutSyncWord );
000060  4816              LDR      r0,|L13.188|
000062  f7fffffe          BL       TimerStop
                  |L13.102|
;;;1416               }
;;;1417           }
;;;1418           if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
000066  4816              LDR      r0,|L13.192|
000068  6800              LDR      r0,[r0,#0]  ; RadioEvents
00006a  2800              CMP      r0,#0
00006c  d00b              BEQ      |L13.134|
00006e  4814              LDR      r0,|L13.192|
000070  6800              LDR      r0,[r0,#0]  ; RadioEvents
000072  68c0              LDR      r0,[r0,#0xc]
000074  2800              CMP      r0,#0
000076  d006              BEQ      |L13.134|
;;;1419           {
;;;1420               RadioEvents->RxTimeout( );
000078  4911              LDR      r1,|L13.192|
00007a  6809              LDR      r1,[r1,#0]  ; RadioEvents
00007c  68c8              LDR      r0,[r1,#0xc]
00007e  4780              BLX      r0
;;;1421               DEBUG(2,"rxtimeout\r\n");
000080  a010              ADR      r0,|L13.196|
000082  f7fffffe          BL       __2printf
                  |L13.134|
;;;1422           }
;;;1423           break;
000086  e014              B        |L13.178|
                  |L13.136|
;;;1424       case RF_TX_RUNNING:
;;;1425           SX1276.Settings.State = RF_IDLE;
000088  2000              MOVS     r0,#0
00008a  490b              LDR      r1,|L13.184|
00008c  7108              STRB     r0,[r1,#4]
;;;1426           if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
00008e  480c              LDR      r0,|L13.192|
000090  6800              LDR      r0,[r0,#0]  ; RadioEvents
000092  2800              CMP      r0,#0
000094  d00b              BEQ      |L13.174|
000096  480a              LDR      r0,|L13.192|
000098  6800              LDR      r0,[r0,#0]  ; RadioEvents
00009a  6840              LDR      r0,[r0,#4]
00009c  2800              CMP      r0,#0
00009e  d006              BEQ      |L13.174|
;;;1427           {
;;;1428               RadioEvents->TxTimeout( );
0000a0  4907              LDR      r1,|L13.192|
0000a2  6809              LDR      r1,[r1,#0]  ; RadioEvents
0000a4  6848              LDR      r0,[r1,#4]
0000a6  4780              BLX      r0
;;;1429               DEBUG(2,"txtimeout\r\n");
0000a8  a009              ADR      r0,|L13.208|
0000aa  f7fffffe          BL       __2printf
                  |L13.174|
;;;1430           }
;;;1431           break;
0000ae  e000              B        |L13.178|
                  |L13.176|
;;;1432       default:
;;;1433           break;
0000b0  bf00              NOP      
                  |L13.178|
0000b2  bf00              NOP                            ;1423
;;;1434       }
;;;1435   }
0000b4  bd10              POP      {r4,pc}
;;;1436   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L13.184|
                          DCD      SX1276
                  |L13.188|
                          DCD      RxTimeoutSyncWord
                  |L13.192|
                          DCD      RadioEvents
                  |L13.196|
0000c4  72787469          DCB      "rxtimeout\r\n",0
0000c8  6d656f75
0000cc  740d0a00
                  |L13.208|
0000d0  74787469          DCB      "txtimeout\r\n",0
0000d4  6d656f75
0000d8  740d0a00

                          AREA ||i.SX1276Random||, CODE, READONLY, ALIGN=1

                  SX1276Random PROC
;;;270    
;;;271    uint32_t SX1276Random( void )
000000  b570              PUSH     {r4-r6,lr}
;;;272    {
;;;273        uint8_t i;
;;;274        uint32_t rnd = 0;
000002  2500              MOVS     r5,#0
;;;275    
;;;276        /*
;;;277         * Radio setup for random number generation 
;;;278         */
;;;279        // Set LoRa modem ON
;;;280        SX1276SetModem( MODEM_LORA );
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       SX1276SetModem
;;;281    
;;;282        // Disable LoRa modem interrupts
;;;283        SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
00000a  21ff              MOVS     r1,#0xff
00000c  2011              MOVS     r0,#0x11
00000e  f7fffffe          BL       SX1276Write
;;;284                      RFLR_IRQFLAGS_RXDONE |
;;;285                      RFLR_IRQFLAGS_PAYLOADCRCERROR |
;;;286                      RFLR_IRQFLAGS_VALIDHEADER |
;;;287                      RFLR_IRQFLAGS_TXDONE |
;;;288                      RFLR_IRQFLAGS_CADDONE |
;;;289                      RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
;;;290                      RFLR_IRQFLAGS_CADDETECTED );
;;;291    
;;;292        // Set radio in continuous reception
;;;293        SX1276SetOpMode( RF_OPMODE_RECEIVER );
000012  2005              MOVS     r0,#5
000014  f7fffffe          BL       SX1276SetOpMode
;;;294    
;;;295        for( i = 0; i < 32; i++ )
000018  2400              MOVS     r4,#0
00001a  e00b              B        |L14.52|
                  |L14.28|
;;;296        {
;;;297            DelayMs( 1 );
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       DelayMs
;;;298            // Unfiltered RSSI value reading. Only takes the LSB value
;;;299            rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
000022  202c              MOVS     r0,#0x2c
000024  f7fffffe          BL       SX1276Read
000028  07c0              LSLS     r0,r0,#31
00002a  0fc0              LSRS     r0,r0,#31
00002c  40a0              LSLS     r0,r0,r4
00002e  4305              ORRS     r5,r5,r0
000030  1c60              ADDS     r0,r4,#1              ;295
000032  b2c4              UXTB     r4,r0                 ;295
                  |L14.52|
000034  2c20              CMP      r4,#0x20              ;295
000036  dbf1              BLT      |L14.28|
;;;300        }
;;;301    
;;;302        SX1276SetSleep( );
000038  f7fffffe          BL       SX1276SetSleep
;;;303    
;;;304        return rnd;
00003c  4628              MOV      r0,r5
;;;305    }
00003e  bd70              POP      {r4-r6,pc}
;;;306    
                          ENDP


                          AREA ||i.SX1276Read||, CODE, READONLY, ALIGN=1

                  SX1276Read PROC
;;;1309   
;;;1310   uint8_t SX1276Read( uint8_t addr )
000000  b538              PUSH     {r3-r5,lr}
;;;1311   {
000002  4604              MOV      r4,r0
;;;1312       uint8_t data;
;;;1313       SX1276ReadBuffer( addr, &data, 1 );
000004  2201              MOVS     r2,#1
000006  4669              MOV      r1,sp
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SX1276ReadBuffer
;;;1314       return data;
00000e  4668              MOV      r0,sp
000010  7800              LDRB     r0,[r0,#0]
;;;1315   }
000012  bd38              POP      {r3-r5,pc}
;;;1316   
                          ENDP


                          AREA ||i.SX1276ReadBuffer||, CODE, READONLY, ALIGN=1

                  SX1276ReadBuffer PROC
;;;1334   extern bool readfifo;
;;;1335   void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
000000  b5f8              PUSH     {r3-r7,lr}
;;;1336   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;1337       uint8_t i;
;;;1338   
;;;1339       //NSS = 0;
;;;1340       GpioWrite( GPIOA,GPIO_PIN_4,GPIO_PIN_RESET );
000008  2200              MOVS     r2,#0
00000a  2110              MOVS     r1,#0x10
00000c  2009              MOVS     r0,#9
00000e  06c0              LSLS     r0,r0,#27
000010  f7fffffe          BL       GpioWrite
;;;1341   
;;;1342       SPI1_Write(addr & 0x7F );  ///发送地址命令
000014  0668              LSLS     r0,r5,#25
000016  0e40              LSRS     r0,r0,#25
000018  f7fffffe          BL       SPI1_Write
;;;1343   
;;;1344   // 	if(readfifo)
;;;1345    		DEBUG(3,"readfifo---");
;;;1346   
;;;1347       for( i = 0; i < size; i++ )
00001c  2400              MOVS     r4,#0
00001e  e004              B        |L16.42|
                  |L16.32|
;;;1348       {
;;;1349           buffer[i] = SPI1_Read( );
000020  f7fffffe          BL       SPI1_Read
000024  5530              STRB     r0,[r6,r4]
000026  1c60              ADDS     r0,r4,#1              ;1347
000028  b2c4              UXTB     r4,r0                 ;1347
                  |L16.42|
00002a  42bc              CMP      r4,r7                 ;1347
00002c  dbf8              BLT      |L16.32|
;;;1350   // 		if(readfifo)
;;;1351    		DEBUG(3,"%02x ",buffer[i]);
;;;1352       }
;;;1353   // 	if(readfifo)
;;;1354   	  DEBUG(3,"\r\n");
;;;1355   
;;;1356       //NSS = 1;
;;;1357       GpioWrite( GPIOA,GPIO_PIN_4,GPIO_PIN_SET );
00002e  2201              MOVS     r2,#1
000030  2110              MOVS     r1,#0x10
000032  2009              MOVS     r0,#9
000034  06c0              LSLS     r0,r0,#27
000036  f7fffffe          BL       GpioWrite
;;;1358   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1359   
                          ENDP


                          AREA ||i.SX1276ReadFifo||, CODE, READONLY, ALIGN=1

                  SX1276ReadFifo PROC
;;;1364   
;;;1365   void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
000000  b570              PUSH     {r4-r6,lr}
;;;1366   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1367       SX1276ReadBuffer( 0, buffer, size );
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       SX1276ReadBuffer
;;;1368   }
000010  bd70              POP      {r4-r6,pc}
;;;1369   
                          ENDP


                          AREA ||i.SX1276ReadRssi||, CODE, READONLY, ALIGN=2

                  SX1276ReadRssi PROC
;;;1205   
;;;1206   int16_t SX1276ReadRssi( RadioModems_t modem )
000000  b570              PUSH     {r4-r6,lr}
;;;1207   {
000002  4604              MOV      r4,r0
;;;1208       int16_t rssi = 0;
000004  2500              MOVS     r5,#0
;;;1209   
;;;1210       switch( modem )
000006  2c00              CMP      r4,#0
000008  d002              BEQ      |L18.16|
00000a  2c01              CMP      r4,#1
00000c  d117              BNE      |L18.62|
00000e  e005              B        |L18.28|
                  |L18.16|
;;;1211       {
;;;1212       case MODEM_FSK:
;;;1213           rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
000010  2011              MOVS     r0,#0x11
000012  f7fffffe          BL       SX1276Read
000016  1040              ASRS     r0,r0,#1
000018  4245              RSBS     r5,r0,#0
;;;1214           break;
00001a  e013              B        |L18.68|
                  |L18.28|
;;;1215       case MODEM_LORA:
;;;1216           if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
00001c  480b              LDR      r0,|L18.76|
00001e  6880              LDR      r0,[r0,#8]
000020  490b              LDR      r1,|L18.80|
000022  4288              CMP      r0,r1
000024  d905              BLS      |L18.50|
;;;1217           {
;;;1218               rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
000026  201b              MOVS     r0,#0x1b
000028  f7fffffe          BL       SX1276Read
00002c  4605              MOV      r5,r0
00002e  3d9d              SUBS     r5,r5,#0x9d
000030  e004              B        |L18.60|
                  |L18.50|
;;;1219           }
;;;1220           else
;;;1221           {
;;;1222               rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
000032  201b              MOVS     r0,#0x1b
000034  f7fffffe          BL       SX1276Read
000038  4605              MOV      r5,r0
00003a  3da4              SUBS     r5,r5,#0xa4
                  |L18.60|
;;;1223           }
;;;1224           break;
00003c  e002              B        |L18.68|
                  |L18.62|
;;;1225       default:
;;;1226           rssi = -1;
00003e  2500              MOVS     r5,#0
000040  43ed              MVNS     r5,r5
;;;1227           break;
000042  bf00              NOP      
                  |L18.68|
000044  bf00              NOP                            ;1214
;;;1228       }
;;;1229       return rssi;
000046  4628              MOV      r0,r5
;;;1230   }
000048  bd70              POP      {r4-r6,pc}
;;;1231   
                          ENDP

00004a  0000              DCW      0x0000
                  |L18.76|
                          DCD      SX1276
                  |L18.80|
                          DCD      0x3689cac0

                          AREA ||i.SX1276Reset||, CODE, READONLY, ALIGN=2

                  SX1276Reset PROC
;;;1231   
;;;1232   void SX1276Reset( void )
000000  b510              PUSH     {r4,lr}
;;;1233   {
;;;1234       // Set RESET pin to 0
;;;1235       GpioWrite( GPIOB,GPIO_PIN_13,GPIO_PIN_RESET );
000002  2200              MOVS     r2,#0
000004  2101              MOVS     r1,#1
000006  0349              LSLS     r1,r1,#13
000008  4807              LDR      r0,|L19.40|
00000a  f7fffffe          BL       GpioWrite
;;;1236   	
;;;1237       // Wait 1 ms
;;;1238       DelayMs( 1 );
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       DelayMs
;;;1239   
;;;1240       // Set SET pin to 1
;;;1241       GpioWrite( GPIOB,GPIO_PIN_13,GPIO_PIN_SET );
000014  2201              MOVS     r2,#1
000016  0351              LSLS     r1,r2,#13
000018  4803              LDR      r0,|L19.40|
00001a  f7fffffe          BL       GpioWrite
;;;1242   
;;;1243       // Wait 6 ms
;;;1244       DelayMs( 6 );
00001e  2006              MOVS     r0,#6
000020  f7fffffe          BL       DelayMs
;;;1245   }
000024  bd10              POP      {r4,pc}
;;;1246   
                          ENDP

000026  0000              DCW      0x0000
                  |L19.40|
                          DCD      0x48000400

                          AREA ||i.SX1276Send||, CODE, READONLY, ALIGN=2

                  SX1276Send PROC
;;;849    
;;;850    void SX1276Send( uint8_t *buffer, uint8_t size )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;851    {
000002  4604              MOV      r4,r0
;;;852        uint32_t txTimeout = 0;
000004  2500              MOVS     r5,#0
;;;853    
;;;854        switch( SX1276.Settings.Modem )
000006  4845              LDR      r0,|L20.284|
000008  7940              LDRB     r0,[r0,#5]
00000a  2800              CMP      r0,#0
00000c  d002              BEQ      |L20.20|
00000e  2801              CMP      r0,#1
000010  d17f              BNE      |L20.274|
000012  e036              B        |L20.130|
                  |L20.20|
;;;855        {
;;;856        case MODEM_FSK:
;;;857            {
;;;858                SX1276.Settings.FskPacketHandler.NbBytes = 0;
000014  2100              MOVS     r1,#0
000016  4841              LDR      r0,|L20.284|
000018  8701              STRH     r1,[r0,#0x38]
;;;859                SX1276.Settings.FskPacketHandler.Size = size;
00001a  4668              MOV      r0,sp
00001c  7901              LDRB     r1,[r0,#4]
00001e  483f              LDR      r0,|L20.284|
000020  86c1              STRH     r1,[r0,#0x36]
;;;860    
;;;861                if( SX1276.Settings.Fsk.FixLen == false )
000022  1d00              ADDS     r0,r0,#4
000024  7f80              LDRB     r0,[r0,#0x1e]
000026  2800              CMP      r0,#0
000028  d104              BNE      |L20.52|
;;;862                {
;;;863                    SX1276WriteFifo( ( uint8_t* )&size, 1 );
00002a  2101              MOVS     r1,#1
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       SX1276WriteFifo
000032  e004              B        |L20.62|
                  |L20.52|
;;;864                }
;;;865                else
;;;866                {
;;;867                    SX1276Write( REG_PAYLOADLENGTH, size );
000034  4668              MOV      r0,sp
000036  7901              LDRB     r1,[r0,#4]
000038  2032              MOVS     r0,#0x32
00003a  f7fffffe          BL       SX1276Write
                  |L20.62|
;;;868                }            
;;;869                
;;;870                if( ( size > 0 ) && ( size <= 64 ) )
00003e  4668              MOV      r0,sp
000040  7900              LDRB     r0,[r0,#4]
000042  2800              CMP      r0,#0
000044  dd09              BLE      |L20.90|
000046  4668              MOV      r0,sp
000048  7900              LDRB     r0,[r0,#4]
00004a  2840              CMP      r0,#0x40
00004c  dc05              BGT      |L20.90|
;;;871                {
;;;872                    SX1276.Settings.FskPacketHandler.ChunkSize = size;
00004e  4668              MOV      r0,sp
000050  7901              LDRB     r1,[r0,#4]
000052  4832              LDR      r0,|L20.284|
000054  302c              ADDS     r0,r0,#0x2c
000056  73c1              STRB     r1,[r0,#0xf]
000058  e003              B        |L20.98|
                  |L20.90|
;;;873                }
;;;874                else
;;;875                {
;;;876                    SX1276.Settings.FskPacketHandler.ChunkSize = 32;
00005a  2120              MOVS     r1,#0x20
00005c  482f              LDR      r0,|L20.284|
00005e  302c              ADDS     r0,r0,#0x2c
000060  73c1              STRB     r1,[r0,#0xf]
                  |L20.98|
;;;877                }
;;;878    
;;;879                // Write payload buffer
;;;880                SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
000062  482e              LDR      r0,|L20.284|
000064  302c              ADDS     r0,r0,#0x2c
000066  7bc1              LDRB     r1,[r0,#0xf]
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       SX1276WriteFifo
;;;881                SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
00006e  482b              LDR      r0,|L20.284|
000070  8f01              LDRH     r1,[r0,#0x38]
000072  302c              ADDS     r0,r0,#0x2c
000074  7bc0              LDRB     r0,[r0,#0xf]
000076  1808              ADDS     r0,r1,r0
000078  b281              UXTH     r1,r0
00007a  4828              LDR      r0,|L20.284|
00007c  8701              STRH     r1,[r0,#0x38]
;;;882                txTimeout = SX1276.Settings.Fsk.TxTimeout;
00007e  6a85              LDR      r5,[r0,#0x28]
;;;883            }
;;;884            break;
000080  e047              B        |L20.274|
                  |L20.130|
;;;885        case MODEM_LORA:
;;;886            {
;;;887                if( SX1276.Settings.LoRa.IqInverted == true )
000082  4826              LDR      r0,|L20.284|
000084  303c              ADDS     r0,r0,#0x3c
000086  7d40              LDRB     r0,[r0,#0x15]
000088  2801              CMP      r0,#1
00008a  d10e              BNE      |L20.170|
;;;888                {
;;;889                    SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
00008c  2033              MOVS     r0,#0x33
00008e  f7fffffe          BL       SX1276Read
000092  21be              MOVS     r1,#0xbe
000094  4008              ANDS     r0,r0,r1
000096  4606              MOV      r6,r0
000098  4631              MOV      r1,r6
00009a  2033              MOVS     r0,#0x33
00009c  f7fffffe          BL       SX1276Write
;;;890                    SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
0000a0  2119              MOVS     r1,#0x19
0000a2  203b              MOVS     r0,#0x3b
0000a4  f7fffffe          BL       SX1276Write
0000a8  e00d              B        |L20.198|
                  |L20.170|
;;;891                }
;;;892                else
;;;893                {
;;;894                    SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
0000aa  2033              MOVS     r0,#0x33
0000ac  f7fffffe          BL       SX1276Read
0000b0  21be              MOVS     r1,#0xbe
0000b2  4008              ANDS     r0,r0,r1
0000b4  1c46              ADDS     r6,r0,#1
0000b6  4631              MOV      r1,r6
0000b8  2033              MOVS     r0,#0x33
0000ba  f7fffffe          BL       SX1276Write
;;;895                    SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
0000be  211d              MOVS     r1,#0x1d
0000c0  203b              MOVS     r0,#0x3b
0000c2  f7fffffe          BL       SX1276Write
                  |L20.198|
;;;896                }      
;;;897            
;;;898                SX1276.Settings.LoRaPacketHandler.Size = size;
0000c6  4668              MOV      r0,sp
0000c8  7901              LDRB     r1,[r0,#4]
0000ca  4814              LDR      r0,|L20.284|
0000cc  3058              ADDS     r0,r0,#0x58
0000ce  7101              STRB     r1,[r0,#4]
;;;899    
;;;900                // Initializes the payload size
;;;901                SX1276Write( REG_LR_PAYLOADLENGTH, size );
0000d0  4668              MOV      r0,sp
0000d2  7901              LDRB     r1,[r0,#4]
0000d4  2022              MOVS     r0,#0x22
0000d6  f7fffffe          BL       SX1276Write
;;;902    
;;;903                // Full buffer used for Tx            
;;;904                SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
0000da  2100              MOVS     r1,#0
0000dc  200e              MOVS     r0,#0xe
0000de  f7fffffe          BL       SX1276Write
;;;905                SX1276Write( REG_LR_FIFOADDRPTR, 0 );
0000e2  2100              MOVS     r1,#0
0000e4  200d              MOVS     r0,#0xd
0000e6  f7fffffe          BL       SX1276Write
;;;906    
;;;907                // FIFO operations can not take place in Sleep mode
;;;908                if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
0000ea  2001              MOVS     r0,#1
0000ec  f7fffffe          BL       SX1276Read
0000f0  21f8              MOVS     r1,#0xf8
0000f2  4388              BICS     r0,r0,r1
0000f4  2800              CMP      r0,#0
0000f6  d104              BNE      |L20.258|
;;;909                {
;;;910                    SX1276SetStby( );
0000f8  f7fffffe          BL       SX1276SetStby
;;;911                    DelayMs( 1 );
0000fc  2001              MOVS     r0,#1
0000fe  f7fffffe          BL       DelayMs
                  |L20.258|
;;;912                }
;;;913                // Write payload buffer
;;;914                SX1276WriteFifo( buffer, size );
000102  4668              MOV      r0,sp
000104  7901              LDRB     r1,[r0,#4]
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       SX1276WriteFifo
;;;915                txTimeout = SX1276.Settings.LoRa.TxTimeout;
00010c  4803              LDR      r0,|L20.284|
00010e  6d45              LDR      r5,[r0,#0x54]
;;;916            }
;;;917            break;
000110  bf00              NOP      
                  |L20.274|
000112  bf00              NOP                            ;884
;;;918        }
;;;919    
;;;920        SX1276SetTx( txTimeout );
000114  4628              MOV      r0,r5
000116  f7fffffe          BL       SX1276SetTx
;;;921    }
00011a  bd7c              POP      {r2-r6,pc}
;;;922    
                          ENDP

                  |L20.284|
                          DCD      SX1276

                          AREA ||i.SX1276SetChannel||, CODE, READONLY, ALIGN=2

                  SX1276SetChannel PROC
;;;238    
;;;239    void SX1276SetChannel( uint32_t freq )
000000  b57c              PUSH     {r2-r6,lr}
;;;240    {
000002  4606              MOV      r6,r0
;;;241        SX1276.Settings.Channel = freq;
000004  480e              LDR      r0,|L21.64|
000006  6086              STR      r6,[r0,#8]
;;;242        freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       __aeabi_ui2d
00000e  4604              MOV      r4,r0
000010  2200              MOVS     r2,#0
000012  4b0c              LDR      r3,|L21.68|
000014  f7fffffe          BL       __aeabi_ddiv
000018  9101              STR      r1,[sp,#4]
00001a  9000              STR      r0,[sp,#0]
00001c  f7fffffe          BL       __aeabi_d2uiz
000020  4606              MOV      r6,r0
;;;243        SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
000022  0230              LSLS     r0,r6,#8
000024  0e01              LSRS     r1,r0,#24
000026  2006              MOVS     r0,#6
000028  f7fffffe          BL       SX1276Write
;;;244        SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
00002c  0430              LSLS     r0,r6,#16
00002e  0e01              LSRS     r1,r0,#24
000030  2007              MOVS     r0,#7
000032  f7fffffe          BL       SX1276Write
;;;245        SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
000036  b2f1              UXTB     r1,r6
000038  2008              MOVS     r0,#8
00003a  f7fffffe          BL       SX1276Write
;;;246    }
00003e  bd7c              POP      {r2-r6,pc}
;;;247    
                          ENDP

                  |L21.64|
                          DCD      SX1276
                  |L21.68|
                          DCD      0x404e8480

                          AREA ||i.SX1276SetMaxPayloadLength||, CODE, READONLY, ALIGN=2

                  SX1276SetMaxPayloadLength PROC
;;;1369   
;;;1370   void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
000000  b570              PUSH     {r4-r6,lr}
;;;1371   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1372       SX1276SetModem( modem );
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SX1276SetModem
;;;1373   
;;;1374       switch( modem )
00000c  2c00              CMP      r4,#0
00000e  d002              BEQ      |L22.22|
000010  2c01              CMP      r4,#1
000012  d10e              BNE      |L22.50|
000014  e008              B        |L22.40|
                  |L22.22|
;;;1375       {
;;;1376       case MODEM_FSK:
;;;1377           if( SX1276.Settings.Fsk.FixLen == false )
000016  4808              LDR      r0,|L22.56|
000018  7f80              LDRB     r0,[r0,#0x1e]
00001a  2800              CMP      r0,#0
00001c  d103              BNE      |L22.38|
;;;1378           {
;;;1379               SX1276Write( REG_PAYLOADLENGTH, max );
00001e  4629              MOV      r1,r5
000020  2032              MOVS     r0,#0x32
000022  f7fffffe          BL       SX1276Write
                  |L22.38|
;;;1380           }
;;;1381           break;
000026  e004              B        |L22.50|
                  |L22.40|
;;;1382       case MODEM_LORA:
;;;1383           SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
000028  4629              MOV      r1,r5
00002a  2023              MOVS     r0,#0x23
00002c  f7fffffe          BL       SX1276Write
;;;1384           break;
000030  bf00              NOP      
                  |L22.50|
000032  bf00              NOP                            ;1381
;;;1385       }
;;;1386   }
000034  bd70              POP      {r4-r6,pc}
;;;1387   
                          ENDP

000036  0000              DCW      0x0000
                  |L22.56|
                          DCD      SX1276+0x4

                          AREA ||i.SX1276SetModem||, CODE, READONLY, ALIGN=2

                  SX1276SetModem PROC
;;;1273   
;;;1274   void SX1276SetModem( RadioModems_t modem )
000000  b570              PUSH     {r4-r6,lr}
;;;1275   {
000002  4604              MOV      r4,r0
;;;1276       if( SX1276.Settings.Modem == modem )
000004  481d              LDR      r0,|L23.124|
000006  7940              LDRB     r0,[r0,#5]
000008  42a0              CMP      r0,r4
00000a  d100              BNE      |L23.14|
                  |L23.12|
;;;1277       {
;;;1278           return;
;;;1279       }
;;;1280   
;;;1281       SX1276.Settings.Modem = modem;
;;;1282       switch( SX1276.Settings.Modem )
;;;1283       {
;;;1284       default:
;;;1285       case MODEM_FSK:
;;;1286           SX1276SetOpMode( RF_OPMODE_SLEEP );
;;;1287   
;;;1288           SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
;;;1289   
;;;1290           SX1276Write( REG_DIOMAPPING1, 0x00 );
;;;1291   
;;;1292           SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
;;;1293   
;;;1294           break;
;;;1295       case MODEM_LORA:
;;;1296           SX1276SetOpMode( RF_OPMODE_SLEEP );
;;;1297           SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
;;;1298   
;;;1299           SX1276Write( REG_DIOMAPPING1, 0x00 );
;;;1300           SX1276Write( REG_DIOMAPPING2, 0x00 );
;;;1301           break;
;;;1302       }
;;;1303   }
00000c  bd70              POP      {r4-r6,pc}
                  |L23.14|
00000e  481b              LDR      r0,|L23.124|
000010  7144              STRB     r4,[r0,#5]            ;1281
000012  7940              LDRB     r0,[r0,#5]            ;1282
000014  2800              CMP      r0,#0                 ;1282
000016  d002              BEQ      |L23.30|
000018  2801              CMP      r0,#1                 ;1282
00001a  d015              BEQ      |L23.72|
00001c  bf00              NOP                            ;1285
                  |L23.30|
00001e  2000              MOVS     r0,#0                 ;1286
000020  f7fffffe          BL       SX1276SetOpMode
000024  2001              MOVS     r0,#1                 ;1288
000026  f7fffffe          BL       SX1276Read
00002a  0645              LSLS     r5,r0,#25             ;1288
00002c  0e6d              LSRS     r5,r5,#25             ;1288
00002e  4629              MOV      r1,r5                 ;1288
000030  2001              MOVS     r0,#1                 ;1288
000032  f7fffffe          BL       SX1276Write
000036  2100              MOVS     r1,#0                 ;1290
000038  2040              MOVS     r0,#0x40              ;1290
00003a  f7fffffe          BL       SX1276Write
00003e  2130              MOVS     r1,#0x30              ;1292
000040  2041              MOVS     r0,#0x41              ;1292
000042  f7fffffe          BL       SX1276Write
000046  e016              B        |L23.118|
                  |L23.72|
000048  2000              MOVS     r0,#0                 ;1296
00004a  f7fffffe          BL       SX1276SetOpMode
00004e  2001              MOVS     r0,#1                 ;1297
000050  f7fffffe          BL       SX1276Read
000054  0640              LSLS     r0,r0,#25             ;1297
000056  0e40              LSRS     r0,r0,#25             ;1297
000058  4605              MOV      r5,r0                 ;1297
00005a  3580              ADDS     r5,r5,#0x80           ;1297
00005c  4629              MOV      r1,r5                 ;1297
00005e  2001              MOVS     r0,#1                 ;1297
000060  f7fffffe          BL       SX1276Write
000064  2100              MOVS     r1,#0                 ;1299
000066  2040              MOVS     r0,#0x40              ;1299
000068  f7fffffe          BL       SX1276Write
00006c  2100              MOVS     r1,#0                 ;1300
00006e  2041              MOVS     r0,#0x41              ;1300
000070  f7fffffe          BL       SX1276Write
000074  bf00              NOP                            ;1301
                  |L23.118|
000076  bf00              NOP                            ;1294
000078  bf00              NOP      
00007a  e7c7              B        |L23.12|
;;;1304   
                          ENDP

                  |L23.124|
                          DCD      SX1276

                          AREA ||i.SX1276SetOpMode||, CODE, READONLY, ALIGN=2

                  SX1276SetOpMode PROC
;;;1246   
;;;1247   void SX1276SetOpMode( uint8_t opMode )
000000  b570              PUSH     {r4-r6,lr}
;;;1248   {
000002  4604              MOV      r4,r0
;;;1249       static uint8_t opModePrev = RF_OPMODE_STANDBY;
;;;1250   
;;;1251       if( opMode != opModePrev )
000004  4811              LDR      r0,|L24.76|
000006  7800              LDRB     r0,[r0,#0]  ; opModePrev
000008  4284              CMP      r4,r0
00000a  d01e              BEQ      |L24.74|
;;;1252       {
;;;1253           opModePrev = opMode;
00000c  480f              LDR      r0,|L24.76|
00000e  7004              STRB     r4,[r0,#0]
;;;1254           if( opMode == RF_OPMODE_SLEEP )
000010  2c00              CMP      r4,#0
000012  d103              BNE      |L24.28|
;;;1255           {
;;;1256               SX1276SetAntSwLowPower( true );
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       SX1276SetAntSwLowPower
00001a  e00b              B        |L24.52|
                  |L24.28|
;;;1257           }
;;;1258           else
;;;1259           {
;;;1260               SX1276SetAntSwLowPower( false );
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       SX1276SetAntSwLowPower
;;;1261               if( opMode == RF_OPMODE_TRANSMITTER )
000022  2c03              CMP      r4,#3
000024  d103              BNE      |L24.46|
;;;1262               {
;;;1263                    SX1276SetAntSw( 1 );
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       SX1276SetAntSw
00002c  e002              B        |L24.52|
                  |L24.46|
;;;1264               }
;;;1265               else
;;;1266               {
;;;1267                    SX1276SetAntSw( 0 );
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       SX1276SetAntSw
                  |L24.52|
;;;1268               }
;;;1269           }
;;;1270           SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
000034  2001              MOVS     r0,#1
000036  f7fffffe          BL       SX1276Read
00003a  21f8              MOVS     r1,#0xf8
00003c  4008              ANDS     r0,r0,r1
00003e  4320              ORRS     r0,r0,r4
000040  4605              MOV      r5,r0
000042  4629              MOV      r1,r5
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       SX1276Write
                  |L24.74|
;;;1271       }
;;;1272   }
00004a  bd70              POP      {r4-r6,pc}
;;;1273   
                          ENDP

                  |L24.76|
                          DCD      opModePrev

                          AREA ||i.SX1276SetRx||, CODE, READONLY, ALIGN=2

                  SX1276SetRx PROC
;;;940    
;;;941    void SX1276SetRx( uint32_t timeout )
000000  b5f0              PUSH     {r4-r7,lr}
;;;942    {
000002  b093              SUB      sp,sp,#0x4c
000004  4604              MOV      r4,r0
;;;943        bool rxContinuous = false;
000006  2500              MOVS     r5,#0
;;;944        
;;;945        switch( SX1276.Settings.Modem )
000008  48d2              LDR      r0,|L25.852|
00000a  7940              LDRB     r0,[r0,#5]
00000c  2800              CMP      r0,#0
00000e  d002              BEQ      |L25.22|
000010  2801              CMP      r0,#1
000012  d12e              BNE      |L25.114|
000014  e02e              B        |L25.116|
                  |L25.22|
;;;946        {
;;;947        case MODEM_FSK:
;;;948            {
;;;949                rxContinuous = SX1276.Settings.Fsk.RxContinuous;
000016  48cf              LDR      r0,|L25.852|
000018  300c              ADDS     r0,r0,#0xc
00001a  7e85              LDRB     r5,[r0,#0x1a]
;;;950                
;;;951                // DIO0=PayloadReady
;;;952                // DIO1=FifoLevel
;;;953                // DIO2=SyncAddr
;;;954                // DIO3=FifoEmpty
;;;955                // DIO4=Preamble
;;;956                // DIO5=ModeReady
;;;957                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
00001c  2040              MOVS     r0,#0x40
00001e  f7fffffe          BL       SX1276Read
000022  0680              LSLS     r0,r0,#26
000024  0e80              LSRS     r0,r0,#26
000026  21c3              MOVS     r1,#0xc3
000028  4008              ANDS     r0,r0,r1
00002a  210c              MOVS     r1,#0xc
00002c  4308              ORRS     r0,r0,r1
00002e  4606              MOV      r6,r0
000030  4631              MOV      r1,r6
000032  2040              MOVS     r0,#0x40
000034  f7fffffe          BL       SX1276Write
;;;958                                                                                RF_DIOMAPPING1_DIO1_MASK &
;;;959                                                                                RF_DIOMAPPING1_DIO2_MASK ) |
;;;960                                                                                RF_DIOMAPPING1_DIO0_00 |
;;;961                                                                                RF_DIOMAPPING1_DIO1_00 |
;;;962                                                                                RF_DIOMAPPING1_DIO2_11 );
;;;963                
;;;964                SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
000038  2041              MOVS     r0,#0x41
00003a  f7fffffe          BL       SX1276Read
00003e  0680              LSLS     r0,r0,#26
000040  0e80              LSRS     r0,r0,#26
000042  21fe              MOVS     r1,#0xfe
000044  4008              ANDS     r0,r0,r1
000046  4606              MOV      r6,r0
000048  36c1              ADDS     r6,r6,#0xc1
00004a  4631              MOV      r1,r6
00004c  2041              MOVS     r0,#0x41
00004e  f7fffffe          BL       SX1276Write
;;;965                                                                                RF_DIOMAPPING2_MAP_MASK ) | 
;;;966                                                                                RF_DIOMAPPING2_DIO4_11 |
;;;967                                                                                RF_DIOMAPPING2_MAP_PREAMBLEDETECT );
;;;968                
;;;969                SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
000052  2035              MOVS     r0,#0x35
000054  f7fffffe          BL       SX1276Read
000058  0681              LSLS     r1,r0,#26
00005a  0e89              LSRS     r1,r1,#26
00005c  48bd              LDR      r0,|L25.852|
00005e  302c              ADDS     r0,r0,#0x2c
000060  7381              STRB     r1,[r0,#0xe]
;;;970                
;;;971                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
000062  2100              MOVS     r1,#0
000064  3808              SUBS     r0,r0,#8
000066  7201              STRB     r1,[r0,#8]
;;;972                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
000068  3008              ADDS     r0,r0,#8
00006a  7041              STRB     r1,[r0,#1]
;;;973                SX1276.Settings.FskPacketHandler.NbBytes = 0;
00006c  382c              SUBS     r0,r0,#0x2c
00006e  8701              STRH     r1,[r0,#0x38]
;;;974                SX1276.Settings.FskPacketHandler.Size = 0;
000070  86c1              STRH     r1,[r0,#0x36]
                  |L25.114|
;;;975            }
;;;976            break;
000072  e105              B        |L25.640|
                  |L25.116|
;;;977        case MODEM_LORA:
;;;978            {
;;;979                if( SX1276.Settings.LoRa.IqInverted == true )
000074  48b7              LDR      r0,|L25.852|
000076  303c              ADDS     r0,r0,#0x3c
000078  7d40              LDRB     r0,[r0,#0x15]
00007a  2801              CMP      r0,#1
00007c  d10f              BNE      |L25.158|
;;;980                {
;;;981                    SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
00007e  2033              MOVS     r0,#0x33
000080  f7fffffe          BL       SX1276Read
000084  21be              MOVS     r1,#0xbe
000086  4008              ANDS     r0,r0,r1
000088  4606              MOV      r6,r0
00008a  3641              ADDS     r6,r6,#0x41
00008c  4631              MOV      r1,r6
00008e  2033              MOVS     r0,#0x33
000090  f7fffffe          BL       SX1276Write
;;;982                    SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
000094  2119              MOVS     r1,#0x19
000096  203b              MOVS     r0,#0x3b
000098  f7fffffe          BL       SX1276Write
00009c  e00d              B        |L25.186|
                  |L25.158|
;;;983                }
;;;984                else
;;;985                {
;;;986                    SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
00009e  2033              MOVS     r0,#0x33
0000a0  f7fffffe          BL       SX1276Read
0000a4  21be              MOVS     r1,#0xbe
0000a6  4008              ANDS     r0,r0,r1
0000a8  1c46              ADDS     r6,r0,#1
0000aa  4631              MOV      r1,r6
0000ac  2033              MOVS     r0,#0x33
0000ae  f7fffffe          BL       SX1276Write
;;;987                    SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
0000b2  211d              MOVS     r1,#0x1d
0000b4  203b              MOVS     r0,#0x3b
0000b6  f7fffffe          BL       SX1276Write
                  |L25.186|
;;;988                }         
;;;989    
;;;990                // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
;;;991                if( SX1276.Settings.LoRa.Bandwidth < 9 )
0000ba  48a6              LDR      r0,|L25.852|
0000bc  6c00              LDR      r0,[r0,#0x40]
0000be  2809              CMP      r0,#9
0000c0  d27e              BCS      |L25.448|
;;;992                {
;;;993                    SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
0000c2  2031              MOVS     r0,#0x31
0000c4  f7fffffe          BL       SX1276Read
0000c8  0646              LSLS     r6,r0,#25
0000ca  0e76              LSRS     r6,r6,#25
0000cc  4631              MOV      r1,r6
0000ce  2031              MOVS     r0,#0x31
0000d0  f7fffffe          BL       SX1276Write
;;;994                    SX1276Write( REG_LR_TEST30, 0x00 );
0000d4  2100              MOVS     r1,#0
0000d6  2030              MOVS     r0,#0x30
0000d8  f7fffffe          BL       SX1276Write
;;;995                    switch( SX1276.Settings.LoRa.Bandwidth )
0000dc  489d              LDR      r0,|L25.852|
0000de  6c00              LDR      r0,[r0,#0x40]
0000e0  0003              MOVS     r3,r0
0000e2  f7fffffe          BL       __ARM_common_switch8
0000e6  0906              DCB      0x09,0x06
0000e8  1b30455a          DCB      0x1b,0x30,0x45,0x5a
0000ec  71868b90          DCB      0x71,0x86,0x8b,0x90
0000f0  9500              DCB      0x95,0x00
;;;996                    {
;;;997                    case 0: // 7.8 kHz
;;;998                        SX1276Write( REG_LR_TEST2F, 0x48 );
0000f2  2148              MOVS     r1,#0x48
0000f4  202f              MOVS     r0,#0x2f
0000f6  f7fffffe          BL       SX1276Write
;;;999                        SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
0000fa  4996              LDR      r1,|L25.852|
0000fc  6888              LDR      r0,[r1,#8]
0000fe  f7fffffe          BL       __aeabi_ui2d
000102  4606              MOV      r6,r0
000104  2200              MOVS     r2,#0
000106  4b94              LDR      r3,|L25.856|
000108  f7fffffe          BL       __aeabi_dadd
00010c  9111              STR      r1,[sp,#0x44]
00010e  9010              STR      r0,[sp,#0x40]
000110  f7fffffe          BL       __aeabi_d2uiz
000114  9012              STR      r0,[sp,#0x48]
000116  f7fffffe          BL       SX1276SetChannel
;;;1000                       break;
00011a  e079              B        |L25.528|
;;;1001                   case 1: // 10.4 kHz
;;;1002                       SX1276Write( REG_LR_TEST2F, 0x44 );
00011c  2144              MOVS     r1,#0x44
00011e  202f              MOVS     r0,#0x2f
000120  f7fffffe          BL       SX1276Write
;;;1003                       SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
000124  498b              LDR      r1,|L25.852|
000126  6888              LDR      r0,[r1,#8]
000128  f7fffffe          BL       __aeabi_ui2d
00012c  4606              MOV      r6,r0
00012e  2200              MOVS     r2,#0
000130  4b8a              LDR      r3,|L25.860|
000132  f7fffffe          BL       __aeabi_dadd
000136  9111              STR      r1,[sp,#0x44]
000138  9010              STR      r0,[sp,#0x40]
00013a  f7fffffe          BL       __aeabi_d2uiz
00013e  9012              STR      r0,[sp,#0x48]
000140  f7fffffe          BL       SX1276SetChannel
;;;1004                       break;
000144  e064              B        |L25.528|
;;;1005                   case 2: // 15.6 kHz
;;;1006                       SX1276Write( REG_LR_TEST2F, 0x44 );
000146  2144              MOVS     r1,#0x44
000148  202f              MOVS     r0,#0x2f
00014a  f7fffffe          BL       SX1276Write
;;;1007                       SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
00014e  4981              LDR      r1,|L25.852|
000150  6888              LDR      r0,[r1,#8]
000152  f7fffffe          BL       __aeabi_ui2d
000156  4606              MOV      r6,r0
000158  2200              MOVS     r2,#0
00015a  4b81              LDR      r3,|L25.864|
00015c  f7fffffe          BL       __aeabi_dadd
000160  9111              STR      r1,[sp,#0x44]
000162  9010              STR      r0,[sp,#0x40]
000164  f7fffffe          BL       __aeabi_d2uiz
000168  9012              STR      r0,[sp,#0x48]
00016a  f7fffffe          BL       SX1276SetChannel
;;;1008                       break;
00016e  e04f              B        |L25.528|
;;;1009                   case 3: // 20.8 kHz
;;;1010                       SX1276Write( REG_LR_TEST2F, 0x44 );
000170  2144              MOVS     r1,#0x44
000172  202f              MOVS     r0,#0x2f
000174  f7fffffe          BL       SX1276Write
;;;1011                       SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
000178  4976              LDR      r1,|L25.852|
00017a  6888              LDR      r0,[r1,#8]
00017c  f7fffffe          BL       __aeabi_ui2d
000180  2200              MOVS     r2,#0
000182  4b78              LDR      r3,|L25.868|
000184  9111              STR      r1,[sp,#0x44]
000186  9010              STR      r0,[sp,#0x40]
000188  f7fffffe          BL       __aeabi_dadd
00018c  4606              MOV      r6,r0
00018e  f7fffffe          BL       __aeabi_d2uiz
000192  9012              STR      r0,[sp,#0x48]
000194  f7fffffe          BL       SX1276SetChannel
;;;1012                       break;
000198  e03a              B        |L25.528|
;;;1013                   case 4: // 31.2 kHz
;;;1014                       SX1276Write( REG_LR_TEST2F, 0x44 );
00019a  2144              MOVS     r1,#0x44
00019c  202f              MOVS     r0,#0x2f
00019e  f7fffffe          BL       SX1276Write
;;;1015                       SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
0001a2  496c              LDR      r1,|L25.852|
0001a4  6888              LDR      r0,[r1,#8]
0001a6  f7fffffe          BL       __aeabi_ui2d
0001aa  4606              MOV      r6,r0
0001ac  2200              MOVS     r2,#0
0001ae  4b6e              LDR      r3,|L25.872|
0001b0  f7fffffe          BL       __aeabi_dadd
0001b4  9111              STR      r1,[sp,#0x44]
0001b6  9010              STR      r0,[sp,#0x40]
0001b8  f7fffffe          BL       __aeabi_d2uiz
0001bc  9012              STR      r0,[sp,#0x48]
0001be  e000              B        |L25.450|
                  |L25.448|
0001c0  e027              B        |L25.530|
                  |L25.450|
0001c2  f7fffffe          BL       SX1276SetChannel
;;;1016                       break;
0001c6  e023              B        |L25.528|
;;;1017                   case 5: // 41.4 kHz
;;;1018                       SX1276Write( REG_LR_TEST2F, 0x44 );
0001c8  2144              MOVS     r1,#0x44
0001ca  202f              MOVS     r0,#0x2f
0001cc  f7fffffe          BL       SX1276Write
;;;1019                       SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
0001d0  4960              LDR      r1,|L25.852|
0001d2  6888              LDR      r0,[r1,#8]
0001d4  f7fffffe          BL       __aeabi_ui2d
0001d8  4606              MOV      r6,r0
0001da  2200              MOVS     r2,#0
0001dc  4b63              LDR      r3,|L25.876|
0001de  f7fffffe          BL       __aeabi_dadd
0001e2  9111              STR      r1,[sp,#0x44]
0001e4  9010              STR      r0,[sp,#0x40]
0001e6  f7fffffe          BL       __aeabi_d2uiz
0001ea  9012              STR      r0,[sp,#0x48]
0001ec  f7fffffe          BL       SX1276SetChannel
;;;1020                       break;
0001f0  e00e              B        |L25.528|
;;;1021                   case 6: // 62.5 kHz
;;;1022                       SX1276Write( REG_LR_TEST2F, 0x40 );
0001f2  2140              MOVS     r1,#0x40
0001f4  202f              MOVS     r0,#0x2f
0001f6  f7fffffe          BL       SX1276Write
;;;1023                       break;
0001fa  e009              B        |L25.528|
;;;1024                   case 7: // 125 kHz
;;;1025                       SX1276Write( REG_LR_TEST2F, 0x40 );
0001fc  2140              MOVS     r1,#0x40
0001fe  202f              MOVS     r0,#0x2f
000200  f7fffffe          BL       SX1276Write
;;;1026                       break;
000204  e004              B        |L25.528|
;;;1027                   case 8: // 250 kHz
;;;1028                       SX1276Write( REG_LR_TEST2F, 0x40 );
000206  2140              MOVS     r1,#0x40
000208  202f              MOVS     r0,#0x2f
00020a  f7fffffe          BL       SX1276Write
;;;1029                       break;
00020e  bf00              NOP      
                  |L25.528|
000210  e009              B        |L25.550|
                  |L25.530|
;;;1030                   }
;;;1031               }
;;;1032               else
;;;1033               {
;;;1034                   SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
000212  2031              MOVS     r0,#0x31
000214  f7fffffe          BL       SX1276Read
000218  2180              MOVS     r1,#0x80
00021a  4308              ORRS     r0,r0,r1
00021c  4606              MOV      r6,r0
00021e  4631              MOV      r1,r6
000220  2031              MOVS     r0,#0x31
000222  f7fffffe          BL       SX1276Write
                  |L25.550|
;;;1035               }
;;;1036   
;;;1037               rxContinuous = SX1276.Settings.LoRa.RxContinuous;
000226  484b              LDR      r0,|L25.852|
000228  303c              ADDS     r0,r0,#0x3c
00022a  7d85              LDRB     r5,[r0,#0x16]
;;;1038               
;;;1039               if( SX1276.Settings.LoRa.FreqHopOn == true )
00022c  7cc0              LDRB     r0,[r0,#0x13]
00022e  2801              CMP      r0,#1
000230  d110              BNE      |L25.596|
;;;1040               {
;;;1041                   SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
000232  211d              MOVS     r1,#0x1d
000234  2011              MOVS     r0,#0x11
000236  f7fffffe          BL       SX1276Write
;;;1042                                                     //RFLR_IRQFLAGS_RXDONE |
;;;1043                                                     //RFLR_IRQFLAGS_PAYLOADCRCERROR |
;;;1044                                                     RFLR_IRQFLAGS_VALIDHEADER |
;;;1045                                                     RFLR_IRQFLAGS_TXDONE |
;;;1046                                                     RFLR_IRQFLAGS_CADDONE |
;;;1047                                                     //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
;;;1048                                                     RFLR_IRQFLAGS_CADDETECTED );
;;;1049                                      
;;;1050                   // DIO0=RxDone, DIO2=FhssChangeChannel
;;;1051                   SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
00023a  2040              MOVS     r0,#0x40
00023c  f7fffffe          BL       SX1276Read
000240  0680              LSLS     r0,r0,#26
000242  0e80              LSRS     r0,r0,#26
000244  21f3              MOVS     r1,#0xf3
000246  4008              ANDS     r0,r0,r1
000248  4606              MOV      r6,r0
00024a  4631              MOV      r1,r6
00024c  2040              MOVS     r0,#0x40
00024e  f7fffffe          BL       SX1276Write
000252  e00c              B        |L25.622|
                  |L25.596|
;;;1052               }
;;;1053               else
;;;1054               {
;;;1055                   SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
000254  211f              MOVS     r1,#0x1f
000256  2011              MOVS     r0,#0x11
000258  f7fffffe          BL       SX1276Write
;;;1056                                                     //RFLR_IRQFLAGS_RXDONE |
;;;1057                                                     //RFLR_IRQFLAGS_PAYLOADCRCERROR |
;;;1058                                                     RFLR_IRQFLAGS_VALIDHEADER |
;;;1059                                                     RFLR_IRQFLAGS_TXDONE |
;;;1060                                                     RFLR_IRQFLAGS_CADDONE |
;;;1061                                                     RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
;;;1062                                                     RFLR_IRQFLAGS_CADDETECTED );
;;;1063                                                 
;;;1064                   // DIO0=RxDone
;;;1065                   SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
00025c  2040              MOVS     r0,#0x40
00025e  f7fffffe          BL       SX1276Read
000262  0686              LSLS     r6,r0,#26
000264  0eb6              LSRS     r6,r6,#26
000266  4631              MOV      r1,r6
000268  2040              MOVS     r0,#0x40
00026a  f7fffffe          BL       SX1276Write
                  |L25.622|
;;;1066   							
;;;1067               }
;;;1068               SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
00026e  2100              MOVS     r1,#0
000270  200f              MOVS     r0,#0xf
000272  f7fffffe          BL       SX1276Write
;;;1069               SX1276Write( REG_LR_FIFOADDRPTR, 0 );
000276  2100              MOVS     r1,#0
000278  200d              MOVS     r0,#0xd
00027a  f7fffffe          BL       SX1276Write
;;;1070           }
;;;1071           break;
00027e  bf00              NOP      
                  |L25.640|
000280  bf00              NOP                            ;976
;;;1072       }
;;;1073   
;;;1074       memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
000282  21ff              MOVS     r1,#0xff
000284  3101              ADDS     r1,#1
000286  483a              LDR      r0,|L25.880|
000288  f7fffffe          BL       __aeabi_memclr4
;;;1075   
;;;1076       SX1276.Settings.State = RF_RX_RUNNING;
00028c  2001              MOVS     r0,#1
00028e  4931              LDR      r1,|L25.852|
000290  7108              STRB     r0,[r1,#4]
;;;1077       if( timeout != 0 )
000292  2c00              CMP      r4,#0
000294  d006              BEQ      |L25.676|
;;;1078       {
;;;1079           TimerSetValue( &RxTimeoutTimer, timeout );
000296  4621              MOV      r1,r4
000298  4836              LDR      r0,|L25.884|
00029a  f7fffffe          BL       TimerSetValue
;;;1080           TimerStart( &RxTimeoutTimer );
00029e  4835              LDR      r0,|L25.884|
0002a0  f7fffffe          BL       TimerStart
                  |L25.676|
;;;1081       }
;;;1082   
;;;1083       if( SX1276.Settings.Modem == MODEM_FSK )
0002a4  482b              LDR      r0,|L25.852|
0002a6  7940              LDRB     r0,[r0,#5]
0002a8  2800              CMP      r0,#0
0002aa  d148              BNE      |L25.830|
;;;1084       {
;;;1085           SX1276SetOpMode( RF_OPMODE_RECEIVER );
0002ac  2005              MOVS     r0,#5
0002ae  f7fffffe          BL       SX1276SetOpMode
;;;1086           
;;;1087           if( rxContinuous == false )
0002b2  2d00              CMP      r5,#0
0002b4  d14c              BNE      |L25.848|
;;;1088           {
;;;1089               TimerSetValue( &RxTimeoutSyncWord, ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
0002b6  4927              LDR      r1,|L25.852|
0002b8  69c8              LDR      r0,[r1,#0x1c]
0002ba  f7fffffe          BL       __aeabi_ui2d
0002be  910d              STR      r1,[sp,#0x34]
0002c0  900c              STR      r0,[sp,#0x30]
0002c2  2027              MOVS     r0,#0x27
0002c4  f7fffffe          BL       SX1276Read
0002c8  21f8              MOVS     r1,#0xf8
0002ca  4388              BICS     r0,r0,r1
0002cc  9001              STR      r0,[sp,#4]
0002ce  f7fffffe          BL       __aeabi_i2d
0002d2  4606              MOV      r6,r0
0002d4  2200              MOVS     r2,#0
0002d6  4b28              LDR      r3,|L25.888|
0002d8  f7fffffe          BL       __aeabi_dadd
0002dc  9105              STR      r1,[sp,#0x14]
0002de  9004              STR      r0,[sp,#0x10]
0002e0  491c              LDR      r1,|L25.852|
0002e2  8c08              LDRH     r0,[r1,#0x20]
0002e4  f7fffffe          BL       __aeabi_ui2d
0002e8  9103              STR      r1,[sp,#0xc]
0002ea  9002              STR      r0,[sp,#8]
0002ec  9b05              LDR      r3,[sp,#0x14]
0002ee  9a04              LDR      r2,[sp,#0x10]
0002f0  f7fffffe          BL       __aeabi_dadd
0002f4  2200              MOVS     r2,#0
0002f6  4b21              LDR      r3,|L25.892|
0002f8  9107              STR      r1,[sp,#0x1c]
0002fa  9006              STR      r0,[sp,#0x18]
0002fc  f7fffffe          BL       __aeabi_dadd
000300  2200              MOVS     r2,#0
000302  4b1f              LDR      r3,|L25.896|
000304  9109              STR      r1,[sp,#0x24]
000306  9008              STR      r0,[sp,#0x20]
000308  f7fffffe          BL       __aeabi_dmul
00030c  910b              STR      r1,[sp,#0x2c]
00030e  900a              STR      r0,[sp,#0x28]
000310  9b0d              LDR      r3,[sp,#0x34]
000312  9a0c              LDR      r2,[sp,#0x30]
000314  f7fffffe          BL       __aeabi_ddiv
000318  2200              MOVS     r2,#0
00031a  4b1a              LDR      r3,|L25.900|
00031c  910f              STR      r1,[sp,#0x3c]
00031e  900e              STR      r0,[sp,#0x38]
000320  f7fffffe          BL       __aeabi_dmul
000324  9111              STR      r1,[sp,#0x44]
000326  9010              STR      r0,[sp,#0x40]
000328  f7fffffe          BL       __aeabi_d2uiz
00032c  4601              MOV      r1,r0
00032e  9012              STR      r0,[sp,#0x48]
000330  4815              LDR      r0,|L25.904|
000332  f7fffffe          BL       TimerSetValue
;;;1090                                                            ( ( SX1276Read( REG_SYNCCONFIG ) &
;;;1091                                                               ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
;;;1092                                                            1.0 ) + 10.0 ) /
;;;1093                                                           ( double )SX1276.Settings.Fsk.Datarate ) * 1e6 );
;;;1094               TimerStart( &RxTimeoutSyncWord );
000336  4814              LDR      r0,|L25.904|
000338  f7fffffe          BL       TimerStart
00033c  e008              B        |L25.848|
                  |L25.830|
;;;1095           }
;;;1096       }
;;;1097       else
;;;1098       {
;;;1099           if( rxContinuous == true )
00033e  2d01              CMP      r5,#1
000340  d103              BNE      |L25.842|
;;;1100           {
;;;1101               SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
000342  2005              MOVS     r0,#5
000344  f7fffffe          BL       SX1276SetOpMode
000348  e002              B        |L25.848|
                  |L25.842|
;;;1102           }
;;;1103           else
;;;1104           {
;;;1105               SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
00034a  2006              MOVS     r0,#6
00034c  f7fffffe          BL       SX1276SetOpMode
                  |L25.848|
;;;1106           }
;;;1107       }
;;;1108   }
000350  b013              ADD      sp,sp,#0x4c
000352  bdf0              POP      {r4-r7,pc}
;;;1109   
                          ENDP

                  |L25.852|
                          DCD      SX1276
                  |L25.856|
                          DCD      0x40be8200
                  |L25.860|
                          DCD      0x40c45a00
                  |L25.864|
                          DCD      0x40ce8200
                  |L25.868|
                          DCD      0x40d45780
                  |L25.872|
                          DCD      0x40de8480
                  |L25.876|
                          DCD      0x40e458c0
                  |L25.880|
                          DCD      RxTxBuffer
                  |L25.884|
                          DCD      RxTimeoutTimer
                  |L25.888|
                          DCD      0x3ff00000
                  |L25.892|
                          DCD      0x40240000
                  |L25.896|
                          DCD      0x40200000
                  |L25.900|
                          DCD      0x412e8480
                  |L25.904|
                          DCD      RxTimeoutSyncWord

                          AREA ||i.SX1276SetRxConfig||, CODE, READONLY, ALIGN=2

                  SX1276SetRxConfig PROC
;;;366    
;;;367    void SX1276SetRxConfig( RadioModems_t modem, uint32_t bandwidth,
000000  b5ff              PUSH     {r0-r7,lr}
;;;368                             uint32_t datarate, uint8_t coderate,
;;;369                             uint32_t bandwidthAfc, uint16_t preambleLen,
;;;370                             uint16_t symbTimeout, bool fixLen,
;;;371                             uint8_t payloadLen,
;;;372                             bool crcOn, bool freqHopOn, uint8_t hopPeriod,
;;;373                             bool iqInverted, bool rxContinuous )
;;;374    {
000002  b085              SUB      sp,sp,#0x14
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
000008  9f11              LDR      r7,[sp,#0x44]
00000a  9e0f              LDR      r6,[sp,#0x3c]
;;;375        SX1276SetModem( modem );
00000c  9805              LDR      r0,[sp,#0x14]
00000e  f7fffffe          BL       SX1276SetModem
;;;376    
;;;377        switch( modem )
000012  9805              LDR      r0,[sp,#0x14]
000014  2800              CMP      r0,#0
000016  d002              BEQ      |L26.30|
000018  2801              CMP      r0,#1
00001a  d163              BNE      |L26.228|
00001c  e063              B        |L26.230|
                  |L26.30|
;;;378        {
;;;379        case MODEM_FSK:
;;;380            {
;;;381                SX1276.Settings.Fsk.Bandwidth = bandwidth;
00001e  489d              LDR      r0,|L26.660|
000020  6145              STR      r5,[r0,#0x14]
;;;382                SX1276.Settings.Fsk.Datarate = datarate;
000022  61c4              STR      r4,[r0,#0x1c]
;;;383                SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
000024  990e              LDR      r1,[sp,#0x38]
000026  6181              STR      r1,[r0,#0x18]
;;;384                SX1276.Settings.Fsk.FixLen = fixLen;
000028  1d00              ADDS     r0,r0,#4
00002a  7787              STRB     r7,[r0,#0x1e]
;;;385                SX1276.Settings.Fsk.PayloadLen = payloadLen;
00002c  9912              LDR      r1,[sp,#0x48]
00002e  77c1              STRB     r1,[r0,#0x1f]
;;;386                SX1276.Settings.Fsk.CrcOn = crcOn;
000030  3008              ADDS     r0,r0,#8
000032  9913              LDR      r1,[sp,#0x4c]
000034  7601              STRB     r1,[r0,#0x18]
;;;387                SX1276.Settings.Fsk.IqInverted = iqInverted;
000036  9916              LDR      r1,[sp,#0x58]
000038  7641              STRB     r1,[r0,#0x19]
;;;388                SX1276.Settings.Fsk.RxContinuous = rxContinuous;
00003a  9917              LDR      r1,[sp,#0x5c]
00003c  7681              STRB     r1,[r0,#0x1a]
;;;389                SX1276.Settings.Fsk.PreambleLen = preambleLen;
00003e  380c              SUBS     r0,r0,#0xc
000040  8406              STRH     r6,[r0,#0x20]
;;;390                
;;;391                datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       __aeabi_ui2d
000048  4602              MOV      r2,r0
00004a  460b              MOV      r3,r1
00004c  9101              STR      r1,[sp,#4]
00004e  9000              STR      r0,[sp,#0]
000050  2000              MOVS     r0,#0
000052  4991              LDR      r1,|L26.664|
000054  f7fffffe          BL       __aeabi_ddiv
000058  9103              STR      r1,[sp,#0xc]
00005a  9002              STR      r0,[sp,#8]
00005c  f7fffffe          BL       __aeabi_d2uiz
000060  b284              UXTH     r4,r0
;;;392                SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
000062  0a21              LSRS     r1,r4,#8
000064  2002              MOVS     r0,#2
000066  f7fffffe          BL       SX1276Write
;;;393                SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
00006a  b2e1              UXTB     r1,r4
00006c  2003              MOVS     r0,#3
00006e  f7fffffe          BL       SX1276Write
;;;394    
;;;395                SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       GetFskBandwidthRegValue
000078  4601              MOV      r1,r0
00007a  9003              STR      r0,[sp,#0xc]
00007c  2012              MOVS     r0,#0x12
00007e  f7fffffe          BL       SX1276Write
;;;396                SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
000082  980e              LDR      r0,[sp,#0x38]
000084  f7fffffe          BL       GetFskBandwidthRegValue
000088  4601              MOV      r1,r0
00008a  9003              STR      r0,[sp,#0xc]
00008c  2013              MOVS     r0,#0x13
00008e  f7fffffe          BL       SX1276Write
;;;397    
;;;398                SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
000092  0430              LSLS     r0,r6,#16
000094  0e01              LSRS     r1,r0,#24
000096  2025              MOVS     r0,#0x25
000098  f7fffffe          BL       SX1276Write
;;;399                SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
00009c  b2f1              UXTB     r1,r6
00009e  2026              MOVS     r0,#0x26
0000a0  f7fffffe          BL       SX1276Write
;;;400                
;;;401                if( fixLen == 1 )
0000a4  2f01              CMP      r7,#1
0000a6  d104              BNE      |L26.178|
;;;402                {
;;;403                    SX1276Write( REG_PAYLOADLENGTH, payloadLen );
0000a8  2032              MOVS     r0,#0x32
0000aa  9912              LDR      r1,[sp,#0x48]
0000ac  f7fffffe          BL       SX1276Write
0000b0  e003              B        |L26.186|
                  |L26.178|
;;;404                }
;;;405                else
;;;406                {
;;;407                    SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum 
0000b2  21ff              MOVS     r1,#0xff
0000b4  2032              MOVS     r0,#0x32
0000b6  f7fffffe          BL       SX1276Write
                  |L26.186|
;;;408                }
;;;409                
;;;410                SX1276Write( REG_PACKETCONFIG1,
0000ba  2030              MOVS     r0,#0x30
0000bc  f7fffffe          BL       SX1276Read
0000c0  21ef              MOVS     r1,#0xef
0000c2  4008              ANDS     r0,r0,r1
0000c4  0640              LSLS     r0,r0,#25
0000c6  0e40              LSRS     r0,r0,#25
0000c8  2f01              CMP      r7,#1
0000ca  d101              BNE      |L26.208|
;;;411                             ( SX1276Read( REG_PACKETCONFIG1 ) & 
;;;412                               RF_PACKETCONFIG1_CRC_MASK &
;;;413                               RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
;;;414                               ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
0000cc  2100              MOVS     r1,#0
0000ce  e000              B        |L26.210|
                  |L26.208|
0000d0  2180              MOVS     r1,#0x80
                  |L26.210|
0000d2  4308              ORRS     r0,r0,r1
0000d4  9913              LDR      r1,[sp,#0x4c]
0000d6  0109              LSLS     r1,r1,#4
0000d8  4308              ORRS     r0,r0,r1
0000da  4601              MOV      r1,r0
0000dc  9003              STR      r0,[sp,#0xc]
0000de  2030              MOVS     r0,#0x30
0000e0  f7fffffe          BL       SX1276Write
                  |L26.228|
;;;415                               ( crcOn << 4 ) );
;;;416            }
;;;417            break;
0000e4  e0d3              B        |L26.654|
                  |L26.230|
;;;418        case MODEM_LORA:
;;;419            {
;;;420                if( bandwidth > 2 )
0000e6  2d02              CMP      r5,#2
0000e8  d901              BLS      |L26.238|
;;;421                {
;;;422                    // Fatal error: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
;;;423                    while( 1 );
0000ea  bf00              NOP      
                  |L26.236|
0000ec  e7fe              B        |L26.236|
                  |L26.238|
;;;424                }
;;;425                bandwidth += 7;
0000ee  1ded              ADDS     r5,r5,#7
;;;426                SX1276.Settings.LoRa.Bandwidth = bandwidth;
0000f0  4868              LDR      r0,|L26.660|
0000f2  6405              STR      r5,[r0,#0x40]
;;;427                SX1276.Settings.LoRa.Datarate = datarate;
0000f4  6444              STR      r4,[r0,#0x44]
;;;428                SX1276.Settings.LoRa.Coderate = coderate;
0000f6  303c              ADDS     r0,r0,#0x3c
0000f8  9908              LDR      r1,[sp,#0x20]
0000fa  7341              STRB     r1,[r0,#0xd]
;;;429                SX1276.Settings.LoRa.PreambleLen = preambleLen;
0000fc  81c6              STRH     r6,[r0,#0xe]
;;;430                SX1276.Settings.LoRa.FixLen = fixLen;
0000fe  7407              STRB     r7,[r0,#0x10]
;;;431                SX1276.Settings.LoRa.PayloadLen = payloadLen;
000100  9912              LDR      r1,[sp,#0x48]
000102  7441              STRB     r1,[r0,#0x11]
;;;432                SX1276.Settings.LoRa.CrcOn = crcOn;
000104  9913              LDR      r1,[sp,#0x4c]
000106  7481              STRB     r1,[r0,#0x12]
;;;433                SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
000108  9914              LDR      r1,[sp,#0x50]
00010a  74c1              STRB     r1,[r0,#0x13]
;;;434                SX1276.Settings.LoRa.HopPeriod = hopPeriod;
00010c  9915              LDR      r1,[sp,#0x54]
00010e  7501              STRB     r1,[r0,#0x14]
;;;435                SX1276.Settings.LoRa.IqInverted = iqInverted;
000110  9916              LDR      r1,[sp,#0x58]
000112  7541              STRB     r1,[r0,#0x15]
;;;436                SX1276.Settings.LoRa.RxContinuous = rxContinuous;
000114  9917              LDR      r1,[sp,#0x5c]
000116  7581              STRB     r1,[r0,#0x16]
;;;437    
;;;438                if( datarate > 12 )
000118  2c0c              CMP      r4,#0xc
00011a  d901              BLS      |L26.288|
;;;439                {
;;;440                    datarate = 12;
00011c  240c              MOVS     r4,#0xc
00011e  e002              B        |L26.294|
                  |L26.288|
;;;441                }
;;;442                else if( datarate < 6 )
000120  2c06              CMP      r4,#6
000122  d200              BCS      |L26.294|
;;;443                {
;;;444                    datarate = 6;
000124  2406              MOVS     r4,#6
                  |L26.294|
;;;445                }
;;;446            
;;;447                if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
000126  2d07              CMP      r5,#7
000128  d103              BNE      |L26.306|
00012a  2c0b              CMP      r4,#0xb
00012c  d005              BEQ      |L26.314|
00012e  2c0c              CMP      r4,#0xc
000130  d003              BEQ      |L26.314|
                  |L26.306|
;;;448                    ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
000132  2d08              CMP      r5,#8
000134  d106              BNE      |L26.324|
000136  2c0c              CMP      r4,#0xc
000138  d104              BNE      |L26.324|
                  |L26.314|
;;;449                {
;;;450                    SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
00013a  2101              MOVS     r1,#1
00013c  4855              LDR      r0,|L26.660|
00013e  303c              ADDS     r0,r0,#0x3c
000140  7301              STRB     r1,[r0,#0xc]
000142  e003              B        |L26.332|
                  |L26.324|
;;;451                }
;;;452                else
;;;453                {
;;;454                    SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
000144  2100              MOVS     r1,#0
000146  4853              LDR      r0,|L26.660|
000148  303c              ADDS     r0,r0,#0x3c
00014a  7301              STRB     r1,[r0,#0xc]
                  |L26.332|
;;;455                }
;;;456    
;;;457                SX1276Write( REG_LR_MODEMCONFIG1, 
00014c  201d              MOVS     r0,#0x1d
00014e  f7fffffe          BL       SX1276Read
000152  0700              LSLS     r0,r0,#28
000154  0f00              LSRS     r0,r0,#28
000156  21f0              MOVS     r1,#0xf0
000158  4008              ANDS     r0,r0,r1
00015a  0129              LSLS     r1,r5,#4
00015c  4308              ORRS     r0,r0,r1
00015e  9908              LDR      r1,[sp,#0x20]
000160  0049              LSLS     r1,r1,#1
000162  4308              ORRS     r0,r0,r1
000164  4338              ORRS     r0,r0,r7
000166  b2c0              UXTB     r0,r0
000168  4601              MOV      r1,r0
00016a  9003              STR      r0,[sp,#0xc]
00016c  201d              MOVS     r0,#0x1d
00016e  f7fffffe          BL       SX1276Write
;;;458                             ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
;;;459                               RFLR_MODEMCONFIG1_BW_MASK &
;;;460                               RFLR_MODEMCONFIG1_CODINGRATE_MASK &
;;;461                               RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK ) |
;;;462                               ( bandwidth << 4 ) | ( coderate << 1 ) | 
;;;463                               fixLen );
;;;464                            
;;;465                SX1276Write( REG_LR_MODEMCONFIG2,
000172  201e              MOVS     r0,#0x1e
000174  f7fffffe          BL       SX1276Read
000178  0700              LSLS     r0,r0,#28
00017a  0f00              LSRS     r0,r0,#28
00017c  21f8              MOVS     r1,#0xf8
00017e  4008              ANDS     r0,r0,r1
000180  0121              LSLS     r1,r4,#4
000182  4308              ORRS     r0,r0,r1
000184  9913              LDR      r1,[sp,#0x4c]
000186  0089              LSLS     r1,r1,#2
000188  4308              ORRS     r0,r0,r1
00018a  9910              LDR      r1,[sp,#0x40]
00018c  1209              ASRS     r1,r1,#8
00018e  22fc              MOVS     r2,#0xfc
000190  4391              BICS     r1,r1,r2
000192  4308              ORRS     r0,r0,r1
000194  b2c0              UXTB     r0,r0
000196  4601              MOV      r1,r0
000198  9003              STR      r0,[sp,#0xc]
00019a  201e              MOVS     r0,#0x1e
00019c  f7fffffe          BL       SX1276Write
;;;466                             ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
;;;467                               RFLR_MODEMCONFIG2_SF_MASK &
;;;468                               RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
;;;469                               RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
;;;470                               ( datarate << 4 ) | ( crcOn << 2 ) |
;;;471                               ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
;;;472    
;;;473                SX1276Write( REG_LR_MODEMCONFIG3, 
0001a0  2026              MOVS     r0,#0x26
0001a2  f7fffffe          BL       SX1276Read
0001a6  21f7              MOVS     r1,#0xf7
0001a8  4008              ANDS     r0,r0,r1
0001aa  493a              LDR      r1,|L26.660|
0001ac  313c              ADDS     r1,r1,#0x3c
0001ae  7b09              LDRB     r1,[r1,#0xc]
0001b0  00c9              LSLS     r1,r1,#3
0001b2  4308              ORRS     r0,r0,r1
0001b4  b2c0              UXTB     r0,r0
0001b6  4601              MOV      r1,r0
0001b8  9003              STR      r0,[sp,#0xc]
0001ba  2026              MOVS     r0,#0x26
0001bc  f7fffffe          BL       SX1276Write
;;;474                             ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
;;;475                               RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
;;;476                               ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
;;;477    
;;;478                SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
0001c0  9810              LDR      r0,[sp,#0x40]
0001c2  b2c1              UXTB     r1,r0
0001c4  201f              MOVS     r0,#0x1f
0001c6  f7fffffe          BL       SX1276Write
;;;479                
;;;480                SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
0001ca  0430              LSLS     r0,r6,#16
0001cc  0e01              LSRS     r1,r0,#24
0001ce  2020              MOVS     r0,#0x20
0001d0  f7fffffe          BL       SX1276Write
;;;481                SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
0001d4  b2f1              UXTB     r1,r6
0001d6  2021              MOVS     r0,#0x21
0001d8  f7fffffe          BL       SX1276Write
;;;482    
;;;483                if( fixLen == 1 )
0001dc  2f01              CMP      r7,#1
0001de  d103              BNE      |L26.488|
;;;484                {
;;;485                    SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
0001e0  2022              MOVS     r0,#0x22
0001e2  9912              LDR      r1,[sp,#0x48]
0001e4  f7fffffe          BL       SX1276Write
                  |L26.488|
;;;486                }
;;;487    
;;;488                if( SX1276.Settings.LoRa.FreqHopOn == true )
0001e8  482a              LDR      r0,|L26.660|
0001ea  303c              ADDS     r0,r0,#0x3c
0001ec  7cc0              LDRB     r0,[r0,#0x13]
0001ee  2801              CMP      r0,#1
0001f0  d110              BNE      |L26.532|
;;;489                {
;;;490                    SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
0001f2  2044              MOVS     r0,#0x44
0001f4  f7fffffe          BL       SX1276Read
0001f8  0640              LSLS     r0,r0,#25
0001fa  0e40              LSRS     r0,r0,#25
0001fc  3080              ADDS     r0,r0,#0x80
0001fe  4601              MOV      r1,r0
000200  9003              STR      r0,[sp,#0xc]
000202  2044              MOVS     r0,#0x44
000204  f7fffffe          BL       SX1276Write
;;;491                    SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
000208  4822              LDR      r0,|L26.660|
00020a  303c              ADDS     r0,r0,#0x3c
00020c  7d01              LDRB     r1,[r0,#0x14]
00020e  2024              MOVS     r0,#0x24
000210  f7fffffe          BL       SX1276Write
                  |L26.532|
;;;492                }
;;;493    
;;;494                if( ( bandwidth == 9 ) && ( RF_MID_BAND_THRESH ) )
000214  2d09              CMP      r5,#9
000216  d109              BNE      |L26.556|
000218  bf00              NOP      
;;;495                {
;;;496                    // ERRATA 2.1 - Sensitivity Optimization with a 500 kHz Bandwidth 
;;;497                    SX1276Write( REG_LR_TEST36, 0x02 );
00021a  2102              MOVS     r1,#2
00021c  2036              MOVS     r0,#0x36
00021e  f7fffffe          BL       SX1276Write
;;;498                    SX1276Write( REG_LR_TEST3A, 0x64 );
000222  2164              MOVS     r1,#0x64
000224  203a              MOVS     r0,#0x3a
000226  f7fffffe          BL       SX1276Write
00022a  e00e              B        |L26.586|
                  |L26.556|
;;;499                }
;;;500                else if( bandwidth == 9 )
00022c  2d09              CMP      r5,#9
00022e  d108              BNE      |L26.578|
;;;501                {
;;;502                    // ERRATA 2.1 - Sensitivity Optimization with a 500 kHz Bandwidth
;;;503                    SX1276Write( REG_LR_TEST36, 0x02 );
000230  2102              MOVS     r1,#2
000232  2036              MOVS     r0,#0x36
000234  f7fffffe          BL       SX1276Write
;;;504                    SX1276Write( REG_LR_TEST3A, 0x7F );
000238  217f              MOVS     r1,#0x7f
00023a  203a              MOVS     r0,#0x3a
00023c  f7fffffe          BL       SX1276Write
000240  e003              B        |L26.586|
                  |L26.578|
;;;505                }
;;;506                else
;;;507                {
;;;508                    // ERRATA 2.1 - Sensitivity Optimization with a 500 kHz Bandwidth
;;;509                    SX1276Write( REG_LR_TEST36, 0x03 );
000242  2103              MOVS     r1,#3
000244  2036              MOVS     r0,#0x36
000246  f7fffffe          BL       SX1276Write
                  |L26.586|
;;;510                }
;;;511                
;;;512                if( datarate == 6 )
00024a  2c06              CMP      r4,#6
00024c  d10f              BNE      |L26.622|
;;;513                {
;;;514                    SX1276Write( REG_LR_DETECTOPTIMIZE, 
00024e  2031              MOVS     r0,#0x31
000250  f7fffffe          BL       SX1276Read
000254  21f8              MOVS     r1,#0xf8
000256  4008              ANDS     r0,r0,r1
000258  1d40              ADDS     r0,r0,#5
00025a  4601              MOV      r1,r0
00025c  9003              STR      r0,[sp,#0xc]
00025e  2031              MOVS     r0,#0x31
000260  f7fffffe          BL       SX1276Write
;;;515                                 ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
;;;516                                   RFLR_DETECTIONOPTIMIZE_MASK ) |
;;;517                                   RFLR_DETECTIONOPTIMIZE_SF6 );
;;;518                    SX1276Write( REG_LR_DETECTIONTHRESHOLD, 
000264  210c              MOVS     r1,#0xc
000266  2037              MOVS     r0,#0x37
000268  f7fffffe          BL       SX1276Write
00026c  e00e              B        |L26.652|
                  |L26.622|
;;;519                                 RFLR_DETECTIONTHRESH_SF6 );
;;;520                }
;;;521                else
;;;522                {
;;;523                    SX1276Write( REG_LR_DETECTOPTIMIZE,
00026e  2031              MOVS     r0,#0x31
000270  f7fffffe          BL       SX1276Read
000274  21f8              MOVS     r1,#0xf8
000276  4008              ANDS     r0,r0,r1
000278  1cc0              ADDS     r0,r0,#3
00027a  4601              MOV      r1,r0
00027c  9003              STR      r0,[sp,#0xc]
00027e  2031              MOVS     r0,#0x31
000280  f7fffffe          BL       SX1276Write
;;;524                                 ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
;;;525                                 RFLR_DETECTIONOPTIMIZE_MASK ) |
;;;526                                 RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12 );
;;;527                    SX1276Write( REG_LR_DETECTIONTHRESHOLD, 
000284  210a              MOVS     r1,#0xa
000286  2037              MOVS     r0,#0x37
000288  f7fffffe          BL       SX1276Write
                  |L26.652|
;;;528                                 RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
;;;529                }
;;;530            }
;;;531            break;
00028c  bf00              NOP      
                  |L26.654|
00028e  bf00              NOP                            ;417
;;;532        }
;;;533    }
000290  b009              ADD      sp,sp,#0x24
000292  bdf0              POP      {r4-r7,pc}
;;;534    
                          ENDP

                  |L26.660|
                          DCD      SX1276
                  |L26.664|
                          DCD      0x417e8480

                          AREA ||i.SX1276SetSleep||, CODE, READONLY, ALIGN=2

                  SX1276SetSleep PROC
;;;922    
;;;923    void SX1276SetSleep( void )
000000  b510              PUSH     {r4,lr}
;;;924    {
;;;925        TimerStop( &RxTimeoutTimer );
000002  4806              LDR      r0,|L27.28|
000004  f7fffffe          BL       TimerStop
;;;926        TimerStop( &TxTimeoutTimer );
000008  4805              LDR      r0,|L27.32|
00000a  f7fffffe          BL       TimerStop
;;;927    
;;;928        SX1276SetOpMode( RF_OPMODE_SLEEP );
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       SX1276SetOpMode
;;;929        SX1276.Settings.State = RF_IDLE;
000014  2000              MOVS     r0,#0
000016  4903              LDR      r1,|L27.36|
000018  7108              STRB     r0,[r1,#4]
;;;930    }
00001a  bd10              POP      {r4,pc}
;;;931    
                          ENDP

                  |L27.28|
                          DCD      RxTimeoutTimer
                  |L27.32|
                          DCD      TxTimeoutTimer
                  |L27.36|
                          DCD      SX1276

                          AREA ||i.SX1276SetStby||, CODE, READONLY, ALIGN=2

                  SX1276SetStby PROC
;;;931    
;;;932    void SX1276SetStby( void )
000000  b510              PUSH     {r4,lr}
;;;933    {
;;;934        TimerStop( &RxTimeoutTimer );
000002  4806              LDR      r0,|L28.28|
000004  f7fffffe          BL       TimerStop
;;;935        TimerStop( &TxTimeoutTimer );
000008  4805              LDR      r0,|L28.32|
00000a  f7fffffe          BL       TimerStop
;;;936    
;;;937        SX1276SetOpMode( RF_OPMODE_STANDBY );
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       SX1276SetOpMode
;;;938        SX1276.Settings.State = RF_IDLE;
000014  2000              MOVS     r0,#0
000016  4903              LDR      r1,|L28.36|
000018  7108              STRB     r0,[r1,#4]
;;;939    }
00001a  bd10              POP      {r4,pc}
;;;940    
                          ENDP

                  |L28.28|
                          DCD      RxTimeoutTimer
                  |L28.32|
                          DCD      TxTimeoutTimer
                  |L28.36|
                          DCD      SX1276

                          AREA ||i.SX1276SetTx||, CODE, READONLY, ALIGN=2

                  SX1276SetTx PROC
;;;1109   
;;;1110   void SX1276SetTx( uint32_t timeout )
000000  b570              PUSH     {r4-r6,lr}
;;;1111   {
000002  4604              MOV      r4,r0
;;;1112       TimerSetValue( &TxTimeoutTimer, timeout );
000004  4621              MOV      r1,r4
000006  482f              LDR      r0,|L29.196|
000008  f7fffffe          BL       TimerSetValue
;;;1113   
;;;1114       switch( SX1276.Settings.Modem )
00000c  482e              LDR      r0,|L29.200|
00000e  7940              LDRB     r0,[r0,#5]
000010  2800              CMP      r0,#0
000012  d002              BEQ      |L29.26|
000014  2801              CMP      r0,#1
000016  d149              BNE      |L29.172|
000018  e021              B        |L29.94|
                  |L29.26|
;;;1115       {
;;;1116       case MODEM_FSK:
;;;1117           {
;;;1118               // DIO0=PacketSent
;;;1119               // DIO1=FifoEmpty
;;;1120               // DIO2=FifoFull
;;;1121               // DIO3=FifoEmpty
;;;1122               // DIO4=LowBat
;;;1123               // DIO5=ModeReady
;;;1124               SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
00001a  2040              MOVS     r0,#0x40
00001c  f7fffffe          BL       SX1276Read
000020  0680              LSLS     r0,r0,#26
000022  0e80              LSRS     r0,r0,#26
000024  21c3              MOVS     r1,#0xc3
000026  4008              ANDS     r0,r0,r1
000028  4605              MOV      r5,r0
00002a  3510              ADDS     r5,r5,#0x10
00002c  4629              MOV      r1,r5
00002e  2040              MOVS     r0,#0x40
000030  f7fffffe          BL       SX1276Write
;;;1125                                                                               RF_DIOMAPPING1_DIO1_MASK &
;;;1126                                                                               RF_DIOMAPPING1_DIO2_MASK ) |
;;;1127                                                                               RF_DIOMAPPING1_DIO1_01 );
;;;1128   
;;;1129               SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
000034  2041              MOVS     r0,#0x41
000036  f7fffffe          BL       SX1276Read
00003a  0680              LSLS     r0,r0,#26
00003c  0e80              LSRS     r0,r0,#26
00003e  21fe              MOVS     r1,#0xfe
000040  4008              ANDS     r0,r0,r1
000042  4605              MOV      r5,r0
000044  4629              MOV      r1,r5
000046  2041              MOVS     r0,#0x41
000048  f7fffffe          BL       SX1276Write
;;;1130                                                                               RF_DIOMAPPING2_MAP_MASK ) );
;;;1131               SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
00004c  2035              MOVS     r0,#0x35
00004e  f7fffffe          BL       SX1276Read
000052  0681              LSLS     r1,r0,#26
000054  0e89              LSRS     r1,r1,#26
000056  481c              LDR      r0,|L29.200|
000058  302c              ADDS     r0,r0,#0x2c
00005a  7381              STRB     r1,[r0,#0xe]
;;;1132           }
;;;1133           break;
00005c  e026              B        |L29.172|
                  |L29.94|
;;;1134       case MODEM_LORA:
;;;1135           {
;;;1136               if( SX1276.Settings.LoRa.FreqHopOn == true )
00005e  481a              LDR      r0,|L29.200|
000060  303c              ADDS     r0,r0,#0x3c
000062  7cc0              LDRB     r0,[r0,#0x13]
000064  2801              CMP      r0,#1
000066  d111              BNE      |L29.140|
;;;1137               {
;;;1138                   SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
000068  21f5              MOVS     r1,#0xf5
00006a  2011              MOVS     r0,#0x11
00006c  f7fffffe          BL       SX1276Write
;;;1139                                                     RFLR_IRQFLAGS_RXDONE |
;;;1140                                                     RFLR_IRQFLAGS_PAYLOADCRCERROR |
;;;1141                                                     RFLR_IRQFLAGS_VALIDHEADER |
;;;1142                                                     //RFLR_IRQFLAGS_TXDONE |
;;;1143                                                     RFLR_IRQFLAGS_CADDONE |
;;;1144                                                     //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
;;;1145                                                     RFLR_IRQFLAGS_CADDETECTED );
;;;1146                                                 
;;;1147                   // DIO0=TxDone, DIO2=FhssChangeChannel
;;;1148                   SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
000070  2040              MOVS     r0,#0x40
000072  f7fffffe          BL       SX1276Read
000076  0680              LSLS     r0,r0,#26
000078  0e80              LSRS     r0,r0,#26
00007a  21f3              MOVS     r1,#0xf3
00007c  4008              ANDS     r0,r0,r1
00007e  4605              MOV      r5,r0
000080  3540              ADDS     r5,r5,#0x40
000082  4629              MOV      r1,r5
000084  2040              MOVS     r0,#0x40
000086  f7fffffe          BL       SX1276Write
00008a  e00e              B        |L29.170|
                  |L29.140|
;;;1149               }
;;;1150               else
;;;1151               {
;;;1152                   SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
00008c  21f7              MOVS     r1,#0xf7
00008e  2011              MOVS     r0,#0x11
000090  f7fffffe          BL       SX1276Write
;;;1153                                                     RFLR_IRQFLAGS_RXDONE |
;;;1154                                                     RFLR_IRQFLAGS_PAYLOADCRCERROR |
;;;1155                                                     RFLR_IRQFLAGS_VALIDHEADER |
;;;1156                                                     //RFLR_IRQFLAGS_TXDONE |
;;;1157                                                     RFLR_IRQFLAGS_CADDONE |
;;;1158                                                     RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
;;;1159                                                     RFLR_IRQFLAGS_CADDETECTED );
;;;1160   
;;;1161                   // DIO0=TxDone
;;;1162                   SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
000094  2040              MOVS     r0,#0x40
000096  f7fffffe          BL       SX1276Read
00009a  0680              LSLS     r0,r0,#26
00009c  0e80              LSRS     r0,r0,#26
00009e  4605              MOV      r5,r0
0000a0  3540              ADDS     r5,r5,#0x40
0000a2  4629              MOV      r1,r5
0000a4  2040              MOVS     r0,#0x40
0000a6  f7fffffe          BL       SX1276Write
                  |L29.170|
;;;1163               }
;;;1164           }
;;;1165           break;
0000aa  bf00              NOP      
                  |L29.172|
0000ac  bf00              NOP                            ;1133
;;;1166       }
;;;1167   
;;;1168       SX1276.Settings.State = RF_TX_RUNNING;
0000ae  2002              MOVS     r0,#2
0000b0  4905              LDR      r1,|L29.200|
0000b2  7108              STRB     r0,[r1,#4]
;;;1169       TimerStart( &TxTimeoutTimer );
0000b4  4803              LDR      r0,|L29.196|
0000b6  f7fffffe          BL       TimerStart
;;;1170       SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
0000ba  2003              MOVS     r0,#3
0000bc  f7fffffe          BL       SX1276SetOpMode
;;;1171   }
0000c0  bd70              POP      {r4-r6,pc}
;;;1172   
                          ENDP

0000c2  0000              DCW      0x0000
                  |L29.196|
                          DCD      TxTimeoutTimer
                  |L29.200|
                          DCD      SX1276

                          AREA ||i.SX1276SetTxConfig||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  SX1276SetTxConfig PROC
;;;534    
;;;535    void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev, 
000000  b5ff              PUSH     {r0-r7,lr}
;;;536                            uint32_t bandwidth, uint32_t datarate,
;;;537                            uint8_t coderate, uint16_t preambleLen,
;;;538                            bool fixLen, bool crcOn, bool freqHopOn, 
;;;539                            uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
;;;540    {
000002  b085              SUB      sp,sp,#0x14
000004  460c              MOV      r4,r1
000006  461e              MOV      r6,r3
000008  9d0e              LDR      r5,[sp,#0x38]
;;;541        uint8_t paConfig = 0;
00000a  2700              MOVS     r7,#0
;;;542        uint8_t paDac = 0;
00000c  2000              MOVS     r0,#0
00000e  9004              STR      r0,[sp,#0x10]
;;;543    
;;;544        SX1276SetModem( modem );
000010  9805              LDR      r0,[sp,#0x14]
000012  f7fffffe          BL       SX1276SetModem
;;;545        
;;;546        paConfig = SX1276Read( REG_PACONFIG );
000016  2009              MOVS     r0,#9
000018  f7fffffe          BL       SX1276Read
00001c  4607              MOV      r7,r0
;;;547        paDac = SX1276Read( REG_PADAC );
00001e  204d              MOVS     r0,#0x4d
000020  f7fffffe          BL       SX1276Read
000024  9004              STR      r0,[sp,#0x10]
;;;548    
;;;549        paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
000026  49be              LDR      r1,|L30.800|
000028  6888              LDR      r0,[r1,#8]
00002a  f7fffffe          BL       SX1276GetPaSelect
00002e  0679              LSLS     r1,r7,#25
000030  0e49              LSRS     r1,r1,#25
000032  4308              ORRS     r0,r0,r1
000034  4607              MOV      r7,r0
;;;550        paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
000036  4638              MOV      r0,r7
000038  218f              MOVS     r1,#0x8f
00003a  4008              ANDS     r0,r0,r1
00003c  4607              MOV      r7,r0
00003e  3770              ADDS     r7,r7,#0x70
;;;551    
;;;552        if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
000040  2080              MOVS     r0,#0x80
000042  4038              ANDS     r0,r0,r7
000044  2880              CMP      r0,#0x80
000046  d12f              BNE      |L30.168|
;;;553        {
;;;554            if( power > 17 )
000048  2c11              CMP      r4,#0x11
00004a  dd05              BLE      |L30.88|
;;;555            {
;;;556                paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
00004c  21f8              MOVS     r1,#0xf8
00004e  9804              LDR      r0,[sp,#0x10]
000050  4008              ANDS     r0,r0,r1
000052  1dc0              ADDS     r0,r0,#7
000054  9004              STR      r0,[sp,#0x10]
000056  e004              B        |L30.98|
                  |L30.88|
;;;557                DEBUG(3,"paDac--1 = 0x%02x\r\n",paDac);
;;;558            }
;;;559            else
;;;560            {
;;;561                paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
000058  21f8              MOVS     r1,#0xf8
00005a  9804              LDR      r0,[sp,#0x10]
00005c  4008              ANDS     r0,r0,r1
00005e  1d00              ADDS     r0,r0,#4
000060  9004              STR      r0,[sp,#0x10]
                  |L30.98|
;;;562                DEBUG(3,"paDac--2 = 0x%02x\r\n",paDac);
;;;563            }
;;;564            if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
000062  9804              LDR      r0,[sp,#0x10]
000064  0740              LSLS     r0,r0,#29
000066  0f40              LSRS     r0,r0,#29
000068  2807              CMP      r0,#7
00006a  d10e              BNE      |L30.138|
;;;565            {
;;;566                if( power < 5 )
00006c  2c05              CMP      r4,#5
00006e  da00              BGE      |L30.114|
;;;567                {
;;;568                    power = 5;
000070  2405              MOVS     r4,#5
                  |L30.114|
;;;569                }
;;;570                if( power > 20 )
000072  2c14              CMP      r4,#0x14
000074  dd00              BLE      |L30.120|
;;;571                {
;;;572                    power = 20;
000076  2414              MOVS     r4,#0x14
                  |L30.120|
;;;573                }
;;;574                paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
000078  4638              MOV      r0,r7
00007a  21f0              MOVS     r1,#0xf0
00007c  4008              ANDS     r0,r0,r1
00007e  1f61              SUBS     r1,r4,#5
000080  0709              LSLS     r1,r1,#28
000082  0f09              LSRS     r1,r1,#28
000084  4308              ORRS     r0,r0,r1
000086  4607              MOV      r7,r0
000088  e01e              B        |L30.200|
                  |L30.138|
;;;575                DEBUG(3,"power--1 = 0x%02x\r\n", paConfig);  ///17---255
;;;576            }
;;;577            else
;;;578            {
;;;579                if( power < 2 )
00008a  2c02              CMP      r4,#2
00008c  da00              BGE      |L30.144|
;;;580                {
;;;581                    power = 2;
00008e  2402              MOVS     r4,#2
                  |L30.144|
;;;582                }
;;;583                if( power > 17 )
000090  2c11              CMP      r4,#0x11
000092  dd00              BLE      |L30.150|
;;;584                {
;;;585                    power = 17;
000094  2411              MOVS     r4,#0x11
                  |L30.150|
;;;586                }
;;;587                paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
000096  4638              MOV      r0,r7
000098  21f0              MOVS     r1,#0xf0
00009a  4008              ANDS     r0,r0,r1
00009c  1ea1              SUBS     r1,r4,#2
00009e  0709              LSLS     r1,r1,#28
0000a0  0f09              LSRS     r1,r1,#28
0000a2  4308              ORRS     r0,r0,r1
0000a4  4607              MOV      r7,r0
0000a6  e00f              B        |L30.200|
                  |L30.168|
;;;588    					  DEBUG(3,"power---2 = 0x%02x\r\n", paConfig);  ///17---255
;;;589            }
;;;590        }
;;;591        else
;;;592        {
;;;593            if( power < -1 )
0000a8  2000              MOVS     r0,#0
0000aa  43c0              MVNS     r0,r0
0000ac  4284              CMP      r4,r0
0000ae  da00              BGE      |L30.178|
;;;594            {
;;;595                power = -1;
0000b0  4604              MOV      r4,r0
                  |L30.178|
;;;596            }
;;;597            if( power > 14 )
0000b2  2c0e              CMP      r4,#0xe
0000b4  dd00              BLE      |L30.184|
;;;598            {
;;;599                power = 14;
0000b6  240e              MOVS     r4,#0xe
                  |L30.184|
;;;600            }
;;;601            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
0000b8  4638              MOV      r0,r7
0000ba  21f0              MOVS     r1,#0xf0
0000bc  4008              ANDS     r0,r0,r1
0000be  1c61              ADDS     r1,r4,#1
0000c0  0709              LSLS     r1,r1,#28
0000c2  0f09              LSRS     r1,r1,#28
0000c4  4308              ORRS     r0,r0,r1
0000c6  4607              MOV      r7,r0
                  |L30.200|
;;;602        }
;;;603        
;;;604        SX1276Write( REG_PACONFIG, paConfig );
0000c8  4639              MOV      r1,r7
0000ca  2009              MOVS     r0,#9
0000cc  f7fffffe          BL       SX1276Write
;;;605       
;;;606    		DEBUG(2,"paDac = 0x%02x\r\n",paDac);
0000d0  a094              ADR      r0,|L30.804|
0000d2  9904              LDR      r1,[sp,#0x10]
0000d4  f7fffffe          BL       __2printf
;;;607       
;;;608        SX1276Write( REG_PADAC, paDac ); ///当PA = 20时 paDac = 0x87，符合开启高PA要求
0000d8  204d              MOVS     r0,#0x4d
0000da  9904              LDR      r1,[sp,#0x10]
0000dc  f7fffffe          BL       SX1276Write
;;;609    
;;;610        switch( modem )
0000e0  9805              LDR      r0,[sp,#0x14]
0000e2  2800              CMP      r0,#0
0000e4  d002              BEQ      |L30.236|
0000e6  2801              CMP      r0,#1
0000e8  d165              BNE      |L30.438|
0000ea  e065              B        |L30.440|
                  |L30.236|
;;;611        {
;;;612        case MODEM_FSK:
;;;613            {
;;;614                SX1276.Settings.Fsk.Power = power;
0000ec  488c              LDR      r0,|L30.800|
0000ee  7304              STRB     r4,[r0,#0xc]
;;;615                SX1276.Settings.Fsk.Fdev = fdev;
0000f0  9907              LDR      r1,[sp,#0x1c]
0000f2  6101              STR      r1,[r0,#0x10]
;;;616                SX1276.Settings.Fsk.Bandwidth = bandwidth;
0000f4  6146              STR      r6,[r0,#0x14]
;;;617                SX1276.Settings.Fsk.Datarate = datarate;
0000f6  61c5              STR      r5,[r0,#0x1c]
;;;618                SX1276.Settings.Fsk.PreambleLen = preambleLen;
0000f8  9910              LDR      r1,[sp,#0x40]
0000fa  8401              STRH     r1,[r0,#0x20]
;;;619                SX1276.Settings.Fsk.FixLen = fixLen;
0000fc  1d00              ADDS     r0,r0,#4
0000fe  9911              LDR      r1,[sp,#0x44]
000100  7781              STRB     r1,[r0,#0x1e]
;;;620                SX1276.Settings.Fsk.CrcOn = crcOn;
000102  3008              ADDS     r0,r0,#8
000104  9912              LDR      r1,[sp,#0x48]
000106  7601              STRB     r1,[r0,#0x18]
;;;621                SX1276.Settings.Fsk.IqInverted = iqInverted;
000108  9915              LDR      r1,[sp,#0x54]
00010a  7641              STRB     r1,[r0,#0x19]
;;;622                SX1276.Settings.Fsk.TxTimeout = timeout;
00010c  380c              SUBS     r0,r0,#0xc
00010e  9916              LDR      r1,[sp,#0x58]
000110  6281              STR      r1,[r0,#0x28]
;;;623                
;;;624                fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
000112  9807              LDR      r0,[sp,#0x1c]
000114  f7fffffe          BL       __aeabi_ui2d
000118  2200              MOVS     r2,#0
00011a  4b87              LDR      r3,|L30.824|
00011c  9101              STR      r1,[sp,#4]
00011e  9000              STR      r0,[sp,#0]
000120  f7fffffe          BL       __aeabi_ddiv
000124  9103              STR      r1,[sp,#0xc]
000126  9002              STR      r0,[sp,#8]
000128  f7fffffe          BL       __aeabi_d2uiz
00012c  b280              UXTH     r0,r0
00012e  9007              STR      r0,[sp,#0x1c]
;;;625                SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
000130  9807              LDR      r0,[sp,#0x1c]
000132  0a01              LSRS     r1,r0,#8
000134  2004              MOVS     r0,#4
000136  f7fffffe          BL       SX1276Write
;;;626                SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
00013a  9807              LDR      r0,[sp,#0x1c]
00013c  b2c1              UXTB     r1,r0
00013e  2005              MOVS     r0,#5
000140  f7fffffe          BL       SX1276Write
;;;627    
;;;628                datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
000144  4628              MOV      r0,r5
000146  f7fffffe          BL       __aeabi_ui2d
00014a  4602              MOV      r2,r0
00014c  460b              MOV      r3,r1
00014e  9101              STR      r1,[sp,#4]
000150  9000              STR      r0,[sp,#0]
000152  2000              MOVS     r0,#0
000154  4979              LDR      r1,|L30.828|
000156  f7fffffe          BL       __aeabi_ddiv
00015a  9103              STR      r1,[sp,#0xc]
00015c  9002              STR      r0,[sp,#8]
00015e  f7fffffe          BL       __aeabi_d2uiz
000162  b285              UXTH     r5,r0
;;;629                SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
000164  0a29              LSRS     r1,r5,#8
000166  2002              MOVS     r0,#2
000168  f7fffffe          BL       SX1276Write
;;;630                SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
00016c  b2e9              UXTB     r1,r5
00016e  2003              MOVS     r0,#3
000170  f7fffffe          BL       SX1276Write
;;;631    
;;;632                SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
000174  9810              LDR      r0,[sp,#0x40]
000176  0400              LSLS     r0,r0,#16
000178  0e01              LSRS     r1,r0,#24
00017a  2025              MOVS     r0,#0x25
00017c  f7fffffe          BL       SX1276Write
;;;633                SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
000180  9810              LDR      r0,[sp,#0x40]
000182  b2c1              UXTB     r1,r0
000184  2026              MOVS     r0,#0x26
000186  f7fffffe          BL       SX1276Write
;;;634    
;;;635                SX1276Write( REG_PACKETCONFIG1,
00018a  2030              MOVS     r0,#0x30
00018c  f7fffffe          BL       SX1276Read
000190  21ef              MOVS     r1,#0xef
000192  4008              ANDS     r0,r0,r1
000194  0640              LSLS     r0,r0,#25
000196  0e40              LSRS     r0,r0,#25
000198  9911              LDR      r1,[sp,#0x44]
00019a  2901              CMP      r1,#1
00019c  d101              BNE      |L30.418|
;;;636                             ( SX1276Read( REG_PACKETCONFIG1 ) & 
;;;637                               RF_PACKETCONFIG1_CRC_MASK &
;;;638                               RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
;;;639                               ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
00019e  2100              MOVS     r1,#0
0001a0  e000              B        |L30.420|
                  |L30.418|
0001a2  2180              MOVS     r1,#0x80
                  |L30.420|
0001a4  4308              ORRS     r0,r0,r1
0001a6  9912              LDR      r1,[sp,#0x48]
0001a8  0109              LSLS     r1,r1,#4
0001aa  4308              ORRS     r0,r0,r1
0001ac  4601              MOV      r1,r0
0001ae  9003              STR      r0,[sp,#0xc]
0001b0  2030              MOVS     r0,#0x30
0001b2  f7fffffe          BL       SX1276Write
                  |L30.438|
;;;640                               ( crcOn << 4 ) );
;;;641            
;;;642            }
;;;643            break;
0001b6  e0af              B        |L30.792|
                  |L30.440|
;;;644        case MODEM_LORA:
;;;645            {
;;;646                SX1276.Settings.LoRa.Power = power;
0001b8  4859              LDR      r0,|L30.800|
0001ba  3024              ADDS     r0,r0,#0x24
0001bc  7604              STRB     r4,[r0,#0x18]
;;;647                if( bandwidth > 2 )
0001be  2e02              CMP      r6,#2
0001c0  d901              BLS      |L30.454|
;;;648                {
;;;649                    // Fatal error: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
;;;650                    while( 1 );
0001c2  bf00              NOP      
                  |L30.452|
0001c4  e7fe              B        |L30.452|
                  |L30.454|
;;;651                }
;;;652                bandwidth += 7;
0001c6  1df6              ADDS     r6,r6,#7
;;;653                SX1276.Settings.LoRa.Bandwidth = bandwidth;
0001c8  4855              LDR      r0,|L30.800|
0001ca  6406              STR      r6,[r0,#0x40]
;;;654                SX1276.Settings.LoRa.Datarate = datarate;
0001cc  6445              STR      r5,[r0,#0x44]
;;;655                SX1276.Settings.LoRa.Coderate = coderate;
0001ce  303c              ADDS     r0,r0,#0x3c
0001d0  990f              LDR      r1,[sp,#0x3c]
0001d2  7341              STRB     r1,[r0,#0xd]
;;;656                SX1276.Settings.LoRa.PreambleLen = preambleLen;
0001d4  9910              LDR      r1,[sp,#0x40]
0001d6  81c1              STRH     r1,[r0,#0xe]
;;;657                SX1276.Settings.LoRa.FixLen = fixLen;
0001d8  9911              LDR      r1,[sp,#0x44]
0001da  7401              STRB     r1,[r0,#0x10]
;;;658                SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
0001dc  9913              LDR      r1,[sp,#0x4c]
0001de  74c1              STRB     r1,[r0,#0x13]
;;;659                SX1276.Settings.LoRa.HopPeriod = hopPeriod;
0001e0  9914              LDR      r1,[sp,#0x50]
0001e2  7501              STRB     r1,[r0,#0x14]
;;;660                SX1276.Settings.LoRa.CrcOn = crcOn;
0001e4  9912              LDR      r1,[sp,#0x48]
0001e6  7481              STRB     r1,[r0,#0x12]
;;;661                SX1276.Settings.LoRa.IqInverted = iqInverted;
0001e8  9915              LDR      r1,[sp,#0x54]
0001ea  7541              STRB     r1,[r0,#0x15]
;;;662                SX1276.Settings.LoRa.TxTimeout = timeout;
0001ec  383c              SUBS     r0,r0,#0x3c
0001ee  9916              LDR      r1,[sp,#0x58]
0001f0  6541              STR      r1,[r0,#0x54]
;;;663    
;;;664                if( datarate > 12 )
0001f2  2d0c              CMP      r5,#0xc
0001f4  d901              BLS      |L30.506|
;;;665                {
;;;666                    datarate = 12;
0001f6  250c              MOVS     r5,#0xc
0001f8  e002              B        |L30.512|
                  |L30.506|
;;;667                }
;;;668                else if( datarate < 6 )
0001fa  2d06              CMP      r5,#6
0001fc  d200              BCS      |L30.512|
;;;669                {
;;;670                    datarate = 6;
0001fe  2506              MOVS     r5,#6
                  |L30.512|
;;;671                }
;;;672                if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
000200  2e07              CMP      r6,#7
000202  d103              BNE      |L30.524|
000204  2d0b              CMP      r5,#0xb
000206  d005              BEQ      |L30.532|
000208  2d0c              CMP      r5,#0xc
00020a  d003              BEQ      |L30.532|
                  |L30.524|
;;;673                    ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
00020c  2e08              CMP      r6,#8
00020e  d106              BNE      |L30.542|
000210  2d0c              CMP      r5,#0xc
000212  d104              BNE      |L30.542|
                  |L30.532|
;;;674                {
;;;675                    SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
000214  2101              MOVS     r1,#1
000216  4842              LDR      r0,|L30.800|
000218  303c              ADDS     r0,r0,#0x3c
00021a  7301              STRB     r1,[r0,#0xc]
00021c  e003              B        |L30.550|
                  |L30.542|
;;;676                }
;;;677                else
;;;678                {
;;;679                    SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
00021e  2100              MOVS     r1,#0
000220  483f              LDR      r0,|L30.800|
000222  303c              ADDS     r0,r0,#0x3c
000224  7301              STRB     r1,[r0,#0xc]
                  |L30.550|
;;;680                }
;;;681    
;;;682                if( SX1276.Settings.LoRa.FreqHopOn == true )
000226  483e              LDR      r0,|L30.800|
000228  303c              ADDS     r0,r0,#0x3c
00022a  7cc0              LDRB     r0,[r0,#0x13]
00022c  2801              CMP      r0,#1
00022e  d110              BNE      |L30.594|
;;;683                {
;;;684                    SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
000230  2044              MOVS     r0,#0x44
000232  f7fffffe          BL       SX1276Read
000236  0640              LSLS     r0,r0,#25
000238  0e40              LSRS     r0,r0,#25
00023a  3080              ADDS     r0,r0,#0x80
00023c  4601              MOV      r1,r0
00023e  9003              STR      r0,[sp,#0xc]
000240  2044              MOVS     r0,#0x44
000242  f7fffffe          BL       SX1276Write
;;;685                    SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
000246  4836              LDR      r0,|L30.800|
000248  303c              ADDS     r0,r0,#0x3c
00024a  7d01              LDRB     r1,[r0,#0x14]
00024c  2024              MOVS     r0,#0x24
00024e  f7fffffe          BL       SX1276Write
                  |L30.594|
;;;686                }
;;;687    
;;;688                SX1276Write( REG_LR_MODEMCONFIG1, 
000252  201d              MOVS     r0,#0x1d
000254  f7fffffe          BL       SX1276Read
000258  0700              LSLS     r0,r0,#28
00025a  0f00              LSRS     r0,r0,#28
00025c  21f0              MOVS     r1,#0xf0
00025e  4008              ANDS     r0,r0,r1
000260  0131              LSLS     r1,r6,#4
000262  4308              ORRS     r0,r0,r1
000264  990f              LDR      r1,[sp,#0x3c]
000266  0049              LSLS     r1,r1,#1
000268  4308              ORRS     r0,r0,r1
00026a  9911              LDR      r1,[sp,#0x44]
00026c  4308              ORRS     r0,r0,r1
00026e  b2c0              UXTB     r0,r0
000270  4601              MOV      r1,r0
000272  9003              STR      r0,[sp,#0xc]
000274  201d              MOVS     r0,#0x1d
000276  f7fffffe          BL       SX1276Write
;;;689                             ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
;;;690                               RFLR_MODEMCONFIG1_BW_MASK &
;;;691                               RFLR_MODEMCONFIG1_CODINGRATE_MASK &
;;;692                               RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK ) |
;;;693                               ( bandwidth << 4 ) | ( coderate << 1 ) | 
;;;694                               fixLen );
;;;695    
;;;696                SX1276Write( REG_LR_MODEMCONFIG2,
00027a  201e              MOVS     r0,#0x1e
00027c  f7fffffe          BL       SX1276Read
000280  0700              LSLS     r0,r0,#28
000282  0f00              LSRS     r0,r0,#28
000284  21fb              MOVS     r1,#0xfb
000286  4008              ANDS     r0,r0,r1
000288  0129              LSLS     r1,r5,#4
00028a  4308              ORRS     r0,r0,r1
00028c  9912              LDR      r1,[sp,#0x48]
00028e  0089              LSLS     r1,r1,#2
000290  4308              ORRS     r0,r0,r1
000292  b2c0              UXTB     r0,r0
000294  4601              MOV      r1,r0
000296  9003              STR      r0,[sp,#0xc]
000298  201e              MOVS     r0,#0x1e
00029a  f7fffffe          BL       SX1276Write
;;;697                             ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
;;;698                               RFLR_MODEMCONFIG2_SF_MASK &
;;;699                               RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
;;;700                               ( datarate << 4 ) | ( crcOn << 2 ) );
;;;701    
;;;702                SX1276Write( REG_LR_MODEMCONFIG3, 
00029e  2026              MOVS     r0,#0x26
0002a0  f7fffffe          BL       SX1276Read
0002a4  21f7              MOVS     r1,#0xf7
0002a6  4008              ANDS     r0,r0,r1
0002a8  491d              LDR      r1,|L30.800|
0002aa  313c              ADDS     r1,r1,#0x3c
0002ac  7b09              LDRB     r1,[r1,#0xc]
0002ae  00c9              LSLS     r1,r1,#3
0002b0  4308              ORRS     r0,r0,r1
0002b2  b2c0              UXTB     r0,r0
0002b4  4601              MOV      r1,r0
0002b6  9003              STR      r0,[sp,#0xc]
0002b8  2026              MOVS     r0,#0x26
0002ba  f7fffffe          BL       SX1276Write
;;;703                             ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
;;;704                               RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
;;;705                               ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
;;;706            
;;;707                SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
0002be  9810              LDR      r0,[sp,#0x40]
0002c0  0400              LSLS     r0,r0,#16
0002c2  0e01              LSRS     r1,r0,#24
0002c4  2020              MOVS     r0,#0x20
0002c6  f7fffffe          BL       SX1276Write
;;;708                SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
0002ca  9810              LDR      r0,[sp,#0x40]
0002cc  b2c1              UXTB     r1,r0
0002ce  2021              MOVS     r0,#0x21
0002d0  f7fffffe          BL       SX1276Write
;;;709                
;;;710                if( datarate == 6 )
0002d4  2d06              CMP      r5,#6
0002d6  d10f              BNE      |L30.760|
;;;711                {
;;;712                    SX1276Write( REG_LR_DETECTOPTIMIZE, 
0002d8  2031              MOVS     r0,#0x31
0002da  f7fffffe          BL       SX1276Read
0002de  21f8              MOVS     r1,#0xf8
0002e0  4008              ANDS     r0,r0,r1
0002e2  1d40              ADDS     r0,r0,#5
0002e4  4601              MOV      r1,r0
0002e6  9003              STR      r0,[sp,#0xc]
0002e8  2031              MOVS     r0,#0x31
0002ea  f7fffffe          BL       SX1276Write
;;;713                                 ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
;;;714                                   RFLR_DETECTIONOPTIMIZE_MASK ) |
;;;715                                   RFLR_DETECTIONOPTIMIZE_SF6 );
;;;716                    SX1276Write( REG_LR_DETECTIONTHRESHOLD, 
0002ee  210c              MOVS     r1,#0xc
0002f0  2037              MOVS     r0,#0x37
0002f2  f7fffffe          BL       SX1276Write
0002f6  e00e              B        |L30.790|
                  |L30.760|
;;;717                                 RFLR_DETECTIONTHRESH_SF6 );
;;;718                }
;;;719                else
;;;720                {
;;;721                    SX1276Write( REG_LR_DETECTOPTIMIZE,
0002f8  2031              MOVS     r0,#0x31
0002fa  f7fffffe          BL       SX1276Read
0002fe  21f8              MOVS     r1,#0xf8
000300  4008              ANDS     r0,r0,r1
000302  1cc0              ADDS     r0,r0,#3
000304  4601              MOV      r1,r0
000306  9003              STR      r0,[sp,#0xc]
000308  2031              MOVS     r0,#0x31
00030a  f7fffffe          BL       SX1276Write
;;;722                                 ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
;;;723                                 RFLR_DETECTIONOPTIMIZE_MASK ) |
;;;724                                 RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12 );
;;;725                    SX1276Write( REG_LR_DETECTIONTHRESHOLD, 
00030e  210a              MOVS     r1,#0xa
000310  2037              MOVS     r0,#0x37
000312  f7fffffe          BL       SX1276Write
                  |L30.790|
;;;726                                 RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
;;;727                }
;;;728            }
;;;729            break;
000316  bf00              NOP      
                  |L30.792|
000318  bf00              NOP                            ;643
;;;730        }
;;;731    }
00031a  b009              ADD      sp,sp,#0x24
00031c  bdf0              POP      {r4-r7,pc}
;;;732    
                          ENDP

00031e  0000              DCW      0x0000
                  |L30.800|
                          DCD      SX1276
                  |L30.804|
000324  70614461          DCB      "paDac = 0x%02x\r\n",0
000328  63203d20
00032c  30782530
000330  32780d0a
000334  00      
000335  00                DCB      0
000336  00                DCB      0
000337  00                DCB      0
                  |L30.824|
                          DCD      0x404e8480
                  |L30.828|
                          DCD      0x417e8480

                          AREA ||i.SX1276StartCad||, CODE, READONLY, ALIGN=2

                  SX1276StartCad PROC
;;;1172   
;;;1173   void SX1276StartCad( void )
000000  b510              PUSH     {r4,lr}
;;;1174   {
;;;1175       switch( SX1276.Settings.Modem )
000002  4810              LDR      r0,|L31.68|
000004  7940              LDRB     r0,[r0,#5]
000006  2800              CMP      r0,#0
000008  d002              BEQ      |L31.16|
00000a  2801              CMP      r0,#1
00000c  d117              BNE      |L31.62|
00000e  e000              B        |L31.18|
                  |L31.16|
;;;1176       {
;;;1177       case MODEM_FSK:
;;;1178           {
;;;1179              
;;;1180           }
;;;1181           break;
000010  e016              B        |L31.64|
                  |L31.18|
;;;1182       case MODEM_LORA:
;;;1183           {
;;;1184               SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
000012  21fa              MOVS     r1,#0xfa
000014  2011              MOVS     r0,#0x11
000016  f7fffffe          BL       SX1276Write
;;;1185                                           RFLR_IRQFLAGS_RXDONE |
;;;1186                                           RFLR_IRQFLAGS_PAYLOADCRCERROR |
;;;1187                                           RFLR_IRQFLAGS_VALIDHEADER |
;;;1188                                           RFLR_IRQFLAGS_TXDONE |
;;;1189                                           //RFLR_IRQFLAGS_CADDONE |
;;;1190                                           RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL // |
;;;1191                                           //RFLR_IRQFLAGS_CADDETECTED 
;;;1192                                           );
;;;1193                                             
;;;1194               //DIO0=CADDone   DIO1=CADDETECTED : DIO0响应较慢，改为DIO3触发 & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 
;;;1195   					  SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK  ) | RFLR_DIOMAPPING1_DIO0_10 ); 
00001a  2040              MOVS     r0,#0x40
00001c  f7fffffe          BL       SX1276Read
000020  0680              LSLS     r0,r0,#26
000022  0e80              LSRS     r0,r0,#26
000024  4604              MOV      r4,r0
000026  3480              ADDS     r4,r4,#0x80
000028  4621              MOV      r1,r4
00002a  2040              MOVS     r0,#0x40
00002c  f7fffffe          BL       SX1276Write
;;;1196               
;;;1197               SX1276.Settings.State = RF_CAD;
000030  2003              MOVS     r0,#3
000032  4904              LDR      r1,|L31.68|
000034  7108              STRB     r0,[r1,#4]
;;;1198               SX1276SetOpMode( RFLR_OPMODE_CAD );
000036  2007              MOVS     r0,#7
000038  f7fffffe          BL       SX1276SetOpMode
;;;1199           }
;;;1200           break;
00003c  e000              B        |L31.64|
                  |L31.62|
;;;1201       default:
;;;1202           break;
00003e  bf00              NOP      
                  |L31.64|
000040  bf00              NOP                            ;1181
;;;1203       }
;;;1204   }
000042  bd10              POP      {r4,pc}
;;;1205   
                          ENDP

                  |L31.68|
                          DCD      SX1276

                          AREA ||i.SX1276Write||, CODE, READONLY, ALIGN=1

                  SX1276Write PROC
;;;1304   
;;;1305   void SX1276Write( uint8_t addr, uint8_t data )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;1306   {
000002  4604              MOV      r4,r0
;;;1307       SX1276WriteBuffer( addr, &data, 1 );
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SX1276WriteBuffer
;;;1308   }
00000e  bd1c              POP      {r2-r4,pc}
;;;1309   
                          ENDP


                          AREA ||i.SX1276WriteBuffer||, CODE, READONLY, ALIGN=1

                  SX1276WriteBuffer PROC
;;;1316   
;;;1317   void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
000000  b5f8              PUSH     {r3-r7,lr}
;;;1318   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;1319       uint8_t i;
;;;1320   
;;;1321       //NSS = 0;
;;;1322       GpioWrite( GPIOA,GPIO_PIN_4,GPIO_PIN_RESET );
000008  2200              MOVS     r2,#0
00000a  2110              MOVS     r1,#0x10
00000c  2009              MOVS     r0,#9
00000e  06c0              LSLS     r0,r0,#27
000010  f7fffffe          BL       GpioWrite
;;;1323   
;;;1324       SPI1_Write( addr | 0x80 );
000014  2180              MOVS     r1,#0x80
000016  4329              ORRS     r1,r1,r5
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       SPI1_Write
;;;1325       for( i = 0; i < size; i++ )
00001e  2400              MOVS     r4,#0
000020  e004              B        |L33.44|
                  |L33.34|
;;;1326       {
;;;1327           SPI1_Write( buffer[i] );
000022  5d30              LDRB     r0,[r6,r4]
000024  f7fffffe          BL       SPI1_Write
000028  1c60              ADDS     r0,r4,#1              ;1325
00002a  b2c4              UXTB     r4,r0                 ;1325
                  |L33.44|
00002c  42bc              CMP      r4,r7                 ;1325
00002e  dbf8              BLT      |L33.34|
;;;1328       }
;;;1329   
;;;1330       //NSS = 1;
;;;1331       GpioWrite( GPIOA,GPIO_PIN_4,GPIO_PIN_SET );
000030  2201              MOVS     r2,#1
000032  2110              MOVS     r1,#0x10
000034  2009              MOVS     r0,#9
000036  06c0              LSLS     r0,r0,#27
000038  f7fffffe          BL       GpioWrite
;;;1332   }
00003c  bdf8              POP      {r3-r7,pc}
;;;1333   
                          ENDP


                          AREA ||i.SX1276WriteFifo||, CODE, READONLY, ALIGN=1

                  SX1276WriteFifo PROC
;;;1359   
;;;1360   void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
000000  b570              PUSH     {r4-r6,lr}
;;;1361   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1362       SX1276WriteBuffer( 0, buffer, size );
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       SX1276WriteBuffer
;;;1363   }
000010  bd70              POP      {r4-r6,pc}
;;;1364   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RxTxBuffer
                          %        256
                  SX1276
                          %        96
                  TxTimeoutTimer
                          %        20
                  RxTimeoutTimer
                          %        20
                  RxTimeoutSyncWord
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  RadioRegsInit
000000  000c2300          DCB      0x00,0x0c,0x23,0x00
000004  0d1e000e          DCB      0x0d,0x1e,0x00,0x0e
000008  d2001faa          DCB      0xd2,0x00,0x1f,0xaa
00000c  00240700          DCB      0x00,0x24,0x07,0x00
000010  27120028          DCB      0x27,0x12,0x00,0x28
000014  c1002994          DCB      0xc1,0x00,0x29,0x94
000018  002ac100          DCB      0x00,0x2a,0xc1,0x00
00001c  30d80035          DCB      0x30,0xd8,0x00,0x35
000020  8f003b02          DCB      0x8f,0x00,0x3b,0x02
000024  00400000          DCB      0x00,0x40,0x00,0x00
000028  41300123          DCB      0x41,0x30,0x01,0x23
00002c  40000000          DCB      0x40,0x00,0x00,0x00
                  FskBandwidths
                          DCD      0x00000a28
000034  17000000          DCB      0x17,0x00,0x00,0x00
                          DCD      0x00000c1c
00003c  0f000000          DCB      0x0f,0x00,0x00,0x00
                          DCD      0x00000f3c
000044  07000000          DCB      0x07,0x00,0x00,0x00
                          DCD      0x00001450
00004c  16000000          DCB      0x16,0x00,0x00,0x00
                          DCD      0x0000189c
000054  0e000000          DCB      0x0e,0x00,0x00,0x00
                          DCD      0x00001e78
00005c  06000000          DCB      0x06,0x00,0x00,0x00
                          DCD      0x000028a0
000064  15000000          DCB      0x15,0x00,0x00,0x00
                          DCD      0x000030d4
00006c  0d000000          DCB      0x0d,0x00,0x00,0x00
                          DCD      0x00003cf0
000074  05000000          DCB      0x05,0x00,0x00,0x00
                          DCD      0x00005140
00007c  14000000          DCB      0x14,0x00,0x00,0x00
                          DCD      0x000061a8
000084  0c000000          DCB      0x0c,0x00,0x00,0x00
                          DCD      0x00007a44
00008c  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x0000a2e4
000094  13000000          DCB      0x13,0x00,0x00,0x00
                          DCD      0x0000c350
00009c  0b000000          DCB      0x0b,0x00,0x00,0x00
                          DCD      0x0000f424
0000a4  03000000          DCB      0x03,0x00,0x00,0x00
                          DCD      0x00014585
0000ac  12000000          DCB      0x12,0x00,0x00,0x00
                          DCD      0x000186a0
0000b4  0a000000          DCB      0x0a,0x00,0x00,0x00
                          DCD      0x0001e848
0000bc  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00028b2c
0000c4  11000000          DCB      0x11,0x00,0x00,0x00
                          DCD      0x00030d40
0000cc  09000000          DCB      0x09,0x00,0x00,0x00
                          DCD      0x0003d090
0000d4  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x000493e0
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
                  __func__
0000e0  53583132          DCB      0x53,0x58,0x31,0x32
0000e4  37364f6e          DCB      0x37,0x36,0x4f,0x6e
0000e8  44696f30          DCB      0x44,0x69,0x6f,0x30
0000ec  49727100          DCB      0x49,0x72,0x71,0x00
                  |symbol_number.108|
0000f0  53583132          DCB      0x53,0x58,0x31,0x32
0000f4  37364f6e          DCB      0x37,0x36,0x4f,0x6e
0000f8  44696f31          DCB      0x44,0x69,0x6f,0x31
0000fc  49727100          DCB      0x49,0x72,0x71,0x00
                  |symbol_number.109|
000100  53583132          DCB      0x53,0x58,0x31,0x32
000104  37364f6e          DCB      0x37,0x36,0x4f,0x6e
000108  44696f32          DCB      0x44,0x69,0x6f,0x32
00010c  49727100          DCB      0x49,0x72,0x71,0x00
                  |symbol_number.110|
000110  53583132          DCB      0x53,0x58,0x31,0x32
000114  37364f6e          DCB      0x37,0x36,0x4f,0x6e
000118  44696f33          DCB      0x44,0x69,0x6f,0x33
00011c  49727100          DCB      0x49,0x72,0x71,0x00
                  |symbol_number.111|
000120  53583132          DCB      0x53,0x58,0x31,0x32
000124  37364f6e          DCB      0x37,0x36,0x4f,0x6e
000128  44696f34          DCB      0x44,0x69,0x6f,0x34
00012c  49727100          DCB      0x49,0x72,0x71,0x00
                  |symbol_number.112|
000130  53583132          DCB      0x53,0x58,0x31,0x32
000134  37364f6e          DCB      0x37,0x36,0x4f,0x6e
000138  44696f35          DCB      0x44,0x69,0x6f,0x35
00013c  49727100          DCB      0x49,0x72,0x71,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  RadioEvents
                          DCD      0x00000000
                  sendwkup
000004  00                DCB      0x00
                  readfifo
000005  00                DCB      0x00
                  opModePrev
000006  01                DCB      0x01

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L214.24|
                  |L214.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L214.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L214.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Lib\\LoRawan-node\\radio\\sx1276\\sx1276.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_sx1276_c_b97cc6f8____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_sx1276_c_b97cc6f8____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_sx1276_c_b97cc6f8____REVSH|
#line 402
|__asm___8_sx1276_c_b97cc6f8____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
