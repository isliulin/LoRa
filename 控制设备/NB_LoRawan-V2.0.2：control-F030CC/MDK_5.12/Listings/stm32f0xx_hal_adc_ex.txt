; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_adc_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_adc_ex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_adc_ex.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_adc_ex.c]
                          THUMB

                          AREA ||i.HAL_ADCEx_Calibration_Start||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_Calibration_Start PROC
;;;112      */
;;;113    HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
000000  b5f8              PUSH     {r3-r7,lr}
;;;114    {
000002  4604              MOV      r4,r0
;;;115      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;116      uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;117      uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
000008  2700              MOVS     r7,#0
;;;118      
;;;119      /* Check the parameters */
;;;120      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;121    
;;;122      /* Process locked */
;;;123      __HAL_LOCK(hadc);
00000a  bf00              NOP      
00000c  2040              MOVS     r0,#0x40
00000e  5d00              LDRB     r0,[r0,r4]
000010  2801              CMP      r0,#1
000012  d101              BNE      |L1.24|
000014  2002              MOVS     r0,#2
                  |L1.22|
;;;124      
;;;125      /* Calibration prerequisite: ADC must be disabled. */
;;;126      if (ADC_IS_ENABLE(hadc) == RESET)
;;;127      {
;;;128        /* Set ADC state */
;;;129        ADC_STATE_CLR_SET(hadc->State, 
;;;130                          HAL_ADC_STATE_REG_BUSY,
;;;131                          HAL_ADC_STATE_BUSY_INTERNAL);
;;;132        
;;;133        /* Disable ADC DMA transfer request during calibration */
;;;134        /* Note: Specificity of this STM32 serie: Calibration factor is           */
;;;135        /*       available in data register and also transfered by DMA.           */
;;;136        /*       To not insert ADC calibration factor among ADC conversion data   */
;;;137        /*       in array variable, DMA transfer must be disabled during          */
;;;138        /*       calibration.                                                     */
;;;139        backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
;;;140        CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
;;;141    
;;;142        /* Start ADC calibration */
;;;143        hadc->Instance->CR |= ADC_CR_ADCAL;
;;;144    
;;;145        tickstart = HAL_GetTick();  
;;;146    
;;;147        /* Wait for calibration completion */
;;;148        while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
;;;149        {
;;;150          if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
;;;151          {
;;;152            /* Update ADC state machine to error */
;;;153            ADC_STATE_CLR_SET(hadc->State,
;;;154                              HAL_ADC_STATE_BUSY_INTERNAL,
;;;155                              HAL_ADC_STATE_ERROR_INTERNAL);
;;;156            
;;;157            /* Process unlocked */
;;;158            __HAL_UNLOCK(hadc);
;;;159            
;;;160            return HAL_ERROR;
;;;161          }
;;;162        }
;;;163        
;;;164        /* Restore ADC DMA transfer request after calibration */
;;;165        SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
;;;166    
;;;167        /* Set ADC state */
;;;168        ADC_STATE_CLR_SET(hadc->State,
;;;169                          HAL_ADC_STATE_BUSY_INTERNAL,
;;;170                          HAL_ADC_STATE_READY);
;;;171      }
;;;172      else
;;;173      {
;;;174        /* Update ADC state machine to error */
;;;175        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;176        
;;;177        tmp_hal_status = HAL_ERROR;
;;;178      }
;;;179      
;;;180      /* Process unlocked */
;;;181      __HAL_UNLOCK(hadc);
;;;182      
;;;183      /* Return function status */
;;;184      return tmp_hal_status;
;;;185    }
000016  bdf8              POP      {r3-r7,pc}
                  |L1.24|
000018  2101              MOVS     r1,#1                 ;123
00001a  2040              MOVS     r0,#0x40              ;123
00001c  5501              STRB     r1,[r0,r4]            ;123
00001e  bf00              NOP                            ;123
000020  6820              LDR      r0,[r4,#0]            ;126
000022  6880              LDR      r0,[r0,#8]            ;126
000024  0780              LSLS     r0,r0,#30             ;126
000026  0f80              LSRS     r0,r0,#30             ;126
000028  2801              CMP      r0,#1                 ;126
00002a  d10c              BNE      |L1.70|
00002c  6820              LDR      r0,[r4,#0]            ;126
00002e  6800              LDR      r0,[r0,#0]            ;126
000030  4008              ANDS     r0,r0,r1              ;126
000032  2800              CMP      r0,#0                 ;126
000034  d105              BNE      |L1.66|
000036  6820              LDR      r0,[r4,#0]            ;126
000038  68c0              LDR      r0,[r0,#0xc]          ;126
00003a  03c9              LSLS     r1,r1,#15             ;126
00003c  4008              ANDS     r0,r0,r1              ;126
00003e  4288              CMP      r0,r1                 ;126
000040  d101              BNE      |L1.70|
                  |L1.66|
000042  2001              MOVS     r0,#1                 ;126
000044  e000              B        |L1.72|
                  |L1.70|
000046  2000              MOVS     r0,#0                 ;126
                  |L1.72|
000048  2800              CMP      r0,#0                 ;126
00004a  d13f              BNE      |L1.204|
00004c  6c60              LDR      r0,[r4,#0x44]         ;129
00004e  21ff              MOVS     r1,#0xff              ;129
000050  3101              ADDS     r1,#1                 ;129
000052  4388              BICS     r0,r0,r1              ;129
000054  2102              MOVS     r1,#2                 ;129
000056  4308              ORRS     r0,r0,r1              ;129
000058  6460              STR      r0,[r4,#0x44]         ;129
00005a  6820              LDR      r0,[r4,#0]            ;139
00005c  68c0              LDR      r0,[r0,#0xc]          ;139
00005e  0787              LSLS     r7,r0,#30             ;139
000060  0fbf              LSRS     r7,r7,#30             ;139
000062  6820              LDR      r0,[r4,#0]            ;140
000064  68c0              LDR      r0,[r0,#0xc]          ;140
000066  0880              LSRS     r0,r0,#2              ;140
000068  0080              LSLS     r0,r0,#2              ;140
00006a  6821              LDR      r1,[r4,#0]            ;140
00006c  60c8              STR      r0,[r1,#0xc]          ;140
00006e  6820              LDR      r0,[r4,#0]            ;143
000070  6880              LDR      r0,[r0,#8]            ;143
000072  2101              MOVS     r1,#1                 ;143
000074  07c9              LSLS     r1,r1,#31             ;143
000076  4308              ORRS     r0,r0,r1              ;143
000078  6821              LDR      r1,[r4,#0]            ;143
00007a  6088              STR      r0,[r1,#8]            ;143
00007c  f7fffffe          BL       HAL_GetTick
000080  4606              MOV      r6,r0                 ;145
000082  e011              B        |L1.168|
                  |L1.132|
000084  f7fffffe          BL       HAL_GetTick
000088  1b80              SUBS     r0,r0,r6              ;150
00008a  2802              CMP      r0,#2                 ;150
00008c  d90c              BLS      |L1.168|
00008e  6c60              LDR      r0,[r4,#0x44]         ;153
000090  2102              MOVS     r1,#2                 ;153
000092  4388              BICS     r0,r0,r1              ;153
000094  2110              MOVS     r1,#0x10              ;153
000096  4308              ORRS     r0,r0,r1              ;153
000098  6460              STR      r0,[r4,#0x44]         ;153
00009a  bf00              NOP                            ;158
00009c  2100              MOVS     r1,#0                 ;158
00009e  2040              MOVS     r0,#0x40              ;158
0000a0  5501              STRB     r1,[r0,r4]            ;158
0000a2  bf00              NOP                            ;158
0000a4  2001              MOVS     r0,#1                 ;160
0000a6  e7b6              B        |L1.22|
                  |L1.168|
0000a8  6820              LDR      r0,[r4,#0]            ;148
0000aa  6880              LDR      r0,[r0,#8]            ;148
0000ac  0fc0              LSRS     r0,r0,#31             ;148
0000ae  07c0              LSLS     r0,r0,#31             ;148
0000b0  2800              CMP      r0,#0                 ;148
0000b2  d1e7              BNE      |L1.132|
0000b4  6820              LDR      r0,[r4,#0]            ;165
0000b6  68c0              LDR      r0,[r0,#0xc]          ;165
0000b8  4338              ORRS     r0,r0,r7              ;165
0000ba  6821              LDR      r1,[r4,#0]            ;165
0000bc  60c8              STR      r0,[r1,#0xc]          ;165
0000be  6c60              LDR      r0,[r4,#0x44]         ;168
0000c0  2102              MOVS     r1,#2                 ;168
0000c2  4388              BICS     r0,r0,r1              ;168
0000c4  2101              MOVS     r1,#1                 ;168
0000c6  4308              ORRS     r0,r0,r1              ;168
0000c8  6460              STR      r0,[r4,#0x44]         ;168
0000ca  e004              B        |L1.214|
                  |L1.204|
0000cc  6c60              LDR      r0,[r4,#0x44]         ;175
0000ce  2120              MOVS     r1,#0x20              ;175
0000d0  4308              ORRS     r0,r0,r1              ;175
0000d2  6460              STR      r0,[r4,#0x44]         ;175
0000d4  2501              MOVS     r5,#1                 ;177
                  |L1.214|
0000d6  bf00              NOP                            ;181
0000d8  2100              MOVS     r1,#0                 ;181
0000da  2040              MOVS     r0,#0x40              ;181
0000dc  5501              STRB     r1,[r0,r4]            ;181
0000de  bf00              NOP                            ;181
0000e0  4628              MOV      r0,r5                 ;184
0000e2  e798              B        |L1.22|
;;;186    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_adc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_adc_ex_c_3613cd7f____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f0xx_hal_adc_ex_c_3613cd7f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_adc_ex_c_3613cd7f____REVSH|
#line 402
|__asm___22_stm32f0xx_hal_adc_ex_c_3613cd7f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
