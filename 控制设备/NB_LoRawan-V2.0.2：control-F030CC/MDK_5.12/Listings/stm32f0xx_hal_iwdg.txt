; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_iwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_iwdg.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_iwdg.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_iwdg.c]
                          THUMB

                          AREA ||i.HAL_IWDG_Init||, CODE, READONLY, ALIGN=2

                  HAL_IWDG_Init PROC
;;;169      */
;;;170    HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
000000  b570              PUSH     {r4-r6,lr}
;;;171    {
000002  4604              MOV      r4,r0
;;;172      uint32_t tickstart;
;;;173    
;;;174      /* Check the IWDG handle allocation */
;;;175      if(hiwdg == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L1.12|
;;;176      {
;;;177        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;178      }
;;;179    
;;;180      /* Check the parameters */
;;;181      assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
;;;182      assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
;;;183      assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
;;;184      assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
;;;185    
;;;186      /* Enable IWDG. LSI is turned on automaticaly */
;;;187      __HAL_IWDG_START(hiwdg);
;;;188    
;;;189      /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
;;;190      0x5555 in KR */
;;;191      IWDG_ENABLE_WRITE_ACCESS(hiwdg);
;;;192    
;;;193      /* Write to IWDG registers the Prescaler & Reload values to work with */
;;;194      hiwdg->Instance->PR = hiwdg->Init.Prescaler;
;;;195      hiwdg->Instance->RLR = hiwdg->Init.Reload;
;;;196    
;;;197      /* Check pending flag, if previous update not done, return timeout */
;;;198      tickstart = HAL_GetTick();
;;;199    
;;;200       /* Wait for register to be updated */
;;;201      while(hiwdg->Instance->SR != RESET)
;;;202      {
;;;203        if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
;;;204        {
;;;205          return HAL_TIMEOUT;
;;;206        }
;;;207      }
;;;208    
;;;209      /* If window parameter is different than current value, modify window 
;;;210      register */
;;;211      if(hiwdg->Instance->WINR != hiwdg->Init.Window)
;;;212      {
;;;213        /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
;;;214        even if window feature is disabled, Watchdog will be reloaded by writing 
;;;215        windows register */
;;;216        hiwdg->Instance->WINR = hiwdg->Init.Window;
;;;217      }
;;;218      else
;;;219      {
;;;220        /* Reload IWDG counter with value defined in the reload register */
;;;221        __HAL_IWDG_RELOAD_COUNTER(hiwdg);
;;;222      }
;;;223    
;;;224      /* Return function status */
;;;225      return HAL_OK;
;;;226    }
00000a  bd70              POP      {r4-r6,pc}
                  |L1.12|
00000c  4814              LDR      r0,|L1.96|
00000e  6821              LDR      r1,[r4,#0]            ;187
000010  6008              STR      r0,[r1,#0]            ;187
000012  4814              LDR      r0,|L1.100|
000014  6821              LDR      r1,[r4,#0]            ;191
000016  6008              STR      r0,[r1,#0]            ;191
000018  6821              LDR      r1,[r4,#0]            ;194
00001a  6860              LDR      r0,[r4,#4]            ;194
00001c  6048              STR      r0,[r1,#4]            ;194
00001e  6821              LDR      r1,[r4,#0]            ;195
000020  68a0              LDR      r0,[r4,#8]            ;195
000022  6088              STR      r0,[r1,#8]            ;195
000024  f7fffffe          BL       HAL_GetTick
000028  4605              MOV      r5,r0                 ;198
00002a  e006              B        |L1.58|
                  |L1.44|
00002c  f7fffffe          BL       HAL_GetTick
000030  1b40              SUBS     r0,r0,r5              ;203
000032  2827              CMP      r0,#0x27              ;203
000034  d901              BLS      |L1.58|
000036  2003              MOVS     r0,#3                 ;205
000038  e7e7              B        |L1.10|
                  |L1.58|
00003a  6820              LDR      r0,[r4,#0]            ;201
00003c  68c0              LDR      r0,[r0,#0xc]          ;201
00003e  2800              CMP      r0,#0                 ;201
000040  d1f4              BNE      |L1.44|
000042  6820              LDR      r0,[r4,#0]            ;211
000044  6901              LDR      r1,[r0,#0x10]         ;211
000046  68e0              LDR      r0,[r4,#0xc]          ;211
000048  4281              CMP      r1,r0                 ;211
00004a  d003              BEQ      |L1.84|
00004c  6821              LDR      r1,[r4,#0]            ;216
00004e  68e0              LDR      r0,[r4,#0xc]          ;216
000050  6108              STR      r0,[r1,#0x10]         ;216
000052  e002              B        |L1.90|
                  |L1.84|
000054  4804              LDR      r0,|L1.104|
000056  6821              LDR      r1,[r4,#0]            ;221
000058  6008              STR      r0,[r1,#0]            ;221
                  |L1.90|
00005a  2000              MOVS     r0,#0                 ;225
00005c  e7d5              B        |L1.10|
;;;227    
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      0x0000cccc
                  |L1.100|
                          DCD      0x00005555
                  |L1.104|
                          DCD      0x0000aaaa

                          AREA ||i.HAL_IWDG_Refresh||, CODE, READONLY, ALIGN=2

                  HAL_IWDG_Refresh PROC
;;;253      */
;;;254    HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
000000  4601              MOV      r1,r0
;;;255    {
;;;256      /* Reload IWDG counter with value defined in the reload register */
;;;257      __HAL_IWDG_RELOAD_COUNTER(hiwdg);
000002  4802              LDR      r0,|L2.12|
000004  680a              LDR      r2,[r1,#0]
000006  6010              STR      r0,[r2,#0]
;;;258    
;;;259      /* Return function status */
;;;260      return HAL_OK;
000008  2000              MOVS     r0,#0
;;;261    }
00000a  4770              BX       lr
;;;262    
                          ENDP

                  |L2.12|
                          DCD      0x0000aaaa

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_iwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f0xx_hal_iwdg_c_a5fb4147____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f0xx_hal_iwdg_c_a5fb4147____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f0xx_hal_iwdg_c_a5fb4147____REVSH|
#line 402
|__asm___20_stm32f0xx_hal_iwdg_c_a5fb4147____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
