; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\sx1276-board.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sx1276-board.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\sx1276-board.crf ..\HAL\src\sx1276-board.c]
                          THUMB

                          AREA ||i.SX1276AntSwDeInit||, CODE, READONLY, ALIGN=2

                  SX1276AntSwDeInit PROC
;;;106    
;;;107    void SX1276AntSwDeInit( void )
000000  2002              MOVS     r0,#2
;;;108    {
;;;109        /* RF switch save power mode */
;;;110        SX1276.RxTx = 2;
000002  4901              LDR      r1,|L1.8|
000004  7008              STRB     r0,[r1,#0]
;;;111    
;;;112        //GpioInit( &AntSwitchRxTx1, RADIO_ANT_SWITCH_RXTX1, PIN_OUTPUT, PIN_OPEN_DRAIN, PIN_NO_PULL, 0 );
;;;113        //GpioInit( &AntSwitchRxTx2, RADIO_ANT_SWITCH_RXTX2, PIN_OUTPUT, PIN_OPEN_DRAIN, PIN_NO_PULL, 0 );
;;;114    }
000006  4770              BX       lr
;;;115    
                          ENDP

                  |L1.8|
                          DCD      SX1276

                          AREA ||i.SX1276AntSwInit||, CODE, READONLY, ALIGN=2

                  SX1276AntSwInit PROC
;;;97     
;;;98     void SX1276AntSwInit( void )
000000  2002              MOVS     r0,#2
;;;99     {
;;;100        /* RF switch save power mode */
;;;101        SX1276.RxTx = 2;
000002  4901              LDR      r1,|L2.8|
000004  7008              STRB     r0,[r1,#0]
;;;102    
;;;103    //     GpioInit( &AntSwitchRxTx1, RADIO_ANT_SWITCH_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
;;;104    //     GpioInit( &AntSwitchRxTx2, RADIO_ANT_SWITCH_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
;;;105    }
000006  4770              BX       lr
;;;106    
                          ENDP

                  |L2.8|
                          DCD      SX1276

                          AREA ||i.SX1276CheckRfFrequency||, CODE, READONLY, ALIGN=1

                  SX1276CheckRfFrequency PROC
;;;138    
;;;139    bool SX1276CheckRfFrequency( uint32_t frequency )
000000  4601              MOV      r1,r0
;;;140    {
;;;141        // Implement check. Currently all frequencies are supportted
;;;142        return true;
000002  2001              MOVS     r0,#1
;;;143    }
000004  4770              BX       lr
                          ENDP


                          AREA ||i.SX1276GetPaSelect||, CODE, READONLY, ALIGN=2

                  SX1276GetPaSelect PROC
;;;63     
;;;64     uint8_t SX1276GetPaSelect( uint32_t channel )
000000  4601              MOV      r1,r0
;;;65     {
;;;66         if( channel < RF_MID_BAND_THRESH )
000002  4803              LDR      r0,|L4.16|
000004  4281              CMP      r1,r0
000006  d201              BCS      |L4.12|
;;;67         {
;;;68             return RF_PACONFIG_PASELECT_PABOOST;
000008  2080              MOVS     r0,#0x80
                  |L4.10|
;;;69         }
;;;70         else
;;;71         {
;;;72             return RF_PACONFIG_PASELECT_RFO;
;;;73         }
;;;74     }
00000a  4770              BX       lr
                  |L4.12|
00000c  2000              MOVS     r0,#0                 ;72
00000e  e7fc              B        |L4.10|
;;;75     
                          ENDP

                  |L4.16|
                          DCD      0x3689cac0

                          AREA ||i.SX1276IoDeInit||, CODE, READONLY, ALIGN=1

                  SX1276IoDeInit PROC
;;;58     
;;;59     void SX1276IoDeInit( void ) ///关闭IO：低功耗考虑
000000  4770              BX       lr
;;;60     {
;;;61        
;;;62     }
;;;63     
                          ENDP


                          AREA ||i.SX1276IoInit||, CODE, READONLY, ALIGN=1

                  SX1276IoInit PROC
;;;51       */
;;;52     void SX1276IoInit( void )
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54       SX1276EXTI_Init( );			///SX1276: DIO设置外部中断
000002  f7fffffe          BL       SX1276EXTI_Init
;;;55     	SX1276GPIO_Init( );		///SX1276: RESET复位引脚  LoRa_POWERON---PB14电源开关
000006  f7fffffe          BL       SX1276GPIO_Init
;;;56     }
00000a  bd10              POP      {r4,pc}
;;;57     
                          ENDP


                          AREA ||i.SX1276SetAntSw||, CODE, READONLY, ALIGN=2

                  SX1276SetAntSw PROC
;;;115    
;;;116    void SX1276SetAntSw( uint8_t rxTx )
000000  4904              LDR      r1,|L7.20|
;;;117    {
;;;118        if( SX1276.RxTx == rxTx )
000002  7809              LDRB     r1,[r1,#0]  ; SX1276
000004  4281              CMP      r1,r0
000006  d100              BNE      |L7.10|
                  |L7.8|
;;;119        {
;;;120            return;
;;;121        }
;;;122    
;;;123        SX1276.RxTx = rxTx;
;;;124    
;;;125        if( rxTx != 0 ) // 1: TX, 0: RX
;;;126        {
;;;127    		/** TX mdoe */
;;;128    //         GpioWrite( &AntSwitchRxTx1, 1 );
;;;129    //         GpioWrite( &AntSwitchRxTx2, 0 );
;;;130        }
;;;131        else
;;;132        {
;;;133    		/** RX mdoe */
;;;134    //         GpioWrite( &AntSwitchRxTx1, 0 );
;;;135    //         GpioWrite( &AntSwitchRxTx2, 1 );
;;;136        }
;;;137    }
000008  4770              BX       lr
                  |L7.10|
00000a  4902              LDR      r1,|L7.20|
00000c  7008              STRB     r0,[r1,#0]            ;123
00000e  bf00              NOP      
000010  e7fa              B        |L7.8|
;;;138    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      SX1276

                          AREA ||i.SX1276SetAntSwLowPower||, CODE, READONLY, ALIGN=2

                  SX1276SetAntSwLowPower PROC
;;;80       */
;;;81     void SX1276SetAntSwLowPower( bool status )
000000  b500              PUSH     {lr}
;;;82     {
000002  4602              MOV      r2,r0
;;;83         if( RadioIsActive != status )
000004  4806              LDR      r0,|L8.32|
000006  7800              LDRB     r0,[r0,#0]  ; RadioIsActive
000008  4290              CMP      r0,r2
00000a  d008              BEQ      |L8.30|
;;;84         {
;;;85             RadioIsActive = status;
00000c  4804              LDR      r0,|L8.32|
00000e  7002              STRB     r2,[r0,#0]
;;;86     
;;;87             if( status == false )
000010  2a00              CMP      r2,#0
000012  d102              BNE      |L8.26|
;;;88             {
;;;89                 SX1276AntSwInit( );
000014  f7fffffe          BL       SX1276AntSwInit
000018  e001              B        |L8.30|
                  |L8.26|
;;;90             }
;;;91             else
;;;92             {
;;;93                 SX1276AntSwDeInit( );
00001a  f7fffffe          BL       SX1276AntSwDeInit
                  |L8.30|
;;;94             }
;;;95         }
;;;96     }
00001e  bd00              POP      {pc}
;;;97     
                          ENDP

                  |L8.32|
                          DCD      RadioIsActive

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Radio
                          DCD      SX1276Init
                          DCD      SX1276GetStatus
                          DCD      SX1276SetModem
                          DCD      SX1276SetChannel
                          DCD      SX1276IsChannelFree
                          DCD      SX1276Random
                          DCD      SX1276SetRxConfig
                          DCD      SX1276SetTxConfig
                          DCD      SX1276CheckRfFrequency
                          DCD      SX1276GetTimeOnAir
                          DCD      SX1276Send
                          DCD      SX1276SetSleep
                          DCD      SX1276SetStby
                          DCD      SX1276SetRx
                          DCD      SX1276StartCad
                          DCD      SX1276ReadRssi
                          DCD      SX1276Write
                          DCD      SX1276Read
                          DCD      SX1276WriteBuffer
                          DCD      SX1276ReadBuffer
                          DCD      SX1276SetMaxPayloadLength

                          AREA ||.data||, DATA, ALIGN=0

                  RadioIsActive
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\HAL\\src\\sx1276-board.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_sx1276_board_c_Radio____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_sx1276_board_c_Radio____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_sx1276_board_c_Radio____REVSH|
#line 402
|__asm___14_sx1276_board_c_Radio____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
