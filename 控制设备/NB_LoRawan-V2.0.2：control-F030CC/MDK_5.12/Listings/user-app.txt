; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\user-app.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\user-app.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\user-app.crf ..\USER\user-app.c]
                          THUMB

                          AREA ||i.App_Estab_Communt||, CODE, READONLY, ALIGN=2

                  App_Estab_Communt PROC
;;;503     */
;;;504    void App_Estab_Communt( void )
000000  b510              PUSH     {r4,lr}
;;;505    {
;;;506    	 if( (IsNetworkJoined || ( OVER_THE_AIR_ACTIVATION != 1 )) && RF_Send_Data.Estab_Communt_State )
000002  4808              LDR      r0,|L1.36|
000004  7800              LDRB     r0,[r0,#0]  ; IsNetworkJoined
000006  2800              CMP      r0,#0
000008  d100              BNE      |L1.12|
00000a  bf00              NOP      
                  |L1.12|
00000c  4806              LDR      r0,|L1.40|
00000e  7d40              LDRB     r0,[r0,#0x15]  ; RF_Send_Data
000010  2800              CMP      r0,#0
000012  d005              BEQ      |L1.32|
;;;507    	 {    
;;;508    		 RF_Send_Data.Send_Buf = "ACK";
000014  a005              ADR      r0,|L1.44|
000016  4904              LDR      r1,|L1.40|
000018  60c8              STR      r0,[r1,#0xc]  ; RF_Send_Data
;;;509    		 User_send(RF_Send_Data.Send_Buf);
00001a  68c8              LDR      r0,[r1,#0xc]  ; RF_Send_Data
00001c  f7fffffe          BL       User_send
                  |L1.32|
;;;510    	 }
;;;511    	
;;;512    }
000020  bd10              POP      {r4,pc}
;;;513    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      IsNetworkJoined
                  |L1.40|
                          DCD      RF_Send_Data
                  |L1.44|
00002c  41434b00          DCB      "ACK",0

                          AREA ||i.Into_Low_Power||, CODE, READONLY, ALIGN=1

                  Into_Low_Power PROC
;;;261     */
;;;262    void Into_Low_Power(void)
000000  b510              PUSH     {r4,lr}
;;;263    {
;;;264    //	Radio.Sleep( );  ///LoRa进休眠状态
;;;265    
;;;266      BoardDeInitMcu(); ///关闭时钟线
000002  f7fffffe          BL       BoardDeInitMcu
;;;267        
;;;268     /*****************进入停机模式*********************/
;;;269    	
;;;270    	/* Enter Stop Mode */
;;;271    //	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
;;;272    	HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
000006  2101              MOVS     r1,#1
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       HAL_PWR_EnterSTOPMode
;;;273    }
00000e  bd10              POP      {r4,pc}
;;;274    
                          ENDP


                          AREA ||i.OnJoinReqTimerEvent||, CODE, READONLY, ALIGN=2

                  OnJoinReqTimerEvent PROC
;;;85      */
;;;86     void OnJoinReqTimerEvent( void )
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88         TimerStop( &JoinReqTimer );
000002  4805              LDR      r0,|L3.24|
000004  f7fffffe          BL       TimerStop
;;;89         JoinReq_flag = true;
000008  2001              MOVS     r0,#1
00000a  4904              LDR      r1,|L3.28|
00000c  7008              STRB     r0,[r1,#0]
;;;90         DEBUG(2,"OnJoinReqTimerEvent \r\n");
00000e  a004              ADR      r0,|L3.32|
000010  f7fffffe          BL       __2printf
;;;91     }
000014  bd10              POP      {r4,pc}
;;;92     
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      JoinReqTimer
                  |L3.28|
                          DCD      JoinReq_flag
                  |L3.32|
000020  4f6e4a6f          DCB      "OnJoinReqTimerEvent \r\n",0
000024  696e5265
000028  7154696d
00002c  65724576
000030  656e7420
000034  0d0a00  
000037  00                DCB      0

                          AREA ||i.OnMacEvent||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  OnMacEvent PROC
;;;98      */
;;;99     void OnMacEvent( LoRaMacEventFlags_t *flags, LoRaMacEventInfo_t *info )///MAC层发送、接收状态判断、数据处理
000000  b5f8              PUSH     {r3-r7,lr}
;;;100    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;101        switch( info->Status ){
000006  7828              LDRB     r0,[r5,#0]
000008  2800              CMP      r0,#0
00000a  d004              BEQ      |L4.22|
00000c  2801              CMP      r0,#1
00000e  d004              BEQ      |L4.26|
000010  2803              CMP      r0,#3
000012  d103              BNE      |L4.28|
000014  e000              B        |L4.24|
                  |L4.22|
;;;102            case LORAMAC_EVENT_INFO_STATUS_OK:
;;;103                break;
000016  e002              B        |L4.30|
                  |L4.24|
;;;104            case LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT:;
;;;105                break;
000018  e001              B        |L4.30|
                  |L4.26|
;;;106            case LORAMAC_EVENT_INFO_STATUS_ERROR:
;;;107                break;
00001a  e000              B        |L4.30|
                  |L4.28|
;;;108            default:
;;;109                break;
00001c  bf00              NOP      
                  |L4.30|
00001e  bf00              NOP                            ;103
;;;110        }
;;;111    
;;;112        if( flags->Bits.JoinAccept == 1 ){       
000020  7820              LDRB     r0,[r4,#0]
000022  09c0              LSRS     r0,r0,#7
000024  2800              CMP      r0,#0
000026  d00f              BEQ      |L4.72|
;;;113            DEBUG(2,"join done\r\n");
000028  a050              ADR      r0,|L4.364|
00002a  f7fffffe          BL       __2printf
;;;114            TimerStop( &JoinReqTimer );
00002e  4852              LDR      r0,|L4.376|
000030  f7fffffe          BL       TimerStop
;;;115            IsNetworkJoined = true;
000034  2001              MOVS     r0,#1
000036  4951              LDR      r1,|L4.380|
000038  7008              STRB     r0,[r1,#0]
;;;116    				Rx_Led( );
00003a  f7fffffe          BL       Rx_Led
;;;117            mac_callback_g(MAC_STA_CMD_JOINACCEPT, NULL);
00003e  2100              MOVS     r1,#0
000040  2005              MOVS     r0,#5
000042  4a4f              LDR      r2,|L4.384|
000044  6812              LDR      r2,[r2,#0]  ; mac_callback_g
000046  4790              BLX      r2
                  |L4.72|
;;;118        }  
;;;119      
;;;120        if( info->TxAckReceived == true ){ /// McpsConfirm.AckReceived = true;接收回调函数
000048  7868              LDRB     r0,[r5,#1]
00004a  2801              CMP      r0,#1
00004c  d10f              BNE      |L4.110|
;;;121            if(mac_callback_g!=NULL){
00004e  484c              LDR      r0,|L4.384|
000050  6800              LDR      r0,[r0,#0]  ; mac_callback_g
000052  2800              CMP      r0,#0
000054  d020              BEQ      |L4.152|
;;;122                mac_callback_g(MAC_STA_ACK_RECEIVED, &RxInfo); ///相当于调用app_lm_cb函数
000056  494b              LDR      r1,|L4.388|
000058  2003              MOVS     r0,#3
00005a  4a49              LDR      r2,|L4.384|
00005c  6812              LDR      r2,[r2,#0]  ; mac_callback_g
00005e  4790              BLX      r2
;;;123    						LoRapp_SenSor_States.Ack_Recived = true;    
000060  2001              MOVS     r0,#1
000062  4949              LDR      r1,|L4.392|
000064  7008              STRB     r0,[r1,#0]
;;;124    						DEBUG(2,"ACK Received\r\n");
000066  a049              ADR      r0,|L4.396|
000068  f7fffffe          BL       __2printf
00006c  e014              B        |L4.152|
                  |L4.110|
;;;125            }
;;;126    		}else if((flags->Bits.Rx != 1) && (flags->Bits.JoinAccept != 1) && (LoRaFrameType == CONFIRMED))
00006e  7820              LDRB     r0,[r4,#0]
000070  0780              LSLS     r0,r0,#30
000072  0fc0              LSRS     r0,r0,#31
000074  2800              CMP      r0,#0
000076  d10f              BNE      |L4.152|
000078  7820              LDRB     r0,[r4,#0]
00007a  09c0              LSRS     r0,r0,#7
00007c  2800              CMP      r0,#0
00007e  d10b              BNE      |L4.152|
000080  4846              LDR      r0,|L4.412|
000082  7800              LDRB     r0,[r0,#0]  ; LoRaFrameType
000084  2800              CMP      r0,#0
000086  d107              BNE      |L4.152|
;;;127    			{
;;;128            DEBUG(2,"=====NO ACK REPLY=====\r\n");     
000088  a045              ADR      r0,|L4.416|
00008a  f7fffffe          BL       __2printf
;;;129            mac_callback_g(MAC_STA_ACK_UNRECEIVED, NULL);        
00008e  2100              MOVS     r1,#0
000090  2004              MOVS     r0,#4
000092  4a3b              LDR      r2,|L4.384|
000094  6812              LDR      r2,[r2,#0]  ; mac_callback_g
000096  4790              BLX      r2
                  |L4.152|
;;;130    			}
;;;131    	
;;;132           if( flags->Bits.Rx == 1 ){  ///接收到数据，数据信息保存RxData: 网关应答数据默认不打印接收信息
000098  7820              LDRB     r0,[r4,#0]
00009a  0780              LSLS     r0,r0,#30
00009c  0fc0              LSRS     r0,r0,#31
00009e  2800              CMP      r0,#0
0000a0  d045              BEQ      |L4.302|
;;;133                RxInfo.size = info->RxBufferSize;
0000a2  7b28              LDRB     r0,[r5,#0xc]
0000a4  4937              LDR      r1,|L4.388|
0000a6  80c8              STRH     r0,[r1,#6]
;;;134                memcpy(RxInfo.buf, info->RxBuffer, RxInfo.size);
0000a8  4608              MOV      r0,r1
0000aa  88c2              LDRH     r2,[r0,#6]  ; RxInfo
0000ac  3008              ADDS     r0,r0,#8
0000ae  68a9              LDR      r1,[r5,#8]
0000b0  f7fffffe          BL       __aeabi_memcpy
;;;135                RxInfo.rssi = info->RxRssi;
0000b4  89e8              LDRH     r0,[r5,#0xe]
0000b6  4933              LDR      r1,|L4.388|
0000b8  8008              STRH     r0,[r1,#0]
;;;136                RxInfo.snr = info->RxSnr;
0000ba  7c28              LDRB     r0,[r5,#0x10]
0000bc  7088              STRB     r0,[r1,#2]
;;;137                RxInfo.win = flags->Bits.RxSlot+1;
0000be  7820              LDRB     r0,[r4,#0]
0000c0  0680              LSLS     r0,r0,#26
0000c2  0f80              LSRS     r0,r0,#30
0000c4  1c40              ADDS     r0,r0,#1
0000c6  70c8              STRB     r0,[r1,#3]
;;;138                RxInfo.port = info->RxPort;
0000c8  7928              LDRB     r0,[r5,#4]
0000ca  7108              STRB     r0,[r1,#4]
;;;139               
;;;140    						DEBUG(2,"win = %d snr = %d rssi = %d size = %d \r\n",RxInfo.win, RxInfo.snr, RxInfo.rssi, RxInfo.size);
0000cc  4608              MOV      r0,r1
0000ce  88c0              LDRH     r0,[r0,#6]  ; RxInfo
0000d0  9000              STR      r0,[sp,#0]
0000d2  4608              MOV      r0,r1
0000d4  2300              MOVS     r3,#0
0000d6  5ec3              LDRSH    r3,[r0,r3]  ; RxInfo
0000d8  7882              LDRB     r2,[r0,#2]  ; RxInfo
0000da  78c1              LDRB     r1,[r0,#3]  ; RxInfo
0000dc  a037              ADR      r0,|L4.444|
0000de  f7fffffe          BL       __2printf
;;;141    //						Rx_Led( );	
;;;142                if(flags->Bits.RxData == 1){
0000e2  7820              LDRB     r0,[r4,#0]
0000e4  0740              LSLS     r0,r0,#29
0000e6  0fc0              LSRS     r0,r0,#31
0000e8  2800              CMP      r0,#0
0000ea  d020              BEQ      |L4.302|
;;;143                    if(mac_callback_g!=NULL){
0000ec  4824              LDR      r0,|L4.384|
0000ee  6800              LDR      r0,[r0,#0]  ; mac_callback_g
0000f0  2800              CMP      r0,#0
0000f2  d01c              BEQ      |L4.302|
;;;144                        mac_callback_g(MAC_STA_RXDONE, &RxInfo);
0000f4  4923              LDR      r1,|L4.388|
0000f6  2001              MOVS     r0,#1
0000f8  4a21              LDR      r2,|L4.384|
0000fa  6812              LDR      r2,[r2,#0]  ; mac_callback_g
0000fc  4790              BLX      r2
;;;145    									if( RxInfo.size>0 )
0000fe  4821              LDR      r0,|L4.388|
000100  88c0              LDRH     r0,[r0,#6]  ; RxInfo
000102  2800              CMP      r0,#0
000104  dd13              BLE      |L4.302|
;;;146    									{
;;;147                        DEBUG(2,"RxInfo.buf = ");
000106  a038              ADR      r0,|L4.488|
000108  f7fffffe          BL       __2printf
;;;148                        for( uint8_t i = 0; i < RxInfo.size; i++ )
00010c  2600              MOVS     r6,#0
00010e  e007              B        |L4.288|
                  |L4.272|
;;;149                        DEBUG(2,"%02x ",RxInfo.buf[i]);
000110  481c              LDR      r0,|L4.388|
000112  3008              ADDS     r0,r0,#8
000114  5d81              LDRB     r1,[r0,r6]
000116  a038              ADR      r0,|L4.504|
000118  f7fffffe          BL       __2printf
00011c  1c70              ADDS     r0,r6,#1              ;148
00011e  b2c6              UXTB     r6,r0                 ;148
                  |L4.288|
000120  4818              LDR      r0,|L4.388|
000122  88c0              LDRH     r0,[r0,#6]            ;148  ; RxInfo
000124  42b0              CMP      r0,r6                 ;148
000126  dcf3              BGT      |L4.272|
;;;150                        DEBUG(2,"\r\n");
000128  a01b              ADR      r0,|L4.408|
00012a  f7fffffe          BL       __2printf
                  |L4.302|
;;;151    									}
;;;152                    }
;;;153                }           				
;;;154            }
;;;155         
;;;156        if( flags->Bits.Tx == 1 )
00012e  7820              LDRB     r0,[r4,#0]
000130  07c0              LSLS     r0,r0,#31
000132  0fc0              LSRS     r0,r0,#31
000134  2800              CMP      r0,#0
000136  d018              BEQ      |L4.362|
;;;157        {
;;;158            if(mac_callback_g!=NULL){
000138  4811              LDR      r0,|L4.384|
00013a  6800              LDR      r0,[r0,#0]  ; mac_callback_g
00013c  2800              CMP      r0,#0
00013e  d014              BEQ      |L4.362|
;;;159                mac_callback_g(MAC_STA_TXDONE, NULL);
000140  2100              MOVS     r1,#0
000142  4608              MOV      r0,r1
000144  4a0e              LDR      r2,|L4.384|
000146  6812              LDR      r2,[r2,#0]  ; mac_callback_g
000148  4790              BLX      r2
;;;160              if( flags->Bits.JoinAccept == 1 ) ///如果是OTAA入网请求应答，则直接发送数据不需要等待，否则等待
00014a  7820              LDRB     r0,[r4,#0]
00014c  09c0              LSRS     r0,r0,#7
00014e  2800              CMP      r0,#0
000150  d003              BEQ      |L4.346|
;;;161              {
;;;162                LoRapp_SenSor_States.loramac_evt_flag = 0;
000152  2000              MOVS     r0,#0
000154  490c              LDR      r1,|L4.392|
000156  7088              STRB     r0,[r1,#2]
000158  e002              B        |L4.352|
                  |L4.346|
;;;163              }else
;;;164              LoRapp_SenSor_States.loramac_evt_flag = 1;
00015a  2001              MOVS     r0,#1
00015c  490a              LDR      r1,|L4.392|
00015e  7088              STRB     r0,[r1,#2]
                  |L4.352|
;;;165                  
;;;166              DEBUG(2,"Done\r\n");
000160  a027              ADR      r0,|L4.512|
000162  f7fffffe          BL       __2printf
;;;167    					Send_Led( );
000166  f7fffffe          BL       Send_Led
                  |L4.362|
;;;168            }
;;;169        }
;;;170    }
00016a  bdf8              POP      {r3-r7,pc}
;;;171    void user_app_init(mac_callback_t mac)
                          ENDP

                  |L4.364|
00016c  6a6f696e          DCB      "join done\r\n",0
000170  20646f6e
000174  650d0a00
                  |L4.376|
                          DCD      JoinReqTimer
                  |L4.380|
                          DCD      IsNetworkJoined
                  |L4.384|
                          DCD      mac_callback_g
                  |L4.388|
                          DCD      RxInfo
                  |L4.392|
                          DCD      LoRapp_SenSor_States
                  |L4.396|
00018c  41434b20          DCB      "ACK Received"
000190  52656365
000194  69766564
                  |L4.408|
000198  0d0a00            DCB      "\r\n",0
00019b  00                DCB      0
                  |L4.412|
                          DCD      LoRaFrameType
                  |L4.416|
0001a0  3d3d3d3d          DCB      "=====NO ACK REPLY=====\r\n",0
0001a4  3d4e4f20
0001a8  41434b20
0001ac  5245504c
0001b0  593d3d3d
0001b4  3d3d0d0a
0001b8  00      
0001b9  00                DCB      0
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L4.444|
0001bc  77696e20          DCB      "win = %d snr = %d rssi = %d size = %d \r\n",0
0001c0  3d202564
0001c4  20736e72
0001c8  203d2025
0001cc  64207273
0001d0  7369203d
0001d4  20256420
0001d8  73697a65
0001dc  203d2025
0001e0  64200d0a
0001e4  00      
0001e5  00                DCB      0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L4.488|
0001e8  5278496e          DCB      "RxInfo.buf = ",0
0001ec  666f2e62
0001f0  7566203d
0001f4  2000    
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L4.504|
0001f8  25303278          DCB      "%02x ",0
0001fc  2000    
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L4.512|
000200  446f6e65          DCB      "Done\r\n",0
000204  0d0a00  
000207  00                DCB      0

                          AREA ||i.OnReportTimerEvent||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  OnReportTimerEvent PROC
;;;343    
;;;344    void OnReportTimerEvent( void )
000000  b510              PUSH     {r4,lr}
;;;345    {
;;;346        ReportTimerEvent = true;
000002  2001              MOVS     r0,#1
000004  4903              LDR      r1,|L5.20|
000006  7008              STRB     r0,[r1,#0]
;;;347    	  DEBUG(2,"%s\r\n",__func__);
000008  4903              LDR      r1,|L5.24|
00000a  a004              ADR      r0,|L5.28|
00000c  f7fffffe          BL       __2printf
;;;348    }
000010  bd10              POP      {r4,pc}
;;;349    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      ReportTimerEvent
                  |L5.24|
                          DCD      __func__
                  |L5.28|
00001c  25730d0a          DCB      "%s\r\n",0
000020  00      
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0

                          AREA ||i.Receive_ConTrol_Data||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Receive_ConTrol_Data PROC
;;;517     */
;;;518    void Receive_ConTrol_Data(void)
000000  b538              PUSH     {r3-r5,lr}
;;;519    {	
;;;520    
;;;521     if( Control_States.Auto_Mode == false )///手动模式
000002  483e              LDR      r0,|L6.252|
000004  7800              LDRB     r0,[r0,#0]  ; Control_States
000006  2800              CMP      r0,#0
000008  d13e              BNE      |L6.136|
;;;522     {
;;;523    	///发送对应控制指令控制设备：手动模式下，全部关闭
;;;524    	 memset(RF_Send_Data.Send_Buf, 0, strlen((char *)RF_Send_Data.Send_Buf));
00000a  493d              LDR      r1,|L6.256|
00000c  68c8              LDR      r0,[r1,#0xc]  ; RF_Send_Data
00000e  f7fffffe          BL       strlen
000012  4604              MOV      r4,r0
000014  493a              LDR      r1,|L6.256|
000016  68c8              LDR      r0,[r1,#0xc]  ; RF_Send_Data
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       __aeabi_memclr
;;;525    
;;;526    	 RF_Send_Data.Send_Buf[0] = 01;
00001e  2001              MOVS     r0,#1
000020  4937              LDR      r1,|L6.256|
000022  68c9              LDR      r1,[r1,#0xc]  ; RF_Send_Data
000024  7008              STRB     r0,[r1,#0]
;;;527    	 RF_Send_Data.Send_Buf[1] = 00;
000026  2000              MOVS     r0,#0
000028  4935              LDR      r1,|L6.256|
00002a  68c9              LDR      r1,[r1,#0xc]  ; RF_Send_Data
00002c  7048              STRB     r0,[r1,#1]
;;;528    	 RF_Send_Data.Send_Buf[2] = 04;
00002e  2004              MOVS     r0,#4
000030  4933              LDR      r1,|L6.256|
000032  68c9              LDR      r1,[r1,#0xc]  ; RF_Send_Data
000034  7088              STRB     r0,[r1,#2]
;;;529    	 RF_Send_Data.Send_Buf[3] = 00;
000036  2000              MOVS     r0,#0
000038  4931              LDR      r1,|L6.256|
00003a  68c9              LDR      r1,[r1,#0xc]  ; RF_Send_Data
00003c  70c8              STRB     r0,[r1,#3]
;;;530    	 Control_Relay(RF_Send_Data.Send_Buf);
00003e  4930              LDR      r1,|L6.256|
000040  68c8              LDR      r0,[r1,#0xc]  ; RF_Send_Data
000042  f7fffffe          BL       Control_Relay
;;;531    		 
;;;532    	 ///发送：当前处于手动模式：原数据返回
;;;533    	 TimerStop( &ReportTimer );
000046  482f              LDR      r0,|L6.260|
000048  f7fffffe          BL       TimerStop
;;;534    	 TimerSetValue( &ReportTimer,100000 );
00004c  492e              LDR      r1,|L6.264|
00004e  482d              LDR      r0,|L6.260|
000050  f7fffffe          BL       TimerSetValue
;;;535    	 TimerStart( &ReportTimer );
000054  482b              LDR      r0,|L6.260|
000056  f7fffffe          BL       TimerStart
;;;536    	 DEBUG(2,"TimerStart\r\n");
00005a  a02c              ADR      r0,|L6.268|
00005c  f7fffffe          BL       __2printf
;;;537    	 while(ReportTimerEvent != true);		
000060  bf00              NOP      
                  |L6.98|
000062  482e              LDR      r0,|L6.284|
000064  7800              LDRB     r0,[r0,#0]  ; ReportTimerEvent
000066  2801              CMP      r0,#1
000068  d1fb              BNE      |L6.98|
;;;538    	 do
00006a  bf00              NOP      
                  |L6.108|
;;;539    	 {
;;;540    		 ///发送：执行完成：原数据返回
;;;541    		 User_send(RF_Send_Data.Send_Buf);	
00006c  4924              LDR      r1,|L6.256|
00006e  68c8              LDR      r0,[r1,#0xc]  ; RF_Send_Data
000070  f7fffffe          BL       User_send
;;;542    	 }while(LoRapp_SenSor_States.loramac_evt_flag==0);
000074  482a              LDR      r0,|L6.288|
000076  7880              LDRB     r0,[r0,#2]  ; LoRapp_SenSor_States
000078  2800              CMP      r0,#0
00007a  d0f7              BEQ      |L6.108|
;;;543    		
;;;544    		/*******************清除发送完成标志*********************/
;;;545    		__disable_irq();
00007c  b672              CPSID    i
;;;546    		LoRapp_SenSor_States.loramac_evt_flag = 0;
00007e  2000              MOVS     r0,#0
000080  4927              LDR      r1,|L6.288|
000082  7088              STRB     r0,[r1,#2]
;;;547    		__enable_irq();
000084  b662              CPSIE    i
000086  e038              B        |L6.250|
                  |L6.136|
;;;548    		 
;;;549     }
;;;550    	else
;;;551    	{
;;;552    		if(RxInfo.size > 0)
000088  4826              LDR      r0,|L6.292|
00008a  88c0              LDRH     r0,[r0,#6]  ; RxInfo
00008c  2800              CMP      r0,#0
00008e  dd34              BLE      |L6.250|
;;;553    		{			
;;;554    			uint8_t data[4] = {0};
000090  2000              MOVS     r0,#0
000092  9000              STR      r0,[sp,#0]
;;;555    			
;;;556    	  	RxInfo.size = 0;
000094  4923              LDR      r1,|L6.292|
000096  80c8              STRH     r0,[r1,#6]
;;;557    
;;;558    			///异常原因
;;;559    			memcpy(data, RxInfo.buf, 2); ///USART5接收缓存copy
000098  4608              MOV      r0,r1
00009a  8900              LDRH     r0,[r0,#8]  ; RxInfo
00009c  4669              MOV      r1,sp
00009e  8008              STRH     r0,[r1,#0]
;;;560    			
;;;561    			Control_Relay(data);
0000a0  4668              MOV      r0,sp
0000a2  f7fffffe          BL       Control_Relay
;;;562    			memset(RxInfo.buf, 0, 2);
0000a6  481f              LDR      r0,|L6.292|
0000a8  2100              MOVS     r1,#0
0000aa  8101              STRH     r1,[r0,#8]
;;;563    		
;;;564    			TimerStop( &ReportTimer );
0000ac  4815              LDR      r0,|L6.260|
0000ae  f7fffffe          BL       TimerStop
;;;565    			TimerSetValue( &ReportTimer,100000 );
0000b2  4915              LDR      r1,|L6.264|
0000b4  4813              LDR      r0,|L6.260|
0000b6  f7fffffe          BL       TimerSetValue
;;;566    			TimerStart( &ReportTimer );
0000ba  4812              LDR      r0,|L6.260|
0000bc  f7fffffe          BL       TimerStart
;;;567    	    DEBUG(2,"TimerStart\r\n");
0000c0  a012              ADR      r0,|L6.268|
0000c2  f7fffffe          BL       __2printf
;;;568    			while(ReportTimerEvent != true);		
0000c6  bf00              NOP      
                  |L6.200|
0000c8  4814              LDR      r0,|L6.284|
0000ca  7800              LDRB     r0,[r0,#0]  ; ReportTimerEvent
0000cc  2801              CMP      r0,#1
0000ce  d1fb              BNE      |L6.200|
;;;569    			do
0000d0  bf00              NOP      
                  |L6.210|
;;;570    			{
;;;571    				///发送：执行完成：原数据返回
;;;572    				User_send(&Control_States.send_buf[2]);	
0000d2  480a              LDR      r0,|L6.252|
0000d4  1dc0              ADDS     r0,r0,#7
0000d6  f7fffffe          BL       User_send
;;;573    			}
;;;574    			while(LoRapp_SenSor_States.loramac_evt_flag==0);
0000da  4811              LDR      r0,|L6.288|
0000dc  7880              LDRB     r0,[r0,#2]  ; LoRapp_SenSor_States
0000de  2800              CMP      r0,#0
0000e0  d0f7              BEQ      |L6.210|
;;;575    			
;;;576    		  DEBUG(2,"TimerStart %d %d\r\n",Control_States.send_buf[2],Control_States.send_buf[3]);
0000e2  4806              LDR      r0,|L6.252|
0000e4  7a02              LDRB     r2,[r0,#8]
0000e6  79c1              LDRB     r1,[r0,#7]
0000e8  a00f              ADR      r0,|L6.296|
0000ea  f7fffffe          BL       __2printf
;;;577    			
;;;578    			/*******************清除发送完成标志*********************/
;;;579    			__disable_irq();
0000ee  b672              CPSID    i
;;;580    			LoRapp_SenSor_States.loramac_evt_flag = 0;
0000f0  2000              MOVS     r0,#0
0000f2  490b              LDR      r1,|L6.288|
0000f4  7088              STRB     r0,[r1,#2]
;;;581    			__enable_irq();
0000f6  b662              CPSIE    i
;;;582    		}	
0000f8  bf00              NOP      
                  |L6.250|
;;;583    	}
;;;584    }
0000fa  bd38              POP      {r3-r5,pc}
                          ENDP

                  |L6.252|
                          DCD      Control_States
                  |L6.256|
                          DCD      RF_Send_Data
                  |L6.260|
                          DCD      ReportTimer
                  |L6.264|
                          DCD      0x000186a0
                  |L6.268|
00010c  54696d65          DCB      "TimerStart\r\n",0
000110  72537461
000114  72740d0a
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L6.284|
                          DCD      ReportTimerEvent
                  |L6.288|
                          DCD      LoRapp_SenSor_States
                  |L6.292|
                          DCD      RxInfo
                  |L6.296|
000128  54696d65          DCB      "TimerStart %d %d\r\n",0
00012c  72537461
000130  72742025
000134  64202564
000138  0d0a00  
00013b  00                DCB      0

                          AREA ||i.Rx_Led||, CODE, READONLY, ALIGN=1

                  Rx_Led PROC
;;;319    
;;;320    void Rx_Led(void)
000000  b510              PUSH     {r4,lr}
;;;321    {
;;;322      for(uint8_t i = 0; i < 3; i++)
000002  2400              MOVS     r4,#0
000004  e016              B        |L7.52|
                  |L7.6|
;;;323    	{
;;;324    		delay_ms(400);
000006  20ff              MOVS     r0,#0xff
000008  3091              ADDS     r0,r0,#0x91
00000a  f7fffffe          BL       delay_ms
;;;325    		GpioWrite(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
00000e  2201              MOVS     r2,#1
000010  03d1              LSLS     r1,r2,#15
000012  2009              MOVS     r0,#9
000014  06c0              LSLS     r0,r0,#27
000016  f7fffffe          BL       GpioWrite
;;;326    		delay_ms(400);
00001a  20ff              MOVS     r0,#0xff
00001c  3091              ADDS     r0,r0,#0x91
00001e  f7fffffe          BL       delay_ms
;;;327    		GpioWrite(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
000022  2200              MOVS     r2,#0
000024  2101              MOVS     r1,#1
000026  03c9              LSLS     r1,r1,#15
000028  2009              MOVS     r0,#9
00002a  06c0              LSLS     r0,r0,#27
00002c  f7fffffe          BL       GpioWrite
000030  1c60              ADDS     r0,r4,#1              ;322
000032  b2c4              UXTB     r4,r0                 ;322
                  |L7.52|
000034  2c03              CMP      r4,#3                 ;322
000036  dbe6              BLT      |L7.6|
;;;328    	}
;;;329    }
000038  bd10              POP      {r4,pc}
;;;330    
                          ENDP


                          AREA ||i.SX1278_Send||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SX1278_Send PROC
;;;353     */
;;;354    void SX1278_Send(uint8_t *send_buf)
000000  b570              PUSH     {r4-r6,lr}
;;;355    {	 	      
000002  4604              MOV      r4,r0
;;;356    	switch(sys_sta)
000004  4878              LDR      r0,|L8.488|
000006  7800              LDRB     r0,[r0,#0]  ; sys_sta
000008  2800              CMP      r0,#0
00000a  d002              BEQ      |L8.18|
00000c  2801              CMP      r0,#1
00000e  d170              BNE      |L8.242|
000010  e021              B        |L8.86|
                  |L8.18|
;;;357    	{
;;;358    		case SYS_STA_IDLE:
;;;359    		if(ReportTimerEvent == true)
000012  4876              LDR      r0,|L8.492|
000014  7800              LDRB     r0,[r0,#0]  ; ReportTimerEvent
000016  2801              CMP      r0,#1
000018  d11c              BNE      |L8.84|
;;;360    		{ 
;;;361    			sys_sta = SYS_STA_TX; 
00001a  4973              LDR      r1,|L8.488|
00001c  7008              STRB     r0,[r1,#0]
;;;362    			if(RF_Send_Data.Len == 0 && RF_Send_Data.Send_again == false) //当前数据为空，同时不是发送失败下获取数据，重新获取数据发送
00001e  4874              LDR      r0,|L8.496|
000020  8840              LDRH     r0,[r0,#2]  ; RF_Send_Data
000022  2800              CMP      r0,#0
000024  d10f              BNE      |L8.70|
000026  4872              LDR      r0,|L8.496|
000028  7d00              LDRB     r0,[r0,#0x14]  ; RF_Send_Data
00002a  2800              CMP      r0,#0
00002c  d10b              BNE      |L8.70|
;;;363    			{							
;;;364    				RF_Send_Data.RX_LEN = 2;///sizeof *send_buf
00002e  2002              MOVS     r0,#2
000030  496f              LDR      r1,|L8.496|
000032  8008              STRH     r0,[r1,#0]
;;;365    				memcpy(RF_Send_Data.RF_BUF, send_buf, RF_Send_Data.RX_LEN);   //MAC+PHY=56  MAC = 13  
000034  4608              MOV      r0,r1
000036  8802              LDRH     r2,[r0,#0]  ; RF_Send_Data
000038  4621              MOV      r1,r4
00003a  1dc0              ADDS     r0,r0,#7
00003c  f7fffffe          BL       __aeabi_memcpy
;;;366    				RF_Send_Data.Error_count = 0;			
000040  2000              MOVS     r0,#0
000042  496b              LDR      r1,|L8.496|
000044  7408              STRB     r0,[r1,#0x10]
                  |L8.70|
;;;367    			}	
;;;368    			DEBUG(2,"START len = %d ReportTimerEvent = %d\r\n",RF_Send_Data.RX_LEN,ReportTimerEvent);					
000046  486a              LDR      r0,|L8.496|
000048  8801              LDRH     r1,[r0,#0]  ; RF_Send_Data
00004a  4868              LDR      r0,|L8.492|
00004c  7802              LDRB     r2,[r0,#0]  ; ReportTimerEvent
00004e  a069              ADR      r0,|L8.500|
000050  f7fffffe          BL       __2printf
                  |L8.84|
;;;369    		}
;;;370    		 break;
000054  e0c6              B        |L8.484|
                  |L8.86|
;;;371    		 case SYS_STA_TX:		
;;;372    						 
;;;373    			 if( RF_Send_Data.RX_LEN > 0)
000056  4866              LDR      r0,|L8.496|
000058  8800              LDRH     r0,[r0,#0]  ; RF_Send_Data
00005a  2800              CMP      r0,#0
00005c  dd7e              BLE      |L8.348|
;;;374    			{
;;;375    				if(RF_Send_Data.Estab_Communt_State==false)
;;;376    				DEBUG(4,"line = %d\r\n",__LINE__);	
;;;377    
;;;378    				if(RF_Send_Data.RX_LEN < RF_Send_Data.TX_Len)
00005e  4864              LDR      r0,|L8.496|
000060  8800              LDRH     r0,[r0,#0]  ; RF_Send_Data
000062  4963              LDR      r1,|L8.496|
000064  8889              LDRH     r1,[r1,#4]  ; RF_Send_Data
000066  4288              CMP      r0,r1
000068  da03              BGE      |L8.114|
;;;379    				{
;;;380    					DEBUG(4,"line = %d ReportTimerEvent = %d\r\n",__LINE__,ReportTimerEvent);	
;;;381    					RF_Send_Data.TX_Len = RF_Send_Data.RX_LEN;
00006a  4861              LDR      r0,|L8.496|
00006c  8800              LDRH     r0,[r0,#0]  ; RF_Send_Data
00006e  4960              LDR      r1,|L8.496|
000070  8088              STRH     r0,[r1,#4]
                  |L8.114|
;;;382    				}				
;;;383    
;;;384    				if(ReportTimerEvent == true)
000072  485e              LDR      r0,|L8.492|
000074  7800              LDRB     r0,[r0,#0]  ; ReportTimerEvent
000076  2801              CMP      r0,#1
000078  d15d              BNE      |L8.310|
;;;385    				{
;;;386    					LoRaCad.Cad_Mode = true;
00007a  4968              LDR      r1,|L8.540|
00007c  7008              STRB     r0,[r1,#0]
;;;387    				
;;;388    					DEBUG(2,"line = %d\r\n",__LINE__);	
00007e  21ff              MOVS     r1,#0xff
000080  3185              ADDS     r1,r1,#0x85
000082  a067              ADR      r0,|L8.544|
000084  f7fffffe          BL       __2printf
;;;389    					
;;;390    					while(LoRaCad.Cad_Mode || LoRaCad.Cad_Detect)	//10ms超时处理
000088  e001              B        |L8.142|
                  |L8.138|
;;;391    					LoRa_Cad_Mode( );		
00008a  f7fffffe          BL       LoRa_Cad_Mode
                  |L8.142|
00008e  4863              LDR      r0,|L8.540|
000090  7800              LDRB     r0,[r0,#0]            ;390  ; LoRaCad
000092  2800              CMP      r0,#0                 ;390
000094  d1f9              BNE      |L8.138|
000096  4861              LDR      r0,|L8.540|
000098  7880              LDRB     r0,[r0,#2]            ;390  ; LoRaCad
00009a  2800              CMP      r0,#0                 ;390
00009c  d1f5              BNE      |L8.138|
;;;392    									
;;;393    					Channel = Get_max(3,LoRaCad.Rssi); ///获取信道ID
00009e  495f              LDR      r1,|L8.540|
0000a0  311a              ADDS     r1,r1,#0x1a
0000a2  2003              MOVS     r0,#3
0000a4  f7fffffe          BL       Get_max
0000a8  4960              LDR      r1,|L8.556|
0000aa  7008              STRB     r0,[r1,#0]
;;;394    
;;;395    					if( user_app_send(CONFIRMED, &RF_Send_Data.RF_BUF[RF_Send_Data.Len], RF_Send_Data.TX_Len, 1) == 0 )
0000ac  4850              LDR      r0,|L8.496|
0000ae  8882              LDRH     r2,[r0,#4]  ; RF_Send_Data
0000b0  8843              LDRH     r3,[r0,#2]  ; RF_Send_Data
0000b2  1dc0              ADDS     r0,r0,#7
0000b4  1819              ADDS     r1,r3,r0
0000b6  2301              MOVS     r3,#1
0000b8  2000              MOVS     r0,#0
0000ba  f7fffffe          BL       user_app_send
0000be  2800              CMP      r0,#0
0000c0  d118              BNE      |L8.244|
;;;396    					{                               							 
;;;397    //						printf("Wait ACK app_send again count = %d len = %d\r\n", RF_Send_Data.Error_count,RF_Send_Data.Len);
;;;398    						DEBUG(2,"Wait ACK app_send UpLinkCounter = %d\r\n", LoRaMacGetUpLinkCounter( ));
0000c2  f7fffffe          BL       LoRaMacGetUpLinkCounter
0000c6  4605              MOV      r5,r0
0000c8  4629              MOV      r1,r5
0000ca  a059              ADR      r0,|L8.560|
0000cc  f7fffffe          BL       __2printf
;;;399    						ReportTimerEvent = false;
0000d0  2000              MOVS     r0,#0
0000d2  4946              LDR      r1,|L8.492|
0000d4  7008              STRB     r0,[r1,#0]
;;;400    						if(RF_Send_Data.TX_Len == RF_Send_Data.RX_LEN)
0000d6  4846              LDR      r0,|L8.496|
0000d8  8880              LDRH     r0,[r0,#4]  ; RF_Send_Data
0000da  4945              LDR      r1,|L8.496|
0000dc  8809              LDRH     r1,[r1,#0]  ; RF_Send_Data
0000de  4288              CMP      r0,r1
0000e0  d129              BNE      |L8.310|
;;;401    						{  ///发送数据结束后判断最后一次发送的数据是否为最后一包是则清除
;;;402    							memset(AppData, 0, sizeof(AppData));
0000e2  212b              MOVS     r1,#0x2b
0000e4  485c              LDR      r0,|L8.600|
0000e6  f7fffffe          BL       __aeabi_memclr4
;;;403    							RF_Send_Data.RF_Send = true;						
0000ea  2001              MOVS     r0,#1
0000ec  4940              LDR      r1,|L8.496|
0000ee  74c8              STRB     r0,[r1,#0x13]
0000f0  e021              B        |L8.310|
                  |L8.242|
0000f2  e076              B        |L8.482|
                  |L8.244|
;;;404    						}
;;;405    					}
;;;406    					else 
;;;407    					{ ///发送失败随机超时发送：发送失败原因datarate发生改变导致数据发送失败
;;;408    						ReportTimerEvent = false;
0000f4  2000              MOVS     r0,#0
0000f6  493d              LDR      r1,|L8.492|
0000f8  7008              STRB     r0,[r1,#0]
;;;409    						TimerStop( &ReportTimer );
0000fa  4858              LDR      r0,|L8.604|
0000fc  f7fffffe          BL       TimerStop
;;;410    						TimerSetValue( &ReportTimer, APP_TX_DUTYCYCLE_RND + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND ) );
000100  4957              LDR      r1,|L8.608|
000102  4248              RSBS     r0,r1,#0
000104  f7fffffe          BL       randr
000108  4955              LDR      r1,|L8.608|
00010a  1845              ADDS     r5,r0,r1
00010c  4629              MOV      r1,r5
00010e  4853              LDR      r0,|L8.604|
000110  f7fffffe          BL       TimerSetValue
;;;411    						TimerStart( &ReportTimer );
000114  4851              LDR      r0,|L8.604|
000116  f7fffffe          BL       TimerStart
;;;412    						DEBUG(2,"app_send again\r\n");
00011a  a052              ADR      r0,|L8.612|
00011c  f7fffffe          BL       __2printf
;;;413    						
;;;414    						RF_Send_Data.Error_count ++;
000120  4833              LDR      r0,|L8.496|
000122  7c00              LDRB     r0,[r0,#0x10]  ; RF_Send_Data
000124  1c40              ADDS     r0,r0,#1
000126  4932              LDR      r1,|L8.496|
000128  7408              STRB     r0,[r1,#0x10]
;;;415    						RF_Send_Data.Send_again = true;
00012a  2001              MOVS     r0,#1
00012c  7508              STRB     r0,[r1,#0x14]
;;;416    						RF_Send_Data.default_datarate = RF_Send_Data.ADR_Datarate; ///更新空速
00012e  4608              MOV      r0,r1
000130  7c40              LDRB     r0,[r0,#0x11]  ; RF_Send_Data
000132  7488              STRB     r0,[r1,#0x12]
;;;417    						break;
000134  e056              B        |L8.484|
                  |L8.310|
;;;418    					}
;;;419    				}
;;;420    										
;;;421    				if(LoRapp_SenSor_States.loramac_evt_flag == 1)
000136  4850              LDR      r0,|L8.632|
000138  7880              LDRB     r0,[r0,#2]  ; LoRapp_SenSor_States
00013a  2801              CMP      r0,#1
00013c  d150              BNE      |L8.480|
;;;422    				{///接收应答完成,设置RTC闹钟事件下次随机发送：握手时才会在此清空
;;;423    					if( RF_Send_Data.Estab_Communt_State)
00013e  482c              LDR      r0,|L8.496|
000140  7d40              LDRB     r0,[r0,#0x15]  ; RF_Send_Data
000142  2800              CMP      r0,#0
000144  d004              BEQ      |L8.336|
;;;424    					{
;;;425    						__disable_irq();
000146  b672              CPSID    i
;;;426    						LoRapp_SenSor_States.loramac_evt_flag = 0;
000148  2000              MOVS     r0,#0
00014a  494b              LDR      r1,|L8.632|
00014c  7088              STRB     r0,[r1,#2]
;;;427    						__enable_irq();
00014e  b662              CPSIE    i
                  |L8.336|
;;;428    					}
;;;429    										
;;;430    					if(RF_Send_Data.RX_LEN > RF_Send_Data.TX_Len)
000150  4827              LDR      r0,|L8.496|
000152  8800              LDRH     r0,[r0,#0]  ; RF_Send_Data
000154  4926              LDR      r1,|L8.496|
000156  8889              LDRH     r1,[r1,#4]  ; RF_Send_Data
000158  4288              CMP      r0,r1
00015a  e000              B        |L8.350|
                  |L8.348|
00015c  e040              B        |L8.480|
                  |L8.350|
00015e  dd28              BLE      |L8.434|
;;;431    					{
;;;432    						RF_Send_Data.Len += RF_Send_Data.TX_Len;   ///数组下标
000160  4823              LDR      r0,|L8.496|
000162  8840              LDRH     r0,[r0,#2]  ; RF_Send_Data
000164  4922              LDR      r1,|L8.496|
000166  8889              LDRH     r1,[r1,#4]  ; RF_Send_Data
000168  1840              ADDS     r0,r0,r1
00016a  4921              LDR      r1,|L8.496|
00016c  8048              STRH     r0,[r1,#2]
;;;433    						RF_Send_Data.RX_LEN -= RF_Send_Data.TX_Len; ///当前待发送Len 
00016e  4608              MOV      r0,r1
000170  8800              LDRH     r0,[r0,#0]  ; RF_Send_Data
000172  8889              LDRH     r1,[r1,#4]  ; RF_Send_Data
000174  1a40              SUBS     r0,r0,r1
000176  491e              LDR      r1,|L8.496|
000178  8008              STRH     r0,[r1,#0]
;;;434    					
;;;435    						if(RF_Send_Data.RX_LEN<=RF_Send_Data.TX_Len)
00017a  4608              MOV      r0,r1
00017c  8800              LDRH     r0,[r0,#0]  ; RF_Send_Data
00017e  8889              LDRH     r1,[r1,#4]  ; RF_Send_Data
000180  4288              CMP      r0,r1
000182  dc03              BGT      |L8.396|
;;;436    						{
;;;437    							RF_Send_Data.TX_Len = RF_Send_Data.RX_LEN;
000184  481a              LDR      r0,|L8.496|
000186  8800              LDRH     r0,[r0,#0]  ; RF_Send_Data
000188  4919              LDR      r1,|L8.496|
00018a  8088              STRH     r0,[r1,#4]
                  |L8.396|
;;;438    						}
;;;439    						
;;;440    						ReportTimerEvent = false;
00018c  2000              MOVS     r0,#0
00018e  4917              LDR      r1,|L8.492|
000190  7008              STRB     r0,[r1,#0]
;;;441    						
;;;442    						TimerStop( &ReportTimer );
000192  4832              LDR      r0,|L8.604|
000194  f7fffffe          BL       TimerStop
;;;443    						TimerSetValue( &ReportTimer, APP_TX_DUTYCYCLE_RND + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND ) );
000198  4931              LDR      r1,|L8.608|
00019a  4248              RSBS     r0,r1,#0
00019c  f7fffffe          BL       randr
0001a0  492f              LDR      r1,|L8.608|
0001a2  1845              ADDS     r5,r0,r1
0001a4  4629              MOV      r1,r5
0001a6  482d              LDR      r0,|L8.604|
0001a8  f7fffffe          BL       TimerSetValue
;;;444    						TimerStart( &ReportTimer );
0001ac  482b              LDR      r0,|L8.604|
0001ae  f7fffffe          BL       TimerStart
                  |L8.434|
;;;445    					}
;;;446    			
;;;447    					if(RF_Send_Data.RF_Send == true)						
0001b2  480f              LDR      r0,|L8.496|
0001b4  7cc0              LDRB     r0,[r0,#0x13]  ; RF_Send_Data
0001b6  2801              CMP      r0,#1
0001b8  d112              BNE      |L8.480|
;;;448    					{
;;;449    						RF_Send_Data.RF_Send = false;
0001ba  2000              MOVS     r0,#0
0001bc  490c              LDR      r1,|L8.496|
0001be  74c8              STRB     r0,[r1,#0x13]
;;;450    						RF_Send_Data.Send_again = false;
0001c0  7508              STRB     r0,[r1,#0x14]
;;;451    						RF_Send_Data.TX_Len = RF_Send_Data.Len = 0;
0001c2  8048              STRH     r0,[r1,#2]
0001c4  8088              STRH     r0,[r1,#4]
;;;452    						RF_Send_Data.RX_LEN = 0;
0001c6  8008              STRH     r0,[r1,#0]
;;;453    						sys_sta = SYS_STA_IDLE;
0001c8  4907              LDR      r1,|L8.488|
0001ca  7008              STRB     r0,[r1,#0]
;;;454    
;;;455    						ReportTimerEvent = false;
0001cc  4907              LDR      r1,|L8.492|
0001ce  7008              STRB     r0,[r1,#0]
;;;456    						RF_Send_Data.Estab_Communt_State = false;
0001d0  4907              LDR      r1,|L8.496|
0001d2  7548              STRB     r0,[r1,#0x15]
;;;457    						DEBUG(2, "send_done %d\r\n",LoRapp_SenSor_States.loramac_evt_flag);
0001d4  4828              LDR      r0,|L8.632|
0001d6  7881              LDRB     r1,[r0,#2]  ; LoRapp_SenSor_States
0001d8  a028              ADR      r0,|L8.636|
0001da  f7fffffe          BL       __2printf
;;;458    //            TimerStop( &ReportTimer );
;;;459    //            TimerSetValue( &ReportTimer, APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND ) );
;;;460    //            TimerStart( &ReportTimer );						
;;;461    
;;;462    						break;	
0001de  e001              B        |L8.484|
                  |L8.480|
;;;463    					}
;;;464    				}						
;;;465    			}
;;;466    		 break;
0001e0  e000              B        |L8.484|
                  |L8.482|
;;;467    		default : 
;;;468    		 break;
0001e2  bf00              NOP      
                  |L8.484|
0001e4  bf00              NOP                            ;370
;;;469       }			
;;;470    }
0001e6  bd70              POP      {r4-r6,pc}
;;;471    
                          ENDP

                  |L8.488|
                          DCD      sys_sta
                  |L8.492|
                          DCD      ReportTimerEvent
                  |L8.496|
                          DCD      RF_Send_Data
                  |L8.500|
0001f4  53544152          DCB      "START len = %d ReportTimerEvent = %d\r\n",0
0001f8  54206c65
0001fc  6e203d20
000200  25642052
000204  65706f72
000208  7454696d
00020c  65724576
000210  656e7420
000214  3d202564
000218  0d0a00  
00021b  00                DCB      0
                  |L8.540|
                          DCD      LoRaCad
                  |L8.544|
000220  6c696e65          DCB      "line = %d\r\n",0
000224  203d2025
000228  640d0a00
                  |L8.556|
                          DCD      Channel
                  |L8.560|
000230  57616974          DCB      "Wait ACK app_send UpLinkCounter = %d\r\n",0
000234  2041434b
000238  20617070
00023c  5f73656e
000240  64205570
000244  4c696e6b
000248  436f756e
00024c  74657220
000250  3d202564
000254  0d0a00  
000257  00                DCB      0
                  |L8.600|
                          DCD      AppData
                  |L8.604|
                          DCD      ReportTimer
                  |L8.608|
                          DCD      0x000186a0
                  |L8.612|
000264  6170705f          DCB      "app_send again\r\n",0
000268  73656e64
00026c  20616761
000270  696e0d0a
000274  00      
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
                  |L8.632|
                          DCD      LoRapp_SenSor_States
                  |L8.636|
00027c  73656e64          DCB      "send_done %d\r\n",0
000280  5f646f6e
000284  65202564
000288  0d0a00  
00028b  00                DCB      0

                          AREA ||i.Send_Led||, CODE, READONLY, ALIGN=1

                  Send_Led PROC
;;;308    
;;;309    void Send_Led(void)
000000  b510              PUSH     {r4,lr}
;;;310    {
;;;311    	for(uint8_t i = 0; i < 3; i++)
000002  2400              MOVS     r4,#0
000004  e014              B        |L9.48|
                  |L9.6|
;;;312    	{
;;;313    		delay_ms(100);
000006  2064              MOVS     r0,#0x64
000008  f7fffffe          BL       delay_ms
;;;314    		GpioWrite(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
00000c  2201              MOVS     r2,#1
00000e  03d1              LSLS     r1,r2,#15
000010  2009              MOVS     r0,#9
000012  06c0              LSLS     r0,r0,#27
000014  f7fffffe          BL       GpioWrite
;;;315    		delay_ms(100);
000018  2064              MOVS     r0,#0x64
00001a  f7fffffe          BL       delay_ms
;;;316    		GpioWrite(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
00001e  2200              MOVS     r2,#0
000020  2101              MOVS     r1,#1
000022  03c9              LSLS     r1,r1,#15
000024  2009              MOVS     r0,#9
000026  06c0              LSLS     r0,r0,#27
000028  f7fffffe          BL       GpioWrite
00002c  1c60              ADDS     r0,r4,#1              ;311
00002e  b2c4              UXTB     r4,r0                 ;311
                  |L9.48|
000030  2c03              CMP      r4,#3                 ;311
000032  dbe8              BLT      |L9.6|
;;;317    	}
;;;318    }
000034  bd10              POP      {r4,pc}
;;;319    
                          ENDP


                          AREA ||i.User_send||, CODE, READONLY, ALIGN=2

                  User_send PROC
;;;475     */
;;;476    void User_send(uint8_t *Send_Buf)
000000  b510              PUSH     {r4,lr}
;;;477    {
000002  4604              MOV      r4,r0
;;;478    	switch(RF_Send_Data.default_datarate)
000004  4811              LDR      r0,|L10.76|
000006  7c80              LDRB     r0,[r0,#0x12]  ; RF_Send_Data
000008  0003              MOVS     r3,r0
00000a  f7fffffe          BL       __ARM_common_switch8
00000e  0604              DCB      0x06,0x04
000010  05060d14          DCB      0x05,0x06,0x0d,0x14
000014  151c              DCB      0x15,0x1c
;;;479    	{
;;;480    		case 0:  //12 -- 51
;;;481    		case 1:  //11 -- 51
000016  bf00              NOP      
;;;482    		case 2:  //10 -- 51
000018  bf00              NOP      
;;;483    		RF_Send_Data.TX_Len = 51;
00001a  2033              MOVS     r0,#0x33
00001c  490b              LDR      r1,|L10.76|
00001e  8088              STRH     r0,[r1,#4]
;;;484    		SX1278_Send( Send_Buf );   
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SX1278_Send
;;;485    		break;
000026  e00f              B        |L10.72|
;;;486    		case 3:  //9 --- 115
;;;487    		RF_Send_Data.TX_Len = 115;
000028  2073              MOVS     r0,#0x73
00002a  4908              LDR      r1,|L10.76|
00002c  8088              STRH     r0,[r1,#4]
;;;488    		SX1278_Send( Send_Buf );   
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       SX1278_Send
;;;489    		break;
000034  e008              B        |L10.72|
;;;490    		case 4:  //8 --- 222
;;;491    		case 5:  //7 --- 222
000036  bf00              NOP      
;;;492    		RF_Send_Data.TX_Len = 222;
000038  20de              MOVS     r0,#0xde
00003a  4904              LDR      r1,|L10.76|
00003c  8088              STRH     r0,[r1,#4]
;;;493    		SX1278_Send( Send_Buf );   
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       SX1278_Send
;;;494    		break;
000044  e000              B        |L10.72|
;;;495    		default: break;
000046  bf00              NOP      
                  |L10.72|
000048  bf00              NOP                            ;485
;;;496    	}
;;;497    }
00004a  bd10              POP      {r4,pc}
;;;498    
                          ENDP

                  |L10.76|
                          DCD      RF_Send_Data

                          AREA ||i.app_get_devaddr||, CODE, READONLY, ALIGN=2

                  app_get_devaddr PROC
;;;252    
;;;253    uint32_t app_get_devaddr(void)
000000  4801              LDR      r0,|L11.8|
;;;254    {
;;;255        return DevAddr;
000002  6800              LDR      r0,[r0,#0]  ; DevAddr
;;;256    }
000004  4770              BX       lr
;;;257    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      DevAddr

                          AREA ||i.app_loramacjoinreq||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  app_loramacjoinreq PROC
;;;278     */
;;;279    void app_loramacjoinreq(void)
000000  b510              PUSH     {r4,lr}
;;;280    {
;;;281    	while( ( IsNetworkJoined == false ) )
000002  e029              B        |L12.88|
                  |L12.4|
;;;282    	{
;;;283    		if( JoinReq_flag == true )
000004  4817              LDR      r0,|L12.100|
000006  7800              LDRB     r0,[r0,#0]  ; JoinReq_flag
000008  2801              CMP      r0,#1
00000a  d125              BNE      |L12.88|
;;;284    		{
;;;285    			JoinReq_flag = false;
00000c  2000              MOVS     r0,#0
00000e  4915              LDR      r1,|L12.100|
000010  7008              STRB     r0,[r1,#0]
;;;286    			
;;;287    			DEBUG(2,"LoRaMacJoinReq \r\n");
000012  a015              ADR      r0,|L12.104|
000014  f7fffffe          BL       __2printf
;;;288    		 int  sendFrameStatus = LoRaMacJoinReq( DevEui, AppEui, AppKey );
000018  4a18              LDR      r2,|L12.124|
00001a  4919              LDR      r1,|L12.128|
00001c  4819              LDR      r0,|L12.132|
00001e  f7fffffe          BL       LoRaMacJoinReq
000022  4604              MOV      r4,r0
;;;289    			Send_Led( ); 
000024  f7fffffe          BL       Send_Led
;;;290    			DEBUG(2,"sendFrameStatus = %d\r\n",sendFrameStatus);
000028  4621              MOV      r1,r4
00002a  a017              ADR      r0,|L12.136|
00002c  f7fffffe          BL       __2printf
;;;291    			switch( sendFrameStatus )
000030  0023              MOVS     r3,r4
000032  f7fffffe          BL       __ARM_common_switch8
000036  0707              DCB      0x07,0x07
000038  0508090a          DCB      0x05,0x08,0x09,0x0a
00003c  060b0600          DCB      0x06,0x0b,0x06,0x00
;;;292    			{
;;;293    				case 1: // BUSY
;;;294    						break;
000040  e008              B        |L12.84|
;;;295    				case 0: // OK
000042  bf00              NOP      
;;;296    				case 2: // NO_NETWORK_JOINED
000044  bf00              NOP      
;;;297    				case 3: // LENGTH_PORT_ERROR
000046  bf00              NOP      
;;;298    				case 4: // MAC_CMD_ERROR
000048  bf00              NOP      
;;;299    				case 6: // DEVICE_OFF
00004a  bf00              NOP      
;;;300    				default:
;;;301    					// Relaunch timer for next trial                
;;;302    					TimerStart( &JoinReqTimer );                  
00004c  4814              LDR      r0,|L12.160|
00004e  f7fffffe          BL       TimerStart
;;;303    					break;
000052  bf00              NOP      
                  |L12.84|
000054  bf00              NOP                            ;294
;;;304    			}
;;;305    		}
000056  bf00              NOP      
                  |L12.88|
000058  4812              LDR      r0,|L12.164|
00005a  7800              LDRB     r0,[r0,#0]            ;281  ; IsNetworkJoined
00005c  2800              CMP      r0,#0                 ;281
00005e  d0d1              BEQ      |L12.4|
;;;306    	}   
;;;307    }
000060  bd10              POP      {r4,pc}
;;;308    
                          ENDP

000062  0000              DCW      0x0000
                  |L12.100|
                          DCD      JoinReq_flag
                  |L12.104|
000068  4c6f5261          DCB      "LoRaMacJoinReq \r\n",0
00006c  4d61634a
000070  6f696e52
000074  6571200d
000078  0a00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L12.124|
                          DCD      AppKey
                  |L12.128|
                          DCD      AppEui
                  |L12.132|
                          DCD      DevEui
                  |L12.136|
000088  73656e64          DCB      "sendFrameStatus = %d\r\n",0
00008c  4672616d
000090  65537461
000094  74757320
000098  3d202564
00009c  0d0a00  
00009f  00                DCB      0
                  |L12.160|
                          DCD      JoinReqTimer
                  |L12.164|
                          DCD      IsNetworkJoined

                          AREA ||i.user_app_init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  user_app_init PROC
;;;170    }
;;;171    void user_app_init(mac_callback_t mac)
000000  b510              PUSH     {r4,lr}
;;;172    {
000002  4604              MOV      r4,r0
;;;173        LoRaMacCallbacks.MacEvent = OnMacEvent; ///MAC层数据接口
000004  481d              LDR      r0,|L13.124|
000006  491e              LDR      r1,|L13.128|
000008  6008              STR      r0,[r1,#0]  ; LoRaMacCallbacks
;;;174        LoRaMacCallbacks.GetBatteryLevel = BoardGetBatteryLevel;
00000a  481e              LDR      r0,|L13.132|
00000c  6048              STR      r0,[r1,#4]  ; LoRaMacCallbacks
;;;175        LoRaMacInit( &LoRaMacCallbacks );
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       LoRaMacInit
;;;176        
;;;177        IsNetworkJoined = false;
000014  2000              MOVS     r0,#0
000016  491c              LDR      r1,|L13.136|
000018  7008              STRB     r0,[r1,#0]
;;;178        
;;;179        // Random seed initialization
;;;180       // srand1( RAND_SEED );
;;;181        // Choose a random device address
;;;182        // NwkID = 0
;;;183        // NwkAddr rand [0, 33554431]
;;;184       // DevAddr = randr( 0, 0x01FFFFFF );
;;;185      //  DevAddr = 123088097;  ///使用服务器设置参数
;;;186    #if( OVER_THE_AIR_ACTIVATION == 0 )  
;;;187        
;;;188        DevAddr  = DEV[3];
00001a  481c              LDR      r0,|L13.140|
00001c  78c0              LDRB     r0,[r0,#3]  ; DEV
00001e  491c              LDR      r1,|L13.144|
000020  6008              STR      r0,[r1,#0]  ; DevAddr
;;;189        DevAddr |= (DEV[2] << 8);
000022  481a              LDR      r0,|L13.140|
000024  7880              LDRB     r0,[r0,#2]  ; DEV
000026  0200              LSLS     r0,r0,#8
000028  6809              LDR      r1,[r1,#0]  ; DevAddr
00002a  4308              ORRS     r0,r0,r1
00002c  4918              LDR      r1,|L13.144|
00002e  6008              STR      r0,[r1,#0]  ; DevAddr
;;;190        DevAddr |= (DEV[1] << 16);
000030  4816              LDR      r0,|L13.140|
000032  7840              LDRB     r0,[r0,#1]  ; DEV
000034  0400              LSLS     r0,r0,#16
000036  6809              LDR      r1,[r1,#0]  ; DevAddr
000038  4308              ORRS     r0,r0,r1
00003a  4915              LDR      r1,|L13.144|
00003c  6008              STR      r0,[r1,#0]  ; DevAddr
;;;191        DevAddr |= (DEV[0] << 24);
00003e  4813              LDR      r0,|L13.140|
000040  7800              LDRB     r0,[r0,#0]  ; DEV
000042  0600              LSLS     r0,r0,#24
000044  6809              LDR      r1,[r1,#0]  ; DevAddr
000046  4308              ORRS     r0,r0,r1
000048  4911              LDR      r1,|L13.144|
00004a  6008              STR      r0,[r1,#0]  ; DevAddr
;;;192        DEBUG(2,"DevAddr = %d\r\n",DevAddr);
00004c  4608              MOV      r0,r1
00004e  6801              LDR      r1,[r0,#0]  ; DevAddr
000050  a010              ADR      r0,|L13.148|
000052  f7fffffe          BL       __2printf
;;;193        
;;;194        LoRaMacInitNwkIds( 0x000000, DevAddr, NwkSKey, AppSKey );
000056  4b13              LDR      r3,|L13.164|
000058  4a13              LDR      r2,|L13.168|
00005a  480d              LDR      r0,|L13.144|
00005c  6801              LDR      r1,[r0,#0]  ; DevAddr
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       LoRaMacInitNwkIds
;;;195        IsNetworkJoined = true;
000064  2001              MOVS     r0,#1
000066  4908              LDR      r1,|L13.136|
000068  7008              STRB     r0,[r1,#0]
;;;196     
;;;197    #else
;;;198         // Initialize LoRaMac device unique ID : 空中激活时作为激活参数
;;;199        BoardGetUniqueId( DevEui );
;;;200        for(uint8_t i = 0; i < 8; i++)
;;;201        DEBUG(2,"%02x ", DevEui[i]);
;;;202        DEBUG(2,"\r\n");
;;;203      
;;;204        
;;;205         // Sends a JoinReq Command every OVER_THE_AIR_ACTIVATION_DUTYCYCLE
;;;206        // seconds until the network is joined
;;;207        TimerInit( &JoinReqTimer, OnJoinReqTimerEvent );
;;;208        TimerSetValue( &JoinReqTimer, OVER_THE_AIR_ACTIVATION_DUTYCYCLE );
;;;209        
;;;210    #endif
;;;211      
;;;212        LoRaMacSetAdrOn( true );
00006a  f7fffffe          BL       LoRaMacSetAdrOn
;;;213        LoRaMacTestSetDutyCycleOn(false);
00006e  2000              MOVS     r0,#0
000070  f7fffffe          BL       LoRaMacTestSetDutyCycleOn
;;;214        
;;;215        mac_callback_g = mac;
000074  480d              LDR      r0,|L13.172|
000076  6004              STR      r4,[r0,#0]  ; mac_callback_g
;;;216    
;;;217    }
000078  bd10              POP      {r4,pc}
;;;218    
                          ENDP

00007a  0000              DCW      0x0000
                  |L13.124|
                          DCD      OnMacEvent
                  |L13.128|
                          DCD      LoRaMacCallbacks
                  |L13.132|
                          DCD      BoardGetBatteryLevel
                  |L13.136|
                          DCD      IsNetworkJoined
                  |L13.140|
                          DCD      ||DEV||
                  |L13.144|
                          DCD      DevAddr
                  |L13.148|
000094  44657641          DCB      "DevAddr = %d\r\n",0
000098  64647220
00009c  3d202564
0000a0  0d0a00  
0000a3  00                DCB      0
                  |L13.164|
                          DCD      AppSKey
                  |L13.168|
                          DCD      NwkSKey
                  |L13.172|
                          DCD      mac_callback_g

                          AREA ||i.user_app_send||, CODE, READONLY, ALIGN=2

                  user_app_send PROC
;;;218    
;;;219    int user_app_send( LoRaFrameType_t frametype, uint8_t *buf, int size, int retry)
000000  b5ff              PUSH     {r0-r7,lr}
;;;220    {
000002  b081              SUB      sp,sp,#4
000004  4606              MOV      r6,r0
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;221    	int sendFrameStatus;
;;;222    
;;;223    	if(size == 0 || buf == 0){
00000a  2d00              CMP      r5,#0
00000c  d002              BEQ      |L14.20|
00000e  9802              LDR      r0,[sp,#8]
000010  2800              CMP      r0,#0
000012  d103              BNE      |L14.28|
                  |L14.20|
;;;224    		return -3;
000014  2002              MOVS     r0,#2
000016  43c0              MVNS     r0,r0
                  |L14.24|
;;;225    	}
;;;226    
;;;227    	LoRaFrameType = frametype;
;;;228    	if(frametype == UNCONFIRMED){
;;;229    		sendFrameStatus = LoRaMacSendFrame( RF_Send_Data.AT_MODULE_PORT, buf, size );
;;;230    	}else{
;;;231    		if(retry <= 0){
;;;232    			retry = 3;
;;;233    		}
;;;234    		sendFrameStatus = LoRaMacSendConfirmedFrame( RF_Send_Data.AT_MODULE_PORT, buf, size, retry );
;;;235    	}
;;;236    
;;;237        switch( sendFrameStatus )
;;;238        {
;;;239    			case 1: // LoRaMac is Busy
;;;240    			return -1;
;;;241    			case 2:
;;;242    			case 3: // LENGTH_PORT_ERROR
;;;243    			case 4: // MAC_CMD_ERROR
;;;244    			case 5: // NO_FREE_CHANNEL
;;;245    			case 6:
;;;246    				return -2;
;;;247    			default:
;;;248            break;
;;;249        }
;;;250        return 0;
;;;251    }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L14.28|
00001c  4816              LDR      r0,|L14.120|
00001e  7006              STRB     r6,[r0,#0]            ;227
000020  2e01              CMP      r6,#1                 ;228
000022  d107              BNE      |L14.52|
000024  b2aa              UXTH     r2,r5                 ;229
000026  4915              LDR      r1,|L14.124|
000028  7988              LDRB     r0,[r1,#6]            ;229  ; RF_Send_Data
00002a  9902              LDR      r1,[sp,#8]            ;229
00002c  f7fffffe          BL       LoRaMacSendFrame
000030  4604              MOV      r4,r0                 ;229
000032  e00b              B        |L14.76|
                  |L14.52|
000034  2f00              CMP      r7,#0                 ;231
000036  dc00              BGT      |L14.58|
000038  2703              MOVS     r7,#3                 ;232
                  |L14.58|
00003a  b2fb              UXTB     r3,r7                 ;234
00003c  b2aa              UXTH     r2,r5                 ;234
00003e  480f              LDR      r0,|L14.124|
000040  7980              LDRB     r0,[r0,#6]            ;234  ; RF_Send_Data
000042  9000              STR      r0,[sp,#0]            ;234
000044  9902              LDR      r1,[sp,#8]            ;234
000046  f7fffffe          BL       LoRaMacSendConfirmedFrame
00004a  4604              MOV      r4,r0                 ;234
                  |L14.76|
00004c  0023              MOVS     r3,r4                 ;237
00004e  f7fffffe          BL       __ARM_common_switch8
000052  070f              DCB      0x07,0x0f
000054  0508090a          DCB      0x05,0x08,0x09,0x0a
000058  0b0c0f00          DCB      0x0b,0x0c,0x0f,0x00
00005c  2000              MOVS     r0,#0                 ;240
00005e  43c0              MVNS     r0,r0                 ;240
000060  e7da              B        |L14.24|
000062  bf00              NOP                            ;242
000064  bf00              NOP                            ;243
000066  bf00              NOP                            ;244
000068  bf00              NOP                            ;245
00006a  2001              MOVS     r0,#1                 ;246
00006c  43c0              MVNS     r0,r0                 ;246
00006e  e7d3              B        |L14.24|
000070  bf00              NOP                            ;248
000072  bf00              NOP                            ;248
000074  2000              MOVS     r0,#0                 ;250
000076  e7cf              B        |L14.24|
;;;252    
                          ENDP

                  |L14.120|
                          DCD      LoRaFrameType
                  |L14.124|
                          DCD      RF_Send_Data

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  JoinReqTimer
                          %        20
                  RxInfo
                          %        264
                  AppEui
                          %        16
                  AppKey
                          %        32
                  AppData
                          %        44
                  ReportTimer
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  4f6e5265          DCB      0x4f,0x6e,0x52,0x65
000004  706f7274          DCB      0x70,0x6f,0x72,0x74
000008  54696d65          DCB      0x54,0x69,0x6d,0x65
00000c  72457665          DCB      0x72,0x45,0x76,0x65
000010  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  mac_callback_g
                          DCD      0x00000000
                  IsNetworkJoined
000004  00                DCB      0x00
                  JoinReq_flag
000005  01                DCB      0x01
                  DevEui
000006  0000              DCB      0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  0000              DCB      0x00,0x00
                  ||DEV||
00000e  0000              DCB      0x00,0x00
000010  0014              DCB      0x00,0x14
                  NwkSKey
000012  2b7e              DCB      0x2b,0x7e
000014  151628ae          DCB      0x15,0x16,0x28,0xae
000018  d2a6abf7          DCB      0xd2,0xa6,0xab,0xf7
00001c  158809cf          DCB      0x15,0x88,0x09,0xcf
000020  4f3c              DCB      0x4f,0x3c
                  AppSKey
000022  2b7e              DCB      0x2b,0x7e
000024  151628ae          DCB      0x15,0x16,0x28,0xae
000028  d2a6abf7          DCB      0xd2,0xa6,0xab,0xf7
00002c  158809cf          DCB      0x15,0x88,0x09,0xcf
000030  4f3c0000          DCB      0x4f,0x3c,0x00,0x00
                  DevAddr
                          DCD      0x00000000
                  LoRaMacCallbacks
                          %        8
                  LoRapp_SenSor_States
000040  00000000          DCB      0x00,0x00,0x00,0x00
                  RF_Send_Data
000044  00000000          DCW      0x0000,0x0000
000048  0000              DCW      0x0000
00004a  0000              DCB      0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000054  05000001          DCB      0x05,0x00,0x00,0x01
000058  00000000          DCB      0x00,0x00,0x00,0x00
                  LoRaCad
00005c  01000000          DCB      0x01,0x00,0x00,0x00
000060  00000000          DCFS     0x00000000 ; 0
000064  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000074  0000              DCB      0x00,0x00
000076  0000              DCW      0x0000
                          %        12
000084  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
00008c  00000000          DCB      0x00,0x00,0x00,0x00
                  Get_Flash_Datas
000090  00000200          DCB      0x00,0x00,0x02,0x00
000094  011d              DCW      0x011d
000096  0002              DCB      0x00,0x02
000098  0000              DCB      0x00,0x00
                  LoRaFrameType
00009a  00                DCB      0x00
                  sys_sta
00009b  00                DCB      0x00
                  ReportTimerEvent
00009c  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L96.24|
                  |L96.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L96.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L96.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\USER\\user-app.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_user_app_c_572dade9____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_user_app_c_572dade9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_user_app_c_572dade9____REVSH|
#line 402
|__asm___10_user_app_c_572dade9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
