; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_gpio.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_gpio.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;310      */
;;;311    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  b5f0              PUSH     {r4-r7,lr}
;;;312    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;313      uint32_t position = 0x00U;
000006  2000              MOVS     r0,#0
;;;314      uint32_t iocurrent = 0x00U;
000008  2100              MOVS     r1,#0
;;;315      uint32_t tmp = 0x00U;
00000a  2400              MOVS     r4,#0
;;;316    
;;;317      /* Check the parameters */
;;;318      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;319      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;320    
;;;321      /* Configure the port pins */
;;;322      while ((GPIO_Pin >> position) != RESET)
00000c  e06f              B        |L1.238|
                  |L1.14|
;;;323      {
;;;324        /* Get current io position */
;;;325        iocurrent = GPIO_Pin & (1U << position);
00000e  2501              MOVS     r5,#1
000010  4085              LSLS     r5,r5,r0
000012  401d              ANDS     r5,r5,r3
000014  4629              MOV      r1,r5
;;;326    
;;;327        if (iocurrent)
000016  2900              CMP      r1,#0
000018  d068              BEQ      |L1.236|
;;;328        {
;;;329          /*------------------------- GPIO Mode Configuration --------------------*/
;;;330          /* Configure IO Direction in Input Floting Mode */
;;;331          CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2U)); 
00001a  6815              LDR      r5,[r2,#0]
00001c  0047              LSLS     r7,r0,#1
00001e  2603              MOVS     r6,#3
000020  40be              LSLS     r6,r6,r7
000022  43b5              BICS     r5,r5,r6
000024  6015              STR      r5,[r2,#0]
;;;332      
;;;333          /* Configure the default Alternate Function in current IO */ 
;;;334          CLEAR_BIT(GPIOx->AFR[position >> 3U], 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
000026  08c5              LSRS     r5,r0,#3
000028  00ae              LSLS     r6,r5,#2
00002a  4615              MOV      r5,r2
00002c  3520              ADDS     r5,r5,#0x20
00002e  59ad              LDR      r5,[r5,r6]
000030  0746              LSLS     r6,r0,#29
000032  0ef7              LSRS     r7,r6,#27
000034  260f              MOVS     r6,#0xf
000036  40be              LSLS     r6,r6,r7
000038  43b5              BICS     r5,r5,r6
00003a  08c6              LSRS     r6,r0,#3
00003c  00b6              LSLS     r6,r6,#2
00003e  4617              MOV      r7,r2
000040  3720              ADDS     r7,r7,#0x20
000042  51bd              STR      r5,[r7,r6]
;;;335      
;;;336          /* Configure the default value for IO Speed */
;;;337          CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
000044  6895              LDR      r5,[r2,#8]
000046  0047              LSLS     r7,r0,#1
000048  2603              MOVS     r6,#3
00004a  40be              LSLS     r6,r6,r7
00004c  43b5              BICS     r5,r5,r6
00004e  6095              STR      r5,[r2,#8]
;;;338                      
;;;339          /* Configure the default value IO Output Type */
;;;340          CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
000050  6855              LDR      r5,[r2,#4]
000052  2601              MOVS     r6,#1
000054  4086              LSLS     r6,r6,r0
000056  43b5              BICS     r5,r5,r6
000058  6055              STR      r5,[r2,#4]
;;;341      
;;;342          /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
;;;343          CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2U));
00005a  68d5              LDR      r5,[r2,#0xc]
00005c  0047              LSLS     r7,r0,#1
00005e  2603              MOVS     r6,#3
000060  40be              LSLS     r6,r6,r7
000062  43b5              BICS     r5,r5,r6
000064  60d5              STR      r5,[r2,#0xc]
;;;344    
;;;345          /*------------------------- EXTI Mode Configuration --------------------*/
;;;346          /* Clear the External Interrupt or Event for the current IO */
;;;347          
;;;348          tmp = SYSCFG->EXTICR[position >> 2U];
000066  4d24              LDR      r5,|L1.248|
000068  0886              LSRS     r6,r0,#2
00006a  00b6              LSLS     r6,r6,#2
00006c  59ac              LDR      r4,[r5,r6]
;;;349          tmp &= ((0x0FU) << (4U * (position & 0x03U)));
00006e  0785              LSLS     r5,r0,#30
000070  0f2e              LSRS     r6,r5,#28
000072  250f              MOVS     r5,#0xf
000074  40b5              LSLS     r5,r5,r6
000076  402c              ANDS     r4,r4,r5
;;;350          if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
000078  2509              MOVS     r5,#9
00007a  06ed              LSLS     r5,r5,#27
00007c  42aa              CMP      r2,r5
00007e  d101              BNE      |L1.132|
000080  2500              MOVS     r5,#0
000082  e00f              B        |L1.164|
                  |L1.132|
000084  4d1d              LDR      r5,|L1.252|
000086  42aa              CMP      r2,r5
000088  d101              BNE      |L1.142|
00008a  2501              MOVS     r5,#1
00008c  e00a              B        |L1.164|
                  |L1.142|
00008e  4d1c              LDR      r5,|L1.256|
000090  42aa              CMP      r2,r5
000092  d101              BNE      |L1.152|
000094  2502              MOVS     r5,#2
000096  e005              B        |L1.164|
                  |L1.152|
000098  4d1a              LDR      r5,|L1.260|
00009a  42aa              CMP      r2,r5
00009c  d101              BNE      |L1.162|
00009e  2503              MOVS     r5,#3
0000a0  e000              B        |L1.164|
                  |L1.162|
0000a2  2505              MOVS     r5,#5
                  |L1.164|
0000a4  0786              LSLS     r6,r0,#30
0000a6  0f36              LSRS     r6,r6,#28
0000a8  40b5              LSLS     r5,r5,r6
0000aa  42a5              CMP      r5,r4
0000ac  d11e              BNE      |L1.236|
;;;351          {
;;;352            tmp = (0x0FU) << (4U * (position & 0x03U));
0000ae  0785              LSLS     r5,r0,#30
0000b0  0f2e              LSRS     r6,r5,#28
0000b2  250f              MOVS     r5,#0xf
0000b4  40b5              LSLS     r5,r5,r6
0000b6  462c              MOV      r4,r5
;;;353            CLEAR_BIT(SYSCFG->EXTICR[position >> 2U], tmp);
0000b8  4d0f              LDR      r5,|L1.248|
0000ba  0886              LSRS     r6,r0,#2
0000bc  00b6              LSLS     r6,r6,#2
0000be  59ad              LDR      r5,[r5,r6]
0000c0  43a5              BICS     r5,r5,r4
0000c2  4e0d              LDR      r6,|L1.248|
0000c4  0887              LSRS     r7,r0,#2
0000c6  00bf              LSLS     r7,r7,#2
0000c8  51f5              STR      r5,[r6,r7]
;;;354            
;;;355            /* Clear EXTI line configuration */
;;;356            CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
0000ca  4d0f              LDR      r5,|L1.264|
0000cc  682d              LDR      r5,[r5,#0]
0000ce  438d              BICS     r5,r5,r1
0000d0  4e0d              LDR      r6,|L1.264|
0000d2  6035              STR      r5,[r6,#0]
;;;357            CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
0000d4  4635              MOV      r5,r6
0000d6  686d              LDR      r5,[r5,#4]
0000d8  438d              BICS     r5,r5,r1
0000da  6075              STR      r5,[r6,#4]
;;;358            
;;;359            /* Clear Rising Falling edge configuration */
;;;360            CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
0000dc  4635              MOV      r5,r6
0000de  68ad              LDR      r5,[r5,#8]
0000e0  438d              BICS     r5,r5,r1
0000e2  60b5              STR      r5,[r6,#8]
;;;361            CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
0000e4  4635              MOV      r5,r6
0000e6  68ed              LDR      r5,[r5,#0xc]
0000e8  438d              BICS     r5,r5,r1
0000ea  60f5              STR      r5,[r6,#0xc]
                  |L1.236|
;;;362          }
;;;363        }
;;;364        
;;;365        position++;
0000ec  1c40              ADDS     r0,r0,#1
                  |L1.238|
0000ee  461d              MOV      r5,r3                 ;322
0000f0  40c5              LSRS     r5,r5,r0              ;322
0000f2  2d00              CMP      r5,#0                 ;322
0000f4  d18b              BNE      |L1.14|
;;;366      }
;;;367    }
0000f6  bdf0              POP      {r4-r7,pc}
;;;368    
                          ENDP

                  |L1.248|
                          DCD      0x40010008
                  |L1.252|
                          DCD      0x48000400
                  |L1.256|
                          DCD      0x48000800
                  |L1.260|
                          DCD      0x48000c00
                  |L1.264|
                          DCD      0x40010400

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;514      */
;;;515    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;516    {
;;;517      /* Prevent unused argument(s) compilation warning */
;;;518      UNUSED(GPIO_Pin);
;;;519    
;;;520      /* NOTE: This function should not be modified, when the callback is needed,
;;;521                the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;522       */ 
;;;523    }
;;;524    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;499      */
;;;500    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  b510              PUSH     {r4,lr}
;;;501    {
000002  4604              MOV      r4,r0
;;;502      /* EXTI line interrupt detected */
;;;503      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
000004  4805              LDR      r0,|L3.28|
000006  6940              LDR      r0,[r0,#0x14]
000008  4020              ANDS     r0,r0,r4
00000a  2800              CMP      r0,#0
00000c  d004              BEQ      |L3.24|
;;;504      { 
;;;505        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00000e  4803              LDR      r0,|L3.28|
000010  6144              STR      r4,[r0,#0x14]
;;;506        HAL_GPIO_EXTI_Callback(GPIO_Pin);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       HAL_GPIO_EXTI_Callback
                  |L3.24|
;;;507      }
;;;508    }
000018  bd10              POP      {r4,pc}
;;;509    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40010400

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;185      */
;;;186    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  b578              PUSH     {r3-r6,lr}
;;;187    { 
000002  4603              MOV      r3,r0
;;;188      uint32_t position = 0x00U;
000004  2200              MOVS     r2,#0
;;;189      uint32_t iocurrent = 0x00U;
000006  2400              MOVS     r4,#0
;;;190      uint32_t temp = 0x00U;
000008  2000              MOVS     r0,#0
;;;191    
;;;192      /* Check the parameters */
;;;193      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;194      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;195      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;196      assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
;;;197    
;;;198      /* Configure the port pins */
;;;199      while (((GPIO_Init->Pin) >> position) != RESET)
00000a  e0de              B        |L4.458|
                  |L4.12|
;;;200      {
;;;201        /* Get current io position */
;;;202        iocurrent = (GPIO_Init->Pin) & (1U << position);
00000c  2601              MOVS     r6,#1
00000e  4096              LSLS     r6,r6,r2
000010  680d              LDR      r5,[r1,#0]
000012  4035              ANDS     r5,r5,r6
000014  462c              MOV      r4,r5
;;;203        
;;;204        if(iocurrent)
000016  2c00              CMP      r4,#0
000018  d07e              BEQ      |L4.280|
;;;205        {
;;;206          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;207          /* In case of Alternate function mode selection */
;;;208          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
00001a  684d              LDR      r5,[r1,#4]
00001c  2d02              CMP      r5,#2
00001e  d002              BEQ      |L4.38|
000020  684d              LDR      r5,[r1,#4]
000022  2d12              CMP      r5,#0x12
000024  d115              BNE      |L4.82|
                  |L4.38|
;;;209          {
;;;210            /* Check the Alternate function parameters */
;;;211            assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
;;;212            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;213            
;;;214            /* Configure Alternate function mapped with the current IO */ 
;;;215            temp = GPIOx->AFR[position >> 3];
000026  08d5              LSRS     r5,r2,#3
000028  00ae              LSLS     r6,r5,#2
00002a  461d              MOV      r5,r3
00002c  3520              ADDS     r5,r5,#0x20
00002e  59a8              LDR      r0,[r5,r6]
;;;216            CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
000030  0755              LSLS     r5,r2,#29
000032  0eee              LSRS     r6,r5,#27
000034  250f              MOVS     r5,#0xf
000036  40b5              LSLS     r5,r5,r6
000038  4606              MOV      r6,r0
00003a  43ae              BICS     r6,r6,r5
00003c  4630              MOV      r0,r6
;;;217            SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
00003e  0756              LSLS     r6,r2,#29
000040  0ef6              LSRS     r6,r6,#27
000042  690d              LDR      r5,[r1,#0x10]
000044  40b5              LSLS     r5,r5,r6
000046  4328              ORRS     r0,r0,r5
;;;218            GPIOx->AFR[position >> 3U] = temp;
000048  08d5              LSRS     r5,r2,#3
00004a  00ad              LSLS     r5,r5,#2
00004c  461e              MOV      r6,r3
00004e  3620              ADDS     r6,r6,#0x20
000050  5170              STR      r0,[r6,r5]
                  |L4.82|
;;;219          }
;;;220    
;;;221          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;222          temp = GPIOx->MODER;
000052  6818              LDR      r0,[r3,#0]
;;;223          CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
000054  0056              LSLS     r6,r2,#1
000056  2503              MOVS     r5,#3
000058  40b5              LSLS     r5,r5,r6
00005a  4606              MOV      r6,r0
00005c  43ae              BICS     r6,r6,r5
00005e  4630              MOV      r0,r6
;;;224          SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
000060  790d              LDRB     r5,[r1,#4]
000062  07ad              LSLS     r5,r5,#30
000064  0fad              LSRS     r5,r5,#30
000066  0056              LSLS     r6,r2,#1
000068  40b5              LSLS     r5,r5,r6
00006a  4328              ORRS     r0,r0,r5
;;;225          GPIOx->MODER = temp;
00006c  6018              STR      r0,[r3,#0]
;;;226    
;;;227          /* In case of Output or Alternate function mode selection */
;;;228          if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
00006e  684d              LDR      r5,[r1,#4]
000070  2d01              CMP      r5,#1
000072  d008              BEQ      |L4.134|
000074  684d              LDR      r5,[r1,#4]
000076  2d02              CMP      r5,#2
000078  d005              BEQ      |L4.134|
;;;229              (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
00007a  684d              LDR      r5,[r1,#4]
00007c  2d11              CMP      r5,#0x11
00007e  d002              BEQ      |L4.134|
000080  684d              LDR      r5,[r1,#4]
000082  2d12              CMP      r5,#0x12
000084  d118              BNE      |L4.184|
                  |L4.134|
;;;230          {
;;;231            /* Check the Speed parameter */
;;;232            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;233            /* Configure the IO Speed */
;;;234            temp = GPIOx->OSPEEDR; 
000086  6898              LDR      r0,[r3,#8]
;;;235            CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
000088  0056              LSLS     r6,r2,#1
00008a  2503              MOVS     r5,#3
00008c  40b5              LSLS     r5,r5,r6
00008e  4606              MOV      r6,r0
000090  43ae              BICS     r6,r6,r5
000092  4630              MOV      r0,r6
;;;236            SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
000094  0056              LSLS     r6,r2,#1
000096  68cd              LDR      r5,[r1,#0xc]
000098  40b5              LSLS     r5,r5,r6
00009a  4328              ORRS     r0,r0,r5
;;;237            GPIOx->OSPEEDR = temp;
00009c  6098              STR      r0,[r3,#8]
;;;238    
;;;239            /* Configure the IO Output Type */
;;;240            temp = GPIOx->OTYPER;
00009e  6858              LDR      r0,[r3,#4]
;;;241            CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
0000a0  2501              MOVS     r5,#1
0000a2  4095              LSLS     r5,r5,r2
0000a4  4606              MOV      r6,r0
0000a6  43ae              BICS     r6,r6,r5
0000a8  4630              MOV      r0,r6
;;;242            SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
0000aa  2610              MOVS     r6,#0x10
0000ac  684d              LDR      r5,[r1,#4]
0000ae  4035              ANDS     r5,r5,r6
0000b0  092d              LSRS     r5,r5,#4
0000b2  4095              LSLS     r5,r5,r2
0000b4  4328              ORRS     r0,r0,r5
;;;243            GPIOx->OTYPER = temp;
0000b6  6058              STR      r0,[r3,#4]
                  |L4.184|
;;;244          }
;;;245    
;;;246          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;247          temp = GPIOx->PUPDR;
0000b8  68d8              LDR      r0,[r3,#0xc]
;;;248          CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
0000ba  0056              LSLS     r6,r2,#1
0000bc  2503              MOVS     r5,#3
0000be  40b5              LSLS     r5,r5,r6
0000c0  4606              MOV      r6,r0
0000c2  43ae              BICS     r6,r6,r5
0000c4  4630              MOV      r0,r6
;;;249          SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
0000c6  0056              LSLS     r6,r2,#1
0000c8  688d              LDR      r5,[r1,#8]
0000ca  40b5              LSLS     r5,r5,r6
0000cc  4328              ORRS     r0,r0,r5
;;;250          GPIOx->PUPDR = temp;
0000ce  60d8              STR      r0,[r3,#0xc]
;;;251    
;;;252          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;253          /* Configure the External Interrupt or event for the current IO */
;;;254          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
0000d0  2601              MOVS     r6,#1
0000d2  0736              LSLS     r6,r6,#28
0000d4  684d              LDR      r5,[r1,#4]
0000d6  4035              ANDS     r5,r5,r6
0000d8  42b5              CMP      r5,r6
0000da  d175              BNE      |L4.456|
;;;255          {
;;;256            /* Enable SYSCFG Clock */
;;;257            __HAL_RCC_SYSCFG_CLK_ENABLE();
0000dc  bf00              NOP      
0000de  4d3e              LDR      r5,|L4.472|
0000e0  69ad              LDR      r5,[r5,#0x18]
0000e2  2601              MOVS     r6,#1
0000e4  4335              ORRS     r5,r5,r6
0000e6  4e3c              LDR      r6,|L4.472|
0000e8  61b5              STR      r5,[r6,#0x18]
0000ea  4635              MOV      r5,r6
0000ec  69ad              LDR      r5,[r5,#0x18]
0000ee  07ed              LSLS     r5,r5,#31
0000f0  0fed              LSRS     r5,r5,#31
0000f2  9500              STR      r5,[sp,#0]
0000f4  bf00              NOP      
0000f6  bf00              NOP      
;;;258      
;;;259            temp = SYSCFG->EXTICR[position >> 2];
0000f8  4d38              LDR      r5,|L4.476|
0000fa  0896              LSRS     r6,r2,#2
0000fc  00b6              LSLS     r6,r6,#2
0000fe  59a8              LDR      r0,[r5,r6]
;;;260            CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
000100  0795              LSLS     r5,r2,#30
000102  0f2e              LSRS     r6,r5,#28
000104  250f              MOVS     r5,#0xf
000106  40b5              LSLS     r5,r5,r6
000108  4606              MOV      r6,r0
00010a  43ae              BICS     r6,r6,r5
00010c  4630              MOV      r0,r6
;;;261            SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
00010e  2509              MOVS     r5,#9
000110  06ed              LSLS     r5,r5,#27
000112  42ab              CMP      r3,r5
000114  d103              BNE      |L4.286|
000116  e000              B        |L4.282|
                  |L4.280|
000118  e056              B        |L4.456|
                  |L4.282|
00011a  2500              MOVS     r5,#0
00011c  e00f              B        |L4.318|
                  |L4.286|
00011e  4d30              LDR      r5,|L4.480|
000120  42ab              CMP      r3,r5
000122  d101              BNE      |L4.296|
000124  2501              MOVS     r5,#1
000126  e00a              B        |L4.318|
                  |L4.296|
000128  4d2e              LDR      r5,|L4.484|
00012a  42ab              CMP      r3,r5
00012c  d101              BNE      |L4.306|
00012e  2502              MOVS     r5,#2
000130  e005              B        |L4.318|
                  |L4.306|
000132  4d2d              LDR      r5,|L4.488|
000134  42ab              CMP      r3,r5
000136  d101              BNE      |L4.316|
000138  2503              MOVS     r5,#3
00013a  e000              B        |L4.318|
                  |L4.316|
00013c  2505              MOVS     r5,#5
                  |L4.318|
00013e  0796              LSLS     r6,r2,#30
000140  0f36              LSRS     r6,r6,#28
000142  40b5              LSLS     r5,r5,r6
000144  4328              ORRS     r0,r0,r5
;;;262            SYSCFG->EXTICR[position >> 2] = temp;
000146  4d25              LDR      r5,|L4.476|
000148  0896              LSRS     r6,r2,#2
00014a  00b6              LSLS     r6,r6,#2
00014c  51a8              STR      r0,[r5,r6]
;;;263                      
;;;264            /* Clear EXTI line configuration */
;;;265            temp = EXTI->IMR;
00014e  4d27              LDR      r5,|L4.492|
000150  6828              LDR      r0,[r5,#0]
;;;266            CLEAR_BIT(temp, (uint32_t)iocurrent);
000152  4605              MOV      r5,r0
000154  43a5              BICS     r5,r5,r4
000156  4628              MOV      r0,r5
;;;267            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
000158  2601              MOVS     r6,#1
00015a  0436              LSLS     r6,r6,#16
00015c  684d              LDR      r5,[r1,#4]
00015e  4035              ANDS     r5,r5,r6
000160  42b5              CMP      r5,r6
000162  d102              BNE      |L4.362|
;;;268            {
;;;269              SET_BIT(temp, iocurrent); 
000164  4605              MOV      r5,r0
000166  4325              ORRS     r5,r5,r4
000168  4628              MOV      r0,r5
                  |L4.362|
;;;270            }
;;;271            EXTI->IMR = temp;
00016a  4d20              LDR      r5,|L4.492|
00016c  6028              STR      r0,[r5,#0]
;;;272    
;;;273            temp = EXTI->EMR;
00016e  6868              LDR      r0,[r5,#4]
;;;274            CLEAR_BIT(temp, (uint32_t)iocurrent);      
000170  4605              MOV      r5,r0
000172  43a5              BICS     r5,r5,r4
000174  4628              MOV      r0,r5
;;;275            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
000176  2601              MOVS     r6,#1
000178  0476              LSLS     r6,r6,#17
00017a  684d              LDR      r5,[r1,#4]
00017c  4035              ANDS     r5,r5,r6
00017e  42b5              CMP      r5,r6
000180  d102              BNE      |L4.392|
;;;276            { 
;;;277              SET_BIT(temp, iocurrent); 
000182  4605              MOV      r5,r0
000184  4325              ORRS     r5,r5,r4
000186  4628              MOV      r0,r5
                  |L4.392|
;;;278            }
;;;279            EXTI->EMR = temp;
000188  4d18              LDR      r5,|L4.492|
00018a  6068              STR      r0,[r5,#4]
;;;280      
;;;281            /* Clear Rising Falling edge configuration */
;;;282            temp = EXTI->RTSR;
00018c  68a8              LDR      r0,[r5,#8]
;;;283            CLEAR_BIT(temp, (uint32_t)iocurrent); 
00018e  4605              MOV      r5,r0
000190  43a5              BICS     r5,r5,r4
000192  4628              MOV      r0,r5
;;;284            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
000194  2601              MOVS     r6,#1
000196  0536              LSLS     r6,r6,#20
000198  684d              LDR      r5,[r1,#4]
00019a  4035              ANDS     r5,r5,r6
00019c  42b5              CMP      r5,r6
00019e  d102              BNE      |L4.422|
;;;285            {
;;;286              SET_BIT(temp, iocurrent); 
0001a0  4605              MOV      r5,r0
0001a2  4325              ORRS     r5,r5,r4
0001a4  4628              MOV      r0,r5
                  |L4.422|
;;;287            }
;;;288            EXTI->RTSR = temp;
0001a6  4d11              LDR      r5,|L4.492|
0001a8  60a8              STR      r0,[r5,#8]
;;;289    
;;;290            temp = EXTI->FTSR;
0001aa  68e8              LDR      r0,[r5,#0xc]
;;;291            CLEAR_BIT(temp, (uint32_t)iocurrent); 
0001ac  4605              MOV      r5,r0
0001ae  43a5              BICS     r5,r5,r4
0001b0  4628              MOV      r0,r5
;;;292            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
0001b2  2601              MOVS     r6,#1
0001b4  0576              LSLS     r6,r6,#21
0001b6  684d              LDR      r5,[r1,#4]
0001b8  4035              ANDS     r5,r5,r6
0001ba  42b5              CMP      r5,r6
0001bc  d102              BNE      |L4.452|
;;;293            {
;;;294              SET_BIT(temp, iocurrent); 
0001be  4605              MOV      r5,r0
0001c0  4325              ORRS     r5,r5,r4
0001c2  4628              MOV      r0,r5
                  |L4.452|
;;;295            }
;;;296            EXTI->FTSR = temp;
0001c4  4d09              LDR      r5,|L4.492|
0001c6  60e8              STR      r0,[r5,#0xc]
                  |L4.456|
;;;297          }
;;;298        }
;;;299        
;;;300        position++;
0001c8  1c52              ADDS     r2,r2,#1
                  |L4.458|
0001ca  680d              LDR      r5,[r1,#0]            ;199
0001cc  40d5              LSRS     r5,r5,r2              ;199
0001ce  2d00              CMP      r5,#0                 ;199
0001d0  d000              BEQ      |L4.468|
0001d2  e71b              B        |L4.12|
                  |L4.468|
;;;301      } 
;;;302    }
0001d4  bd78              POP      {r3-r6,pc}
;;;303    
                          ENDP

0001d6  0000              DCW      0x0000
                  |L4.472|
                          DCD      0x40021000
                  |L4.476|
                          DCD      0x40010008
                  |L4.480|
                          DCD      0x48000400
                  |L4.484|
                          DCD      0x48000800
                  |L4.488|
                          DCD      0x48000c00
                  |L4.492|
                          DCD      0x40010400

                          AREA ||i.HAL_GPIO_LockPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_LockPin PROC
;;;465    */
;;;466    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;467    {
000002  4602              MOV      r2,r0
;;;468      __IO uint32_t tmp = GPIO_LCKR_LCKK;
000004  2001              MOVS     r0,#1
000006  0400              LSLS     r0,r0,#16
000008  9000              STR      r0,[sp,#0]
;;;469    
;;;470      /* Check the parameters */
;;;471      assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
;;;472      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;473    
;;;474      /* Apply lock key write sequence */
;;;475      SET_BIT(tmp, GPIO_Pin);
00000a  9800              LDR      r0,[sp,#0]
00000c  4308              ORRS     r0,r0,r1
00000e  9000              STR      r0,[sp,#0]
;;;476      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;477      GPIOx->LCKR = tmp;
000010  9800              LDR      r0,[sp,#0]
000012  61d0              STR      r0,[r2,#0x1c]
;;;478      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;479      GPIOx->LCKR = GPIO_Pin;
000014  61d1              STR      r1,[r2,#0x1c]
;;;480      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;481      GPIOx->LCKR = tmp;
000016  9800              LDR      r0,[sp,#0]
000018  61d0              STR      r0,[r2,#0x1c]
;;;482      /* Read LCKK bit*/
;;;483      tmp = GPIOx->LCKR;
00001a  69d0              LDR      r0,[r2,#0x1c]
00001c  9000              STR      r0,[sp,#0]
;;;484    
;;;485      if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
00001e  69d0              LDR      r0,[r2,#0x1c]
000020  2301              MOVS     r3,#1
000022  041b              LSLS     r3,r3,#16
000024  4018              ANDS     r0,r0,r3
000026  2800              CMP      r0,#0
000028  d001              BEQ      |L5.46|
;;;486      {
;;;487        return HAL_OK;
00002a  2000              MOVS     r0,#0
                  |L5.44|
;;;488      }
;;;489      else
;;;490      {
;;;491        return HAL_ERROR;
;;;492      }
;;;493    }
00002c  bd08              POP      {r3,pc}
                  |L5.46|
00002e  2001              MOVS     r0,#1                 ;491
000030  e7fc              B        |L5.44|
;;;494    
                          ENDP


                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;391      */
;;;392    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;393    {
;;;394      GPIO_PinState bitstatus;
;;;395    
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;398    
;;;399      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000002  6913              LDR      r3,[r2,#0x10]
000004  400b              ANDS     r3,r3,r1
000006  2b00              CMP      r3,#0
000008  d001              BEQ      |L6.14|
;;;400      {
;;;401        bitstatus = GPIO_PIN_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L6.16|
                  |L6.14|
;;;402      }
;;;403      else
;;;404      {
;;;405        bitstatus = GPIO_PIN_RESET;
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;406      }
;;;407      return bitstatus;
;;;408      }
000010  4770              BX       lr
;;;409    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;446      */
;;;447    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;448    {
;;;449      /* Check the parameters */
;;;450      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;451    
;;;452      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;453    }
000006  4770              BX       lr
;;;454    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;424      */
;;;425    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  2a00              CMP      r2,#0
;;;426    {
;;;427      /* Check the parameters */
;;;428      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;429      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;430    
;;;431      if (PinState != GPIO_PIN_RESET)
000002  d001              BEQ      |L8.8|
;;;432      {
;;;433        GPIOx->BSRR = (uint32_t)GPIO_Pin;
000004  6181              STR      r1,[r0,#0x18]
000006  e000              B        |L8.10|
                  |L8.8|
;;;434      }
;;;435      else
;;;436      {
;;;437        GPIOx->BRR = (uint32_t)GPIO_Pin;
000008  6281              STR      r1,[r0,#0x28]
                  |L8.10|
;;;438      }
;;;439    }
00000a  4770              BX       lr
;;;440      
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f0xx_hal_gpio_c_ea787061____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f0xx_hal_gpio_c_ea787061____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f0xx_hal_gpio_c_ea787061____REVSH|
#line 402
|__asm___20_stm32f0xx_hal_gpio_c_ea787061____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
