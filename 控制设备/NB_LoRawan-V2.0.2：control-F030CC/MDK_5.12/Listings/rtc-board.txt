; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\rtc-board.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\rtc-board.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\rtc-board.crf ..\HAL\src\rtc-board.c]
                          THUMB

                          AREA ||i.BlockLowPowerDuringTask||, CODE, READONLY, ALIGN=2

                  BlockLowPowerDuringTask PROC
;;;496    
;;;497    void BlockLowPowerDuringTask( bool status )
000000  b500              PUSH     {lr}
;;;498    {
;;;499        if( status == true )
000002  2801              CMP      r0,#1
000004  d101              BNE      |L1.10|
;;;500        {
;;;501            RtcRecoverMcuStatus( );
000006  f7fffffe          BL       RtcRecoverMcuStatus
                  |L1.10|
;;;502        }
;;;503        LowPowerDisableDuringTask = status;
00000a  4901              LDR      r1,|L1.16|
00000c  7008              STRB     r0,[r1,#0]
;;;504    }
00000e  bd00              POP      {pc}
;;;505    
                          ENDP

                  |L1.16|
                          DCD      LowPowerDisableDuringTask

                          AREA ||i.HAL_RTC_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_RTC_MspDeInit PROC
;;;232    
;;;233    void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
000000  b510              PUSH     {r4,lr}
;;;234    {
000002  4604              MOV      r4,r0
;;;235    
;;;236      if(rtcHandle->Instance==RTC)
000004  4906              LDR      r1,|L2.32|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d108              BNE      |L2.30|
;;;237      {
;;;238      /* USER CODE BEGIN RTC_MspDeInit 0 */
;;;239    
;;;240      /* USER CODE END RTC_MspDeInit 0 */
;;;241        /* Peripheral clock disable */
;;;242        __HAL_RCC_RTC_DISABLE();
00000c  4805              LDR      r0,|L2.36|
00000e  6a00              LDR      r0,[r0,#0x20]
000010  13c9              ASRS     r1,r1,#15
000012  4388              BICS     r0,r0,r1
000014  4903              LDR      r1,|L2.36|
000016  6208              STR      r0,[r1,#0x20]
;;;243    
;;;244        /* Peripheral interrupt Deinit*/
;;;245        HAL_NVIC_DisableIRQ(RTC_IRQn);
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       HAL_NVIC_DisableIRQ
                  |L2.30|
;;;246    
;;;247      }
;;;248      /* USER CODE BEGIN RTC_MspDeInit 1 */
;;;249    
;;;250      /* USER CODE END RTC_MspDeInit 1 */
;;;251    } 
00001e  bd10              POP      {r4,pc}
;;;252    
                          ENDP

                  |L2.32|
                          DCD      0x40002800
                  |L2.36|
                          DCD      0x40021000

                          AREA ||i.HAL_RTC_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_RTC_MspInit PROC
;;;216    
;;;217    void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
000000  4a05              LDR      r2,|L3.24|
;;;218    {
;;;219    
;;;220      if(rtcHandle->Instance==RTC)
000002  6801              LDR      r1,[r0,#0]
000004  4291              CMP      r1,r2
000006  d105              BNE      |L3.20|
;;;221      {
;;;222      /* USER CODE BEGIN RTC_MspInit 0 */
;;;223    
;;;224      /* USER CODE END RTC_MspInit 0 */
;;;225        /* Peripheral clock enable */
;;;226        __HAL_RCC_RTC_ENABLE();
000008  4904              LDR      r1,|L3.28|
00000a  6a09              LDR      r1,[r1,#0x20]
00000c  13d2              ASRS     r2,r2,#15
00000e  4311              ORRS     r1,r1,r2
000010  4a02              LDR      r2,|L3.28|
000012  6211              STR      r1,[r2,#0x20]
                  |L3.20|
;;;227      /* USER CODE BEGIN RTC_MspInit 1 */
;;;228    
;;;229      /* USER CODE END RTC_MspInit 1 */
;;;230      }
;;;231    }
000014  4770              BX       lr
;;;232    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x40002800
                  |L3.28|
                          DCD      0x40021000

                          AREA ||i.RTC_Init||, CODE, READONLY, ALIGN=2

                  RTC_Init PROC
;;;164    /* RTC init function */
;;;165    void RTC_Init(void)
000000  b500              PUSH     {lr}
;;;166    {
000002  b087              SUB      sp,sp,#0x1c
;;;167    	RTC_TimeTypeDef RTC_TimeStruct;
;;;168      RTC_DateTypeDef RTC_DateStruct;
;;;169    	
;;;170    	/**Initialize RTC Only 
;;;171    	*/
;;;172    	if( RtcInitialized == false )
000004  4820              LDR      r0,|L4.136|
000006  7800              LDRB     r0,[r0,#0]  ; RtcInitialized
000008  2800              CMP      r0,#0
00000a  d13a              BNE      |L4.130|
;;;173     {
;;;174    
;;;175    		RtcHandle.Instance = RTC;
00000c  481f              LDR      r0,|L4.140|
00000e  4920              LDR      r1,|L4.144|
000010  6008              STR      r0,[r1,#0]  ; RtcHandle
;;;176    		RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
000012  2000              MOVS     r0,#0
000014  6048              STR      r0,[r1,#4]  ; RtcHandle
;;;177    	 
;;;178    		RtcHandle.Init.AsynchPrediv = 0x01; //3; 127
000016  2101              MOVS     r1,#1
000018  481d              LDR      r0,|L4.144|
00001a  6081              STR      r1,[r0,#8]
;;;179    		RtcHandle.Init.SynchPrediv = 0x01; ///3; 255
00001c  60c1              STR      r1,[r0,#0xc]
;;;180    	 
;;;181    		RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
00001e  2100              MOVS     r1,#0
000020  6101              STR      r1,[r0,#0x10]
;;;182    		RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
000022  6141              STR      r1,[r0,#0x14]
;;;183    		RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
000024  6181              STR      r1,[r0,#0x18]
;;;184    		if (HAL_RTC_Init(&RtcHandle) != HAL_OK)
000026  f7fffffe          BL       HAL_RTC_Init
00002a  2800              CMP      r0,#0
00002c  d004              BEQ      |L4.56|
;;;185    		{
;;;186    			printf("HAL_RTC_Init error \r\n");
00002e  a019              ADR      r0,|L4.148|
000030  f7fffffe          BL       __2printf
;;;187    			Error_Handler();
000034  f7fffffe          BL       Error_Handler
                  |L4.56|
;;;188    		}
;;;189    
;;;190    		/**Initialize RTC and set the Time and Date 
;;;191    		*/
;;;192    		RTC_TimeStruct.TimeFormat = RTC_HOURFORMAT12_AM;	
000038  2100              MOVS     r1,#0
00003a  4668              MOV      r0,sp
00003c  72c1              STRB     r1,[r0,#0xb]
;;;193    		RTC_TimeStruct.Hours = 0;
00003e  7201              STRB     r1,[r0,#8]
;;;194    		RTC_TimeStruct.Minutes = 0;
000040  7241              STRB     r1,[r0,#9]
;;;195    		RTC_TimeStruct.Seconds = 0;
000042  7281              STRB     r1,[r0,#0xa]
;;;196    		RTC_TimeStruct.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
000044  2000              MOVS     r0,#0
000046  9005              STR      r0,[sp,#0x14]
;;;197    		RTC_TimeStruct.StoreOperation = RTC_STOREOPERATION_RESET;
000048  9006              STR      r0,[sp,#0x18]
;;;198    		if (HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BCD) != HAL_OK)
00004a  2201              MOVS     r2,#1
00004c  a902              ADD      r1,sp,#8
00004e  4810              LDR      r0,|L4.144|
000050  f7fffffe          BL       HAL_RTC_SetTime
000054  2800              CMP      r0,#0
000056  d001              BEQ      |L4.92|
;;;199    		{
;;;200    			Error_Handler();
000058  f7fffffe          BL       Error_Handler
                  |L4.92|
;;;201    		}
;;;202    
;;;203    		RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
00005c  2101              MOVS     r1,#1
00005e  4668              MOV      r0,sp
000060  7101              STRB     r1,[r0,#4]
;;;204    		RTC_DateStruct.Month = RTC_MONTH_JANUARY;
000062  7141              STRB     r1,[r0,#5]
;;;205    		RTC_DateStruct.Date = 1;
000064  7181              STRB     r1,[r0,#6]
;;;206    		RTC_DateStruct.Year = 17;
000066  2111              MOVS     r1,#0x11
000068  71c1              STRB     r1,[r0,#7]
;;;207    
;;;208    		if (HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BCD) != HAL_OK)
00006a  2201              MOVS     r2,#1
00006c  a901              ADD      r1,sp,#4
00006e  4808              LDR      r0,|L4.144|
000070  f7fffffe          BL       HAL_RTC_SetDate
000074  2800              CMP      r0,#0
000076  d001              BEQ      |L4.124|
;;;209    		{
;;;210    			Error_Handler();
000078  f7fffffe          BL       Error_Handler
                  |L4.124|
;;;211    		}
;;;212    		
;;;213    		RtcInitialized = true;
00007c  2001              MOVS     r0,#1
00007e  4902              LDR      r1,|L4.136|
000080  7008              STRB     r0,[r1,#0]
                  |L4.130|
;;;214    	}
;;;215    }
000082  b007              ADD      sp,sp,#0x1c
000084  bd00              POP      {pc}
;;;216    
                          ENDP

000086  0000              DCW      0x0000
                  |L4.136|
                          DCD      RtcInitialized
                  |L4.140|
                          DCD      0x40002800
                  |L4.144|
                          DCD      RtcHandle
                  |L4.148|
000094  48414c5f          DCB      "HAL_RTC_Init error \r\n",0
000098  5254435f
00009c  496e6974
0000a0  20657272
0000a4  6f72200d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.RtcClearStatus||, CODE, READONLY, ALIGN=2

                  RtcClearStatus PROC
;;;311    
;;;312    static void RtcClearStatus( void )
000000  480c              LDR      r0,|L5.52|
;;;313    {
;;;314        /* Clear RTC Alarm Flag */
;;;315    	__HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF );
000002  6800              LDR      r0,[r0,#0]  ; RtcHandle
000004  68c0              LDR      r0,[r0,#0xc]
000006  2180              MOVS     r1,#0x80
000008  4008              ANDS     r0,r0,r1
00000a  490b              LDR      r1,|L5.56|
00000c  4308              ORRS     r0,r0,r1
00000e  4909              LDR      r1,|L5.52|
000010  6809              LDR      r1,[r1,#0]  ; RtcHandle
000012  60c8              STR      r0,[r1,#0xc]
;;;316    
;;;317    	/* Enable RTC Alarm A Interrupt */
;;;318    	__HAL_RTC_ALARM_EXTI_DISABLE_IT();
000014  4809              LDR      r0,|L5.60|
000016  6800              LDR      r0,[r0,#0]
000018  2101              MOVS     r1,#1
00001a  0449              LSLS     r1,r1,#17
00001c  4388              BICS     r0,r0,r1
00001e  4907              LDR      r1,|L5.60|
000020  6008              STR      r0,[r1,#0]
;;;319    
;;;320    	/* Enable the Alarm A */
;;;321    	__HAL_RTC_ALARM_DISABLE_IT(&RtcHandle, RTC_IT_ALRA);
000022  4804              LDR      r0,|L5.52|
000024  6800              LDR      r0,[r0,#0]  ; RtcHandle
000026  6880              LDR      r0,[r0,#8]
000028  1489              ASRS     r1,r1,#18
00002a  4388              BICS     r0,r0,r1
00002c  4901              LDR      r1,|L5.52|
00002e  6809              LDR      r1,[r1,#0]  ; RtcHandle
000030  6088              STR      r0,[r1,#8]
;;;322    }
000032  4770              BX       lr
;;;323    
                          ENDP

                  |L5.52|
                          DCD      RtcHandle
                  |L5.56|
                          DCD      0xfffffe7f
                  |L5.60|
                          DCD      0x40010400

                          AREA ||i.RtcDelayMs||, CODE, READONLY, ALIGN=1

                  RtcDelayMs PROC
;;;505    
;;;506    void RtcDelayMs( uint32_t delay )
000000  b57c              PUSH     {r2-r6,lr}
;;;507    {
000002  4604              MOV      r4,r0
;;;508        uint64_t delayValue = 0;
000004  bf00              NOP      
;;;509        uint64_t timeout = 0;
000006  bf00              NOP      
;;;510    
;;;511        delayValue = ( uint64_t )( delay * 1000 );
000008  4620              MOV      r0,r4
00000a  217d              MOVS     r1,#0x7d
00000c  00c9              LSLS     r1,r1,#3
00000e  4348              MULS     r0,r1,r0
000010  2600              MOVS     r6,#0
000012  4605              MOV      r5,r0
;;;512      
;;;513        // Wait delay ms
;;;514        timeout = RtcGetTimerValue( );
000014  f7fffffe          BL       RtcGetTimerValue
000018  9101              STR      r1,[sp,#4]
00001a  9000              STR      r0,[sp,#0]
;;;515     
;;;516        while( ( ( RtcGetTimerValue( ) - timeout ) ) < delayValue )
00001c  e000              B        |L6.32|
                  |L6.30|
;;;517        {
;;;518            __NOP( );      
00001e  bf00              NOP      
                  |L6.32|
000020  f7fffffe          BL       RtcGetTimerValue
000024  9b01              LDR      r3,[sp,#4]            ;516
000026  9a00              LDR      r2,[sp,#0]            ;516
000028  1a80              SUBS     r0,r0,r2              ;516
00002a  4199              SBCS     r1,r1,r3              ;516
00002c  1b40              SUBS     r0,r0,r5              ;516
00002e  41b1              SBCS     r1,r1,r6              ;516
000030  d3f5              BCC      |L6.30|
;;;519        }
;;;520      
;;;521    }
000032  bd7c              POP      {r2-r6,pc}
;;;522    
                          ENDP


                          AREA ||i.RtcEnterLowPowerStopMode||, CODE, READONLY, ALIGN=1

                  RtcEnterLowPowerStopMode PROC
;;;427    
;;;428    void RtcEnterLowPowerStopMode( void )
000000  4770              BX       lr
;;;429    {   
;;;430    //     if( ( LowPowerDisableDuringTask == false ) && ( RtcTimerEventAllowsLowPower == true ) )
;;;431    //     {   
;;;432    //         // Disable IRQ while the MCU is being deinitialized to prevent race issues
;;;433    //         __disable_irq( );
;;;434    //     
;;;435    //         BoardDeInitMcu( );
;;;436    //     
;;;437    //         __enable_irq( );
;;;438    //     
;;;439    //         /* Disable the Power Voltage Detector */
;;;440    //         PWR_PVDCmd( DISABLE );
;;;441    
;;;442    //         /* Set MCU in ULP (Ultra Low Power) */
;;;443    //         PWR_UltraLowPowerCmd( ENABLE );
;;;444    
;;;445    //         /*Disable fast wakeUp*/
;;;446    //         PWR_FastWakeUpCmd( DISABLE );
;;;447    
;;;448    //         /* Enter Stop Mode */
;;;449    //         PWR_EnterSTOPMode( PWR_Regulator_LowPower, PWR_STOPEntry_WFI );
;;;450    //     }
;;;451    }
;;;452    
                          ENDP


                          AREA ||i.RtcGetCalendarValue||, CODE, READONLY, ALIGN=2

                  RtcGetCalendarValue PROC
;;;522    
;;;523    uint64_t RtcGetCalendarValue( void )
000000  b570              PUSH     {r4-r6,lr}
;;;524    {
000002  b086              SUB      sp,sp,#0x18
;;;525        uint64_t calendarValue = 0;
000004  2100              MOVS     r1,#0
000006  460d              MOV      r5,r1
000008  460e              MOV      r6,r1
;;;526        uint8_t i = 0;
00000a  2400              MOVS     r4,#0
;;;527    
;;;528        RTC_TimeTypeDef RTC_TimeStruct;
;;;529        RTC_DateTypeDef RTC_DateStruct;
;;;530        HAL_RTC_GetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
00000c  2200              MOVS     r2,#0
00000e  a901              ADD      r1,sp,#4
000010  4845              LDR      r0,|L8.296|
000012  f7fffffe          BL       HAL_RTC_GetTime
;;;531        HAL_RTC_GetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
000016  2200              MOVS     r2,#0
000018  4669              MOV      r1,sp
00001a  4843              LDR      r0,|L8.296|
00001c  f7fffffe          BL       HAL_RTC_GetDate
;;;532    
;;;533        if( ( PreviousYear == 99 ) && ( RTC_DateStruct.Year == 0 ) )
000020  4842              LDR      r0,|L8.300|
000022  7800              LDRB     r0,[r0,#0]  ; PreviousYear
000024  2863              CMP      r0,#0x63
000026  d108              BNE      |L8.58|
000028  4668              MOV      r0,sp
00002a  78c0              LDRB     r0,[r0,#3]
00002c  2800              CMP      r0,#0
00002e  d104              BNE      |L8.58|
;;;534        {
;;;535            Century++;
000030  483f              LDR      r0,|L8.304|
000032  7800              LDRB     r0,[r0,#0]  ; Century
000034  1c40              ADDS     r0,r0,#1
000036  493e              LDR      r1,|L8.304|
000038  7008              STRB     r0,[r1,#0]
                  |L8.58|
;;;536        }
;;;537        PreviousYear = RTC_DateStruct.Year;
00003a  4668              MOV      r0,sp
00003c  78c0              LDRB     r0,[r0,#3]
00003e  493b              LDR      r1,|L8.300|
000040  7008              STRB     r0,[r1,#0]
;;;538    
;;;539        // century
;;;540        for( i = 0; i < Century; i++ )
000042  2400              MOVS     r4,#0
000044  e007              B        |L8.86|
                  |L8.70|
;;;541        {
;;;542            calendarValue += ( uint64_t )( DaysInCentury * SecondsInDay );
000046  4630              MOV      r0,r6
000048  4a3a              LDR      r2,|L8.308|
00004a  2100              MOVS     r1,#0
00004c  18ad              ADDS     r5,r5,r2
00004e  4148              ADCS     r0,r0,r1
000050  4606              MOV      r6,r0
000052  1c60              ADDS     r0,r4,#1              ;540
000054  b2c4              UXTB     r4,r0                 ;540
                  |L8.86|
000056  4836              LDR      r0,|L8.304|
000058  7800              LDRB     r0,[r0,#0]            ;540  ; Century
00005a  4284              CMP      r4,r0                 ;540
00005c  dbf3              BLT      |L8.70|
;;;543        }
;;;544    
;;;545        // years
;;;546        for( i = 0; i < RTC_DateStruct.Year; i++ )
00005e  2400              MOVS     r4,#0
000060  e018              B        |L8.148|
                  |L8.98|
;;;547        {
;;;548            if( ( i == 0 ) || ( i % 4 == 0 ) )
000062  2c00              CMP      r4,#0
000064  d007              BEQ      |L8.118|
000066  4620              MOV      r0,r4
000068  17e1              ASRS     r1,r4,#31
00006a  0f89              LSRS     r1,r1,#30
00006c  1809              ADDS     r1,r1,r0
00006e  1089              ASRS     r1,r1,#2
000070  0089              LSLS     r1,r1,#2
000072  1a61              SUBS     r1,r4,r1
000074  d106              BNE      |L8.132|
                  |L8.118|
;;;549            {
;;;550                calendarValue += DaysInLeapYear * SecondsInDay;
000076  4a30              LDR      r2,|L8.312|
000078  2100              MOVS     r1,#0
00007a  4630              MOV      r0,r6
00007c  18ad              ADDS     r5,r5,r2
00007e  4148              ADCS     r0,r0,r1
000080  4606              MOV      r6,r0
000082  e005              B        |L8.144|
                  |L8.132|
;;;551            }
;;;552            else
;;;553            {
;;;554                calendarValue += DaysInYear * SecondsInDay;
000084  4630              MOV      r0,r6
000086  4a2d              LDR      r2,|L8.316|
000088  2100              MOVS     r1,#0
00008a  18ad              ADDS     r5,r5,r2
00008c  4148              ADCS     r0,r0,r1
00008e  4606              MOV      r6,r0
                  |L8.144|
000090  1c60              ADDS     r0,r4,#1              ;546
000092  b2c4              UXTB     r4,r0                 ;546
                  |L8.148|
000094  4668              MOV      r0,sp                 ;546
000096  78c0              LDRB     r0,[r0,#3]            ;546
000098  42a0              CMP      r0,r4                 ;546
00009a  dce2              BGT      |L8.98|
;;;555            }
;;;556        }
;;;557    
;;;558        // months
;;;559        if( ( RTC_DateStruct.Year == 0 ) || ( RTC_DateStruct.Year % 4 == 0 ) )
00009c  4669              MOV      r1,sp
00009e  78c9              LDRB     r1,[r1,#3]
0000a0  2900              CMP      r1,#0
0000a2  d008              BEQ      |L8.182|
0000a4  4669              MOV      r1,sp
0000a6  78c8              LDRB     r0,[r1,#3]
0000a8  17c1              ASRS     r1,r0,#31
0000aa  0f89              LSRS     r1,r1,#30
0000ac  1809              ADDS     r1,r1,r0
0000ae  1089              ASRS     r1,r1,#2
0000b0  0089              LSLS     r1,r1,#2
0000b2  1a41              SUBS     r1,r0,r1
0000b4  d110              BNE      |L8.216|
                  |L8.182|
;;;560        {
;;;561            for( i = 0; i < ( RTC_DateStruct.Month - 1 ); i++ )
0000b6  2400              MOVS     r4,#0
0000b8  e008              B        |L8.204|
                  |L8.186|
;;;562            {
;;;563                calendarValue += DaysInMonthLeapYear[i] * SecondsInDay;
0000ba  4821              LDR      r0,|L8.320|
0000bc  5d00              LDRB     r0,[r0,r4]
0000be  4921              LDR      r1,|L8.324|
0000c0  4348              MULS     r0,r1,r0
0000c2  2100              MOVS     r1,#0
0000c4  1945              ADDS     r5,r0,r5
0000c6  414e              ADCS     r6,r6,r1
0000c8  1c60              ADDS     r0,r4,#1              ;561
0000ca  b2c4              UXTB     r4,r0                 ;561
                  |L8.204|
0000cc  4668              MOV      r0,sp                 ;561
0000ce  7840              LDRB     r0,[r0,#1]            ;561
0000d0  1e40              SUBS     r0,r0,#1              ;561
0000d2  42a0              CMP      r0,r4                 ;561
0000d4  dcf1              BGT      |L8.186|
0000d6  e00f              B        |L8.248|
                  |L8.216|
;;;564            }
;;;565        }
;;;566        else
;;;567        {
;;;568            for( i = 0;  i < ( RTC_DateStruct.Month - 1 ); i++ )
0000d8  2400              MOVS     r4,#0
0000da  e008              B        |L8.238|
                  |L8.220|
;;;569            {
;;;570                calendarValue += DaysInMonth[i] * SecondsInDay;
0000dc  481a              LDR      r0,|L8.328|
0000de  5d00              LDRB     r0,[r0,r4]
0000e0  4918              LDR      r1,|L8.324|
0000e2  4348              MULS     r0,r1,r0
0000e4  2100              MOVS     r1,#0
0000e6  1945              ADDS     r5,r0,r5
0000e8  414e              ADCS     r6,r6,r1
0000ea  1c60              ADDS     r0,r4,#1              ;568
0000ec  b2c4              UXTB     r4,r0                 ;568
                  |L8.238|
0000ee  4668              MOV      r0,sp                 ;568
0000f0  7840              LDRB     r0,[r0,#1]            ;568
0000f2  1e40              SUBS     r0,r0,#1              ;568
0000f4  42a0              CMP      r0,r4                 ;568
0000f6  dcf1              BGT      |L8.220|
                  |L8.248|
;;;571            }
;;;572        }       
;;;573    
;;;574        // days
;;;575        calendarValue += ( ( uint32_t )RTC_TimeStruct.Seconds + 
0000f8  4668              MOV      r0,sp
0000fa  7981              LDRB     r1,[r0,#6]
0000fc  7940              LDRB     r0,[r0,#5]
0000fe  223c              MOVS     r2,#0x3c
000100  4350              MULS     r0,r2,r0
000102  1809              ADDS     r1,r1,r0
000104  4668              MOV      r0,sp
000106  7900              LDRB     r0,[r0,#4]
000108  22e1              MOVS     r2,#0xe1
00010a  0112              LSLS     r2,r2,#4
00010c  4350              MULS     r0,r2,r0
00010e  1809              ADDS     r1,r1,r0
000110  4668              MOV      r0,sp
000112  7880              LDRB     r0,[r0,#2]
000114  4a0b              LDR      r2,|L8.324|
000116  4350              MULS     r0,r2,r0
000118  1809              ADDS     r1,r1,r0
00011a  2000              MOVS     r0,#0
00011c  194d              ADDS     r5,r1,r5
00011e  4146              ADCS     r6,r6,r0
;;;576                          ( ( uint32_t )RTC_TimeStruct.Minutes * SecondsInMinute ) +
;;;577                          ( ( uint32_t )RTC_TimeStruct.Hours * SecondsInHour ) + 
;;;578                          ( ( uint32_t )( RTC_DateStruct.Date * SecondsInDay ) ) );
;;;579        DEBUG(3,"Hours = %d : Minutes = %d : Seconds = %d \r\n", RTC_TimeStruct.Hours, RTC_TimeStruct.Minutes,
;;;580    					RTC_TimeStruct.Seconds);
;;;581        DEBUG(3,"line = %d\r\n", __LINE__);
;;;582        return( calendarValue );
000120  4628              MOV      r0,r5
000122  4631              MOV      r1,r6
;;;583    }
000124  b006              ADD      sp,sp,#0x18
000126  bd70              POP      {r4-r6,pc}
;;;584    
                          ENDP

                  |L8.296|
                          DCD      RtcHandle
                  |L8.300|
                          DCD      PreviousYear
                  |L8.304|
                          DCD      Century
                  |L8.308|
                          DCD      0xbc180be9
                  |L8.312|
                          DCD      0x01e28500
                  |L8.316|
                          DCD      0x01e13380
                  |L8.320|
                          DCD      DaysInMonthLeapYear
                  |L8.324|
                          DCD      0x00015180
                  |L8.328|
                          DCD      DaysInMonth

                          AREA ||i.RtcGetMinimumTimeout||, CODE, READONLY, ALIGN=2

                  RtcGetMinimumTimeout PROC
;;;261    
;;;262    uint32_t RtcGetMinimumTimeout( void )
000000  b570              PUSH     {r4-r6,lr}
;;;263    {
;;;264        return( (uint32_t)ceil( 10 * RTC_ALARM_TIME_BASE ) );
000002  4804              LDR      r0,|L9.20|
000004  4904              LDR      r1,|L9.24|
000006  f7fffffe          BL       ceil
00000a  4604              MOV      r4,r0
00000c  f7fffffe          BL       __aeabi_d2uiz
;;;265    }
000010  bd70              POP      {r4-r6,pc}
;;;266    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0xcccccccc
                  |L9.24|
                          DCD      0x409312cc

                          AREA ||i.RtcGetTimerElapsedTime||, CODE, READONLY, ALIGN=2

                  RtcGetTimerElapsedTime PROC
;;;295    
;;;296    uint32_t RtcGetTimerElapsedTime( void )
000000  b5f0              PUSH     {r4-r7,lr}
;;;297    {
000002  b087              SUB      sp,sp,#0x1c
;;;298        TimerTime_t CalendarValue = 0;
000004  bf00              NOP      
;;;299    
;;;300        CalendarValue = RtcGetCalendarValue( );
000006  f7fffffe          BL       RtcGetCalendarValue
00000a  9105              STR      r1,[sp,#0x14]
00000c  9004              STR      r0,[sp,#0x10]
;;;301    
;;;302        return( ( uint32_t )( ceil ( ( ( CalendarValue - RtcTimerContext ) + 2 ) * RTC_ALARM_TIME_BASE ) ) );
00000e  4f0d              LDR      r7,|L10.68|
000010  9905              LDR      r1,[sp,#0x14]
000012  9804              LDR      r0,[sp,#0x10]
000014  cfc0              LDM      r7,{r6,r7}
000016  1b80              SUBS     r0,r0,r6
000018  41b9              SBCS     r1,r1,r7
00001a  2600              MOVS     r6,#0
00001c  1c82              ADDS     r2,r0,#2
00001e  4171              ADCS     r1,r1,r6
000020  4610              MOV      r0,r2
000022  f7fffffe          BL       __aeabi_ul2d
000026  4604              MOV      r4,r0
000028  4a07              LDR      r2,|L10.72|
00002a  4b08              LDR      r3,|L10.76|
00002c  f7fffffe          BL       __aeabi_dmul
000030  9101              STR      r1,[sp,#4]
000032  9000              STR      r0,[sp,#0]
000034  f7fffffe          BL       ceil
000038  9103              STR      r1,[sp,#0xc]
00003a  9002              STR      r0,[sp,#8]
00003c  f7fffffe          BL       __aeabi_d2uiz
;;;303    }
000040  b007              ADD      sp,sp,#0x1c
000042  bdf0              POP      {r4-r7,pc}
;;;304    
                          ENDP

                  |L10.68|
                          DCD      RtcTimerContext
                  |L10.72|
                          DCD      0xe147ae14
                  |L10.76|
                          DCD      0x405e847a

                          AREA ||i.RtcGetTimerValue||, CODE, READONLY, ALIGN=2

                  RtcGetTimerValue PROC
;;;304    
;;;305    uint64_t RtcGetTimerValue( void )
000000  b5f0              PUSH     {r4-r7,lr}
;;;306    {
000002  b085              SUB      sp,sp,#0x14
;;;307        TimerTime_t CalendarValue = 0;
000004  bf00              NOP      
;;;308        CalendarValue = RtcGetCalendarValue( );
000006  f7fffffe          BL       RtcGetCalendarValue
00000a  9103              STR      r1,[sp,#0xc]
00000c  9002              STR      r0,[sp,#8]
;;;309        return( ( CalendarValue + 2 ) * RTC_ALARM_TIME_BASE );
00000e  2600              MOVS     r6,#0
000010  9903              LDR      r1,[sp,#0xc]
000012  9802              LDR      r0,[sp,#8]
000014  1c82              ADDS     r2,r0,#2
000016  4171              ADCS     r1,r1,r6
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       __aeabi_ul2d
00001e  4604              MOV      r4,r0
000020  4a04              LDR      r2,|L11.52|
000022  4b05              LDR      r3,|L11.56|
000024  f7fffffe          BL       __aeabi_dmul
000028  9101              STR      r1,[sp,#4]
00002a  9000              STR      r0,[sp,#0]
00002c  f7fffffe          BL       __aeabi_d2ulz
;;;310    }
000030  b005              ADD      sp,sp,#0x14
000032  bdf0              POP      {r4-r7,pc}
;;;311    
                          ENDP

                  |L11.52|
                          DCD      0xe147ae14
                  |L11.56|
                          DCD      0x405e847a

                          AREA ||i.RtcRecoverMcuStatus||, CODE, READONLY, ALIGN=1

                  RtcRecoverMcuStatus PROC
;;;452    
;;;453    void RtcRecoverMcuStatus( void )
000000  4770              BX       lr
;;;454    {    
;;;455    //     if( TimerGetLowPowerEnable( ) == true )
;;;456    //     {
;;;457    //         if( ( LowPowerDisableDuringTask == false ) && ( RtcTimerEventAllowsLowPower == true ) )
;;;458    //         {    
;;;459    //             // Disable IRQ while the MCU is not running on HSE
;;;460    //             __disable_irq( );
;;;461    //     
;;;462    //             /* After wake-up from STOP reconfigure the system clock */
;;;463    //             /* Enable HSE */
;;;464    //             RCC_HSEConfig( RCC_HSE_ON );
;;;465    //             
;;;466    //             /* Wait till HSE is ready */
;;;467    //             while( RCC_GetFlagStatus( RCC_FLAG_HSERDY ) == RESET )
;;;468    //             {}
;;;469    //             
;;;470    //             /* Enable PLL */
;;;471    //             RCC_PLLCmd( ENABLE );
;;;472    //             
;;;473    //             /* Wait till PLL is ready */
;;;474    //             while( RCC_GetFlagStatus( RCC_FLAG_PLLRDY ) == RESET )
;;;475    //             {}
;;;476    //             
;;;477    //             /* Select PLL as system clock source */
;;;478    //             RCC_SYSCLKConfig( RCC_SYSCLKSource_PLLCLK );
;;;479    //             
;;;480    //             /* Wait till PLL is used as system clock source */
;;;481    //             while( RCC_GetSYSCLKSource( ) != 0x0C )
;;;482    //             {}
;;;483    //     
;;;484    //             /* Set MCU in ULP (Ultra Low Power) */
;;;485    //             PWR_UltraLowPowerCmd( DISABLE ); // add up to 3ms wakeup time
;;;486    //             
;;;487    //             /* Enable the Power Voltage Detector */
;;;488    //             PWR_PVDCmd( ENABLE );
;;;489    //                 
;;;490    //             BoardInitMcu( );
;;;491    //     
;;;492    //             __enable_irq( );
;;;493    //         }
;;;494    //     }
;;;495    }
;;;496    
                          ENDP


                          AREA ||i.RtcSetTimeout||, CODE, READONLY, ALIGN=2

                  RtcSetTimeout PROC
;;;266    
;;;267    void RtcSetTimeout( uint32_t timeout )
000000  b5f8              PUSH     {r3-r7,lr}
;;;268    {
000002  4607              MOV      r7,r0
;;;269        uint32_t timeoutValue = 0;
000004  2400              MOVS     r4,#0
;;;270    
;;;271        timeoutValue = timeout;
000006  463c              MOV      r4,r7
;;;272    
;;;273        if( timeoutValue < ( 10 * RTC_ALARM_TIME_BASE ) )
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_ui2d
00000e  4605              MOV      r5,r0
000010  4a0e              LDR      r2,|L13.76|
000012  4b0f              LDR      r3,|L13.80|
000014  f7fffffe          BL       __aeabi_cdcmple
000018  d200              BCS      |L13.28|
;;;274        {
;;;275            timeoutValue = (uint32_t)(10.0 * RTC_ALARM_TIME_BASE);
00001a  4c0e              LDR      r4,|L13.84|
                  |L13.28|
;;;276        }
;;;277        
;;;278        if( timeoutValue < 55000 ) 
00001c  480e              LDR      r0,|L13.88|
00001e  4284              CMP      r4,r0
000020  d203              BCS      |L13.42|
;;;279        {
;;;280            // we don't go in Low Power mode for delay below 50ms (needed for LEDs)
;;;281            RtcTimerEventAllowsLowPower = false;
000022  2000              MOVS     r0,#0
000024  490d              LDR      r1,|L13.92|
000026  7008              STRB     r0,[r1,#0]
000028  e002              B        |L13.48|
                  |L13.42|
;;;282        }
;;;283        else
;;;284        {
;;;285            RtcTimerEventAllowsLowPower = true;
00002a  2001              MOVS     r0,#1
00002c  490b              LDR      r1,|L13.92|
00002e  7008              STRB     r0,[r1,#0]
                  |L13.48|
;;;286        }
;;;287    
;;;288        if( ( LowPowerDisableDuringTask == false ) && ( RtcTimerEventAllowsLowPower == true ) )
000030  480b              LDR      r0,|L13.96|
000032  7800              LDRB     r0,[r0,#0]  ; LowPowerDisableDuringTask
000034  2800              CMP      r0,#0
000036  d105              BNE      |L13.68|
000038  4808              LDR      r0,|L13.92|
00003a  7800              LDRB     r0,[r0,#0]  ; RtcTimerEventAllowsLowPower
00003c  2801              CMP      r0,#1
00003e  d101              BNE      |L13.68|
;;;289        {
;;;290            timeoutValue = timeoutValue - MCU_WAKE_UP_TIME;
000040  4808              LDR      r0,|L13.100|
000042  1a24              SUBS     r4,r4,r0
                  |L13.68|
;;;291        }
;;;292    
;;;293        RtcStartWakeUpAlarm( timeoutValue );
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       RtcStartWakeUpAlarm
;;;294    }
00004a  bdf8              POP      {r3-r7,pc}
;;;295    
                          ENDP

                  |L13.76|
                          DCD      0xcccccccc
                  |L13.80|
                          DCD      0x409312cc
                  |L13.84|
                          DCD      0x000004c4
                  |L13.88|
                          DCD      0x0000d6d8
                  |L13.92|
                          DCD      RtcTimerEventAllowsLowPower
                  |L13.96|
                          DCD      LowPowerDisableDuringTask
                  |L13.100|
                          DCD      0x00000d48

                          AREA ||i.RtcStartWakeUpAlarm||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RtcStartWakeUpAlarm PROC
;;;323    
;;;324    static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
000000  b5f0              PUSH     {r4-r7,lr}
;;;325    {
000002  b099              SUB      sp,sp,#0x64
000004  4606              MOV      r6,r0
;;;326        uint16_t rtcSeconds = 0;
000006  2000              MOVS     r0,#0
000008  9018              STR      r0,[sp,#0x60]
;;;327        uint16_t rtcMinutes = 0;
00000a  2500              MOVS     r5,#0
;;;328        uint16_t rtcHours = 0;
00000c  2700              MOVS     r7,#0
;;;329        uint16_t rtcDays = 0;
00000e  9017              STR      r0,[sp,#0x5c]
;;;330    
;;;331        uint8_t rtcAlarmSeconds = 0;
000010  9016              STR      r0,[sp,#0x58]
;;;332        uint8_t rtcAlarmMinutes = 0;
000012  9015              STR      r0,[sp,#0x54]
;;;333        uint8_t rtcAlarmHours = 0;
000014  9014              STR      r0,[sp,#0x50]
;;;334        uint16_t rtcAlarmDays = 0;
000016  2400              MOVS     r4,#0
;;;335    
;;;336        RTC_AlarmTypeDef RTC_AlarmStructure;
;;;337        RTC_TimeTypeDef  RTC_TimeStruct;
;;;338        RTC_DateTypeDef  RTC_DateStruct;
;;;339    
;;;340        RtcClearStatus( );
000018  f7fffffe          BL       RtcClearStatus
;;;341        
;;;342        RtcTimerContext = RtcGetCalendarValue( );
00001c  f7fffffe          BL       RtcGetCalendarValue
000020  4a8b              LDR      r2,|L14.592|
000022  c203              STM      r2!,{r0,r1}
;;;343        HAL_RTC_GetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
000024  2200              MOVS     r2,#0
000026  a905              ADD      r1,sp,#0x14
000028  488a              LDR      r0,|L14.596|
00002a  f7fffffe          BL       HAL_RTC_GetTime
;;;344        HAL_RTC_GetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
00002e  2200              MOVS     r2,#0
000030  a904              ADD      r1,sp,#0x10
000032  4888              LDR      r0,|L14.596|
000034  f7fffffe          BL       HAL_RTC_GetDate
;;;345           
;;;346        timeoutValue = timeoutValue / RTC_ALARM_TIME_BASE;
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       __aeabi_ui2d
00003e  4a86              LDR      r2,|L14.600|
000040  4b86              LDR      r3,|L14.604|
000042  9101              STR      r1,[sp,#4]
000044  9000              STR      r0,[sp,#0]
000046  f7fffffe          BL       __aeabi_ddiv
00004a  9103              STR      r1,[sp,#0xc]
00004c  9002              STR      r0,[sp,#8]
00004e  f7fffffe          BL       __aeabi_d2uiz
000052  4606              MOV      r6,r0
;;;347    
;;;348        if( timeoutValue > 2160000 ) // 25 "days" in tick 
000054  4882              LDR      r0,|L14.608|
000056  4286              CMP      r6,r0
000058  d943              BLS      |L14.226|
;;;349        {                            // drastically reduce the computation time
;;;350            rtcAlarmSeconds = RTC_TimeStruct.Seconds;
00005a  4668              MOV      r0,sp
00005c  7d80              LDRB     r0,[r0,#0x16]
00005e  9016              STR      r0,[sp,#0x58]
;;;351            rtcAlarmMinutes = RTC_TimeStruct.Minutes;
000060  4668              MOV      r0,sp
000062  7d40              LDRB     r0,[r0,#0x15]
000064  9015              STR      r0,[sp,#0x54]
;;;352            rtcAlarmHours = RTC_TimeStruct.Hours;
000066  4668              MOV      r0,sp
000068  7d00              LDRB     r0,[r0,#0x14]
00006a  9014              STR      r0,[sp,#0x50]
;;;353            rtcAlarmDays = 25 + RTC_DateStruct.Date;  // simply add 25 days to current date and time
00006c  4668              MOV      r0,sp
00006e  7c80              LDRB     r0,[r0,#0x12]
000070  4604              MOV      r4,r0
000072  3419              ADDS     r4,r4,#0x19
;;;354    
;;;355            if( ( RTC_DateStruct.Year == 0 ) || ( RTC_DateStruct.Year % 4 == 0 ) )
000074  4669              MOV      r1,sp
000076  7cc9              LDRB     r1,[r1,#0x13]
000078  2900              CMP      r1,#0
00007a  d008              BEQ      |L14.142|
00007c  4669              MOV      r1,sp
00007e  7cc8              LDRB     r0,[r1,#0x13]
000080  17c1              ASRS     r1,r0,#31
000082  0f89              LSRS     r1,r1,#30
000084  1809              ADDS     r1,r1,r0
000086  1089              ASRS     r1,r1,#2
000088  0089              LSLS     r1,r1,#2
00008a  1a41              SUBS     r1,r0,r1
00008c  d114              BNE      |L14.184|
                  |L14.142|
;;;356            {
;;;357                if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )
00008e  4668              MOV      r0,sp
000090  7c40              LDRB     r0,[r0,#0x11]
000092  1e40              SUBS     r0,r0,#1
000094  4973              LDR      r1,|L14.612|
000096  5c08              LDRB     r0,[r1,r0]
000098  42a0              CMP      r0,r4
00009a  da0c              BGE      |L14.182|
;;;358                {   
;;;359                    rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1];
00009c  4668              MOV      r0,sp
00009e  7c40              LDRB     r0,[r0,#0x11]
0000a0  1e40              SUBS     r0,r0,#1
0000a2  460a              MOV      r2,r1
0000a4  5c11              LDRB     r1,[r2,r0]
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       __aeabi_idivmod
0000ac  b28c              UXTH     r4,r1
;;;360    							  DEBUG(2,"rtcAlarmDays11 = %d\r\n",rtcAlarmDays);
0000ae  4621              MOV      r1,r4
0000b0  a06d              ADR      r0,|L14.616|
0000b2  f7fffffe          BL       __2printf
                  |L14.182|
0000b6  e0a5              B        |L14.516|
                  |L14.184|
;;;361                }
;;;362            }
;;;363            else
;;;364            {
;;;365                if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )
0000b8  4668              MOV      r0,sp
0000ba  7c40              LDRB     r0,[r0,#0x11]
0000bc  1e40              SUBS     r0,r0,#1
0000be  4970              LDR      r1,|L14.640|
0000c0  5c08              LDRB     r0,[r1,r0]
0000c2  42a0              CMP      r0,r4
0000c4  daf7              BGE      |L14.182|
;;;366                {   
;;;367                    rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1];
0000c6  4668              MOV      r0,sp
0000c8  7c40              LDRB     r0,[r0,#0x11]
0000ca  1e40              SUBS     r0,r0,#1
0000cc  460a              MOV      r2,r1
0000ce  5c11              LDRB     r1,[r2,r0]
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       __aeabi_idivmod
0000d6  b28c              UXTH     r4,r1
;;;368    							  DEBUG(2,"rtcAlarmDays22 = %d\r\n",rtcAlarmDays);
0000d8  4621              MOV      r1,r4
0000da  a06a              ADR      r0,|L14.644|
0000dc  f7fffffe          BL       __2printf
0000e0  e090              B        |L14.516|
                  |L14.226|
;;;369                }
;;;370            }   
;;;371        }
;;;372        else
;;;373        {
;;;374            rtcSeconds = ( timeoutValue % SecondsInMinute ) + RTC_TimeStruct.Seconds;
0000e2  213c              MOVS     r1,#0x3c
0000e4  4630              MOV      r0,r6
0000e6  f7fffffe          BL       __aeabi_uidivmod
0000ea  4668              MOV      r0,sp
0000ec  7d80              LDRB     r0,[r0,#0x16]
0000ee  1808              ADDS     r0,r1,r0
0000f0  9018              STR      r0,[sp,#0x60]
;;;375            rtcMinutes = ( ( timeoutValue / SecondsInMinute ) % SecondsInMinute ) + RTC_TimeStruct.Minutes;
0000f2  213c              MOVS     r1,#0x3c
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       __aeabi_uidivmod
0000fa  213c              MOVS     r1,#0x3c
0000fc  9003              STR      r0,[sp,#0xc]
0000fe  f7fffffe          BL       __aeabi_uidivmod
000102  4668              MOV      r0,sp
000104  7d40              LDRB     r0,[r0,#0x15]
000106  180d              ADDS     r5,r1,r0
;;;376            rtcHours = ( ( timeoutValue / SecondsInHour ) % HoursInDay ) + RTC_TimeStruct.Hours;
000108  21e1              MOVS     r1,#0xe1
00010a  0109              LSLS     r1,r1,#4
00010c  4630              MOV      r0,r6
00010e  f7fffffe          BL       __aeabi_uidivmod
000112  2118              MOVS     r1,#0x18
000114  9003              STR      r0,[sp,#0xc]
000116  f7fffffe          BL       __aeabi_uidivmod
00011a  4668              MOV      r0,sp
00011c  7d00              LDRB     r0,[r0,#0x14]
00011e  180f              ADDS     r7,r1,r0
;;;377            rtcDays = ( timeoutValue / SecondsInDay ) + RTC_DateStruct.Date;
000120  495e              LDR      r1,|L14.668|
000122  4630              MOV      r0,r6
000124  f7fffffe          BL       __aeabi_uidivmod
000128  4601              MOV      r1,r0
00012a  4668              MOV      r0,sp
00012c  7c80              LDRB     r0,[r0,#0x12]
00012e  1808              ADDS     r0,r1,r0
000130  b280              UXTH     r0,r0
000132  9017              STR      r0,[sp,#0x5c]
;;;378    
;;;379            rtcAlarmSeconds = ( rtcSeconds ) % 60;
000134  213c              MOVS     r1,#0x3c
000136  9818              LDR      r0,[sp,#0x60]
000138  f7fffffe          BL       __aeabi_idivmod
00013c  b2c8              UXTB     r0,r1
00013e  9016              STR      r0,[sp,#0x58]
;;;380            rtcAlarmMinutes = ( ( rtcSeconds / 60 ) + rtcMinutes ) % 60;
000140  213c              MOVS     r1,#0x3c
000142  9818              LDR      r0,[sp,#0x60]
000144  f7fffffe          BL       __aeabi_idivmod
000148  1940              ADDS     r0,r0,r5
00014a  213c              MOVS     r1,#0x3c
00014c  9003              STR      r0,[sp,#0xc]
00014e  f7fffffe          BL       __aeabi_idivmod
000152  b2c8              UXTB     r0,r1
000154  9015              STR      r0,[sp,#0x54]
;;;381            rtcAlarmHours   = ( ( ( ( rtcSeconds / 60 ) + rtcMinutes ) / 60 ) + rtcHours ) % 24;
000156  213c              MOVS     r1,#0x3c
000158  9818              LDR      r0,[sp,#0x60]
00015a  f7fffffe          BL       __aeabi_idivmod
00015e  1940              ADDS     r0,r0,r5
000160  213c              MOVS     r1,#0x3c
000162  9002              STR      r0,[sp,#8]
000164  f7fffffe          BL       __aeabi_idivmod
000168  19c0              ADDS     r0,r0,r7
00016a  2118              MOVS     r1,#0x18
00016c  9003              STR      r0,[sp,#0xc]
00016e  f7fffffe          BL       __aeabi_idivmod
000172  b2c8              UXTB     r0,r1
000174  9014              STR      r0,[sp,#0x50]
;;;382            rtcAlarmDays    = ( ( ( ( ( rtcSeconds / 60 ) + rtcMinutes ) / 60 ) + rtcHours ) / 24 ) + rtcDays;
000176  213c              MOVS     r1,#0x3c
000178  9818              LDR      r0,[sp,#0x60]
00017a  f7fffffe          BL       __aeabi_idivmod
00017e  1940              ADDS     r0,r0,r5
000180  213c              MOVS     r1,#0x3c
000182  9002              STR      r0,[sp,#8]
000184  f7fffffe          BL       __aeabi_idivmod
000188  19c0              ADDS     r0,r0,r7
00018a  2118              MOVS     r1,#0x18
00018c  9003              STR      r0,[sp,#0xc]
00018e  f7fffffe          BL       __aeabi_idivmod
000192  9917              LDR      r1,[sp,#0x5c]
000194  1840              ADDS     r0,r0,r1
000196  b284              UXTH     r4,r0
;;;383    
;;;384            if( ( RTC_DateStruct.Year == 0 ) || ( RTC_DateStruct.Year % 4 == 0 ) )
000198  4669              MOV      r1,sp
00019a  7cc9              LDRB     r1,[r1,#0x13]
00019c  2900              CMP      r1,#0
00019e  d008              BEQ      |L14.434|
0001a0  4669              MOV      r1,sp
0001a2  7cc8              LDRB     r0,[r1,#0x13]
0001a4  17c1              ASRS     r1,r0,#31
0001a6  0f89              LSRS     r1,r1,#30
0001a8  1809              ADDS     r1,r1,r0
0001aa  1089              ASRS     r1,r1,#2
0001ac  0089              LSLS     r1,r1,#2
0001ae  1a41              SUBS     r1,r0,r1
0001b0  d114              BNE      |L14.476|
                  |L14.434|
;;;385            {
;;;386                if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )            
0001b2  4668              MOV      r0,sp
0001b4  7c40              LDRB     r0,[r0,#0x11]
0001b6  1e40              SUBS     r0,r0,#1
0001b8  492a              LDR      r1,|L14.612|
0001ba  5c08              LDRB     r0,[r1,r0]
0001bc  42a0              CMP      r0,r4
0001be  da21              BGE      |L14.516|
;;;387                {   
;;;388                    rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
0001c0  4668              MOV      r0,sp
0001c2  7c40              LDRB     r0,[r0,#0x11]
0001c4  1e40              SUBS     r0,r0,#1
0001c6  460a              MOV      r2,r1
0001c8  5c11              LDRB     r1,[r2,r0]
0001ca  4620              MOV      r0,r4
0001cc  f7fffffe          BL       __aeabi_idivmod
0001d0  b28c              UXTH     r4,r1
;;;389    								DEBUG(2,"rtcAlarmDays44 = %d\r\n",rtcAlarmDays);
0001d2  4621              MOV      r1,r4
0001d4  a032              ADR      r0,|L14.672|
0001d6  f7fffffe          BL       __2printf
0001da  e013              B        |L14.516|
                  |L14.476|
;;;390                }
;;;391            }
;;;392            else
;;;393            {
;;;394                if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )            
0001dc  4668              MOV      r0,sp
0001de  7c40              LDRB     r0,[r0,#0x11]
0001e0  1e40              SUBS     r0,r0,#1
0001e2  4927              LDR      r1,|L14.640|
0001e4  5c08              LDRB     r0,[r1,r0]
0001e6  42a0              CMP      r0,r4
0001e8  da0c              BGE      |L14.516|
;;;395                {   
;;;396                    rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
0001ea  4668              MOV      r0,sp
0001ec  7c40              LDRB     r0,[r0,#0x11]
0001ee  1e40              SUBS     r0,r0,#1
0001f0  460a              MOV      r2,r1
0001f2  5c11              LDRB     r1,[r2,r0]
0001f4  4620              MOV      r0,r4
0001f6  f7fffffe          BL       __aeabi_idivmod
0001fa  b28c              UXTH     r4,r1
;;;397    							  DEBUG(2,"rtcAlarmDays55 = %d\r\n",rtcAlarmDays);
0001fc  4621              MOV      r1,r4
0001fe  a02e              ADR      r0,|L14.696|
000200  f7fffffe          BL       __2printf
                  |L14.516|
;;;398                }
;;;399            }
;;;400        }
;;;401        HAL_RTC_WaitForSynchro(&RtcHandle);
000204  4813              LDR      r0,|L14.596|
000206  f7fffffe          BL       HAL_RTC_WaitForSynchro
;;;402    
;;;403    		RTC_AlarmStructure.AlarmTime.Hours = rtcAlarmHours;
00020a  a908              ADD      r1,sp,#0x20
00020c  9814              LDR      r0,[sp,#0x50]
00020e  7208              STRB     r0,[r1,#8]
;;;404    		RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
000210  a808              ADD      r0,sp,#0x20
000212  9915              LDR      r1,[sp,#0x54]
000214  7241              STRB     r1,[r0,#9]
;;;405    		RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
000216  9916              LDR      r1,[sp,#0x58]
000218  7281              STRB     r1,[r0,#0xa]
;;;406    		RTC_AlarmStructure.AlarmTime.SubSeconds = 0;
00021a  2000              MOVS     r0,#0
00021c  900b              STR      r0,[sp,#0x2c]
;;;407    		
;;;408    		RTC_AlarmStructure.AlarmDateWeekDay = ( uint8_t )rtcAlarmDays;
00021e  a810              ADD      r0,sp,#0x40
000220  7204              STRB     r4,[r0,#8]
;;;409    		
;;;410    		RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
000222  2000              MOVS     r0,#0
000224  900d              STR      r0,[sp,#0x34]
;;;411    		RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
000226  900e              STR      r0,[sp,#0x38]
;;;412    		RTC_AlarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
000228  900f              STR      r0,[sp,#0x3c]
;;;413    	
;;;414    		RTC_AlarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
00022a  9010              STR      r0,[sp,#0x40]
;;;415    		RTC_AlarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
00022c  9011              STR      r0,[sp,#0x44]
;;;416    		
;;;417    		RTC_AlarmStructure.Alarm = RTC_ALARM_A;
00022e  20ff              MOVS     r0,#0xff
000230  3001              ADDS     r0,#1
000232  9013              STR      r0,[sp,#0x4c]
;;;418    
;;;419        if( HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
000234  2200              MOVS     r2,#0
000236  a90a              ADD      r1,sp,#0x28
000238  4806              LDR      r0,|L14.596|
00023a  f7fffffe          BL       HAL_RTC_SetAlarm_IT
00023e  2800              CMP      r0,#0
000240  d000              BEQ      |L14.580|
;;;420        {
;;;421            assert_param( FAIL );
000242  bf00              NOP      
                  |L14.580|
;;;422        }
;;;423    
;;;424    		/* Wait for RTC APB registers synchronisation */
;;;425        HAL_RTC_WaitForSynchro(&RtcHandle);
000244  4803              LDR      r0,|L14.596|
000246  f7fffffe          BL       HAL_RTC_WaitForSynchro
;;;426    }
00024a  b019              ADD      sp,sp,#0x64
00024c  bdf0              POP      {r4-r7,pc}
;;;427    
                          ENDP

00024e  0000              DCW      0x0000
                  |L14.592|
                          DCD      RtcTimerContext
                  |L14.596|
                          DCD      RtcHandle
                  |L14.600|
                          DCD      0xe147ae14
                  |L14.604|
                          DCD      0x405e847a
                  |L14.608|
                          DCD      0x0020f580
                  |L14.612|
                          DCD      DaysInMonthLeapYear
                  |L14.616|
000268  72746341          DCB      "rtcAlarmDays11 = %d\r\n",0
00026c  6c61726d
000270  44617973
000274  3131203d
000278  2025640d
00027c  0a00    
00027e  00                DCB      0
00027f  00                DCB      0
                  |L14.640|
                          DCD      DaysInMonth
                  |L14.644|
000284  72746341          DCB      "rtcAlarmDays22 = %d\r\n",0
000288  6c61726d
00028c  44617973
000290  3232203d
000294  2025640d
000298  0a00    
00029a  00                DCB      0
00029b  00                DCB      0
                  |L14.668|
                          DCD      0x00015180
                  |L14.672|
0002a0  72746341          DCB      "rtcAlarmDays44 = %d\r\n",0
0002a4  6c61726d
0002a8  44617973
0002ac  3434203d
0002b0  2025640d
0002b4  0a00    
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L14.696|
0002b8  72746341          DCB      "rtcAlarmDays55 = %d\r\n",0
0002bc  6c61726d
0002c0  44617973
0002c4  3535203d
0002c8  2025640d
0002cc  0a00    
0002ce  00                DCB      0
0002cf  00                DCB      0

                          AREA ||i.RtcStopTimer||, CODE, READONLY, ALIGN=1

                  RtcStopTimer PROC
;;;256    
;;;257    void RtcStopTimer( void )
000000  b510              PUSH     {r4,lr}
;;;258    {
;;;259        RtcClearStatus( );
000002  f7fffffe          BL       RtcClearStatus
;;;260    }
000006  bd10              POP      {r4,pc}
;;;261    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RtcHandle
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  DaysInMonth
000000  1f1c1f1e          DCB      0x1f,0x1c,0x1f,0x1e
000004  1f1e1f1f          DCB      0x1f,0x1e,0x1f,0x1f
000008  1e1f1e1f          DCB      0x1e,0x1f,0x1e,0x1f
                  DaysInMonthLeapYear
00000c  1f1d1f1e          DCB      0x1f,0x1d,0x1f,0x1e
000010  1f1e1f1f          DCB      0x1f,0x1e,0x1f,0x1f
000014  1e1f1e1f          DCB      0x1e,0x1f,0x1e,0x1f

                          AREA ||.data||, DATA, ALIGN=3

                  RtcInitialized
000000  00                DCB      0x00
                  RtcTimerEventAllowsLowPower
000001  00                DCB      0x00
                  LowPowerDisableDuringTask
000002  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  RtcTimerContext
000008  00000000          DCQ      0x0000000000000000
00000c  00000000
                  PreviousYear
000010  00                DCB      0x00
                  Century
000011  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\HAL\\src\\rtc-board.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_rtc_board_c_44f74508____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_rtc_board_c_44f74508____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_rtc_board_c_44f74508____REVSH|
#line 402
|__asm___11_rtc_board_c_44f74508____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
