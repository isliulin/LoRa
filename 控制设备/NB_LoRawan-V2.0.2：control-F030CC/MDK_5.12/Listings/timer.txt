; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\timer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timer.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\timer.crf ..\HAL\src\timer.c]
                          THUMB

                          AREA ||i.TimerExists||, CODE, READONLY, ALIGN=2

                  TimerExists PROC
;;;355        
;;;356    static bool TimerExists( TimerEvent_t *obj )
000000  4602              MOV      r2,r0
;;;357    {
;;;358        TimerEvent_t* cur = TimerListHead;
000002  4806              LDR      r0,|L1.28|
000004  6801              LDR      r1,[r0,#0]  ; TimerListHead
;;;359    
;;;360        while( cur != NULL )
000006  e004              B        |L1.18|
                  |L1.8|
;;;361        {
;;;362            if( cur == obj )
000008  4291              CMP      r1,r2
00000a  d101              BNE      |L1.16|
;;;363            {
;;;364                return true;
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;365            }
;;;366            cur = cur->Next;
;;;367        }
;;;368        return false;
;;;369    }
00000e  4770              BX       lr
                  |L1.16|
000010  6909              LDR      r1,[r1,#0x10]         ;366
                  |L1.18|
000012  2900              CMP      r1,#0                 ;360
000014  d1f8              BNE      |L1.8|
000016  2000              MOVS     r0,#0                 ;368
000018  e7f9              B        |L1.14|
;;;370    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      TimerListHead

                          AREA ||i.TimerGetCurrentTime||, CODE, READONLY, ALIGN=1

                  TimerGetCurrentTime PROC
;;;401    
;;;402    TimerTime_t TimerGetCurrentTime( void )
000000  b510              PUSH     {r4,lr}
;;;403    { 
;;;404       return RtcGetTimerValue( );
000002  f7fffffe          BL       RtcGetTimerValue
;;;405    }
000006  bd10              POP      {r4,pc}
;;;406    
                          ENDP


                          AREA ||i.TimerGetLowPowerEnable||, CODE, READONLY, ALIGN=2

                  TimerGetLowPowerEnable PROC
;;;79     
;;;80     bool TimerGetLowPowerEnable( void )
000000  4801              LDR      r0,|L3.8|
;;;81     {
;;;82         return LowPowerModeEnable;
000002  7800              LDRB     r0,[r0,#0]  ; LowPowerModeEnable
;;;83     }
000004  4770              BX       lr
;;;84     
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      LowPowerModeEnable

                          AREA ||i.TimerGetValue||, CODE, READONLY, ALIGN=1

                  TimerGetValue PROC
;;;394    
;;;395    uint32_t TimerGetValue( void )
000000  b510              PUSH     {r4,lr}
;;;396    {
;;;397       
;;;398      return RtcGetTimerElapsedTime( );
000002  f7fffffe          BL       RtcGetTimerElapsedTime
;;;399      
;;;400    }
000006  bd10              POP      {r4,pc}
;;;401    
                          ENDP


                          AREA ||i.TimerInit||, CODE, READONLY, ALIGN=1

                  TimerInit PROC
;;;84     
;;;85     void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
000000  2200              MOVS     r2,#0
;;;86     {
;;;87         obj->Timestamp = 0;
000002  6002              STR      r2,[r0,#0]
;;;88         obj->ReloadValue = 0;
000004  6042              STR      r2,[r0,#4]
;;;89         obj->IsRunning = false;
000006  7202              STRB     r2,[r0,#8]
;;;90         obj->Callback = callback;
000008  60c1              STR      r1,[r0,#0xc]
;;;91         obj->Next = NULL;
00000a  6102              STR      r2,[r0,#0x10]
;;;92     }
00000c  4770              BX       lr
;;;93     
                          ENDP


                          AREA ||i.TimerInsertNewHeadTimer||, CODE, READONLY, ALIGN=2

                  TimerInsertNewHeadTimer PROC
;;;195    
;;;196    static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
000000  b570              PUSH     {r4-r6,lr}
;;;197    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;198        TimerEvent_t* cur = TimerListHead;
000006  4809              LDR      r0,|L6.44|
000008  6805              LDR      r5,[r0,#0]  ; TimerListHead
;;;199    
;;;200        if( cur != NULL )
00000a  2d00              CMP      r5,#0
00000c  d004              BEQ      |L6.24|
;;;201        {
;;;202            cur->Timestamp = remainingTime - obj->Timestamp;
00000e  6820              LDR      r0,[r4,#0]
000010  1a30              SUBS     r0,r6,r0
000012  6028              STR      r0,[r5,#0]
;;;203            cur->IsRunning = false;
000014  2000              MOVS     r0,#0
000016  7228              STRB     r0,[r5,#8]
                  |L6.24|
;;;204        }
;;;205    
;;;206        obj->Next = cur;
000018  6125              STR      r5,[r4,#0x10]
;;;207        obj->IsRunning = true;
00001a  2001              MOVS     r0,#1
00001c  7220              STRB     r0,[r4,#8]
;;;208        TimerListHead = obj;
00001e  4803              LDR      r0,|L6.44|
000020  6004              STR      r4,[r0,#0]  ; TimerListHead
;;;209        TimerSetTimeout( TimerListHead );
000022  6800              LDR      r0,[r0,#0]  ; TimerListHead
000024  f7fffffe          BL       TimerSetTimeout
;;;210    }
000028  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      TimerListHead

                          AREA ||i.TimerInsertTimer||, CODE, READONLY, ALIGN=2

                  TimerInsertTimer PROC
;;;141    
;;;142    static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
000000  b5f0              PUSH     {r4-r7,lr}
;;;143    {
000002  460c              MOV      r4,r1
;;;144        uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps 
000004  2500              MOVS     r5,#0
;;;145        uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
000006  2200              MOVS     r2,#0
;;;146    
;;;147        TimerEvent_t* prev = TimerListHead;
000008  4e19              LDR      r6,|L7.112|
00000a  6833              LDR      r3,[r6,#0]  ; TimerListHead
;;;148        TimerEvent_t* cur = TimerListHead->Next;
00000c  6836              LDR      r6,[r6,#0]  ; TimerListHead
00000e  6931              LDR      r1,[r6,#0x10]
;;;149    
;;;150        if( cur == NULL )
000010  2900              CMP      r1,#0
000012  d106              BNE      |L7.34|
;;;151        { // obj comes just after the head
;;;152            obj->Timestamp -= remainingTime;
000014  6806              LDR      r6,[r0,#0]
000016  1b36              SUBS     r6,r6,r4
000018  6006              STR      r6,[r0,#0]
;;;153            prev->Next = obj;
00001a  6118              STR      r0,[r3,#0x10]
;;;154            obj->Next = NULL;
00001c  2600              MOVS     r6,#0
00001e  6106              STR      r6,[r0,#0x10]
000020  e024              B        |L7.108|
                  |L7.34|
;;;155        }
;;;156        else
;;;157        {
;;;158            aggregatedTimestamp = remainingTime;
000022  4625              MOV      r5,r4
;;;159            aggregatedTimestampNext = remainingTime + cur->Timestamp;
000024  680e              LDR      r6,[r1,#0]
000026  1932              ADDS     r2,r6,r4
;;;160    
;;;161            while( prev != NULL )
000028  e01d              B        |L7.102|
                  |L7.42|
;;;162            {
;;;163                if( aggregatedTimestampNext > obj->Timestamp )
00002a  6806              LDR      r6,[r0,#0]
00002c  4296              CMP      r6,r2
00002e  d20b              BCS      |L7.72|
;;;164                {
;;;165                    obj->Timestamp -= aggregatedTimestamp;
000030  6806              LDR      r6,[r0,#0]
000032  1b76              SUBS     r6,r6,r5
000034  6006              STR      r6,[r0,#0]
;;;166                    if( cur != NULL )
000036  2900              CMP      r1,#0
000038  d003              BEQ      |L7.66|
;;;167                    {
;;;168                        cur->Timestamp -= obj->Timestamp;
00003a  680e              LDR      r6,[r1,#0]
00003c  6807              LDR      r7,[r0,#0]
00003e  1bf6              SUBS     r6,r6,r7
000040  600e              STR      r6,[r1,#0]
                  |L7.66|
;;;169                    }
;;;170                    prev->Next = obj;
000042  6118              STR      r0,[r3,#0x10]
;;;171                    obj->Next = cur;
000044  6101              STR      r1,[r0,#0x10]
;;;172                    break;
000046  e010              B        |L7.106|
                  |L7.72|
;;;173                }
;;;174                else
;;;175                {
;;;176                    prev = cur;
000048  460b              MOV      r3,r1
;;;177                    cur = cur->Next;
00004a  6909              LDR      r1,[r1,#0x10]
;;;178                    if( cur == NULL )
00004c  2900              CMP      r1,#0
00004e  d107              BNE      |L7.96|
;;;179                    { // obj comes at the end of the list
;;;180                        aggregatedTimestamp = aggregatedTimestampNext;
000050  4615              MOV      r5,r2
;;;181                        obj->Timestamp -= aggregatedTimestamp;
000052  6806              LDR      r6,[r0,#0]
000054  1b76              SUBS     r6,r6,r5
000056  6006              STR      r6,[r0,#0]
;;;182                        prev->Next = obj;
000058  6118              STR      r0,[r3,#0x10]
;;;183                        obj->Next = NULL;
00005a  2600              MOVS     r6,#0
00005c  6106              STR      r6,[r0,#0x10]
;;;184                        break;
00005e  e004              B        |L7.106|
                  |L7.96|
;;;185                    }
;;;186                    else
;;;187                    {
;;;188                        aggregatedTimestamp = aggregatedTimestampNext;
000060  4615              MOV      r5,r2
;;;189                        aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
000062  680e              LDR      r6,[r1,#0]
000064  18b2              ADDS     r2,r6,r2
                  |L7.102|
000066  2b00              CMP      r3,#0                 ;161
000068  d1df              BNE      |L7.42|
                  |L7.106|
00006a  bf00              NOP                            ;172
                  |L7.108|
;;;190                    }
;;;191                }
;;;192            }
;;;193        }
;;;194    }
00006c  bdf0              POP      {r4-r7,pc}
;;;195    
                          ENDP

00006e  0000              DCW      0x0000
                  |L7.112|
                          DCD      TimerListHead

                          AREA ||i.TimerIrqHandler||, CODE, READONLY, ALIGN=2

                  TimerIrqHandler PROC
;;;211    
;;;212    void TimerIrqHandler( void )
000000  b570              PUSH     {r4-r6,lr}
;;;213    {
;;;214        uint32_t elapsedTime = 0;
000002  2500              MOVS     r5,#0
;;;215    
;;;216        if( TimerListHead == NULL )
000004  4826              LDR      r0,|L8.160|
000006  6800              LDR      r0,[r0,#0]  ; TimerListHead
000008  2800              CMP      r0,#0
00000a  d100              BNE      |L8.14|
                  |L8.12|
;;;217        {
;;;218            return;  // Only necessary when the standard timer is used as a time base
;;;219        }
;;;220    
;;;221        elapsedTime = TimerGetValue( );
;;;222    
;;;223        TimerEvent_t* elapsedTimer = NULL;
;;;224    
;;;225        if( elapsedTime > TimerListHead->Timestamp )
;;;226        {
;;;227            TimerListHead->Timestamp = 0;
;;;228        }
;;;229        else
;;;230        {
;;;231            TimerListHead->Timestamp -= elapsedTime;
;;;232        }
;;;233    
;;;234        // save TimerListHead
;;;235        elapsedTimer = TimerListHead;
;;;236    
;;;237        // remove all the expired object from the list
;;;238        while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
;;;239        {
;;;240            if( TimerListHead->Next != NULL )
;;;241            {
;;;242                TimerListHead = TimerListHead->Next;
;;;243            }
;;;244            else
;;;245            {
;;;246                TimerListHead = NULL;
;;;247            }
;;;248        }
;;;249    
;;;250        // execute the callbacks of all the expired objects
;;;251        // this is to avoid potential issues between the callback and the object list
;;;252        while( ( elapsedTimer != NULL ) && ( elapsedTimer->Timestamp == 0 ) )
;;;253        {
;;;254            if( elapsedTimer->Callback != NULL )
;;;255            {
;;;256                elapsedTimer->Callback( );
;;;257            }
;;;258            elapsedTimer = elapsedTimer->Next;
;;;259        }
;;;260    
;;;261        // start the next TimerListHead if it exists
;;;262        if( TimerListHead != NULL )
;;;263        {
;;;264            TimerListHead->IsRunning = true;
;;;265            TimerSetTimeout( TimerListHead );
;;;266        }
;;;267    }
00000c  bd70              POP      {r4-r6,pc}
                  |L8.14|
00000e  f7fffffe          BL       TimerGetValue
000012  4605              MOV      r5,r0                 ;221
000014  2400              MOVS     r4,#0                 ;223
000016  4822              LDR      r0,|L8.160|
000018  6800              LDR      r0,[r0,#0]            ;225  ; TimerListHead
00001a  6800              LDR      r0,[r0,#0]            ;225
00001c  42a8              CMP      r0,r5                 ;225
00001e  d204              BCS      |L8.42|
000020  2000              MOVS     r0,#0                 ;227
000022  491f              LDR      r1,|L8.160|
000024  6809              LDR      r1,[r1,#0]            ;227  ; TimerListHead
000026  6008              STR      r0,[r1,#0]            ;227
000028  e006              B        |L8.56|
                  |L8.42|
00002a  481d              LDR      r0,|L8.160|
00002c  6800              LDR      r0,[r0,#0]            ;231  ; TimerListHead
00002e  6800              LDR      r0,[r0,#0]            ;231
000030  1b40              SUBS     r0,r0,r5              ;231
000032  491b              LDR      r1,|L8.160|
000034  6809              LDR      r1,[r1,#0]            ;231  ; TimerListHead
000036  6008              STR      r0,[r1,#0]            ;231
                  |L8.56|
000038  4819              LDR      r0,|L8.160|
00003a  6804              LDR      r4,[r0,#0]            ;235  ; TimerListHead
00003c  e00d              B        |L8.90|
                  |L8.62|
00003e  4818              LDR      r0,|L8.160|
000040  6800              LDR      r0,[r0,#0]            ;240  ; TimerListHead
000042  6900              LDR      r0,[r0,#0x10]         ;240
000044  2800              CMP      r0,#0                 ;240
000046  d005              BEQ      |L8.84|
000048  4815              LDR      r0,|L8.160|
00004a  6800              LDR      r0,[r0,#0]            ;242  ; TimerListHead
00004c  6900              LDR      r0,[r0,#0x10]         ;242
00004e  4914              LDR      r1,|L8.160|
000050  6008              STR      r0,[r1,#0]            ;242  ; TimerListHead
000052  e002              B        |L8.90|
                  |L8.84|
000054  2000              MOVS     r0,#0                 ;246
000056  4912              LDR      r1,|L8.160|
000058  6008              STR      r0,[r1,#0]            ;246  ; TimerListHead
                  |L8.90|
00005a  4811              LDR      r0,|L8.160|
00005c  6800              LDR      r0,[r0,#0]            ;238  ; TimerListHead
00005e  2800              CMP      r0,#0                 ;238
000060  d004              BEQ      |L8.108|
000062  480f              LDR      r0,|L8.160|
000064  6800              LDR      r0,[r0,#0]            ;238  ; TimerListHead
000066  6800              LDR      r0,[r0,#0]            ;238
000068  2800              CMP      r0,#0                 ;238
00006a  d0e8              BEQ      |L8.62|
                  |L8.108|
00006c  e005              B        |L8.122|
                  |L8.110|
00006e  68e0              LDR      r0,[r4,#0xc]          ;254
000070  2800              CMP      r0,#0                 ;254
000072  d001              BEQ      |L8.120|
000074  68e0              LDR      r0,[r4,#0xc]          ;256
000076  4780              BLX      r0                    ;256
                  |L8.120|
000078  6924              LDR      r4,[r4,#0x10]         ;258
                  |L8.122|
00007a  2c00              CMP      r4,#0                 ;252
00007c  d002              BEQ      |L8.132|
00007e  6820              LDR      r0,[r4,#0]            ;252
000080  2800              CMP      r0,#0                 ;252
000082  d0f4              BEQ      |L8.110|
                  |L8.132|
000084  4806              LDR      r0,|L8.160|
000086  6800              LDR      r0,[r0,#0]            ;262  ; TimerListHead
000088  2800              CMP      r0,#0                 ;262
00008a  d007              BEQ      |L8.156|
00008c  2001              MOVS     r0,#1                 ;264
00008e  4904              LDR      r1,|L8.160|
000090  6809              LDR      r1,[r1,#0]            ;264  ; TimerListHead
000092  7208              STRB     r0,[r1,#8]            ;264
000094  4802              LDR      r0,|L8.160|
000096  6800              LDR      r0,[r0,#0]            ;265  ; TimerListHead
000098  f7fffffe          BL       TimerSetTimeout
                  |L8.156|
00009c  bf00              NOP      
00009e  e7b5              B        |L8.12|
;;;268    
                          ENDP

                  |L8.160|
                          DCD      TimerListHead

                          AREA ||i.TimerLowPowerHandler||, CODE, READONLY, ALIGN=2

                  TimerLowPowerHandler PROC
;;;413    
;;;414    void TimerLowPowerHandler( void )
000000  b510              PUSH     {r4,lr}
;;;415    {
;;;416        if( ( TimerListHead != NULL ) && ( TimerListHead->IsRunning == true ) ) 
000002  480c              LDR      r0,|L9.52|
000004  6800              LDR      r0,[r0,#0]  ; TimerListHead
000006  2800              CMP      r0,#0
000008  d013              BEQ      |L9.50|
00000a  480a              LDR      r0,|L9.52|
00000c  6800              LDR      r0,[r0,#0]  ; TimerListHead
00000e  7a00              LDRB     r0,[r0,#8]
000010  2801              CMP      r0,#1
000012  d10e              BNE      |L9.50|
;;;417        {    
;;;418            if( HasLoopedThroughMain < 5 )
000014  4808              LDR      r0,|L9.56|
000016  7800              LDRB     r0,[r0,#0]  ; HasLoopedThroughMain
000018  2805              CMP      r0,#5
00001a  da05              BGE      |L9.40|
;;;419            {
;;;420                HasLoopedThroughMain++;
00001c  4806              LDR      r0,|L9.56|
00001e  7800              LDRB     r0,[r0,#0]  ; HasLoopedThroughMain
000020  1c40              ADDS     r0,r0,#1
000022  4905              LDR      r1,|L9.56|
000024  7008              STRB     r0,[r1,#0]
000026  e004              B        |L9.50|
                  |L9.40|
;;;421            }
;;;422            else
;;;423            { 
;;;424                HasLoopedThroughMain = 0;
000028  2000              MOVS     r0,#0
00002a  4903              LDR      r1,|L9.56|
00002c  7008              STRB     r0,[r1,#0]
;;;425        
;;;426                RtcEnterLowPowerStopMode( );           
00002e  f7fffffe          BL       RtcEnterLowPowerStopMode
                  |L9.50|
;;;427            }
;;;428        }
;;;429    }
000032  bd10              POP      {r4,pc}
                          ENDP

                  |L9.52|
                          DCD      TimerListHead
                  |L9.56|
                          DCD      HasLoopedThroughMain

                          AREA ||i.TimerReset||, CODE, READONLY, ALIGN=1

                  TimerReset PROC
;;;370    
;;;371    void TimerReset( TimerEvent_t *obj )
000000  b510              PUSH     {r4,lr}
;;;372    {
000002  4604              MOV      r4,r0
;;;373        TimerStop( obj );
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       TimerStop
;;;374        TimerStart( obj );
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       TimerStart
;;;375    }
000010  bd10              POP      {r4,pc}
;;;376    
                          ENDP


                          AREA ||i.TimerSetLowPowerEnable||, CODE, READONLY, ALIGN=2

                  TimerSetLowPowerEnable PROC
;;;74     
;;;75     void TimerSetLowPowerEnable( bool enable )
000000  4901              LDR      r1,|L11.8|
;;;76     {
;;;77        LowPowerModeEnable = enable;
000002  7008              STRB     r0,[r1,#0]
;;;78     }
000004  4770              BX       lr
;;;79     
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      LowPowerModeEnable

                          AREA ||i.TimerSetTimeout||, CODE, READONLY, ALIGN=2

                  TimerSetTimeout PROC
;;;406    
;;;407    static void TimerSetTimeout( TimerEvent_t *obj )
000000  b510              PUSH     {r4,lr}
;;;408    {
000002  4604              MOV      r4,r0
;;;409        HasLoopedThroughMain = 0;
000004  2000              MOVS     r0,#0
000006  4903              LDR      r1,|L12.20|
000008  7008              STRB     r0,[r1,#0]
;;;410    
;;;411        RtcSetTimeout( obj->Timestamp );
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       RtcSetTimeout
;;;412    }
000010  bd10              POP      {r4,pc}
;;;413    
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      HasLoopedThroughMain

                          AREA ||i.TimerSetValue||, CODE, READONLY, ALIGN=1

                  TimerSetValue PROC
;;;376    
;;;377    void TimerSetValue( TimerEvent_t *obj, uint32_t value )
000000  b570              PUSH     {r4-r6,lr}
;;;378    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;379        uint32_t minValue = 0;
000006  2600              MOVS     r6,#0
;;;380    
;;;381        TimerStop( obj );
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       TimerStop
;;;382     
;;;383        minValue = RtcGetMinimumTimeout( );
00000e  f7fffffe          BL       RtcGetMinimumTimeout
000012  4606              MOV      r6,r0
;;;384    		DEBUG(3,"minValue = %d\r\n",minValue);
;;;385        
;;;386        if( value < minValue )
000014  42b4              CMP      r4,r6
000016  d200              BCS      |L13.26|
;;;387        {
;;;388            value = minValue;
000018  4634              MOV      r4,r6
                  |L13.26|
;;;389        }
;;;390    
;;;391        obj->Timestamp = value;
00001a  602c              STR      r4,[r5,#0]
;;;392        obj->ReloadValue = value;
00001c  606c              STR      r4,[r5,#4]
;;;393    }
00001e  bd70              POP      {r4-r6,pc}
;;;394    
                          ENDP


                          AREA ||i.TimerStart||, CODE, READONLY, ALIGN=2

                  TimerStart PROC
;;;93     
;;;94     void TimerStart( TimerEvent_t *obj )
000000  b570              PUSH     {r4-r6,lr}
;;;95     {
000002  4604              MOV      r4,r0
;;;96         uint32_t elapsedTime = 0;
000004  2500              MOVS     r5,#0
;;;97         uint32_t remainingTime = 0;
000006  2600              MOVS     r6,#0
;;;98     
;;;99         __disable_irq( );
000008  b672              CPSID    i
;;;100    
;;;101        if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
00000a  2c00              CMP      r4,#0
00000c  d004              BEQ      |L14.24|
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       TimerExists
000014  2800              CMP      r0,#0
000016  d001              BEQ      |L14.28|
                  |L14.24|
;;;102        {
;;;103            __enable_irq( );
000018  b662              CPSIE    i
                  |L14.26|
;;;104            return;
;;;105        }
;;;106    
;;;107        obj->Timestamp = obj->ReloadValue;
;;;108        obj->IsRunning = false;
;;;109    
;;;110        if( TimerListHead == NULL )
;;;111        {
;;;112            TimerInsertNewHeadTimer( obj, obj->Timestamp );
;;;113        }
;;;114        else 
;;;115        {
;;;116            if( TimerListHead->IsRunning == true )
;;;117            {
;;;118                elapsedTime = TimerGetValue( );
;;;119                if( elapsedTime > TimerListHead->Timestamp )
;;;120                {
;;;121                    elapsedTime = TimerListHead->Timestamp; // security but should never occur
;;;122                }
;;;123                remainingTime = TimerListHead->Timestamp - elapsedTime;
;;;124            }
;;;125            else
;;;126            {
;;;127                remainingTime = TimerListHead->Timestamp;
;;;128            }
;;;129        
;;;130            if( obj->Timestamp < remainingTime )
;;;131            {
;;;132                TimerInsertNewHeadTimer( obj, remainingTime );
;;;133            }
;;;134            else
;;;135            {
;;;136                 TimerInsertTimer( obj, remainingTime );
;;;137            }
;;;138        }
;;;139        __enable_irq( );
;;;140    }
00001a  bd70              POP      {r4-r6,pc}
                  |L14.28|
00001c  6860              LDR      r0,[r4,#4]            ;107
00001e  6020              STR      r0,[r4,#0]            ;107
000020  2000              MOVS     r0,#0                 ;108
000022  7220              STRB     r0,[r4,#8]            ;108
000024  4817              LDR      r0,|L14.132|
000026  6800              LDR      r0,[r0,#0]            ;110  ; TimerListHead
000028  2800              CMP      r0,#0                 ;110
00002a  d104              BNE      |L14.54|
00002c  4620              MOV      r0,r4                 ;112
00002e  6821              LDR      r1,[r4,#0]            ;112
000030  f7fffffe          BL       TimerInsertNewHeadTimer
000034  e023              B        |L14.126|
                  |L14.54|
000036  4813              LDR      r0,|L14.132|
000038  6800              LDR      r0,[r0,#0]            ;116  ; TimerListHead
00003a  7a00              LDRB     r0,[r0,#8]            ;116
00003c  2801              CMP      r0,#1                 ;116
00003e  d10f              BNE      |L14.96|
000040  f7fffffe          BL       TimerGetValue
000044  4605              MOV      r5,r0                 ;118
000046  480f              LDR      r0,|L14.132|
000048  6800              LDR      r0,[r0,#0]            ;119  ; TimerListHead
00004a  6800              LDR      r0,[r0,#0]            ;119
00004c  42a8              CMP      r0,r5                 ;119
00004e  d202              BCS      |L14.86|
000050  480c              LDR      r0,|L14.132|
000052  6800              LDR      r0,[r0,#0]            ;121  ; TimerListHead
000054  6805              LDR      r5,[r0,#0]            ;121
                  |L14.86|
000056  480b              LDR      r0,|L14.132|
000058  6800              LDR      r0,[r0,#0]            ;123  ; TimerListHead
00005a  6800              LDR      r0,[r0,#0]            ;123
00005c  1b46              SUBS     r6,r0,r5              ;123
00005e  e002              B        |L14.102|
                  |L14.96|
000060  4808              LDR      r0,|L14.132|
000062  6800              LDR      r0,[r0,#0]            ;127  ; TimerListHead
000064  6806              LDR      r6,[r0,#0]            ;127
                  |L14.102|
000066  6820              LDR      r0,[r4,#0]            ;130
000068  42b0              CMP      r0,r6                 ;130
00006a  d204              BCS      |L14.118|
00006c  4631              MOV      r1,r6                 ;132
00006e  4620              MOV      r0,r4                 ;132
000070  f7fffffe          BL       TimerInsertNewHeadTimer
000074  e003              B        |L14.126|
                  |L14.118|
000076  4631              MOV      r1,r6                 ;136
000078  4620              MOV      r0,r4                 ;136
00007a  f7fffffe          BL       TimerInsertTimer
                  |L14.126|
00007e  b662              CPSIE    i                     ;139
000080  bf00              NOP      
000082  e7ca              B        |L14.26|
;;;141    
                          ENDP

                  |L14.132|
                          DCD      TimerListHead

                          AREA ||i.TimerStop||, CODE, READONLY, ALIGN=2

                  TimerStop PROC
;;;268    
;;;269    void TimerStop( TimerEvent_t *obj ) 
000000  b5f8              PUSH     {r3-r7,lr}
;;;270    {
000002  4605              MOV      r5,r0
;;;271        __disable_irq( );
000004  b672              CPSID    i
;;;272    
;;;273        uint32_t elapsedTime = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;274        uint32_t remainingTime = 0;
00000a  2600              MOVS     r6,#0
;;;275    
;;;276        TimerEvent_t* prev = TimerListHead;
00000c  4836              LDR      r0,|L15.232|
00000e  6807              LDR      r7,[r0,#0]  ; TimerListHead
;;;277        TimerEvent_t* cur = TimerListHead;
000010  6804              LDR      r4,[r0,#0]  ; TimerListHead
;;;278    
;;;279        // List is empty or the Obj to stop does not exist 
;;;280        if( ( TimerListHead == NULL ) || ( obj == NULL ) )
000012  6800              LDR      r0,[r0,#0]  ; TimerListHead
000014  2800              CMP      r0,#0
000016  d001              BEQ      |L15.28|
000018  2d00              CMP      r5,#0
00001a  d101              BNE      |L15.32|
                  |L15.28|
;;;281        {
;;;282            __enable_irq( );
00001c  b662              CPSIE    i
                  |L15.30|
;;;283            return;
;;;284        }
;;;285    
;;;286        if( TimerListHead == obj ) // Stop the Head                                    
;;;287        {
;;;288            if( TimerListHead->IsRunning == true ) // The head is already running 
;;;289            {
;;;290                elapsedTime = TimerGetValue( );
;;;291                if( elapsedTime > obj->Timestamp )
;;;292                {
;;;293                    elapsedTime = obj->Timestamp;
;;;294                }
;;;295            
;;;296                remainingTime = obj->Timestamp - elapsedTime;
;;;297            
;;;298                if( TimerListHead->Next != NULL )
;;;299                {
;;;300                    TimerListHead->IsRunning = false;
;;;301                    TimerListHead = TimerListHead->Next;
;;;302                    TimerListHead->Timestamp += remainingTime;
;;;303                    TimerListHead->IsRunning = true;
;;;304                    TimerSetTimeout( TimerListHead );
;;;305                }
;;;306                else
;;;307                {
;;;308                    TimerListHead = NULL;
;;;309                }
;;;310            }
;;;311            else // Stop the head before it is started
;;;312            {     
;;;313                if( TimerListHead->Next != NULL )     
;;;314                {
;;;315                    remainingTime = obj->Timestamp;
;;;316                    TimerListHead = TimerListHead->Next;
;;;317                    TimerListHead->Timestamp += remainingTime;
;;;318                }
;;;319                else
;;;320                {
;;;321                    TimerListHead = NULL;
;;;322                }
;;;323            }
;;;324        }
;;;325        else // Stop an object within the list
;;;326        {    
;;;327            remainingTime = obj->Timestamp;
;;;328            
;;;329            while( cur != NULL )
;;;330            {
;;;331                if( cur == obj )
;;;332                {
;;;333                    if( cur->Next != NULL )
;;;334                    {
;;;335                        cur = cur->Next;
;;;336                        prev->Next = cur;
;;;337                        cur->Timestamp += remainingTime;
;;;338                    }
;;;339                    else
;;;340                    {
;;;341                        cur = NULL;
;;;342                        prev->Next = cur;
;;;343                    }
;;;344                    break;
;;;345                }
;;;346                else
;;;347                {
;;;348                    prev = cur;
;;;349                    cur = cur->Next;
;;;350                }
;;;351            }   
;;;352        }
;;;353        __enable_irq( );
;;;354    }    
00001e  bdf8              POP      {r3-r7,pc}
                  |L15.32|
000020  4831              LDR      r0,|L15.232|
000022  6800              LDR      r0,[r0,#0]            ;286  ; TimerListHead
000024  42a8              CMP      r0,r5                 ;286
000026  d147              BNE      |L15.184|
000028  482f              LDR      r0,|L15.232|
00002a  6800              LDR      r0,[r0,#0]            ;288  ; TimerListHead
00002c  7a00              LDRB     r0,[r0,#8]            ;288
00002e  2801              CMP      r0,#1                 ;288
000030  d12c              BNE      |L15.140|
000032  f7fffffe          BL       TimerGetValue
000036  9000              STR      r0,[sp,#0]            ;290
000038  6829              LDR      r1,[r5,#0]            ;291
00003a  9800              LDR      r0,[sp,#0]            ;291
00003c  4281              CMP      r1,r0                 ;291
00003e  d201              BCS      |L15.68|
000040  6828              LDR      r0,[r5,#0]            ;293
000042  9000              STR      r0,[sp,#0]            ;293
                  |L15.68|
000044  6829              LDR      r1,[r5,#0]            ;296
000046  9800              LDR      r0,[sp,#0]            ;296
000048  1a0e              SUBS     r6,r1,r0              ;296
00004a  4827              LDR      r0,|L15.232|
00004c  6800              LDR      r0,[r0,#0]            ;298  ; TimerListHead
00004e  6900              LDR      r0,[r0,#0x10]         ;298
000050  2800              CMP      r0,#0                 ;298
000052  d017              BEQ      |L15.132|
000054  2000              MOVS     r0,#0                 ;300
000056  4924              LDR      r1,|L15.232|
000058  6809              LDR      r1,[r1,#0]            ;300  ; TimerListHead
00005a  7208              STRB     r0,[r1,#8]            ;300
00005c  4822              LDR      r0,|L15.232|
00005e  6800              LDR      r0,[r0,#0]            ;301  ; TimerListHead
000060  6900              LDR      r0,[r0,#0x10]         ;301
000062  4921              LDR      r1,|L15.232|
000064  6008              STR      r0,[r1,#0]            ;301  ; TimerListHead
000066  4608              MOV      r0,r1                 ;302
000068  6800              LDR      r0,[r0,#0]            ;302  ; TimerListHead
00006a  6800              LDR      r0,[r0,#0]            ;302
00006c  1980              ADDS     r0,r0,r6              ;302
00006e  6809              LDR      r1,[r1,#0]            ;302  ; TimerListHead
000070  6008              STR      r0,[r1,#0]            ;302
000072  2001              MOVS     r0,#1                 ;303
000074  491c              LDR      r1,|L15.232|
000076  6809              LDR      r1,[r1,#0]            ;303  ; TimerListHead
000078  7208              STRB     r0,[r1,#8]            ;303
00007a  481b              LDR      r0,|L15.232|
00007c  6800              LDR      r0,[r0,#0]            ;304  ; TimerListHead
00007e  f7fffffe          BL       TimerSetTimeout
000082  e02e              B        |L15.226|
                  |L15.132|
000084  2000              MOVS     r0,#0                 ;308
000086  4918              LDR      r1,|L15.232|
000088  6008              STR      r0,[r1,#0]            ;308  ; TimerListHead
00008a  e02a              B        |L15.226|
                  |L15.140|
00008c  4816              LDR      r0,|L15.232|
00008e  6800              LDR      r0,[r0,#0]            ;313  ; TimerListHead
000090  6900              LDR      r0,[r0,#0x10]         ;313
000092  2800              CMP      r0,#0                 ;313
000094  d00c              BEQ      |L15.176|
000096  682e              LDR      r6,[r5,#0]            ;315
000098  4813              LDR      r0,|L15.232|
00009a  6800              LDR      r0,[r0,#0]            ;316  ; TimerListHead
00009c  6900              LDR      r0,[r0,#0x10]         ;316
00009e  4912              LDR      r1,|L15.232|
0000a0  6008              STR      r0,[r1,#0]            ;316  ; TimerListHead
0000a2  4608              MOV      r0,r1                 ;317
0000a4  6800              LDR      r0,[r0,#0]            ;317  ; TimerListHead
0000a6  6800              LDR      r0,[r0,#0]            ;317
0000a8  1980              ADDS     r0,r0,r6              ;317
0000aa  6809              LDR      r1,[r1,#0]            ;317  ; TimerListHead
0000ac  6008              STR      r0,[r1,#0]            ;317
0000ae  e018              B        |L15.226|
                  |L15.176|
0000b0  2000              MOVS     r0,#0                 ;321
0000b2  490d              LDR      r1,|L15.232|
0000b4  6008              STR      r0,[r1,#0]            ;321  ; TimerListHead
0000b6  e014              B        |L15.226|
                  |L15.184|
0000b8  682e              LDR      r6,[r5,#0]            ;327
0000ba  e00f              B        |L15.220|
                  |L15.188|
0000bc  42ac              CMP      r4,r5                 ;331
0000be  d10b              BNE      |L15.216|
0000c0  6920              LDR      r0,[r4,#0x10]         ;333
0000c2  2800              CMP      r0,#0                 ;333
0000c4  d005              BEQ      |L15.210|
0000c6  6924              LDR      r4,[r4,#0x10]         ;335
0000c8  613c              STR      r4,[r7,#0x10]         ;336
0000ca  6820              LDR      r0,[r4,#0]            ;337
0000cc  1980              ADDS     r0,r0,r6              ;337
0000ce  6020              STR      r0,[r4,#0]            ;337
0000d0  e001              B        |L15.214|
                  |L15.210|
0000d2  2400              MOVS     r4,#0                 ;341
0000d4  613c              STR      r4,[r7,#0x10]         ;342
                  |L15.214|
0000d6  e003              B        |L15.224|
                  |L15.216|
0000d8  4627              MOV      r7,r4                 ;348
0000da  6924              LDR      r4,[r4,#0x10]         ;349
                  |L15.220|
0000dc  2c00              CMP      r4,#0                 ;329
0000de  d1ed              BNE      |L15.188|
                  |L15.224|
0000e0  bf00              NOP                            ;344
                  |L15.226|
0000e2  b662              CPSIE    i                     ;353
0000e4  bf00              NOP      
0000e6  e79a              B        |L15.30|
;;;355        
                          ENDP

                  |L15.232|
                          DCD      TimerListHead

                          AREA ||.data||, DATA, ALIGN=2

                  LowPowerModeEnable
000000  01                DCB      0x01
                  HasLoopedThroughMain
000001  000000            DCB      0x00,0x00,0x00
                  TimerListHead
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\HAL\\src\\timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_62a6a0bc____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_timer_c_62a6a0bc____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_62a6a0bc____REVSH|
#line 402
|__asm___7_timer_c_62a6a0bc____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
