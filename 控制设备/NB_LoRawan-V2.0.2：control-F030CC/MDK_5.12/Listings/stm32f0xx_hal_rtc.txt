; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_rtc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_rtc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_rtc.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_rtc.c]
                          THUMB

                          AREA ||i.HAL_RTC_AlarmAEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTC_AlarmAEventCallback PROC
;;;1177     */
;;;1178   __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;1179   {
;;;1180     /* Prevent unused argument(s) compilation warning */
;;;1181     UNUSED(hrtc);
;;;1182   
;;;1183     /* NOTE : This function should not be modified, when the callback is needed,
;;;1184               the HAL_RTC_AlarmAEventCallback could be implemented in the user file
;;;1185      */
;;;1186   }
;;;1187   
                          ENDP


                          AREA ||i.HAL_RTC_AlarmIRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RTC_AlarmIRQHandler PROC
;;;1149     */
;;;1150   void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
000000  b510              PUSH     {r4,lr}
;;;1151   {  
000002  4604              MOV      r4,r0
;;;1152     /* Get the AlarmA interrupt source enable status */
;;;1153     if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
000004  6820              LDR      r0,[r4,#0]
000006  6880              LDR      r0,[r0,#8]
000008  2101              MOVS     r1,#1
00000a  0309              LSLS     r1,r1,#12
00000c  4008              ANDS     r0,r0,r1
00000e  0b00              LSRS     r0,r0,#12
000010  2800              CMP      r0,#0
000012  d011              BEQ      |L2.56|
;;;1154     {
;;;1155       /* Get the pending status of the AlarmA Interrupt */
;;;1156       if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
000014  6820              LDR      r0,[r4,#0]
000016  68c0              LDR      r0,[r0,#0xc]
000018  1109              ASRS     r1,r1,#4
00001a  4008              ANDS     r0,r0,r1
00001c  0a00              LSRS     r0,r0,#8
00001e  2800              CMP      r0,#0
000020  d00a              BEQ      |L2.56|
;;;1157       {
;;;1158         /* AlarmA callback */
;;;1159         HAL_RTC_AlarmAEventCallback(hrtc);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       HAL_RTC_AlarmAEventCallback
;;;1160   
;;;1161         /* Clear the AlarmA interrupt pending bit */
;;;1162         __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  2180              MOVS     r1,#0x80
00002e  4008              ANDS     r0,r0,r1
000030  4905              LDR      r1,|L2.72|
000032  4308              ORRS     r0,r0,r1
000034  6821              LDR      r1,[r4,#0]
000036  60c8              STR      r0,[r1,#0xc]
                  |L2.56|
;;;1163       }
;;;1164     }
;;;1165     
;;;1166     /* Clear the EXTI's line Flag for RTC Alarm */
;;;1167     __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
000038  2001              MOVS     r0,#1
00003a  0440              LSLS     r0,r0,#17
00003c  4903              LDR      r1,|L2.76|
00003e  6148              STR      r0,[r1,#0x14]
;;;1168     
;;;1169     /* Change RTC state */
;;;1170     hrtc->State = HAL_RTC_STATE_READY; 
000040  2001              MOVS     r0,#1
000042  7760              STRB     r0,[r4,#0x1d]
;;;1171   }
000044  bd10              POP      {r4,pc}
;;;1172   
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      0xfffffe7f
                  |L2.76|
                          DCD      0x40010400

                          AREA ||i.HAL_RTC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RTC_DeInit PROC
;;;239      */
;;;240    HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
000000  b570              PUSH     {r4-r6,lr}
;;;241    {
000002  4604              MOV      r4,r0
;;;242    #if defined (STM32F030xC) || defined (STM32F070xB) || \
;;;243        defined (STM32F071xB) || defined (STM32F072xB) || defined (STM32F078xx) || \
;;;244        defined (STM32F091xC) || defined (STM32F098xx)
;;;245      uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;246    #endif /* defined (STM32F030xC) || defined (STM32F070xB) ||\
;;;247              defined (STM32F071xB) || defined (STM32F072xB) || defined (STM32F078xx) || \
;;;248              defined (STM32F091xC) || defined (STM32F098xx) ||*/
;;;249    
;;;250      /* Check the parameters */
;;;251      assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
;;;252    
;;;253      /* Set RTC state */
;;;254      hrtc->State = HAL_RTC_STATE_BUSY; 
000006  2002              MOVS     r0,#2
000008  7760              STRB     r0,[r4,#0x1d]
;;;255      
;;;256      /* Disable the write protection for RTC registers */
;;;257      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
00000a  bf00              NOP      
00000c  20ca              MOVS     r0,#0xca
00000e  6821              LDR      r1,[r4,#0]
000010  6248              STR      r0,[r1,#0x24]
000012  2053              MOVS     r0,#0x53
000014  6821              LDR      r1,[r4,#0]
000016  6248              STR      r0,[r1,#0x24]
000018  bf00              NOP      
;;;258      
;;;259      /* Set Initialization mode */
;;;260      if(RTC_EnterInitMode(hrtc) != HAL_OK)
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       RTC_EnterInitMode
000020  2800              CMP      r0,#0
000022  d008              BEQ      |L3.54|
;;;261      {
;;;262        /* Enable the write protection for RTC registers */
;;;263        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
000024  bf00              NOP      
000026  20ff              MOVS     r0,#0xff
000028  6821              LDR      r1,[r4,#0]
00002a  6248              STR      r0,[r1,#0x24]
00002c  bf00              NOP      
;;;264        
;;;265        /* Set RTC state */
;;;266        hrtc->State = HAL_RTC_STATE_ERROR;
00002e  2004              MOVS     r0,#4
000030  7760              STRB     r0,[r4,#0x1d]
;;;267        
;;;268        return HAL_ERROR;
000032  2001              MOVS     r0,#1
                  |L3.52|
;;;269      }  
;;;270      else
;;;271      {
;;;272        /* Reset TR, DR and CR registers */
;;;273        hrtc->Instance->TR = 0x00000000U;
;;;274        hrtc->Instance->DR = 0x00002101U;
;;;275        
;;;276    #if defined (STM32F030xC) || defined (STM32F070xB) || \
;;;277        defined (STM32F071xB) || defined (STM32F072xB) || defined (STM32F078xx) || \
;;;278        defined (STM32F091xC) || defined (STM32F098xx)    
;;;279        /* Reset All CR bits except CR[2:0] */
;;;280        hrtc->Instance->CR &= 0x00000007U;
;;;281        
;;;282        tickstart = HAL_GetTick();
;;;283        
;;;284        /* Wait till WUTWF flag is set and if Time out is reached exit */
;;;285        while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
;;;286        {
;;;287          if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
;;;288          { 
;;;289            /* Enable the write protection for RTC registers */
;;;290            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;291            
;;;292            /* Set RTC state */
;;;293            hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;294            
;;;295            return HAL_TIMEOUT;
;;;296          } 
;;;297        }
;;;298    #endif /* defined (STM32F030xC) || defined (STM32F070xB) ||\
;;;299              defined (STM32F071xB) || defined (STM32F072xB) || defined (STM32F078xx) || \
;;;300              defined (STM32F091xC) || defined (STM32F098xx) ||*/
;;;301              
;;;302        /* Reset all RTC CR register bits */
;;;303        hrtc->Instance->CR &= 0x00000000U;
;;;304    #if defined (STM32F030xC) || defined (STM32F070xB) || \
;;;305        defined (STM32F071xB) || defined (STM32F072xB) || defined (STM32F078xx) || \
;;;306        defined (STM32F091xC) || defined (STM32F098xx)    
;;;307        hrtc->Instance->WUTR = 0x0000FFFFU;
;;;308    #endif /* defined (STM32F030xC) || defined (STM32F070xB) ||\
;;;309              defined (STM32F071xB) || defined (STM32F072xB) || defined (STM32F078xx) || \
;;;310              defined (STM32F091xC) || defined (STM32F098xx) ||*/    
;;;311        hrtc->Instance->PRER = 0x007F00FFU;
;;;312        hrtc->Instance->ALRMAR = 0x00000000U;        
;;;313        hrtc->Instance->SHIFTR = 0x00000000U;
;;;314        hrtc->Instance->CALR = 0x00000000U;
;;;315        hrtc->Instance->ALRMASSR = 0x00000000U;
;;;316        
;;;317        /* Reset ISR register and exit initialization mode */
;;;318        hrtc->Instance->ISR = 0x00000000U;
;;;319        
;;;320        /* Reset Tamper and alternate functions configuration register */
;;;321        hrtc->Instance->TAFCR = 0x00000000;
;;;322        
;;;323        /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
;;;324        if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
;;;325        {
;;;326          if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
;;;327          {
;;;328            /* Enable the write protection for RTC registers */
;;;329            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;330            
;;;331            hrtc->State = HAL_RTC_STATE_ERROR;
;;;332            
;;;333            return HAL_ERROR;
;;;334          }
;;;335        }    
;;;336      }
;;;337      
;;;338      /* Enable the write protection for RTC registers */
;;;339      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;340      
;;;341      /* De-Initialize RTC MSP */
;;;342      HAL_RTC_MspDeInit(hrtc);
;;;343      
;;;344      hrtc->State = HAL_RTC_STATE_RESET; 
;;;345      
;;;346      /* Release Lock */
;;;347      __HAL_UNLOCK(hrtc);
;;;348    
;;;349      return HAL_OK;
;;;350    }
000034  bd70              POP      {r4-r6,pc}
                  |L3.54|
000036  2000              MOVS     r0,#0                 ;273
000038  6821              LDR      r1,[r4,#0]            ;273
00003a  6008              STR      r0,[r1,#0]            ;273
00003c  482e              LDR      r0,|L3.248|
00003e  6821              LDR      r1,[r4,#0]            ;274
000040  6048              STR      r0,[r1,#4]            ;274
000042  6820              LDR      r0,[r4,#0]            ;280
000044  6880              LDR      r0,[r0,#8]            ;280
000046  0740              LSLS     r0,r0,#29             ;280
000048  0f40              LSRS     r0,r0,#29             ;280
00004a  6821              LDR      r1,[r4,#0]            ;280
00004c  6088              STR      r0,[r1,#8]            ;280
00004e  f7fffffe          BL       HAL_GetTick
000052  4605              MOV      r5,r0                 ;282
000054  e00e              B        |L3.116|
                  |L3.86|
000056  f7fffffe          BL       HAL_GetTick
00005a  1b40              SUBS     r0,r0,r5              ;287
00005c  217d              MOVS     r1,#0x7d              ;287
00005e  00c9              LSLS     r1,r1,#3              ;287
000060  4288              CMP      r0,r1                 ;287
000062  d907              BLS      |L3.116|
000064  bf00              NOP                            ;290
000066  20ff              MOVS     r0,#0xff              ;290
000068  6821              LDR      r1,[r4,#0]            ;290
00006a  6248              STR      r0,[r1,#0x24]         ;290
00006c  bf00              NOP                            ;290
00006e  2003              MOVS     r0,#3                 ;293
000070  7760              STRB     r0,[r4,#0x1d]         ;293
000072  e7df              B        |L3.52|
                  |L3.116|
000074  6820              LDR      r0,[r4,#0]            ;285
000076  68c0              LDR      r0,[r0,#0xc]          ;285
000078  2104              MOVS     r1,#4                 ;285
00007a  4008              ANDS     r0,r0,r1              ;285
00007c  2800              CMP      r0,#0                 ;285
00007e  d0ea              BEQ      |L3.86|
000080  6820              LDR      r0,[r4,#0]            ;303
000082  6880              LDR      r0,[r0,#8]            ;303
000084  2000              MOVS     r0,#0                 ;303
000086  6821              LDR      r1,[r4,#0]            ;303
000088  6088              STR      r0,[r1,#8]            ;303
00008a  481c              LDR      r0,|L3.252|
00008c  6821              LDR      r1,[r4,#0]            ;307
00008e  6148              STR      r0,[r1,#0x14]         ;307
000090  481b              LDR      r0,|L3.256|
000092  6821              LDR      r1,[r4,#0]            ;311
000094  6108              STR      r0,[r1,#0x10]         ;311
000096  2000              MOVS     r0,#0                 ;312
000098  6821              LDR      r1,[r4,#0]            ;312
00009a  61c8              STR      r0,[r1,#0x1c]         ;312
00009c  6821              LDR      r1,[r4,#0]            ;313
00009e  62c8              STR      r0,[r1,#0x2c]         ;313
0000a0  6821              LDR      r1,[r4,#0]            ;314
0000a2  63c8              STR      r0,[r1,#0x3c]         ;314
0000a4  6821              LDR      r1,[r4,#0]            ;315
0000a6  6448              STR      r0,[r1,#0x44]         ;315
0000a8  6821              LDR      r1,[r4,#0]            ;318
0000aa  60c8              STR      r0,[r1,#0xc]          ;318
0000ac  6821              LDR      r1,[r4,#0]            ;321
0000ae  6408              STR      r0,[r1,#0x40]         ;321
0000b0  6820              LDR      r0,[r4,#0]            ;324
0000b2  6880              LDR      r0,[r0,#8]            ;324
0000b4  2120              MOVS     r1,#0x20              ;324
0000b6  4008              ANDS     r0,r0,r1              ;324
0000b8  2800              CMP      r0,#0                 ;324
0000ba  d10d              BNE      |L3.216|
0000bc  4620              MOV      r0,r4                 ;326
0000be  f7fffffe          BL       HAL_RTC_WaitForSynchro
0000c2  2800              CMP      r0,#0                 ;326
0000c4  d008              BEQ      |L3.216|
0000c6  bf00              NOP                            ;329
0000c8  20ff              MOVS     r0,#0xff              ;329
0000ca  6821              LDR      r1,[r4,#0]            ;329
0000cc  6248              STR      r0,[r1,#0x24]         ;329
0000ce  bf00              NOP                            ;329
0000d0  2004              MOVS     r0,#4                 ;331
0000d2  7760              STRB     r0,[r4,#0x1d]         ;331
0000d4  2001              MOVS     r0,#1                 ;333
0000d6  e7ad              B        |L3.52|
                  |L3.216|
0000d8  bf00              NOP                            ;339
0000da  20ff              MOVS     r0,#0xff              ;339
0000dc  6821              LDR      r1,[r4,#0]            ;339
0000de  6248              STR      r0,[r1,#0x24]         ;339
0000e0  bf00              NOP                            ;339
0000e2  4620              MOV      r0,r4                 ;342
0000e4  f7fffffe          BL       HAL_RTC_MspDeInit
0000e8  2000              MOVS     r0,#0                 ;344
0000ea  7760              STRB     r0,[r4,#0x1d]         ;344
0000ec  bf00              NOP                            ;347
0000ee  7720              STRB     r0,[r4,#0x1c]         ;347
0000f0  bf00              NOP                            ;347
0000f2  bf00              NOP                            ;349
0000f4  e79e              B        |L3.52|
;;;351    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L3.248|
                          DCD      0x00002101
                  |L3.252|
                          DCD      0x0000ffff
                  |L3.256|
                          DCD      0x007f00ff

                          AREA ||i.HAL_RTC_DeactivateAlarm||, CODE, READONLY, ALIGN=1

                  HAL_RTC_DeactivateAlarm PROC
;;;1048     */
;;;1049   HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
000000  b570              PUSH     {r4-r6,lr}
;;;1050   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;1051     uint32_t tickstart = 0U;
000006  2500              MOVS     r5,#0
;;;1052     
;;;1053     /* Check the parameters */
;;;1054     assert_param(IS_RTC_ALARM(Alarm));
;;;1055     
;;;1056     /* Process Locked */ 
;;;1057     __HAL_LOCK(hrtc);
000008  bf00              NOP      
00000a  7f20              LDRB     r0,[r4,#0x1c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L4.20|
000010  2002              MOVS     r0,#2
                  |L4.18|
;;;1058     
;;;1059     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1060     
;;;1061     /* Disable the write protection for RTC registers */
;;;1062     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1063     
;;;1064     __HAL_RTC_ALARMA_DISABLE(hrtc);
;;;1065       
;;;1066     /* In case of interrupt mode is used, the interrupt source must disabled */ 
;;;1067     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
;;;1068       
;;;1069     tickstart = HAL_GetTick();
;;;1070       
;;;1071     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
;;;1072     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
;;;1073     {
;;;1074       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
;;;1075       { 
;;;1076         /* Enable the write protection for RTC registers */
;;;1077         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1078           
;;;1079         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;1080           
;;;1081         /* Process Unlocked */ 
;;;1082         __HAL_UNLOCK(hrtc);
;;;1083           
;;;1084         return HAL_TIMEOUT;
;;;1085       }      
;;;1086     }
;;;1087     /* Enable the write protection for RTC registers */
;;;1088     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1089     
;;;1090     hrtc->State = HAL_RTC_STATE_READY; 
;;;1091     
;;;1092     /* Process Unlocked */ 
;;;1093     __HAL_UNLOCK(hrtc);  
;;;1094     
;;;1095     return HAL_OK; 
;;;1096   }
000012  bd70              POP      {r4-r6,pc}
                  |L4.20|
000014  2001              MOVS     r0,#1                 ;1057
000016  7720              STRB     r0,[r4,#0x1c]         ;1057
000018  bf00              NOP                            ;1057
00001a  2002              MOVS     r0,#2                 ;1059
00001c  7760              STRB     r0,[r4,#0x1d]         ;1059
00001e  bf00              NOP                            ;1062
000020  20ca              MOVS     r0,#0xca              ;1062
000022  6821              LDR      r1,[r4,#0]            ;1062
000024  6248              STR      r0,[r1,#0x24]         ;1062
000026  2053              MOVS     r0,#0x53              ;1062
000028  6821              LDR      r1,[r4,#0]            ;1062
00002a  6248              STR      r0,[r1,#0x24]         ;1062
00002c  bf00              NOP                            ;1062
00002e  6820              LDR      r0,[r4,#0]            ;1064
000030  6880              LDR      r0,[r0,#8]            ;1064
000032  21ff              MOVS     r1,#0xff              ;1064
000034  3101              ADDS     r1,#1                 ;1064
000036  4388              BICS     r0,r0,r1              ;1064
000038  6821              LDR      r1,[r4,#0]            ;1064
00003a  6088              STR      r0,[r1,#8]            ;1064
00003c  6820              LDR      r0,[r4,#0]            ;1067
00003e  6880              LDR      r0,[r0,#8]            ;1067
000040  2101              MOVS     r1,#1                 ;1067
000042  0309              LSLS     r1,r1,#12             ;1067
000044  4388              BICS     r0,r0,r1              ;1067
000046  6821              LDR      r1,[r4,#0]            ;1067
000048  6088              STR      r0,[r1,#8]            ;1067
00004a  f7fffffe          BL       HAL_GetTick
00004e  4605              MOV      r5,r0                 ;1069
000050  e013              B        |L4.122|
                  |L4.82|
000052  f7fffffe          BL       HAL_GetTick
000056  1b40              SUBS     r0,r0,r5              ;1074
000058  217d              MOVS     r1,#0x7d              ;1074
00005a  00c9              LSLS     r1,r1,#3              ;1074
00005c  4288              CMP      r0,r1                 ;1074
00005e  d90c              BLS      |L4.122|
000060  bf00              NOP                            ;1077
000062  20ff              MOVS     r0,#0xff              ;1077
000064  6821              LDR      r1,[r4,#0]            ;1077
000066  6248              STR      r0,[r1,#0x24]         ;1077
000068  bf00              NOP                            ;1077
00006a  2003              MOVS     r0,#3                 ;1079
00006c  7760              STRB     r0,[r4,#0x1d]         ;1079
00006e  bf00              NOP                            ;1082
000070  2000              MOVS     r0,#0                 ;1082
000072  7720              STRB     r0,[r4,#0x1c]         ;1082
000074  bf00              NOP                            ;1082
000076  2003              MOVS     r0,#3                 ;1084
000078  e7cb              B        |L4.18|
                  |L4.122|
00007a  6820              LDR      r0,[r4,#0]            ;1072
00007c  68c0              LDR      r0,[r0,#0xc]          ;1072
00007e  07c0              LSLS     r0,r0,#31             ;1072
000080  0fc0              LSRS     r0,r0,#31             ;1072
000082  2800              CMP      r0,#0                 ;1072
000084  d0e5              BEQ      |L4.82|
000086  bf00              NOP                            ;1088
000088  20ff              MOVS     r0,#0xff              ;1088
00008a  6821              LDR      r1,[r4,#0]            ;1088
00008c  6248              STR      r0,[r1,#0x24]         ;1088
00008e  bf00              NOP                            ;1088
000090  2001              MOVS     r0,#1                 ;1090
000092  7760              STRB     r0,[r4,#0x1d]         ;1090
000094  bf00              NOP                            ;1093
000096  2000              MOVS     r0,#0                 ;1093
000098  7720              STRB     r0,[r4,#0x1c]         ;1093
00009a  bf00              NOP                            ;1093
00009c  bf00              NOP                            ;1095
00009e  e7b8              B        |L4.18|
;;;1097              
                          ENDP


                          AREA ||i.HAL_RTC_GetAlarm||, CODE, READONLY, ALIGN=2

                  HAL_RTC_GetAlarm PROC
;;;1110     */
;;;1111   HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1112   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  461f              MOV      r7,r3
;;;1113     uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
000008  2500              MOVS     r5,#0
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;1114     
;;;1115     /* Check the parameters */
;;;1116     assert_param(IS_RTC_FORMAT(Format));
;;;1117     assert_param(IS_RTC_ALARM(Alarm));
;;;1118     
;;;1119     sAlarm->Alarm = RTC_ALARM_A;
00000e  20ff              MOVS     r0,#0xff
000010  3001              ADDS     r0,#1
000012  6260              STR      r0,[r4,#0x24]
;;;1120       
;;;1121     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
000014  6830              LDR      r0,[r6,#0]
000016  69c5              LDR      r5,[r0,#0x1c]
;;;1122     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
000018  6830              LDR      r0,[r6,#0]
00001a  6c40              LDR      r0,[r0,#0x44]
00001c  0440              LSLS     r0,r0,#17
00001e  0c40              LSRS     r0,r0,#17
000020  9000              STR      r0,[sp,#0]
;;;1123       
;;;1124     /* Fill the structure with the read parameters */
;;;1125     sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
000022  203f              MOVS     r0,#0x3f
000024  0400              LSLS     r0,r0,#16
000026  4028              ANDS     r0,r0,r5
000028  0c00              LSRS     r0,r0,#16
00002a  7020              STRB     r0,[r4,#0]
;;;1126     sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
00002c  207f              MOVS     r0,#0x7f
00002e  0200              LSLS     r0,r0,#8
000030  4028              ANDS     r0,r0,r5
000032  0a00              LSRS     r0,r0,#8
000034  7060              STRB     r0,[r4,#1]
;;;1127     sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
000036  0668              LSLS     r0,r5,#25
000038  0e40              LSRS     r0,r0,#25
00003a  70a0              STRB     r0,[r4,#2]
;;;1128     sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
00003c  2001              MOVS     r0,#1
00003e  0580              LSLS     r0,r0,#22
000040  4028              ANDS     r0,r0,r5
000042  0c00              LSRS     r0,r0,#16
000044  70e0              STRB     r0,[r4,#3]
;;;1129     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
000046  9800              LDR      r0,[sp,#0]
000048  6060              STR      r0,[r4,#4]
;;;1130     sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
00004a  203f              MOVS     r0,#0x3f
00004c  0600              LSLS     r0,r0,#24
00004e  4028              ANDS     r0,r0,r5
000050  0e01              LSRS     r1,r0,#24
000052  2020              MOVS     r0,#0x20
000054  5501              STRB     r1,[r0,r4]
;;;1131     sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
000056  0640              LSLS     r0,r0,#25
000058  4028              ANDS     r0,r0,r5
00005a  61e0              STR      r0,[r4,#0x1c]
;;;1132     sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
00005c  480c              LDR      r0,|L5.144|
00005e  4028              ANDS     r0,r0,r5
000060  6160              STR      r0,[r4,#0x14]
;;;1133       
;;;1134     if(Format == RTC_FORMAT_BIN)
000062  2f00              CMP      r7,#0
000064  d111              BNE      |L5.138|
;;;1135     {
;;;1136       sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
000066  7820              LDRB     r0,[r4,#0]
000068  f7fffffe          BL       RTC_Bcd2ToByte
00006c  7020              STRB     r0,[r4,#0]
;;;1137       sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
00006e  7860              LDRB     r0,[r4,#1]
000070  f7fffffe          BL       RTC_Bcd2ToByte
000074  7060              STRB     r0,[r4,#1]
;;;1138       sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
000076  78a0              LDRB     r0,[r4,#2]
000078  f7fffffe          BL       RTC_Bcd2ToByte
00007c  70a0              STRB     r0,[r4,#2]
;;;1139       sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
00007e  2120              MOVS     r1,#0x20
000080  5d08              LDRB     r0,[r1,r4]
000082  f7fffffe          BL       RTC_Bcd2ToByte
000086  2120              MOVS     r1,#0x20
000088  5508              STRB     r0,[r1,r4]
                  |L5.138|
;;;1140     }  
;;;1141       
;;;1142     return HAL_OK;
00008a  2000              MOVS     r0,#0
;;;1143   }
00008c  bdf8              POP      {r3-r7,pc}
;;;1144   
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      0x80808080

                          AREA ||i.HAL_RTC_GetDate||, CODE, READONLY, ALIGN=2

                  HAL_RTC_GetDate PROC
;;;699      */
;;;700    HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
000000  b5f0              PUSH     {r4-r7,lr}
;;;701    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4617              MOV      r7,r2
;;;702      uint32_t datetmpreg = 0;
000008  2500              MOVS     r5,#0
;;;703    
;;;704      /* Check the parameters */
;;;705      assert_param(IS_RTC_FORMAT(Format));
;;;706              
;;;707      /* Get the DR register */
;;;708      datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
00000a  6830              LDR      r0,[r6,#0]
00000c  6840              LDR      r0,[r0,#4]
00000e  4912              LDR      r1,|L6.88|
000010  4008              ANDS     r0,r0,r1
000012  4605              MOV      r5,r0
;;;709    
;;;710      /* Fill the structure fields with the read parameters */
;;;711      sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
000014  20ff              MOVS     r0,#0xff
000016  0400              LSLS     r0,r0,#16
000018  4028              ANDS     r0,r0,r5
00001a  0c00              LSRS     r0,r0,#16
00001c  70e0              STRB     r0,[r4,#3]
;;;712      sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
00001e  201f              MOVS     r0,#0x1f
000020  0200              LSLS     r0,r0,#8
000022  4028              ANDS     r0,r0,r5
000024  0a00              LSRS     r0,r0,#8
000026  7060              STRB     r0,[r4,#1]
;;;713      sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
000028  06a8              LSLS     r0,r5,#26
00002a  0e80              LSRS     r0,r0,#26
00002c  70a0              STRB     r0,[r4,#2]
;;;714      sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
00002e  2007              MOVS     r0,#7
000030  0340              LSLS     r0,r0,#13
000032  4028              ANDS     r0,r0,r5
000034  0b40              LSRS     r0,r0,#13
000036  7020              STRB     r0,[r4,#0]
;;;715    
;;;716      /* Check the input parameters format */
;;;717      if(Format == RTC_FORMAT_BIN)
000038  2f00              CMP      r7,#0
00003a  d10b              BNE      |L6.84|
;;;718      {    
;;;719        /* Convert the date structure parameters to Binary format */
;;;720        sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
00003c  78e0              LDRB     r0,[r4,#3]
00003e  f7fffffe          BL       RTC_Bcd2ToByte
000042  70e0              STRB     r0,[r4,#3]
;;;721        sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
000044  7860              LDRB     r0,[r4,#1]
000046  f7fffffe          BL       RTC_Bcd2ToByte
00004a  7060              STRB     r0,[r4,#1]
;;;722        sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
00004c  78a0              LDRB     r0,[r4,#2]
00004e  f7fffffe          BL       RTC_Bcd2ToByte
000052  70a0              STRB     r0,[r4,#2]
                  |L6.84|
;;;723      }
;;;724      return HAL_OK;
000054  2000              MOVS     r0,#0
;;;725    }
000056  bdf0              POP      {r4-r7,pc}
;;;726    
                          ENDP

                  |L6.88|
                          DCD      0x00ffff3f

                          AREA ||i.HAL_RTC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_RTC_GetState PROC
;;;1296     */
;;;1297   HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
000000  4601              MOV      r1,r0
;;;1298   {
;;;1299     /* Return RTC handle state */
;;;1300     return hrtc->State;
000002  7f48              LDRB     r0,[r1,#0x1d]
;;;1301   }
000004  4770              BX       lr
;;;1302   
                          ENDP


                          AREA ||i.HAL_RTC_GetTime||, CODE, READONLY, ALIGN=2

                  HAL_RTC_GetTime PROC
;;;544      */
;;;545    HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
000000  b5f0              PUSH     {r4-r7,lr}
;;;546    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4617              MOV      r7,r2
;;;547      uint32_t tmpreg = 0;
000008  2600              MOVS     r6,#0
;;;548    
;;;549      /* Check the parameters */
;;;550      assert_param(IS_RTC_FORMAT(Format));
;;;551      
;;;552      /* Get subseconds structure field from the corresponding register*/
;;;553      sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
00000a  6828              LDR      r0,[r5,#0]
00000c  6a80              LDR      r0,[r0,#0x28]
00000e  6060              STR      r0,[r4,#4]
;;;554    
;;;555      /* Get SecondFraction structure field from the corresponding register field*/
;;;556      sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
000010  6828              LDR      r0,[r5,#0]
000012  6900              LDR      r0,[r0,#0x10]
000014  0440              LSLS     r0,r0,#17
000016  0c40              LSRS     r0,r0,#17
000018  60a0              STR      r0,[r4,#8]
;;;557      
;;;558      /* Get the TR register */
;;;559      tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
00001a  6828              LDR      r0,[r5,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  4912              LDR      r1,|L8.104|
000020  4008              ANDS     r0,r0,r1
000022  4606              MOV      r6,r0
;;;560      
;;;561      /* Fill the structure fields with the read parameters */
;;;562      sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
000024  203f              MOVS     r0,#0x3f
000026  0400              LSLS     r0,r0,#16
000028  4030              ANDS     r0,r0,r6
00002a  0c00              LSRS     r0,r0,#16
00002c  7020              STRB     r0,[r4,#0]
;;;563      sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
00002e  207f              MOVS     r0,#0x7f
000030  0200              LSLS     r0,r0,#8
000032  4030              ANDS     r0,r0,r6
000034  0a00              LSRS     r0,r0,#8
000036  7060              STRB     r0,[r4,#1]
;;;564      sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
000038  0670              LSLS     r0,r6,#25
00003a  0e40              LSRS     r0,r0,#25
00003c  70a0              STRB     r0,[r4,#2]
;;;565      sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
00003e  2001              MOVS     r0,#1
000040  0580              LSLS     r0,r0,#22
000042  4030              ANDS     r0,r0,r6
000044  0c00              LSRS     r0,r0,#16
000046  70e0              STRB     r0,[r4,#3]
;;;566      
;;;567      /* Check the input parameters format */
;;;568      if(Format == RTC_FORMAT_BIN)
000048  2f00              CMP      r7,#0
00004a  d10b              BNE      |L8.100|
;;;569      {
;;;570        /* Convert the time structure parameters to Binary format */
;;;571        sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
00004c  7820              LDRB     r0,[r4,#0]
00004e  f7fffffe          BL       RTC_Bcd2ToByte
000052  7020              STRB     r0,[r4,#0]
;;;572        sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
000054  7860              LDRB     r0,[r4,#1]
000056  f7fffffe          BL       RTC_Bcd2ToByte
00005a  7060              STRB     r0,[r4,#1]
;;;573        sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
00005c  78a0              LDRB     r0,[r4,#2]
00005e  f7fffffe          BL       RTC_Bcd2ToByte
000062  70a0              STRB     r0,[r4,#2]
                  |L8.100|
;;;574      }
;;;575      
;;;576      return HAL_OK;
000064  2000              MOVS     r0,#0
;;;577    }
000066  bdf0              POP      {r4-r7,pc}
;;;578    
                          ENDP

                  |L8.104|
                          DCD      0x007f7f7f

                          AREA ||i.HAL_RTC_Init||, CODE, READONLY, ALIGN=2

                  HAL_RTC_Init PROC
;;;149      */
;;;150    HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
000000  b510              PUSH     {r4,lr}
;;;151    {
000002  4604              MOV      r4,r0
;;;152      /* Check the RTC peripheral state */
;;;153      if(hrtc == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L9.12|
;;;154      {
;;;155         return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L9.10|
;;;156      }
;;;157      
;;;158      /* Check the parameters */
;;;159      assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
;;;160      assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
;;;161      assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
;;;162      assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
;;;163      assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
;;;164      assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
;;;165      assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
;;;166        
;;;167      if(hrtc->State == HAL_RTC_STATE_RESET)
;;;168      {
;;;169        /* Allocate lock resource and initialize it */
;;;170        hrtc->Lock = HAL_UNLOCKED;
;;;171    
;;;172        /* Initialize RTC MSP */
;;;173        HAL_RTC_MspInit(hrtc);
;;;174      }
;;;175      
;;;176      /* Set RTC state */  
;;;177      hrtc->State = HAL_RTC_STATE_BUSY;  
;;;178           
;;;179      /* Disable the write protection for RTC registers */
;;;180      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;181    
;;;182      /* Set Initialization mode */
;;;183      if(RTC_EnterInitMode(hrtc) != HAL_OK)
;;;184      {
;;;185        /* Enable the write protection for RTC registers */
;;;186        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;187        
;;;188        /* Set RTC state */
;;;189        hrtc->State = HAL_RTC_STATE_ERROR;
;;;190        
;;;191        return HAL_ERROR;
;;;192      } 
;;;193      else
;;;194      { 
;;;195        /* Clear RTC_CR FMT, OSEL and POL Bits */
;;;196        hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
;;;197        /* Set RTC_CR register */
;;;198        hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
;;;199        
;;;200        /* Configure the RTC PRER */
;;;201        hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
;;;202        hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
;;;203        
;;;204        /* Exit Initialization mode */
;;;205        hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
;;;206    
;;;207        /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
;;;208        if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
;;;209        {
;;;210          if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
;;;211          {
;;;212            /* Enable the write protection for RTC registers */
;;;213            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;214    
;;;215            hrtc->State = HAL_RTC_STATE_ERROR;
;;;216    
;;;217            return HAL_ERROR;
;;;218          }
;;;219        }
;;;220    
;;;221        hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
;;;222        hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
;;;223        
;;;224        /* Enable the write protection for RTC registers */
;;;225        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;226        
;;;227        /* Set RTC state */
;;;228        hrtc->State = HAL_RTC_STATE_READY;
;;;229        
;;;230        return HAL_OK;
;;;231      }
;;;232    }
00000a  bd10              POP      {r4,pc}
                  |L9.12|
00000c  7f60              LDRB     r0,[r4,#0x1d]         ;167
00000e  2800              CMP      r0,#0                 ;167
000010  d103              BNE      |L9.26|
000012  7720              STRB     r0,[r4,#0x1c]         ;170
000014  4620              MOV      r0,r4                 ;173
000016  f7fffffe          BL       HAL_RTC_MspInit
                  |L9.26|
00001a  2002              MOVS     r0,#2                 ;177
00001c  7760              STRB     r0,[r4,#0x1d]         ;177
00001e  bf00              NOP                            ;180
000020  20ca              MOVS     r0,#0xca              ;180
000022  6821              LDR      r1,[r4,#0]            ;180
000024  6248              STR      r0,[r1,#0x24]         ;180
000026  2053              MOVS     r0,#0x53              ;180
000028  6821              LDR      r1,[r4,#0]            ;180
00002a  6248              STR      r0,[r1,#0x24]         ;180
00002c  bf00              NOP                            ;180
00002e  4620              MOV      r0,r4                 ;183
000030  f7fffffe          BL       RTC_EnterInitMode
000034  2800              CMP      r0,#0                 ;183
000036  d008              BEQ      |L9.74|
000038  bf00              NOP                            ;186
00003a  20ff              MOVS     r0,#0xff              ;186
00003c  6821              LDR      r1,[r4,#0]            ;186
00003e  6248              STR      r0,[r1,#0x24]         ;186
000040  bf00              NOP                            ;186
000042  2004              MOVS     r0,#4                 ;189
000044  7760              STRB     r0,[r4,#0x1d]         ;189
000046  2001              MOVS     r0,#1                 ;191
000048  e7df              B        |L9.10|
                  |L9.74|
00004a  6820              LDR      r0,[r4,#0]            ;196
00004c  6880              LDR      r0,[r0,#8]            ;196
00004e  4924              LDR      r1,|L9.224|
000050  4008              ANDS     r0,r0,r1              ;196
000052  6821              LDR      r1,[r4,#0]            ;196
000054  6088              STR      r0,[r1,#8]            ;196
000056  6921              LDR      r1,[r4,#0x10]         ;198
000058  6860              LDR      r0,[r4,#4]            ;198
00005a  4308              ORRS     r0,r0,r1              ;198
00005c  6961              LDR      r1,[r4,#0x14]         ;198
00005e  4308              ORRS     r0,r0,r1              ;198
000060  6821              LDR      r1,[r4,#0]            ;198
000062  6889              LDR      r1,[r1,#8]            ;198
000064  4308              ORRS     r0,r0,r1              ;198
000066  6821              LDR      r1,[r4,#0]            ;198
000068  6088              STR      r0,[r1,#8]            ;198
00006a  6821              LDR      r1,[r4,#0]            ;201
00006c  68e0              LDR      r0,[r4,#0xc]          ;201
00006e  6108              STR      r0,[r1,#0x10]         ;201
000070  6820              LDR      r0,[r4,#0]            ;202
000072  6900              LDR      r0,[r0,#0x10]         ;202
000074  8921              LDRH     r1,[r4,#8]            ;202
000076  0409              LSLS     r1,r1,#16             ;202
000078  4308              ORRS     r0,r0,r1              ;202
00007a  6821              LDR      r1,[r4,#0]            ;202
00007c  6108              STR      r0,[r1,#0x10]         ;202
00007e  6820              LDR      r0,[r4,#0]            ;205
000080  68c0              LDR      r0,[r0,#0xc]          ;205
000082  2180              MOVS     r1,#0x80              ;205
000084  4388              BICS     r0,r0,r1              ;205
000086  6821              LDR      r1,[r4,#0]            ;205
000088  60c8              STR      r0,[r1,#0xc]          ;205
00008a  6820              LDR      r0,[r4,#0]            ;208
00008c  6880              LDR      r0,[r0,#8]            ;208
00008e  2120              MOVS     r1,#0x20              ;208
000090  4008              ANDS     r0,r0,r1              ;208
000092  2800              CMP      r0,#0                 ;208
000094  d10d              BNE      |L9.178|
000096  4620              MOV      r0,r4                 ;210
000098  f7fffffe          BL       HAL_RTC_WaitForSynchro
00009c  2800              CMP      r0,#0                 ;210
00009e  d008              BEQ      |L9.178|
0000a0  bf00              NOP                            ;213
0000a2  20ff              MOVS     r0,#0xff              ;213
0000a4  6821              LDR      r1,[r4,#0]            ;213
0000a6  6248              STR      r0,[r1,#0x24]         ;213
0000a8  bf00              NOP                            ;213
0000aa  2004              MOVS     r0,#4                 ;215
0000ac  7760              STRB     r0,[r4,#0x1d]         ;215
0000ae  2001              MOVS     r0,#1                 ;217
0000b0  e7ab              B        |L9.10|
                  |L9.178|
0000b2  6820              LDR      r0,[r4,#0]            ;221
0000b4  6c00              LDR      r0,[r0,#0x40]         ;221
0000b6  2101              MOVS     r1,#1                 ;221
0000b8  0489              LSLS     r1,r1,#18             ;221
0000ba  4388              BICS     r0,r0,r1              ;221
0000bc  6821              LDR      r1,[r4,#0]            ;221
0000be  6408              STR      r0,[r1,#0x40]         ;221
0000c0  6820              LDR      r0,[r4,#0]            ;222
0000c2  6c00              LDR      r0,[r0,#0x40]         ;222
0000c4  69a1              LDR      r1,[r4,#0x18]         ;222
0000c6  4308              ORRS     r0,r0,r1              ;222
0000c8  6821              LDR      r1,[r4,#0]            ;222
0000ca  6408              STR      r0,[r1,#0x40]         ;222
0000cc  bf00              NOP                            ;225
0000ce  20ff              MOVS     r0,#0xff              ;225
0000d0  6821              LDR      r1,[r4,#0]            ;225
0000d2  6248              STR      r0,[r1,#0x24]         ;225
0000d4  bf00              NOP                            ;225
0000d6  2001              MOVS     r0,#1                 ;228
0000d8  7760              STRB     r0,[r4,#0x1d]         ;228
0000da  2000              MOVS     r0,#0                 ;230
0000dc  e795              B        |L9.10|
;;;233    
                          ENDP

0000de  0000              DCW      0x0000
                  |L9.224|
                          DCD      0xff8fffbf

                          AREA ||i.HAL_RTC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_RTC_MspDeInit PROC
;;;371      */
;;;372    __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
000000  4770              BX       lr
;;;373    {
;;;374      /* Prevent unused argument(s) compilation warning */
;;;375      UNUSED(hrtc);
;;;376    
;;;377      /* NOTE : This function should not be modified, when the callback is needed,
;;;378                the HAL_RTC_MspDeInit could be implemented in the user file
;;;379       */ 
;;;380    }
;;;381    
                          ENDP


                          AREA ||i.HAL_RTC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_RTC_MspInit PROC
;;;356      */
;;;357    __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
000000  4770              BX       lr
;;;358    {
;;;359      /* Prevent unused argument(s) compilation warning */
;;;360      UNUSED(hrtc);
;;;361    
;;;362      /* NOTE : This function should not be modified, when the callback is needed,
;;;363                the HAL_RTC_MspInit could be implemented in the user file
;;;364       */ 
;;;365    }
;;;366    
                          ENDP


                          AREA ||i.HAL_RTC_PollForAlarmAEvent||, CODE, READONLY, ALIGN=2

                  HAL_RTC_PollForAlarmAEvent PROC
;;;1193     */
;;;1194   HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;1195   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1196   
;;;1197     uint32_t tickstart = HAL_GetTick();   
000006  f7fffffe          BL       HAL_GetTick
00000a  4606              MOV      r6,r0
;;;1198     
;;;1199     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
00000c  e00c              B        |L12.40|
                  |L12.14|
;;;1200     {
;;;1201       if(Timeout != HAL_MAX_DELAY)
00000e  1c68              ADDS     r0,r5,#1
000010  2800              CMP      r0,#0
000012  d009              BEQ      |L12.40|
;;;1202       {
;;;1203         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
000014  2d00              CMP      r5,#0
000016  d004              BEQ      |L12.34|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  42a8              CMP      r0,r5
000020  d902              BLS      |L12.40|
                  |L12.34|
;;;1204         {
;;;1205           hrtc->State = HAL_RTC_STATE_TIMEOUT;
000022  2003              MOVS     r0,#3
000024  7760              STRB     r0,[r4,#0x1d]
                  |L12.38|
;;;1206           return HAL_TIMEOUT;
;;;1207         }
;;;1208       }
;;;1209     }
;;;1210     
;;;1211     /* Clear the Alarm interrupt pending bit */
;;;1212     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
;;;1213     
;;;1214     /* Change RTC state */
;;;1215     hrtc->State = HAL_RTC_STATE_READY; 
;;;1216     
;;;1217     return HAL_OK;  
;;;1218   }
000026  bd70              POP      {r4-r6,pc}
                  |L12.40|
000028  6820              LDR      r0,[r4,#0]            ;1199
00002a  68c0              LDR      r0,[r0,#0xc]          ;1199
00002c  21ff              MOVS     r1,#0xff              ;1199
00002e  3101              ADDS     r1,#1                 ;1199
000030  4008              ANDS     r0,r0,r1              ;1199
000032  0a00              LSRS     r0,r0,#8              ;1199
000034  2800              CMP      r0,#0                 ;1199
000036  d0ea              BEQ      |L12.14|
000038  6820              LDR      r0,[r4,#0]            ;1212
00003a  68c0              LDR      r0,[r0,#0xc]          ;1212
00003c  2180              MOVS     r1,#0x80              ;1212
00003e  4008              ANDS     r0,r0,r1              ;1212
000040  4903              LDR      r1,|L12.80|
000042  4308              ORRS     r0,r0,r1              ;1212
000044  6821              LDR      r1,[r4,#0]            ;1212
000046  60c8              STR      r0,[r1,#0xc]          ;1212
000048  2001              MOVS     r0,#1                 ;1215
00004a  7760              STRB     r0,[r4,#0x1d]         ;1215
00004c  2000              MOVS     r0,#0                 ;1217
00004e  e7ea              B        |L12.38|
;;;1219   
                          ENDP

                  |L12.80|
                          DCD      0xfffffe7f

                          AREA ||i.HAL_RTC_SetAlarm||, CODE, READONLY, ALIGN=1

                  HAL_RTC_SetAlarm PROC
;;;753      */
;;;754    HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
000000  b5fe              PUSH     {r1-r7,lr}
;;;755    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;756      uint32_t tickstart = 0U;
000008  2700              MOVS     r7,#0
;;;757      uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
00000e  9000              STR      r0,[sp,#0]
;;;758      
;;;759      /* Check the parameters */
;;;760      assert_param(IS_RTC_FORMAT(Format));
;;;761      assert_param(IS_RTC_ALARM(sAlarm->Alarm));
;;;762      assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
;;;763      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
;;;764      assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
;;;765      assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
;;;766      
;;;767      /* Process Locked */ 
;;;768      __HAL_LOCK(hrtc);
000010  bf00              NOP      
000012  7f28              LDRB     r0,[r5,#0x1c]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L13.28|
000018  2002              MOVS     r0,#2
                  |L13.26|
;;;769      
;;;770      hrtc->State = HAL_RTC_STATE_BUSY;
;;;771      
;;;772      if(Format == RTC_FORMAT_BIN)
;;;773      {
;;;774        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;775        {
;;;776          assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
;;;777          assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
;;;778        } 
;;;779        else
;;;780        {
;;;781          sAlarm->AlarmTime.TimeFormat = 0x00U;
;;;782          assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
;;;783        }
;;;784        assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
;;;785        assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
;;;786        
;;;787        if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
;;;788        {
;;;789          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
;;;790        }
;;;791        else
;;;792        {
;;;793          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
;;;794        }
;;;795        
;;;796        tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
;;;797                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
;;;798                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
;;;799                  ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
;;;800                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
;;;801                  ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
;;;802                  ((uint32_t)sAlarm->AlarmMask)); 
;;;803      }
;;;804      else
;;;805      {
;;;806        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;807        {
;;;808          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
;;;809          assert_param(IS_RTC_HOUR12(tmpreg));
;;;810          assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
;;;811        } 
;;;812        else
;;;813        {
;;;814          sAlarm->AlarmTime.TimeFormat = 0x00U;
;;;815          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
;;;816        }
;;;817        
;;;818        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
;;;819        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
;;;820        
;;;821        if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
;;;822        {
;;;823          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
;;;824          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
;;;825        }
;;;826        else
;;;827        {
;;;828          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
;;;829          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
;;;830        }  
;;;831        
;;;832        tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
;;;833                  ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
;;;834                  ((uint32_t) sAlarm->AlarmTime.Seconds) | \
;;;835                  ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
;;;836                  ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
;;;837                  ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
;;;838                  ((uint32_t)sAlarm->AlarmMask));   
;;;839      }
;;;840      
;;;841      /* Configure the Alarm A Sub Second registers */
;;;842      subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
;;;843      
;;;844      /* Disable the write protection for RTC registers */
;;;845      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;846    
;;;847      /* Disable the Alarm A interrupt */
;;;848      __HAL_RTC_ALARMA_DISABLE(hrtc);
;;;849    
;;;850      /* In case of interrupt mode is used, the interrupt source must disabled */ 
;;;851      __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
;;;852             
;;;853      tickstart = HAL_GetTick();
;;;854      /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
;;;855      while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
;;;856      {
;;;857        if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
;;;858        {
;;;859          /* Enable the write protection for RTC registers */
;;;860          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;861    
;;;862          hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;863    
;;;864          /* Process Unlocked */ 
;;;865          __HAL_UNLOCK(hrtc);
;;;866            
;;;867          return HAL_TIMEOUT;
;;;868        }
;;;869      }
;;;870        
;;;871      hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
;;;872      /* Configure the Alarm A Sub Second register */
;;;873      hrtc->Instance->ALRMASSR = subsecondtmpreg;
;;;874      /* Configure the Alarm state: Enable Alarm */
;;;875      __HAL_RTC_ALARMA_ENABLE(hrtc);
;;;876      
;;;877      /* Enable the write protection for RTC registers */
;;;878      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
;;;879      
;;;880      /* Change RTC state */
;;;881      hrtc->State = HAL_RTC_STATE_READY; 
;;;882      
;;;883      /* Process Unlocked */ 
;;;884      __HAL_UNLOCK(hrtc);
;;;885      
;;;886      return HAL_OK;
;;;887    }
00001a  bdfe              POP      {r1-r7,pc}
                  |L13.28|
00001c  2001              MOVS     r0,#1                 ;768
00001e  7728              STRB     r0,[r5,#0x1c]         ;768
000020  bf00              NOP                            ;768
000022  2002              MOVS     r0,#2                 ;770
000024  7768              STRB     r0,[r5,#0x1d]         ;770
000026  2e00              CMP      r6,#0                 ;772
000028  d12a              BNE      |L13.128|
00002a  6828              LDR      r0,[r5,#0]            ;774
00002c  6880              LDR      r0,[r0,#8]            ;774
00002e  2140              MOVS     r1,#0x40              ;774
000030  4008              ANDS     r0,r0,r1              ;774
000032  2800              CMP      r0,#0                 ;774
000034  d000              BEQ      |L13.56|
000036  e002              B        |L13.62|
                  |L13.56|
000038  2000              MOVS     r0,#0                 ;781
00003a  70e0              STRB     r0,[r4,#3]            ;781
00003c  bf00              NOP                            ;782
                  |L13.62|
00003e  69e0              LDR      r0,[r4,#0x1c]         ;787
000040  2800              CMP      r0,#0                 ;787
000042  d100              BNE      |L13.70|
000044  e000              B        |L13.72|
                  |L13.70|
000046  bf00              NOP                            ;793
                  |L13.72|
000048  7820              LDRB     r0,[r4,#0]            ;796
00004a  f7fffffe          BL       RTC_ByteToBcd2
00004e  0403              LSLS     r3,r0,#16             ;796
000050  7860              LDRB     r0,[r4,#1]            ;796
000052  f7fffffe          BL       RTC_ByteToBcd2
000056  0200              LSLS     r0,r0,#8              ;796
000058  4303              ORRS     r3,r3,r0              ;796
00005a  78a0              LDRB     r0,[r4,#2]            ;796
00005c  f7fffffe          BL       RTC_ByteToBcd2
000060  4303              ORRS     r3,r3,r0              ;796
000062  78e0              LDRB     r0,[r4,#3]            ;796
000064  0400              LSLS     r0,r0,#16             ;796
000066  4303              ORRS     r3,r3,r0              ;796
000068  2120              MOVS     r1,#0x20              ;796
00006a  5d08              LDRB     r0,[r1,r4]            ;796
00006c  f7fffffe          BL       RTC_ByteToBcd2
000070  0600              LSLS     r0,r0,#24             ;796
000072  4303              ORRS     r3,r3,r0              ;796
000074  69e0              LDR      r0,[r4,#0x1c]         ;796
000076  4303              ORRS     r3,r3,r0              ;796
000078  6960              LDR      r0,[r4,#0x14]         ;796
00007a  4303              ORRS     r3,r3,r0              ;796
00007c  9301              STR      r3,[sp,#4]            ;796
00007e  e02f              B        |L13.224|
                  |L13.128|
000080  6828              LDR      r0,[r5,#0]            ;806
000082  6880              LDR      r0,[r0,#8]            ;806
000084  2140              MOVS     r1,#0x40              ;806
000086  4008              ANDS     r0,r0,r1              ;806
000088  2800              CMP      r0,#0                 ;806
00008a  d004              BEQ      |L13.150|
00008c  7820              LDRB     r0,[r4,#0]            ;808
00008e  f7fffffe          BL       RTC_Bcd2ToByte
000092  9001              STR      r0,[sp,#4]            ;808
000094  e002              B        |L13.156|
                  |L13.150|
000096  2000              MOVS     r0,#0                 ;814
000098  70e0              STRB     r0,[r4,#3]            ;814
00009a  bf00              NOP                            ;815
                  |L13.156|
00009c  69e0              LDR      r0,[r4,#0x1c]         ;821
00009e  2800              CMP      r0,#0                 ;821
0000a0  d105              BNE      |L13.174|
0000a2  2120              MOVS     r1,#0x20              ;823
0000a4  5d08              LDRB     r0,[r1,r4]            ;823
0000a6  f7fffffe          BL       RTC_Bcd2ToByte
0000aa  9001              STR      r0,[sp,#4]            ;823
0000ac  e005              B        |L13.186|
                  |L13.174|
0000ae  2120              MOVS     r1,#0x20              ;828
0000b0  5d08              LDRB     r0,[r1,r4]            ;828
0000b2  f7fffffe          BL       RTC_Bcd2ToByte
0000b6  9001              STR      r0,[sp,#4]            ;828
0000b8  bf00              NOP                            ;829
                  |L13.186|
0000ba  7820              LDRB     r0,[r4,#0]            ;832
0000bc  0400              LSLS     r0,r0,#16             ;832
0000be  7861              LDRB     r1,[r4,#1]            ;832
0000c0  0209              LSLS     r1,r1,#8              ;832
0000c2  4308              ORRS     r0,r0,r1              ;832
0000c4  78a1              LDRB     r1,[r4,#2]            ;832
0000c6  4308              ORRS     r0,r0,r1              ;832
0000c8  78e1              LDRB     r1,[r4,#3]            ;832
0000ca  0409              LSLS     r1,r1,#16             ;832
0000cc  4308              ORRS     r0,r0,r1              ;832
0000ce  2120              MOVS     r1,#0x20              ;832
0000d0  5d09              LDRB     r1,[r1,r4]            ;832
0000d2  0609              LSLS     r1,r1,#24             ;832
0000d4  4308              ORRS     r0,r0,r1              ;832
0000d6  69e1              LDR      r1,[r4,#0x1c]         ;832
0000d8  4308              ORRS     r0,r0,r1              ;832
0000da  6961              LDR      r1,[r4,#0x14]         ;832
0000dc  4308              ORRS     r0,r0,r1              ;832
0000de  9001              STR      r0,[sp,#4]            ;832
                  |L13.224|
0000e0  69a1              LDR      r1,[r4,#0x18]         ;842
0000e2  6860              LDR      r0,[r4,#4]            ;842
0000e4  4308              ORRS     r0,r0,r1              ;842
0000e6  9000              STR      r0,[sp,#0]            ;842
0000e8  bf00              NOP                            ;845
0000ea  20ca              MOVS     r0,#0xca              ;845
0000ec  6829              LDR      r1,[r5,#0]            ;845
0000ee  6248              STR      r0,[r1,#0x24]         ;845
0000f0  2053              MOVS     r0,#0x53              ;845
0000f2  6829              LDR      r1,[r5,#0]            ;845
0000f4  6248              STR      r0,[r1,#0x24]         ;845
0000f6  bf00              NOP                            ;845
0000f8  6828              LDR      r0,[r5,#0]            ;848
0000fa  6880              LDR      r0,[r0,#8]            ;848
0000fc  21ff              MOVS     r1,#0xff              ;848
0000fe  3101              ADDS     r1,#1                 ;848
000100  4388              BICS     r0,r0,r1              ;848
000102  6829              LDR      r1,[r5,#0]            ;848
000104  6088              STR      r0,[r1,#8]            ;848
000106  6828              LDR      r0,[r5,#0]            ;851
000108  6880              LDR      r0,[r0,#8]            ;851
00010a  2101              MOVS     r1,#1                 ;851
00010c  0309              LSLS     r1,r1,#12             ;851
00010e  4388              BICS     r0,r0,r1              ;851
000110  6829              LDR      r1,[r5,#0]            ;851
000112  6088              STR      r0,[r1,#8]            ;851
000114  f7fffffe          BL       HAL_GetTick
000118  4607              MOV      r7,r0                 ;853
00011a  e013              B        |L13.324|
                  |L13.284|
00011c  f7fffffe          BL       HAL_GetTick
000120  1bc0              SUBS     r0,r0,r7              ;857
000122  217d              MOVS     r1,#0x7d              ;857
000124  00c9              LSLS     r1,r1,#3              ;857
000126  4288              CMP      r0,r1                 ;857
000128  d90c              BLS      |L13.324|
00012a  bf00              NOP                            ;860
00012c  20ff              MOVS     r0,#0xff              ;860
00012e  6829              LDR      r1,[r5,#0]            ;860
000130  6248              STR      r0,[r1,#0x24]         ;860
000132  bf00              NOP                            ;860
000134  2003              MOVS     r0,#3                 ;862
000136  7768              STRB     r0,[r5,#0x1d]         ;862
000138  bf00              NOP                            ;865
00013a  2000              MOVS     r0,#0                 ;865
00013c  7728              STRB     r0,[r5,#0x1c]         ;865
00013e  bf00              NOP                            ;865
000140  2003              MOVS     r0,#3                 ;867
000142  e76a              B        |L13.26|
                  |L13.324|
000144  6828              LDR      r0,[r5,#0]            ;855
000146  68c0              LDR      r0,[r0,#0xc]          ;855
000148  07c0              LSLS     r0,r0,#31             ;855
00014a  0fc0              LSRS     r0,r0,#31             ;855
00014c  2800              CMP      r0,#0                 ;855
00014e  d0e5              BEQ      |L13.284|
000150  9801              LDR      r0,[sp,#4]            ;871
000152  6829              LDR      r1,[r5,#0]            ;871
000154  61c8              STR      r0,[r1,#0x1c]         ;871
000156  9800              LDR      r0,[sp,#0]            ;873
000158  6829              LDR      r1,[r5,#0]            ;873
00015a  6448              STR      r0,[r1,#0x44]         ;873
00015c  6828              LDR      r0,[r5,#0]            ;875
00015e  6880              LDR      r0,[r0,#8]            ;875
000160  21ff              MOVS     r1,#0xff              ;875
000162  3101              ADDS     r1,#1                 ;875
000164  4308              ORRS     r0,r0,r1              ;875
000166  6829              LDR      r1,[r5,#0]            ;875
000168  6088              STR      r0,[r1,#8]            ;875
00016a  bf00              NOP                            ;878
00016c  20ff              MOVS     r0,#0xff              ;878
00016e  6829              LDR      r1,[r5,#0]            ;878
000170  6248              STR      r0,[r1,#0x24]         ;878
000172  bf00              NOP                            ;878
000174  2001              MOVS     r0,#1                 ;881
000176  7768              STRB     r0,[r5,#0x1d]         ;881
000178  bf00              NOP                            ;884
00017a  2000              MOVS     r0,#0                 ;884
00017c  7728              STRB     r0,[r5,#0x1c]         ;884
00017e  bf00              NOP                            ;884
000180  bf00              NOP                            ;886
000182  e74a              B        |L13.26|
;;;888    
                          ENDP


                          AREA ||i.HAL_RTC_SetAlarm_IT||, CODE, READONLY, ALIGN=2

                  HAL_RTC_SetAlarm_IT PROC
;;;901      */
;;;902    HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
000000  b5fe              PUSH     {r1-r7,lr}
;;;903    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;904      uint32_t tickstart = 0U;
000008  2700              MOVS     r7,#0
;;;905      uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
00000e  9000              STR      r0,[sp,#0]
;;;906      
;;;907      /* Check the parameters */
;;;908      assert_param(IS_RTC_FORMAT(Format));
;;;909      assert_param(IS_RTC_ALARM(sAlarm->Alarm));
;;;910      assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
;;;911      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
;;;912      assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
;;;913      assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
;;;914          
;;;915      /* Process Locked */ 
;;;916      __HAL_LOCK(hrtc);
000010  bf00              NOP      
000012  7f20              LDRB     r0,[r4,#0x1c]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L14.28|
000018  2002              MOVS     r0,#2
                  |L14.26|
;;;917      
;;;918      hrtc->State = HAL_RTC_STATE_BUSY;
;;;919      
;;;920      if(Format == RTC_FORMAT_BIN)
;;;921      {
;;;922        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;923        {
;;;924          assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
;;;925          assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
;;;926        } 
;;;927        else
;;;928        {
;;;929          sAlarm->AlarmTime.TimeFormat = 0x00U;
;;;930          assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
;;;931        }
;;;932        assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
;;;933        assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
;;;934        
;;;935        if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
;;;936        {
;;;937          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
;;;938        }
;;;939        else
;;;940        {
;;;941          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
;;;942        }
;;;943        tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
;;;944                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
;;;945                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
;;;946                  ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
;;;947                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
;;;948                  ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
;;;949                  ((uint32_t)sAlarm->AlarmMask)); 
;;;950      }
;;;951      else
;;;952      {
;;;953        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;954        {
;;;955          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
;;;956          assert_param(IS_RTC_HOUR12(tmpreg));
;;;957          assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
;;;958        } 
;;;959        else
;;;960        {
;;;961          sAlarm->AlarmTime.TimeFormat = 0x00U;
;;;962          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
;;;963        }
;;;964        
;;;965        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
;;;966        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
;;;967        
;;;968        if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
;;;969        {
;;;970          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
;;;971          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
;;;972        }
;;;973        else
;;;974        {
;;;975          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
;;;976          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
;;;977        }
;;;978        tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
;;;979                  ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
;;;980                  ((uint32_t) sAlarm->AlarmTime.Seconds) | \
;;;981                  ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
;;;982                  ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
;;;983                  ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
;;;984                  ((uint32_t)sAlarm->AlarmMask));     
;;;985      }
;;;986      /* Configure the Alarm A Sub Second registers */
;;;987      subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
;;;988      
;;;989      /* Disable the write protection for RTC registers */
;;;990      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;991      
;;;992      /* Disable the Alarm A interrupt */
;;;993      __HAL_RTC_ALARMA_DISABLE(hrtc);
;;;994    
;;;995      /* Clear flag alarm A */
;;;996      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
;;;997    
;;;998      tickstart = HAL_GetTick();
;;;999      
;;;1000     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
;;;1001     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
;;;1002     {
;;;1003       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
;;;1004       {
;;;1005         /* Enable the write protection for RTC registers */
;;;1006         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1007           
;;;1008         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;1009           
;;;1010         /* Process Unlocked */ 
;;;1011         __HAL_UNLOCK(hrtc);
;;;1012           
;;;1013         return HAL_TIMEOUT;
;;;1014       }  
;;;1015     }
;;;1016       
;;;1017     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
;;;1018     /* Configure the Alarm A Sub Second register */
;;;1019     hrtc->Instance->ALRMASSR = subsecondtmpreg;
;;;1020     /* Configure the Alarm state: Enable Alarm */
;;;1021     __HAL_RTC_ALARMA_ENABLE(hrtc);
;;;1022     /* Configure the Alarm interrupt */
;;;1023     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
;;;1024   
;;;1025     /* RTC Alarm Interrupt Configuration: EXTI configuration */
;;;1026     __HAL_RTC_ALARM_EXTI_ENABLE_IT();
;;;1027     
;;;1028     __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
;;;1029     
;;;1030     /* Enable the write protection for RTC registers */
;;;1031     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;1032     
;;;1033     hrtc->State = HAL_RTC_STATE_READY; 
;;;1034     
;;;1035     /* Process Unlocked */ 
;;;1036     __HAL_UNLOCK(hrtc);  
;;;1037     
;;;1038     return HAL_OK;
;;;1039   }
00001a  bdfe              POP      {r1-r7,pc}
                  |L14.28|
00001c  2001              MOVS     r0,#1                 ;916
00001e  7720              STRB     r0,[r4,#0x1c]         ;916
000020  bf00              NOP                            ;916
000022  2002              MOVS     r0,#2                 ;918
000024  7760              STRB     r0,[r4,#0x1d]         ;918
000026  2e00              CMP      r6,#0                 ;920
000028  d12a              BNE      |L14.128|
00002a  6820              LDR      r0,[r4,#0]            ;922
00002c  6880              LDR      r0,[r0,#8]            ;922
00002e  2140              MOVS     r1,#0x40              ;922
000030  4008              ANDS     r0,r0,r1              ;922
000032  2800              CMP      r0,#0                 ;922
000034  d000              BEQ      |L14.56|
000036  e002              B        |L14.62|
                  |L14.56|
000038  2000              MOVS     r0,#0                 ;929
00003a  70e8              STRB     r0,[r5,#3]            ;929
00003c  bf00              NOP                            ;930
                  |L14.62|
00003e  69e8              LDR      r0,[r5,#0x1c]         ;935
000040  2800              CMP      r0,#0                 ;935
000042  d100              BNE      |L14.70|
000044  e000              B        |L14.72|
                  |L14.70|
000046  bf00              NOP                            ;941
                  |L14.72|
000048  7828              LDRB     r0,[r5,#0]            ;943
00004a  f7fffffe          BL       RTC_ByteToBcd2
00004e  0403              LSLS     r3,r0,#16             ;943
000050  7868              LDRB     r0,[r5,#1]            ;943
000052  f7fffffe          BL       RTC_ByteToBcd2
000056  0200              LSLS     r0,r0,#8              ;943
000058  4303              ORRS     r3,r3,r0              ;943
00005a  78a8              LDRB     r0,[r5,#2]            ;943
00005c  f7fffffe          BL       RTC_ByteToBcd2
000060  4303              ORRS     r3,r3,r0              ;943
000062  78e8              LDRB     r0,[r5,#3]            ;943
000064  0400              LSLS     r0,r0,#16             ;943
000066  4303              ORRS     r3,r3,r0              ;943
000068  2120              MOVS     r1,#0x20              ;943
00006a  5d48              LDRB     r0,[r1,r5]            ;943
00006c  f7fffffe          BL       RTC_ByteToBcd2
000070  0600              LSLS     r0,r0,#24             ;943
000072  4303              ORRS     r3,r3,r0              ;943
000074  69e8              LDR      r0,[r5,#0x1c]         ;943
000076  4303              ORRS     r3,r3,r0              ;943
000078  6968              LDR      r0,[r5,#0x14]         ;943
00007a  4303              ORRS     r3,r3,r0              ;943
00007c  9301              STR      r3,[sp,#4]            ;943
00007e  e02f              B        |L14.224|
                  |L14.128|
000080  6820              LDR      r0,[r4,#0]            ;953
000082  6880              LDR      r0,[r0,#8]            ;953
000084  2140              MOVS     r1,#0x40              ;953
000086  4008              ANDS     r0,r0,r1              ;953
000088  2800              CMP      r0,#0                 ;953
00008a  d004              BEQ      |L14.150|
00008c  7828              LDRB     r0,[r5,#0]            ;955
00008e  f7fffffe          BL       RTC_Bcd2ToByte
000092  9001              STR      r0,[sp,#4]            ;955
000094  e002              B        |L14.156|
                  |L14.150|
000096  2000              MOVS     r0,#0                 ;961
000098  70e8              STRB     r0,[r5,#3]            ;961
00009a  bf00              NOP                            ;962
                  |L14.156|
00009c  69e8              LDR      r0,[r5,#0x1c]         ;968
00009e  2800              CMP      r0,#0                 ;968
0000a0  d105              BNE      |L14.174|
0000a2  2120              MOVS     r1,#0x20              ;970
0000a4  5d48              LDRB     r0,[r1,r5]            ;970
0000a6  f7fffffe          BL       RTC_Bcd2ToByte
0000aa  9001              STR      r0,[sp,#4]            ;970
0000ac  e005              B        |L14.186|
                  |L14.174|
0000ae  2120              MOVS     r1,#0x20              ;975
0000b0  5d48              LDRB     r0,[r1,r5]            ;975
0000b2  f7fffffe          BL       RTC_Bcd2ToByte
0000b6  9001              STR      r0,[sp,#4]            ;975
0000b8  bf00              NOP                            ;976
                  |L14.186|
0000ba  7828              LDRB     r0,[r5,#0]            ;978
0000bc  0400              LSLS     r0,r0,#16             ;978
0000be  7869              LDRB     r1,[r5,#1]            ;978
0000c0  0209              LSLS     r1,r1,#8              ;978
0000c2  4308              ORRS     r0,r0,r1              ;978
0000c4  78a9              LDRB     r1,[r5,#2]            ;978
0000c6  4308              ORRS     r0,r0,r1              ;978
0000c8  78e9              LDRB     r1,[r5,#3]            ;978
0000ca  0409              LSLS     r1,r1,#16             ;978
0000cc  4308              ORRS     r0,r0,r1              ;978
0000ce  2120              MOVS     r1,#0x20              ;978
0000d0  5d49              LDRB     r1,[r1,r5]            ;978
0000d2  0609              LSLS     r1,r1,#24             ;978
0000d4  4308              ORRS     r0,r0,r1              ;978
0000d6  69e9              LDR      r1,[r5,#0x1c]         ;978
0000d8  4308              ORRS     r0,r0,r1              ;978
0000da  6969              LDR      r1,[r5,#0x14]         ;978
0000dc  4308              ORRS     r0,r0,r1              ;978
0000de  9001              STR      r0,[sp,#4]            ;978
                  |L14.224|
0000e0  69a9              LDR      r1,[r5,#0x18]         ;987
0000e2  6868              LDR      r0,[r5,#4]            ;987
0000e4  4308              ORRS     r0,r0,r1              ;987
0000e6  9000              STR      r0,[sp,#0]            ;987
0000e8  bf00              NOP                            ;990
0000ea  20ca              MOVS     r0,#0xca              ;990
0000ec  6821              LDR      r1,[r4,#0]            ;990
0000ee  6248              STR      r0,[r1,#0x24]         ;990
0000f0  2053              MOVS     r0,#0x53              ;990
0000f2  6821              LDR      r1,[r4,#0]            ;990
0000f4  6248              STR      r0,[r1,#0x24]         ;990
0000f6  bf00              NOP                            ;990
0000f8  6820              LDR      r0,[r4,#0]            ;993
0000fa  6880              LDR      r0,[r0,#8]            ;993
0000fc  21ff              MOVS     r1,#0xff              ;993
0000fe  3101              ADDS     r1,#1                 ;993
000100  4388              BICS     r0,r0,r1              ;993
000102  6821              LDR      r1,[r4,#0]            ;993
000104  6088              STR      r0,[r1,#8]            ;993
000106  6820              LDR      r0,[r4,#0]            ;996
000108  68c0              LDR      r0,[r0,#0xc]          ;996
00010a  2180              MOVS     r1,#0x80              ;996
00010c  4008              ANDS     r0,r0,r1              ;996
00010e  4928              LDR      r1,|L14.432|
000110  4308              ORRS     r0,r0,r1              ;996
000112  6821              LDR      r1,[r4,#0]            ;996
000114  60c8              STR      r0,[r1,#0xc]          ;996
000116  f7fffffe          BL       HAL_GetTick
00011a  4607              MOV      r7,r0                 ;998
00011c  e013              B        |L14.326|
                  |L14.286|
00011e  f7fffffe          BL       HAL_GetTick
000122  1bc0              SUBS     r0,r0,r7              ;1003
000124  217d              MOVS     r1,#0x7d              ;1003
000126  00c9              LSLS     r1,r1,#3              ;1003
000128  4288              CMP      r0,r1                 ;1003
00012a  d90c              BLS      |L14.326|
00012c  bf00              NOP                            ;1006
00012e  20ff              MOVS     r0,#0xff              ;1006
000130  6821              LDR      r1,[r4,#0]            ;1006
000132  6248              STR      r0,[r1,#0x24]         ;1006
000134  bf00              NOP                            ;1006
000136  2003              MOVS     r0,#3                 ;1008
000138  7760              STRB     r0,[r4,#0x1d]         ;1008
00013a  bf00              NOP                            ;1011
00013c  2000              MOVS     r0,#0                 ;1011
00013e  7720              STRB     r0,[r4,#0x1c]         ;1011
000140  bf00              NOP                            ;1011
000142  2003              MOVS     r0,#3                 ;1013
000144  e769              B        |L14.26|
                  |L14.326|
000146  6820              LDR      r0,[r4,#0]            ;1001
000148  68c0              LDR      r0,[r0,#0xc]          ;1001
00014a  07c0              LSLS     r0,r0,#31             ;1001
00014c  0fc0              LSRS     r0,r0,#31             ;1001
00014e  2800              CMP      r0,#0                 ;1001
000150  d0e5              BEQ      |L14.286|
000152  9801              LDR      r0,[sp,#4]            ;1017
000154  6821              LDR      r1,[r4,#0]            ;1017
000156  61c8              STR      r0,[r1,#0x1c]         ;1017
000158  9800              LDR      r0,[sp,#0]            ;1019
00015a  6821              LDR      r1,[r4,#0]            ;1019
00015c  6448              STR      r0,[r1,#0x44]         ;1019
00015e  6820              LDR      r0,[r4,#0]            ;1021
000160  6880              LDR      r0,[r0,#8]            ;1021
000162  21ff              MOVS     r1,#0xff              ;1021
000164  3101              ADDS     r1,#1                 ;1021
000166  4308              ORRS     r0,r0,r1              ;1021
000168  6821              LDR      r1,[r4,#0]            ;1021
00016a  6088              STR      r0,[r1,#8]            ;1021
00016c  6820              LDR      r0,[r4,#0]            ;1023
00016e  6880              LDR      r0,[r0,#8]            ;1023
000170  2101              MOVS     r1,#1                 ;1023
000172  0309              LSLS     r1,r1,#12             ;1023
000174  4308              ORRS     r0,r0,r1              ;1023
000176  6821              LDR      r1,[r4,#0]            ;1023
000178  6088              STR      r0,[r1,#8]            ;1023
00017a  480e              LDR      r0,|L14.436|
00017c  6800              LDR      r0,[r0,#0]            ;1026
00017e  2101              MOVS     r1,#1                 ;1026
000180  0449              LSLS     r1,r1,#17             ;1026
000182  4308              ORRS     r0,r0,r1              ;1026
000184  490b              LDR      r1,|L14.436|
000186  6008              STR      r0,[r1,#0]            ;1026
000188  4608              MOV      r0,r1                 ;1028
00018a  6880              LDR      r0,[r0,#8]            ;1028
00018c  2101              MOVS     r1,#1                 ;1028
00018e  0449              LSLS     r1,r1,#17             ;1028
000190  4308              ORRS     r0,r0,r1              ;1028
000192  4908              LDR      r1,|L14.436|
000194  6088              STR      r0,[r1,#8]            ;1028
000196  bf00              NOP                            ;1031
000198  20ff              MOVS     r0,#0xff              ;1031
00019a  6821              LDR      r1,[r4,#0]            ;1031
00019c  6248              STR      r0,[r1,#0x24]         ;1031
00019e  bf00              NOP                            ;1031
0001a0  2001              MOVS     r0,#1                 ;1033
0001a2  7760              STRB     r0,[r4,#0x1d]         ;1033
0001a4  bf00              NOP                            ;1036
0001a6  2000              MOVS     r0,#0                 ;1036
0001a8  7720              STRB     r0,[r4,#0x1c]         ;1036
0001aa  bf00              NOP                            ;1036
0001ac  bf00              NOP                            ;1038
0001ae  e734              B        |L14.26|
;;;1040   
                          ENDP

                  |L14.432|
                          DCD      0xfffffe7f
                  |L14.436|
                          DCD      0x40010400

                          AREA ||i.HAL_RTC_SetDate||, CODE, READONLY, ALIGN=2

                  HAL_RTC_SetDate PROC
;;;588      */
;;;589    HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
000000  b5f8              PUSH     {r3-r7,lr}
;;;590    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;591      uint32_t datetmpreg = 0U;
000008  2700              MOVS     r7,#0
;;;592      
;;;593     /* Check the parameters */
;;;594      assert_param(IS_RTC_FORMAT(Format));
;;;595      
;;;596     /* Process Locked */ 
;;;597     __HAL_LOCK(hrtc);
00000a  bf00              NOP      
00000c  7f20              LDRB     r0,[r4,#0x1c]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L15.22|
000012  2002              MOVS     r0,#2
                  |L15.20|
;;;598      
;;;599      hrtc->State = HAL_RTC_STATE_BUSY; 
;;;600      
;;;601      if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
;;;602      {
;;;603        sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
;;;604      }
;;;605      
;;;606      assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
;;;607      
;;;608      if(Format == RTC_FORMAT_BIN)
;;;609      {   
;;;610        assert_param(IS_RTC_YEAR(sDate->Year));
;;;611        assert_param(IS_RTC_MONTH(sDate->Month));
;;;612        assert_param(IS_RTC_DATE(sDate->Date)); 
;;;613        
;;;614       datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
;;;615                     ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
;;;616                     ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
;;;617                     ((uint32_t)sDate->WeekDay << 13U));   
;;;618      }
;;;619      else
;;;620      {   
;;;621        assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
;;;622        datetmpreg = RTC_Bcd2ToByte(sDate->Month);
;;;623        assert_param(IS_RTC_MONTH(datetmpreg));
;;;624        datetmpreg = RTC_Bcd2ToByte(sDate->Date);
;;;625        assert_param(IS_RTC_DATE(datetmpreg));
;;;626        
;;;627        datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
;;;628                      (((uint32_t)sDate->Month) << 8U) | \
;;;629                      ((uint32_t)sDate->Date) | \
;;;630                      (((uint32_t)sDate->WeekDay) << 13U));  
;;;631      }
;;;632    
;;;633      /* Disable the write protection for RTC registers */
;;;634      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;635      
;;;636      /* Set Initialization mode */
;;;637      if(RTC_EnterInitMode(hrtc) != HAL_OK)
;;;638      {
;;;639        /* Enable the write protection for RTC registers */
;;;640        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;641        
;;;642        /* Set RTC state*/
;;;643        hrtc->State = HAL_RTC_STATE_ERROR;
;;;644        
;;;645        /* Process Unlocked */ 
;;;646        __HAL_UNLOCK(hrtc);
;;;647        
;;;648        return HAL_ERROR;
;;;649      } 
;;;650      else
;;;651      {
;;;652        /* Set the RTC_DR register */
;;;653        hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
;;;654        
;;;655        /* Exit Initialization mode */
;;;656        hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
;;;657    
;;;658        /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
;;;659        if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
;;;660        {
;;;661          if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
;;;662          { 
;;;663            /* Enable the write protection for RTC registers */
;;;664            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;665            
;;;666            hrtc->State = HAL_RTC_STATE_ERROR;
;;;667            
;;;668            /* Process Unlocked */ 
;;;669            __HAL_UNLOCK(hrtc);
;;;670            
;;;671            return HAL_ERROR;
;;;672          }
;;;673        }
;;;674        
;;;675        /* Enable the write protection for RTC registers */
;;;676        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;677        
;;;678        hrtc->State = HAL_RTC_STATE_READY ;
;;;679        
;;;680        /* Process Unlocked */ 
;;;681        __HAL_UNLOCK(hrtc);
;;;682        
;;;683        return HAL_OK;    
;;;684      }
;;;685    }
000014  bdf8              POP      {r3-r7,pc}
                  |L15.22|
000016  2001              MOVS     r0,#1                 ;597
000018  7720              STRB     r0,[r4,#0x1c]         ;597
00001a  bf00              NOP                            ;597
00001c  2002              MOVS     r0,#2                 ;599
00001e  7760              STRB     r0,[r4,#0x1d]         ;599
000020  2e00              CMP      r6,#0                 ;601
000022  d109              BNE      |L15.56|
000024  7868              LDRB     r0,[r5,#1]            ;601
000026  2110              MOVS     r1,#0x10              ;601
000028  4008              ANDS     r0,r0,r1              ;601
00002a  2810              CMP      r0,#0x10              ;601
00002c  d104              BNE      |L15.56|
00002e  7868              LDRB     r0,[r5,#1]            ;603
000030  21ef              MOVS     r1,#0xef              ;603
000032  4008              ANDS     r0,r0,r1              ;603
000034  300a              ADDS     r0,r0,#0xa            ;603
000036  7068              STRB     r0,[r5,#1]            ;603
                  |L15.56|
000038  2e00              CMP      r6,#0                 ;608
00003a  d111              BNE      |L15.96|
00003c  78e8              LDRB     r0,[r5,#3]            ;614
00003e  f7fffffe          BL       RTC_ByteToBcd2
000042  0403              LSLS     r3,r0,#16             ;614
000044  7868              LDRB     r0,[r5,#1]            ;614
000046  f7fffffe          BL       RTC_ByteToBcd2
00004a  0200              LSLS     r0,r0,#8              ;614
00004c  4303              ORRS     r3,r3,r0              ;614
00004e  78a8              LDRB     r0,[r5,#2]            ;614
000050  f7fffffe          BL       RTC_ByteToBcd2
000054  4303              ORRS     r3,r3,r0              ;614
000056  7828              LDRB     r0,[r5,#0]            ;614
000058  0340              LSLS     r0,r0,#13             ;614
00005a  4303              ORRS     r3,r3,r0              ;614
00005c  461f              MOV      r7,r3                 ;614
00005e  e012              B        |L15.134|
                  |L15.96|
000060  7868              LDRB     r0,[r5,#1]            ;622
000062  f7fffffe          BL       RTC_Bcd2ToByte
000066  4607              MOV      r7,r0                 ;622
000068  78a8              LDRB     r0,[r5,#2]            ;624
00006a  f7fffffe          BL       RTC_Bcd2ToByte
00006e  4607              MOV      r7,r0                 ;624
000070  78e8              LDRB     r0,[r5,#3]            ;627
000072  0400              LSLS     r0,r0,#16             ;627
000074  7869              LDRB     r1,[r5,#1]            ;627
000076  0209              LSLS     r1,r1,#8              ;627
000078  4308              ORRS     r0,r0,r1              ;627
00007a  78a9              LDRB     r1,[r5,#2]            ;627
00007c  4308              ORRS     r0,r0,r1              ;627
00007e  7829              LDRB     r1,[r5,#0]            ;627
000080  0349              LSLS     r1,r1,#13             ;627
000082  4308              ORRS     r0,r0,r1              ;627
000084  4607              MOV      r7,r0                 ;627
                  |L15.134|
000086  bf00              NOP                            ;634
000088  20ca              MOVS     r0,#0xca              ;634
00008a  6821              LDR      r1,[r4,#0]            ;634
00008c  6248              STR      r0,[r1,#0x24]         ;634
00008e  2053              MOVS     r0,#0x53              ;634
000090  6821              LDR      r1,[r4,#0]            ;634
000092  6248              STR      r0,[r1,#0x24]         ;634
000094  bf00              NOP                            ;634
000096  4620              MOV      r0,r4                 ;637
000098  f7fffffe          BL       RTC_EnterInitMode
00009c  2800              CMP      r0,#0                 ;637
00009e  d00c              BEQ      |L15.186|
0000a0  bf00              NOP                            ;640
0000a2  20ff              MOVS     r0,#0xff              ;640
0000a4  6821              LDR      r1,[r4,#0]            ;640
0000a6  6248              STR      r0,[r1,#0x24]         ;640
0000a8  bf00              NOP                            ;640
0000aa  2004              MOVS     r0,#4                 ;643
0000ac  7760              STRB     r0,[r4,#0x1d]         ;643
0000ae  bf00              NOP                            ;646
0000b0  2000              MOVS     r0,#0                 ;646
0000b2  7720              STRB     r0,[r4,#0x1c]         ;646
0000b4  bf00              NOP                            ;646
0000b6  2001              MOVS     r0,#1                 ;648
0000b8  e7ac              B        |L15.20|
                  |L15.186|
0000ba  4817              LDR      r0,|L15.280|
0000bc  4038              ANDS     r0,r0,r7              ;653
0000be  6821              LDR      r1,[r4,#0]            ;653
0000c0  6048              STR      r0,[r1,#4]            ;653
0000c2  6820              LDR      r0,[r4,#0]            ;656
0000c4  68c0              LDR      r0,[r0,#0xc]          ;656
0000c6  2180              MOVS     r1,#0x80              ;656
0000c8  4388              BICS     r0,r0,r1              ;656
0000ca  6821              LDR      r1,[r4,#0]            ;656
0000cc  60c8              STR      r0,[r1,#0xc]          ;656
0000ce  6820              LDR      r0,[r4,#0]            ;659
0000d0  6880              LDR      r0,[r0,#8]            ;659
0000d2  2120              MOVS     r1,#0x20              ;659
0000d4  4008              ANDS     r0,r0,r1              ;659
0000d6  2800              CMP      r0,#0                 ;659
0000d8  d111              BNE      |L15.254|
0000da  4620              MOV      r0,r4                 ;661
0000dc  f7fffffe          BL       HAL_RTC_WaitForSynchro
0000e0  2800              CMP      r0,#0                 ;661
0000e2  d00c              BEQ      |L15.254|
0000e4  bf00              NOP                            ;664
0000e6  20ff              MOVS     r0,#0xff              ;664
0000e8  6821              LDR      r1,[r4,#0]            ;664
0000ea  6248              STR      r0,[r1,#0x24]         ;664
0000ec  bf00              NOP                            ;664
0000ee  2004              MOVS     r0,#4                 ;666
0000f0  7760              STRB     r0,[r4,#0x1d]         ;666
0000f2  bf00              NOP                            ;669
0000f4  2000              MOVS     r0,#0                 ;669
0000f6  7720              STRB     r0,[r4,#0x1c]         ;669
0000f8  bf00              NOP                            ;669
0000fa  2001              MOVS     r0,#1                 ;671
0000fc  e78a              B        |L15.20|
                  |L15.254|
0000fe  bf00              NOP                            ;676
000100  20ff              MOVS     r0,#0xff              ;676
000102  6821              LDR      r1,[r4,#0]            ;676
000104  6248              STR      r0,[r1,#0x24]         ;676
000106  bf00              NOP                            ;676
000108  2001              MOVS     r0,#1                 ;678
00010a  7760              STRB     r0,[r4,#0x1d]         ;678
00010c  bf00              NOP                            ;681
00010e  2000              MOVS     r0,#0                 ;681
000110  7720              STRB     r0,[r4,#0x1c]         ;681
000112  bf00              NOP                            ;681
000114  bf00              NOP                            ;683
000116  e77d              B        |L15.20|
;;;686    
                          ENDP

                  |L15.280|
                          DCD      0x00ffff3f

                          AREA ||i.HAL_RTC_SetTime||, CODE, READONLY, ALIGN=2

                  HAL_RTC_SetTime PROC
;;;409      */
;;;410    HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
000000  b5f8              PUSH     {r3-r7,lr}
;;;411    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;412      uint32_t tmpreg = 0U;
000008  2700              MOVS     r7,#0
;;;413      
;;;414     /* Check the parameters */
;;;415      assert_param(IS_RTC_FORMAT(Format));
;;;416      assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
;;;417      assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
;;;418      
;;;419      /* Process Locked */ 
;;;420      __HAL_LOCK(hrtc);
00000a  bf00              NOP      
00000c  7f20              LDRB     r0,[r4,#0x1c]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L16.22|
000012  2002              MOVS     r0,#2
                  |L16.20|
;;;421      
;;;422      hrtc->State = HAL_RTC_STATE_BUSY;
;;;423      
;;;424      if(Format == RTC_FORMAT_BIN)
;;;425      {
;;;426        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;427        {
;;;428          assert_param(IS_RTC_HOUR12(sTime->Hours));
;;;429          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
;;;430        } 
;;;431        else
;;;432        {
;;;433          sTime->TimeFormat = 0x00U;
;;;434          assert_param(IS_RTC_HOUR24(sTime->Hours));
;;;435        }
;;;436        assert_param(IS_RTC_MINUTES(sTime->Minutes));
;;;437        assert_param(IS_RTC_SECONDS(sTime->Seconds));
;;;438        
;;;439        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
;;;440                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
;;;441                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
;;;442                            (((uint32_t)sTime->TimeFormat) << 16U));  
;;;443      }
;;;444      else
;;;445      {
;;;446        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;447        {
;;;448          tmpreg = RTC_Bcd2ToByte(sTime->Hours);
;;;449          assert_param(IS_RTC_HOUR12(tmpreg));
;;;450          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
;;;451        } 
;;;452        else
;;;453        {
;;;454          sTime->TimeFormat = 0x00U;
;;;455          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
;;;456        }
;;;457        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
;;;458        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
;;;459        tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
;;;460                  ((uint32_t)(sTime->Minutes) << 8U) | \
;;;461                  ((uint32_t)sTime->Seconds) | \
;;;462                  ((uint32_t)(sTime->TimeFormat) << 16U));   
;;;463      }
;;;464      
;;;465      /* Disable the write protection for RTC registers */
;;;466      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;467      
;;;468      /* Set Initialization mode */
;;;469      if(RTC_EnterInitMode(hrtc) != HAL_OK)
;;;470      {
;;;471        /* Enable the write protection for RTC registers */
;;;472        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;473        
;;;474        /* Set RTC state */
;;;475        hrtc->State = HAL_RTC_STATE_ERROR;
;;;476        
;;;477        /* Process Unlocked */ 
;;;478        __HAL_UNLOCK(hrtc);
;;;479        
;;;480        return HAL_ERROR;
;;;481      } 
;;;482      else
;;;483      {
;;;484        /* Set the RTC_TR register */
;;;485        hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
;;;486         
;;;487        /* Clear the bits to be configured */
;;;488        hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
;;;489    
;;;490        /* Configure the RTC_CR register */
;;;491        hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
;;;492        
;;;493        /* Exit Initialization mode */
;;;494        hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
;;;495    
;;;496        /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
;;;497        if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
;;;498        {
;;;499          if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
;;;500          {        
;;;501            /* Enable the write protection for RTC registers */
;;;502            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;503            
;;;504            hrtc->State = HAL_RTC_STATE_ERROR;
;;;505            
;;;506            /* Process Unlocked */ 
;;;507            __HAL_UNLOCK(hrtc);
;;;508            
;;;509            return HAL_ERROR;
;;;510          }
;;;511        }
;;;512        
;;;513        /* Enable the write protection for RTC registers */
;;;514        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;515        
;;;516       hrtc->State = HAL_RTC_STATE_READY;
;;;517      
;;;518       __HAL_UNLOCK(hrtc); 
;;;519         
;;;520       return HAL_OK;
;;;521      }
;;;522    }
000014  bdf8              POP      {r3-r7,pc}
                  |L16.22|
000016  2001              MOVS     r0,#1                 ;420
000018  7720              STRB     r0,[r4,#0x1c]         ;420
00001a  bf00              NOP                            ;420
00001c  2002              MOVS     r0,#2                 ;422
00001e  7760              STRB     r0,[r4,#0x1d]         ;422
000020  2e00              CMP      r6,#0                 ;424
000022  d11b              BNE      |L16.92|
000024  6820              LDR      r0,[r4,#0]            ;426
000026  6880              LDR      r0,[r0,#8]            ;426
000028  2140              MOVS     r1,#0x40              ;426
00002a  4008              ANDS     r0,r0,r1              ;426
00002c  2800              CMP      r0,#0                 ;426
00002e  d000              BEQ      |L16.50|
000030  e002              B        |L16.56|
                  |L16.50|
000032  2000              MOVS     r0,#0                 ;433
000034  70e8              STRB     r0,[r5,#3]            ;433
000036  bf00              NOP                            ;434
                  |L16.56|
000038  7828              LDRB     r0,[r5,#0]            ;439
00003a  f7fffffe          BL       RTC_ByteToBcd2
00003e  0403              LSLS     r3,r0,#16             ;439
000040  7868              LDRB     r0,[r5,#1]            ;439
000042  f7fffffe          BL       RTC_ByteToBcd2
000046  0200              LSLS     r0,r0,#8              ;439
000048  4303              ORRS     r3,r3,r0              ;439
00004a  78a8              LDRB     r0,[r5,#2]            ;439
00004c  f7fffffe          BL       RTC_ByteToBcd2
000050  4303              ORRS     r3,r3,r0              ;439
000052  78e8              LDRB     r0,[r5,#3]            ;439
000054  0400              LSLS     r0,r0,#16             ;439
000056  4303              ORRS     r3,r3,r0              ;439
000058  461f              MOV      r7,r3                 ;439
00005a  e018              B        |L16.142|
                  |L16.92|
00005c  6820              LDR      r0,[r4,#0]            ;446
00005e  6880              LDR      r0,[r0,#8]            ;446
000060  2140              MOVS     r1,#0x40              ;446
000062  4008              ANDS     r0,r0,r1              ;446
000064  2800              CMP      r0,#0                 ;446
000066  d004              BEQ      |L16.114|
000068  7828              LDRB     r0,[r5,#0]            ;448
00006a  f7fffffe          BL       RTC_Bcd2ToByte
00006e  4607              MOV      r7,r0                 ;448
000070  e002              B        |L16.120|
                  |L16.114|
000072  2000              MOVS     r0,#0                 ;454
000074  70e8              STRB     r0,[r5,#3]            ;454
000076  bf00              NOP                            ;455
                  |L16.120|
000078  7828              LDRB     r0,[r5,#0]            ;459
00007a  0400              LSLS     r0,r0,#16             ;459
00007c  7869              LDRB     r1,[r5,#1]            ;459
00007e  0209              LSLS     r1,r1,#8              ;459
000080  4308              ORRS     r0,r0,r1              ;459
000082  78a9              LDRB     r1,[r5,#2]            ;459
000084  4308              ORRS     r0,r0,r1              ;459
000086  78e9              LDRB     r1,[r5,#3]            ;459
000088  0409              LSLS     r1,r1,#16             ;459
00008a  4308              ORRS     r0,r0,r1              ;459
00008c  4607              MOV      r7,r0                 ;459
                  |L16.142|
00008e  bf00              NOP                            ;466
000090  20ca              MOVS     r0,#0xca              ;466
000092  6821              LDR      r1,[r4,#0]            ;466
000094  6248              STR      r0,[r1,#0x24]         ;466
000096  2053              MOVS     r0,#0x53              ;466
000098  6821              LDR      r1,[r4,#0]            ;466
00009a  6248              STR      r0,[r1,#0x24]         ;466
00009c  bf00              NOP                            ;466
00009e  4620              MOV      r0,r4                 ;469
0000a0  f7fffffe          BL       RTC_EnterInitMode
0000a4  2800              CMP      r0,#0                 ;469
0000a6  d00c              BEQ      |L16.194|
0000a8  bf00              NOP                            ;472
0000aa  20ff              MOVS     r0,#0xff              ;472
0000ac  6821              LDR      r1,[r4,#0]            ;472
0000ae  6248              STR      r0,[r1,#0x24]         ;472
0000b0  bf00              NOP                            ;472
0000b2  2004              MOVS     r0,#4                 ;475
0000b4  7760              STRB     r0,[r4,#0x1d]         ;475
0000b6  bf00              NOP                            ;478
0000b8  2000              MOVS     r0,#0                 ;478
0000ba  7720              STRB     r0,[r4,#0x1c]         ;478
0000bc  bf00              NOP                            ;478
0000be  2001              MOVS     r0,#1                 ;480
0000c0  e7a8              B        |L16.20|
                  |L16.194|
0000c2  481f              LDR      r0,|L16.320|
0000c4  4038              ANDS     r0,r0,r7              ;485
0000c6  6821              LDR      r1,[r4,#0]            ;485
0000c8  6008              STR      r0,[r1,#0]            ;485
0000ca  6820              LDR      r0,[r4,#0]            ;488
0000cc  6880              LDR      r0,[r0,#8]            ;488
0000ce  2101              MOVS     r1,#1                 ;488
0000d0  0489              LSLS     r1,r1,#18             ;488
0000d2  4388              BICS     r0,r0,r1              ;488
0000d4  6821              LDR      r1,[r4,#0]            ;488
0000d6  6088              STR      r0,[r1,#8]            ;488
0000d8  6929              LDR      r1,[r5,#0x10]         ;491
0000da  68e8              LDR      r0,[r5,#0xc]          ;491
0000dc  4308              ORRS     r0,r0,r1              ;491
0000de  6821              LDR      r1,[r4,#0]            ;491
0000e0  6889              LDR      r1,[r1,#8]            ;491
0000e2  4308              ORRS     r0,r0,r1              ;491
0000e4  6821              LDR      r1,[r4,#0]            ;491
0000e6  6088              STR      r0,[r1,#8]            ;491
0000e8  6820              LDR      r0,[r4,#0]            ;494
0000ea  68c0              LDR      r0,[r0,#0xc]          ;494
0000ec  2180              MOVS     r1,#0x80              ;494
0000ee  4388              BICS     r0,r0,r1              ;494
0000f0  6821              LDR      r1,[r4,#0]            ;494
0000f2  60c8              STR      r0,[r1,#0xc]          ;494
0000f4  6820              LDR      r0,[r4,#0]            ;497
0000f6  6880              LDR      r0,[r0,#8]            ;497
0000f8  2120              MOVS     r1,#0x20              ;497
0000fa  4008              ANDS     r0,r0,r1              ;497
0000fc  2800              CMP      r0,#0                 ;497
0000fe  d111              BNE      |L16.292|
000100  4620              MOV      r0,r4                 ;499
000102  f7fffffe          BL       HAL_RTC_WaitForSynchro
000106  2800              CMP      r0,#0                 ;499
000108  d00c              BEQ      |L16.292|
00010a  bf00              NOP                            ;502
00010c  20ff              MOVS     r0,#0xff              ;502
00010e  6821              LDR      r1,[r4,#0]            ;502
000110  6248              STR      r0,[r1,#0x24]         ;502
000112  bf00              NOP                            ;502
000114  2004              MOVS     r0,#4                 ;504
000116  7760              STRB     r0,[r4,#0x1d]         ;504
000118  bf00              NOP                            ;507
00011a  2000              MOVS     r0,#0                 ;507
00011c  7720              STRB     r0,[r4,#0x1c]         ;507
00011e  bf00              NOP                            ;507
000120  2001              MOVS     r0,#1                 ;509
000122  e777              B        |L16.20|
                  |L16.292|
000124  bf00              NOP                            ;514
000126  20ff              MOVS     r0,#0xff              ;514
000128  6821              LDR      r1,[r4,#0]            ;514
00012a  6248              STR      r0,[r1,#0x24]         ;514
00012c  bf00              NOP                            ;514
00012e  2001              MOVS     r0,#1                 ;516
000130  7760              STRB     r0,[r4,#0x1d]         ;516
000132  bf00              NOP                            ;518
000134  2000              MOVS     r0,#0                 ;518
000136  7720              STRB     r0,[r4,#0x1c]         ;518
000138  bf00              NOP                            ;518
00013a  bf00              NOP                            ;520
00013c  e76a              B        |L16.20|
;;;523    
                          ENDP

00013e  0000              DCW      0x0000
                  |L16.320|
                          DCD      0x007f7f7f

                          AREA ||i.HAL_RTC_WaitForSynchro||, CODE, READONLY, ALIGN=1

                  HAL_RTC_WaitForSynchro PROC
;;;1252     */
;;;1253   HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
000000  b570              PUSH     {r4-r6,lr}
;;;1254   {
000002  4604              MOV      r4,r0
;;;1255     uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;1256   
;;;1257     /* Clear RSF flag */
;;;1258     hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  21a0              MOVS     r1,#0xa0
00000c  4388              BICS     r0,r0,r1
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1259   
;;;1260     tickstart = HAL_GetTick();
000012  f7fffffe          BL       HAL_GetTick
000016  4605              MOV      r5,r0
;;;1261   
;;;1262     /* Wait the registers to be synchronised */
;;;1263     while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
000018  e008              B        |L17.44|
                  |L17.26|
;;;1264     {
;;;1265       if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
00001a  f7fffffe          BL       HAL_GetTick
00001e  1b40              SUBS     r0,r0,r5
000020  217d              MOVS     r1,#0x7d
000022  00c9              LSLS     r1,r1,#3
000024  4288              CMP      r0,r1
000026  d901              BLS      |L17.44|
;;;1266       {       
;;;1267         return HAL_TIMEOUT;
000028  2003              MOVS     r0,#3
                  |L17.42|
;;;1268       } 
;;;1269     }
;;;1270   
;;;1271     return HAL_OK;
;;;1272   }
00002a  bd70              POP      {r4-r6,pc}
                  |L17.44|
00002c  6820              LDR      r0,[r4,#0]            ;1263
00002e  68c0              LDR      r0,[r0,#0xc]          ;1263
000030  2120              MOVS     r1,#0x20              ;1263
000032  4008              ANDS     r0,r0,r1              ;1263
000034  2800              CMP      r0,#0                 ;1263
000036  d0f0              BEQ      |L17.26|
000038  2000              MOVS     r0,#0                 ;1271
00003a  e7f6              B        |L17.42|
;;;1273   
                          ENDP


                          AREA ||i.RTC_Bcd2ToByte||, CODE, READONLY, ALIGN=1

                  RTC_Bcd2ToByte PROC
;;;1369     */
;;;1370   uint8_t RTC_Bcd2ToByte(uint8_t Value)
000000  4601              MOV      r1,r0
;;;1371   {
;;;1372     uint32_t tmp = 0U;
000002  bf00              NOP      
;;;1373     tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
000004  20f0              MOVS     r0,#0xf0
000006  4008              ANDS     r0,r0,r1
000008  1100              ASRS     r0,r0,#4
00000a  230a              MOVS     r3,#0xa
00000c  4358              MULS     r0,r3,r0
00000e  4602              MOV      r2,r0
;;;1374     return (tmp + (Value & (uint8_t)0x0FU));
000010  0708              LSLS     r0,r1,#28
000012  0f00              LSRS     r0,r0,#28
000014  1880              ADDS     r0,r0,r2
000016  b2c0              UXTB     r0,r0
;;;1375   }
000018  4770              BX       lr
;;;1376   /**
                          ENDP


                          AREA ||i.RTC_ByteToBcd2||, CODE, READONLY, ALIGN=1

                  RTC_ByteToBcd2 PROC
;;;1351     */
;;;1352   uint8_t RTC_ByteToBcd2(uint8_t Value)
000000  4601              MOV      r1,r0
;;;1353   {
;;;1354     uint32_t bcdhigh = 0U;
000002  2200              MOVS     r2,#0
;;;1355     
;;;1356     while(Value >= 10U)
000004  e003              B        |L19.14|
                  |L19.6|
;;;1357     {
;;;1358       bcdhigh++;
000006  1c52              ADDS     r2,r2,#1
;;;1359       Value -= 10U;
000008  4608              MOV      r0,r1
00000a  380a              SUBS     r0,r0,#0xa
00000c  b2c1              UXTB     r1,r0
                  |L19.14|
00000e  290a              CMP      r1,#0xa               ;1356
000010  d2f9              BCS      |L19.6|
;;;1360     }
;;;1361     
;;;1362     return  ((uint8_t)(bcdhigh << 4U) | Value);
000012  0710              LSLS     r0,r2,#28
000014  0e00              LSRS     r0,r0,#24
000016  4308              ORRS     r0,r0,r1
;;;1363   }
000018  4770              BX       lr
;;;1364   
                          ENDP


                          AREA ||i.RTC_EnterInitMode||, CODE, READONLY, ALIGN=1

                  RTC_EnterInitMode PROC
;;;1320     */
;;;1321   HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
000000  b570              PUSH     {r4-r6,lr}
;;;1322   {
000002  4604              MOV      r4,r0
;;;1323     uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;1324     
;;;1325     /* Check if the Initialization mode is set */
;;;1326     if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  2140              MOVS     r1,#0x40
00000c  4008              ANDS     r0,r0,r1
00000e  2800              CMP      r0,#0
000010  d115              BNE      |L20.62|
;;;1327     {
;;;1328       /* Set the Initialization mode */
;;;1329       hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
000012  1e40              SUBS     r0,r0,#1
000014  6821              LDR      r1,[r4,#0]
000016  60c8              STR      r0,[r1,#0xc]
;;;1330       
;;;1331       tickstart = HAL_GetTick();
000018  f7fffffe          BL       HAL_GetTick
00001c  4605              MOV      r5,r0
;;;1332       
;;;1333       /* Wait till RTC is in INIT state and if Time out is reached exit */
;;;1334       while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
00001e  e008              B        |L20.50|
                  |L20.32|
;;;1335       {
;;;1336         if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
000020  f7fffffe          BL       HAL_GetTick
000024  1b40              SUBS     r0,r0,r5
000026  217d              MOVS     r1,#0x7d
000028  00c9              LSLS     r1,r1,#3
00002a  4288              CMP      r0,r1
00002c  d901              BLS      |L20.50|
;;;1337         {       
;;;1338           return HAL_TIMEOUT;
00002e  2003              MOVS     r0,#3
                  |L20.48|
;;;1339         } 
;;;1340       }
;;;1341     }
;;;1342     
;;;1343     return HAL_OK;  
;;;1344   }
000030  bd70              POP      {r4-r6,pc}
                  |L20.50|
000032  6820              LDR      r0,[r4,#0]            ;1334
000034  68c0              LDR      r0,[r0,#0xc]          ;1334
000036  2140              MOVS     r1,#0x40              ;1334
000038  4008              ANDS     r0,r0,r1              ;1334
00003a  2800              CMP      r0,#0                 ;1334
00003c  d0f0              BEQ      |L20.32|
                  |L20.62|
00003e  2000              MOVS     r0,#0                 ;1343
000040  e7f6              B        |L20.48|
;;;1345   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_rtc_c_c7052556____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f0xx_hal_rtc_c_c7052556____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_rtc_c_c7052556____REVSH|
#line 402
|__asm___19_stm32f0xx_hal_rtc_c_c7052556____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
