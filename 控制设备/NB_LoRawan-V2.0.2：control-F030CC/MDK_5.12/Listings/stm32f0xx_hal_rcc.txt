; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_rcc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_rcc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_rcc.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1307     */
;;;1308   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1309   {
;;;1310     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1311       the HAL_RCC_CSSCallback could be implemented in the user file
;;;1312       */ 
;;;1313   }
;;;1314   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;724      */
;;;725    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;726    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;727      uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;728      
;;;729      /* Check the parameters */
;;;730      assert_param(RCC_ClkInitStruct != NULL);
;;;731      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;732      assert_param(IS_FLASH_LATENCY(FLatency));
;;;733    
;;;734      /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
;;;735      must be correctly programmed according to the frequency of the CPU clock 
;;;736        (HCLK) of the device. */
;;;737    
;;;738      /* Increasing the number of wait states because of higher CPU frequency */
;;;739      if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
000008  485d              LDR      r0,|L2.384|
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  0fc0              LSRS     r0,r0,#31
000010  42a8              CMP      r0,r5
000012  d20e              BCS      |L2.50|
;;;740      {    
;;;741        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;742        __HAL_FLASH_SET_LATENCY(FLatency);
000014  485a              LDR      r0,|L2.384|
000016  6800              LDR      r0,[r0,#0]
000018  0840              LSRS     r0,r0,#1
00001a  0040              LSLS     r0,r0,#1
00001c  4328              ORRS     r0,r0,r5
00001e  4958              LDR      r1,|L2.384|
000020  6008              STR      r0,[r1,#0]
;;;743        
;;;744        /* Check that the new number of wait states is taken into account to access the Flash
;;;745        memory by reading the FLASH_ACR register */
;;;746        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
000022  4608              MOV      r0,r1
000024  6800              LDR      r0,[r0,#0]
000026  07c0              LSLS     r0,r0,#31
000028  0fc0              LSRS     r0,r0,#31
00002a  42a8              CMP      r0,r5
00002c  d001              BEQ      |L2.50|
;;;747        {
;;;748          return HAL_ERROR;
00002e  2001              MOVS     r0,#1
                  |L2.48|
;;;749        }
;;;750      }
;;;751    
;;;752      /*-------------------------- HCLK Configuration --------------------------*/
;;;753      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;754      {
;;;755        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;756        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;757      }
;;;758    
;;;759      /*------------------------- SYSCLK Configuration ---------------------------*/ 
;;;760      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;761      {    
;;;762        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;763        
;;;764        /* HSE is selected as System Clock Source */
;;;765        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;766        {
;;;767          /* Check the HSE ready flag */  
;;;768          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;769          {
;;;770            return HAL_ERROR;
;;;771          }
;;;772        }
;;;773        /* PLL is selected as System Clock Source */
;;;774        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;775        {
;;;776          /* Check the PLL ready flag */  
;;;777          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;778          {
;;;779            return HAL_ERROR;
;;;780          }
;;;781        }
;;;782    #if defined(RCC_CFGR_SWS_HSI48)
;;;783        /* HSI48 is selected as System Clock Source */
;;;784        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
;;;785        {
;;;786          /* Check the HSI48 ready flag */
;;;787          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
;;;788          {
;;;789            return HAL_ERROR;
;;;790          }
;;;791        }
;;;792    #endif /* RCC_CFGR_SWS_HSI48 */
;;;793        /* HSI is selected as System Clock Source */
;;;794        else
;;;795        {
;;;796          /* Check the HSI ready flag */  
;;;797          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;798          {
;;;799            return HAL_ERROR;
;;;800          }
;;;801        }
;;;802        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;803    
;;;804        /* Get Start Tick */
;;;805        tickstart = HAL_GetTick();
;;;806        
;;;807        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;808        {
;;;809          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;810          {
;;;811            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;812            {
;;;813              return HAL_TIMEOUT;
;;;814            }
;;;815          }
;;;816        }
;;;817        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;818        {
;;;819          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;820          {
;;;821            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;822            {
;;;823              return HAL_TIMEOUT;
;;;824            }
;;;825          }
;;;826        }
;;;827    #if defined(RCC_CFGR_SWS_HSI48)
;;;828        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
;;;829        {
;;;830          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
;;;831          {
;;;832            if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;833            {
;;;834              return HAL_TIMEOUT;
;;;835            }
;;;836          }
;;;837        }
;;;838    #endif /* RCC_CFGR_SWS_HSI48 */
;;;839        else
;;;840        {
;;;841          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;842          {
;;;843            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;844            {
;;;845              return HAL_TIMEOUT;
;;;846            }
;;;847          }
;;;848        }      
;;;849      }    
;;;850      /* Decreasing the number of wait states because of lower CPU frequency */
;;;851      if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
;;;852      {    
;;;853        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;854        __HAL_FLASH_SET_LATENCY(FLatency);
;;;855        
;;;856        /* Check that the new number of wait states is taken into account to access the Flash
;;;857        memory by reading the FLASH_ACR register */
;;;858        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;859        {
;;;860          return HAL_ERROR;
;;;861        }
;;;862      }    
;;;863    
;;;864      /*-------------------------- PCLK1 Configuration ---------------------------*/ 
;;;865      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;866      {
;;;867        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;868        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
;;;869      }
;;;870      
;;;871      /* Update the SystemCoreClock global variable */
;;;872      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
;;;873    
;;;874      /* Configure the source of time base considering new system clocks settings*/
;;;875      HAL_InitTick (TICK_INT_PRIORITY);
;;;876      
;;;877      return HAL_OK;
;;;878    }
000030  bd70              POP      {r4-r6,pc}
                  |L2.50|
000032  2102              MOVS     r1,#2                 ;753
000034  6820              LDR      r0,[r4,#0]            ;753
000036  4008              ANDS     r0,r0,r1              ;753
000038  2802              CMP      r0,#2                 ;753
00003a  d107              BNE      |L2.76|
00003c  4851              LDR      r0,|L2.388|
00003e  6840              LDR      r0,[r0,#4]            ;756
000040  21f0              MOVS     r1,#0xf0              ;756
000042  4388              BICS     r0,r0,r1              ;756
000044  68a1              LDR      r1,[r4,#8]            ;756
000046  4308              ORRS     r0,r0,r1              ;756
000048  494e              LDR      r1,|L2.388|
00004a  6048              STR      r0,[r1,#4]            ;756
                  |L2.76|
00004c  7820              LDRB     r0,[r4,#0]            ;760
00004e  07c0              LSLS     r0,r0,#31             ;760
000050  0fc0              LSRS     r0,r0,#31             ;760
000052  2800              CMP      r0,#0                 ;760
000054  d05f              BEQ      |L2.278|
000056  6860              LDR      r0,[r4,#4]            ;765
000058  2801              CMP      r0,#1                 ;765
00005a  d108              BNE      |L2.110|
00005c  4849              LDR      r0,|L2.388|
00005e  6800              LDR      r0,[r0,#0]            ;768
000060  2101              MOVS     r1,#1                 ;768
000062  0449              LSLS     r1,r1,#17             ;768
000064  4008              ANDS     r0,r0,r1              ;768
000066  2800              CMP      r0,#0                 ;768
000068  d115              BNE      |L2.150|
00006a  2001              MOVS     r0,#1                 ;770
00006c  e7e0              B        |L2.48|
                  |L2.110|
00006e  6860              LDR      r0,[r4,#4]            ;774
000070  2802              CMP      r0,#2                 ;774
000072  d108              BNE      |L2.134|
000074  4843              LDR      r0,|L2.388|
000076  6800              LDR      r0,[r0,#0]            ;777
000078  2101              MOVS     r1,#1                 ;777
00007a  0649              LSLS     r1,r1,#25             ;777
00007c  4008              ANDS     r0,r0,r1              ;777
00007e  2800              CMP      r0,#0                 ;777
000080  d109              BNE      |L2.150|
000082  2001              MOVS     r0,#1                 ;779
000084  e7d4              B        |L2.48|
                  |L2.134|
000086  483f              LDR      r0,|L2.388|
000088  6800              LDR      r0,[r0,#0]            ;797
00008a  2102              MOVS     r1,#2                 ;797
00008c  4008              ANDS     r0,r0,r1              ;797
00008e  2800              CMP      r0,#0                 ;797
000090  d101              BNE      |L2.150|
000092  2001              MOVS     r0,#1                 ;799
000094  e7cc              B        |L2.48|
                  |L2.150|
000096  483b              LDR      r0,|L2.388|
000098  6840              LDR      r0,[r0,#4]            ;802
00009a  0880              LSRS     r0,r0,#2              ;802
00009c  0080              LSLS     r0,r0,#2              ;802
00009e  6861              LDR      r1,[r4,#4]            ;802
0000a0  4308              ORRS     r0,r0,r1              ;802
0000a2  4938              LDR      r1,|L2.388|
0000a4  6048              STR      r0,[r1,#4]            ;802
0000a6  f7fffffe          BL       HAL_GetTick
0000aa  4606              MOV      r6,r0                 ;805
0000ac  6860              LDR      r0,[r4,#4]            ;807
0000ae  2801              CMP      r0,#1                 ;807
0000b0  d10f              BNE      |L2.210|
0000b2  e007              B        |L2.196|
                  |L2.180|
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  1b80              SUBS     r0,r0,r6              ;811
0000ba  4933              LDR      r1,|L2.392|
0000bc  4288              CMP      r0,r1                 ;811
0000be  d901              BLS      |L2.196|
0000c0  2003              MOVS     r0,#3                 ;813
0000c2  e7b5              B        |L2.48|
                  |L2.196|
0000c4  482f              LDR      r0,|L2.388|
0000c6  6840              LDR      r0,[r0,#4]            ;809
0000c8  210c              MOVS     r1,#0xc               ;809
0000ca  4008              ANDS     r0,r0,r1              ;809
0000cc  2804              CMP      r0,#4                 ;809
0000ce  d1f1              BNE      |L2.180|
0000d0  e021              B        |L2.278|
                  |L2.210|
0000d2  6860              LDR      r0,[r4,#4]            ;817
0000d4  2802              CMP      r0,#2                 ;817
0000d6  d10f              BNE      |L2.248|
0000d8  e007              B        |L2.234|
                  |L2.218|
0000da  f7fffffe          BL       HAL_GetTick
0000de  1b80              SUBS     r0,r0,r6              ;821
0000e0  4929              LDR      r1,|L2.392|
0000e2  4288              CMP      r0,r1                 ;821
0000e4  d901              BLS      |L2.234|
0000e6  2003              MOVS     r0,#3                 ;823
0000e8  e7a2              B        |L2.48|
                  |L2.234|
0000ea  4826              LDR      r0,|L2.388|
0000ec  6840              LDR      r0,[r0,#4]            ;819
0000ee  210c              MOVS     r1,#0xc               ;819
0000f0  4008              ANDS     r0,r0,r1              ;819
0000f2  2808              CMP      r0,#8                 ;819
0000f4  d1f1              BNE      |L2.218|
0000f6  e00e              B        |L2.278|
                  |L2.248|
0000f8  e007              B        |L2.266|
                  |L2.250|
0000fa  f7fffffe          BL       HAL_GetTick
0000fe  1b80              SUBS     r0,r0,r6              ;843
000100  4921              LDR      r1,|L2.392|
000102  4288              CMP      r0,r1                 ;843
000104  d901              BLS      |L2.266|
000106  2003              MOVS     r0,#3                 ;845
000108  e792              B        |L2.48|
                  |L2.266|
00010a  481e              LDR      r0,|L2.388|
00010c  6840              LDR      r0,[r0,#4]            ;841
00010e  210c              MOVS     r1,#0xc               ;841
000110  4008              ANDS     r0,r0,r1              ;841
000112  2800              CMP      r0,#0                 ;841
000114  d1f1              BNE      |L2.250|
                  |L2.278|
000116  481a              LDR      r0,|L2.384|
000118  6800              LDR      r0,[r0,#0]            ;851
00011a  07c0              LSLS     r0,r0,#31             ;851
00011c  0fc0              LSRS     r0,r0,#31             ;851
00011e  42a8              CMP      r0,r5                 ;851
000120  d90e              BLS      |L2.320|
000122  4817              LDR      r0,|L2.384|
000124  6800              LDR      r0,[r0,#0]            ;854
000126  0840              LSRS     r0,r0,#1              ;854
000128  0040              LSLS     r0,r0,#1              ;854
00012a  4328              ORRS     r0,r0,r5              ;854
00012c  4914              LDR      r1,|L2.384|
00012e  6008              STR      r0,[r1,#0]            ;854
000130  4608              MOV      r0,r1                 ;858
000132  6800              LDR      r0,[r0,#0]            ;858
000134  07c0              LSLS     r0,r0,#31             ;858
000136  0fc0              LSRS     r0,r0,#31             ;858
000138  42a8              CMP      r0,r5                 ;858
00013a  d001              BEQ      |L2.320|
00013c  2001              MOVS     r0,#1                 ;860
00013e  e777              B        |L2.48|
                  |L2.320|
000140  2104              MOVS     r1,#4                 ;865
000142  6820              LDR      r0,[r4,#0]            ;865
000144  4008              ANDS     r0,r0,r1              ;865
000146  2804              CMP      r0,#4                 ;865
000148  d108              BNE      |L2.348|
00014a  480e              LDR      r0,|L2.388|
00014c  6840              LDR      r0,[r0,#4]            ;868
00014e  2107              MOVS     r1,#7                 ;868
000150  0209              LSLS     r1,r1,#8              ;868
000152  4388              BICS     r0,r0,r1              ;868
000154  68e1              LDR      r1,[r4,#0xc]          ;868
000156  4308              ORRS     r0,r0,r1              ;868
000158  490a              LDR      r1,|L2.388|
00015a  6048              STR      r0,[r1,#4]            ;868
                  |L2.348|
00015c  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000160  4908              LDR      r1,|L2.388|
000162  6849              LDR      r1,[r1,#4]            ;872
000164  22f0              MOVS     r2,#0xf0              ;872
000166  4011              ANDS     r1,r1,r2              ;872
000168  0909              LSRS     r1,r1,#4              ;872
00016a  4a08              LDR      r2,|L2.396|
00016c  5c51              LDRB     r1,[r2,r1]            ;872
00016e  40c8              LSRS     r0,r0,r1              ;872
000170  4907              LDR      r1,|L2.400|
000172  6008              STR      r0,[r1,#0]            ;872  ; SystemCoreClock
000174  2003              MOVS     r0,#3                 ;875
000176  f7fffffe          BL       HAL_InitTick
00017a  2000              MOVS     r0,#0                 ;877
00017c  e758              B        |L2.48|
;;;879    
                          ENDP

00017e  0000              DCW      0x0000
                  |L2.384|
                          DCD      0x40022000
                  |L2.388|
                          DCD      0x40021000
                  |L2.392|
                          DCD      0x00001388
                  |L2.396|
                          DCD      AHBPrescTable
                  |L2.400|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;224      */
;;;225    void HAL_RCC_DeInit(void)
000000  4810              LDR      r0,|L3.68|
;;;226    {
;;;227      /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
;;;228      SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
000002  6800              LDR      r0,[r0,#0]
000004  2181              MOVS     r1,#0x81
000006  4308              ORRS     r0,r0,r1
000008  490e              LDR      r1,|L3.68|
00000a  6008              STR      r0,[r1,#0]
;;;229    
;;;230      /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
;;;231      CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
00000c  4608              MOV      r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  490d              LDR      r1,|L3.72|
000012  4008              ANDS     r0,r0,r1
000014  490b              LDR      r1,|L3.68|
000016  6048              STR      r0,[r1,#4]
;;;232    
;;;233      /* Reset HSEON, CSSON, PLLON bits */
;;;234      CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  490b              LDR      r1,|L3.76|
00001e  4008              ANDS     r0,r0,r1
000020  4908              LDR      r1,|L3.68|
000022  6008              STR      r0,[r1,#0]
;;;235      
;;;236      /* Reset HSEBYP bit */
;;;237      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  2101              MOVS     r1,#1
00002a  0489              LSLS     r1,r1,#18
00002c  4388              BICS     r0,r0,r1
00002e  4905              LDR      r1,|L3.68|
000030  6008              STR      r0,[r1,#0]
;;;238    
;;;239      /* Reset CFGR register */
;;;240      CLEAR_REG(RCC->CFGR);
000032  2000              MOVS     r0,#0
000034  6048              STR      r0,[r1,#4]
;;;241      
;;;242      /* Reset CFGR2 register */
;;;243      CLEAR_REG(RCC->CFGR2);
000036  62c8              STR      r0,[r1,#0x2c]
;;;244      
;;;245      /* Reset CFGR3 register */
;;;246      CLEAR_REG(RCC->CFGR3);
000038  6308              STR      r0,[r1,#0x30]
;;;247      
;;;248      /* Disable all interrupts */
;;;249      CLEAR_REG(RCC->CIR);
00003a  6088              STR      r0,[r1,#8]
;;;250    
;;;251      /* Update the SystemCoreClock global variable */
;;;252      SystemCoreClock = HSI_VALUE;
00003c  4804              LDR      r0,|L3.80|
00003e  4905              LDR      r1,|L3.84|
000040  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;253    }
000042  4770              BX       lr
;;;254    
                          ENDP

                  |L3.68|
                          DCD      0x40021000
                  |L3.72|
                          DCD      0xf0fff80c
                  |L3.76|
                          DCD      0xfef6ffff
                  |L3.80|
                          DCD      0x007a1200
                  |L3.84|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;1027     */
;;;1028   void HAL_RCC_DisableCSS(void)
000000  4803              LDR      r0,|L4.16|
;;;1029   {
;;;1030     CLEAR_BIT(RCC->CR, RCC_CR_CSSON) ;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  04c9              LSLS     r1,r1,#19
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L4.16|
00000c  6008              STR      r0,[r1,#0]
;;;1031   }
00000e  4770              BX       lr
;;;1032   
                          ENDP

                  |L4.16|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;1018     */
;;;1019   void HAL_RCC_EnableCSS(void)
000000  4803              LDR      r0,|L5.16|
;;;1020   {
;;;1021     SET_BIT(RCC->CR, RCC_CR_CSSON) ;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  04c9              LSLS     r1,r1,#19
000008  4308              ORRS     r0,r0,r1
00000a  4901              LDR      r1,|L5.16|
00000c  6008              STR      r0,[r1,#0]
;;;1022   }
00000e  4770              BX       lr
;;;1023   
                          ENDP

                  |L5.16|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1264     */
;;;1265   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  2207              MOVS     r2,#7
;;;1266   {
;;;1267     /* Check the parameters */
;;;1268     assert_param(RCC_ClkInitStruct != NULL);
;;;1269     assert_param(pFLatency != NULL);
;;;1270   
;;;1271     /* Set all possible values for the Clock type parameter --------------------*/
;;;1272     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
000002  6002              STR      r2,[r0,#0]
;;;1273     
;;;1274     /* Get the SYSCLK configuration --------------------------------------------*/ 
;;;1275     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0a              LDR      r2,|L6.48|
000006  6852              LDR      r2,[r2,#4]
000008  0792              LSLS     r2,r2,#30
00000a  0f92              LSRS     r2,r2,#30
00000c  6042              STR      r2,[r0,#4]
;;;1276     
;;;1277     /* Get the HCLK configuration ----------------------------------------------*/ 
;;;1278     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
00000e  4a08              LDR      r2,|L6.48|
000010  6852              LDR      r2,[r2,#4]
000012  23f0              MOVS     r3,#0xf0
000014  401a              ANDS     r2,r2,r3
000016  6082              STR      r2,[r0,#8]
;;;1279     
;;;1280     /* Get the APB1 configuration ----------------------------------------------*/ 
;;;1281     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
000018  4a05              LDR      r2,|L6.48|
00001a  6852              LDR      r2,[r2,#4]
00001c  2307              MOVS     r3,#7
00001e  021b              LSLS     r3,r3,#8
000020  401a              ANDS     r2,r2,r3
000022  60c2              STR      r2,[r0,#0xc]
;;;1282     /* Get the Flash Wait State (Latency) configuration ------------------------*/   
;;;1283     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
000024  4a03              LDR      r2,|L6.52|
000026  6812              LDR      r2,[r2,#0]
000028  07d2              LSLS     r2,r2,#31
00002a  0fd2              LSRS     r2,r2,#31
00002c  600a              STR      r2,[r1,#0]
;;;1284   }
00002e  4770              BX       lr
;;;1285   
                          ENDP

                  |L6.48|
                          DCD      0x40021000
                  |L6.52|
                          DCD      0x40022000

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1138     */
;;;1139   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;1140   {
;;;1141     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1142   }
000004  4770              BX       lr
;;;1143   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1162     */
;;;1163   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  211f              MOVS     r1,#0x1f
;;;1164   {
;;;1165     /* Check the parameters */
;;;1166     assert_param(RCC_OscInitStruct != NULL);
;;;1167   
;;;1168     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1169     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
000002  6001              STR      r1,[r0,#0]
;;;1170                     | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI14;
;;;1171   #if defined(RCC_HSI48_SUPPORT)
;;;1172     RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
;;;1173   #endif /* RCC_HSI48_SUPPORT */
;;;1174   
;;;1175   
;;;1176     /* Get the HSE configuration -----------------------------------------------*/
;;;1177     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  493a              LDR      r1,|L8.240|
000006  6809              LDR      r1,[r1,#0]
000008  2201              MOVS     r2,#1
00000a  0492              LSLS     r2,r2,#18
00000c  4011              ANDS     r1,r1,r2
00000e  4291              CMP      r1,r2
000010  d102              BNE      |L8.24|
;;;1178     {
;;;1179       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  2105              MOVS     r1,#5
000014  6041              STR      r1,[r0,#4]
000016  e00b              B        |L8.48|
                  |L8.24|
;;;1180     }
;;;1181     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
000018  4935              LDR      r1,|L8.240|
00001a  6809              LDR      r1,[r1,#0]
00001c  2201              MOVS     r2,#1
00001e  0412              LSLS     r2,r2,#16
000020  4011              ANDS     r1,r1,r2
000022  4291              CMP      r1,r2
000024  d102              BNE      |L8.44|
;;;1182     {
;;;1183       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000026  2101              MOVS     r1,#1
000028  6041              STR      r1,[r0,#4]
00002a  e001              B        |L8.48|
                  |L8.44|
;;;1184     }
;;;1185     else
;;;1186     {
;;;1187       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
00002c  2100              MOVS     r1,#0
00002e  6041              STR      r1,[r0,#4]
                  |L8.48|
;;;1188     }
;;;1189   
;;;1190     /* Get the HSI configuration -----------------------------------------------*/
;;;1191     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000030  492f              LDR      r1,|L8.240|
000032  6809              LDR      r1,[r1,#0]
000034  07c9              LSLS     r1,r1,#31
000036  0fc9              LSRS     r1,r1,#31
000038  2900              CMP      r1,#0
00003a  d002              BEQ      |L8.66|
;;;1192     {
;;;1193       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003c  2101              MOVS     r1,#1
00003e  60c1              STR      r1,[r0,#0xc]
000040  e001              B        |L8.70|
                  |L8.66|
;;;1194     }
;;;1195     else
;;;1196     {
;;;1197       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000042  2100              MOVS     r1,#0
000044  60c1              STR      r1,[r0,#0xc]
                  |L8.70|
;;;1198     }
;;;1199     
;;;1200     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_BitNumber);
000046  492a              LDR      r1,|L8.240|
000048  6809              LDR      r1,[r1,#0]
00004a  22f8              MOVS     r2,#0xf8
00004c  4011              ANDS     r1,r1,r2
00004e  08c9              LSRS     r1,r1,#3
000050  6101              STR      r1,[r0,#0x10]
;;;1201     
;;;1202     /* Get the LSE configuration -----------------------------------------------*/
;;;1203     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
000052  4927              LDR      r1,|L8.240|
000054  6a09              LDR      r1,[r1,#0x20]
000056  2204              MOVS     r2,#4
000058  4011              ANDS     r1,r1,r2
00005a  2904              CMP      r1,#4
00005c  d102              BNE      |L8.100|
;;;1204     {
;;;1205       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
00005e  2105              MOVS     r1,#5
000060  6081              STR      r1,[r0,#8]
000062  e00a              B        |L8.122|
                  |L8.100|
;;;1206     }
;;;1207     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000064  4922              LDR      r1,|L8.240|
000066  6a09              LDR      r1,[r1,#0x20]
000068  07c9              LSLS     r1,r1,#31
00006a  0fc9              LSRS     r1,r1,#31
00006c  2900              CMP      r1,#0
00006e  d002              BEQ      |L8.118|
;;;1208     {
;;;1209       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000070  2101              MOVS     r1,#1
000072  6081              STR      r1,[r0,#8]
000074  e001              B        |L8.122|
                  |L8.118|
;;;1210     }
;;;1211     else
;;;1212     {
;;;1213       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000076  2100              MOVS     r1,#0
000078  6081              STR      r1,[r0,#8]
                  |L8.122|
;;;1214     }
;;;1215     
;;;1216     /* Get the LSI configuration -----------------------------------------------*/
;;;1217     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
00007a  491d              LDR      r1,|L8.240|
00007c  6a49              LDR      r1,[r1,#0x24]
00007e  07c9              LSLS     r1,r1,#31
000080  0fc9              LSRS     r1,r1,#31
000082  2900              CMP      r1,#0
000084  d002              BEQ      |L8.140|
;;;1218     {
;;;1219       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000086  2101              MOVS     r1,#1
000088  61c1              STR      r1,[r0,#0x1c]
00008a  e001              B        |L8.144|
                  |L8.140|
;;;1220     }
;;;1221     else
;;;1222     {
;;;1223       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00008c  2100              MOVS     r1,#0
00008e  61c1              STR      r1,[r0,#0x1c]
                  |L8.144|
;;;1224     }
;;;1225     
;;;1226     /* Get the HSI14 configuration -----------------------------------------------*/
;;;1227     if((RCC->CR2 & RCC_CR2_HSI14ON) == RCC_CR2_HSI14ON)
000090  4917              LDR      r1,|L8.240|
000092  6b49              LDR      r1,[r1,#0x34]
000094  07c9              LSLS     r1,r1,#31
000096  0fc9              LSRS     r1,r1,#31
000098  2900              CMP      r1,#0
00009a  d002              BEQ      |L8.162|
;;;1228     {
;;;1229       RCC_OscInitStruct->HSI14State = RCC_HSI_ON;
00009c  2101              MOVS     r1,#1
00009e  6141              STR      r1,[r0,#0x14]
0000a0  e001              B        |L8.166|
                  |L8.162|
;;;1230     }
;;;1231     else
;;;1232     {
;;;1233       RCC_OscInitStruct->HSI14State = RCC_HSI_OFF;
0000a2  2100              MOVS     r1,#0
0000a4  6141              STR      r1,[r0,#0x14]
                  |L8.166|
;;;1234     }
;;;1235   
;;;1236     RCC_OscInitStruct->HSI14CalibrationValue = (uint32_t)((RCC->CR2 & RCC_CR2_HSI14TRIM) >> RCC_HSI14TRIM_BIT_NUMBER);
0000a6  4912              LDR      r1,|L8.240|
0000a8  6b49              LDR      r1,[r1,#0x34]
0000aa  22f8              MOVS     r2,#0xf8
0000ac  4011              ANDS     r1,r1,r2
0000ae  08c9              LSRS     r1,r1,#3
0000b0  6181              STR      r1,[r0,#0x18]
;;;1237     
;;;1238   #if defined(RCC_HSI48_SUPPORT)
;;;1239     /* Get the HSI48 configuration if any-----------------------------------------*/
;;;1240     RCC_OscInitStruct->HSI48State = __HAL_RCC_GET_HSI48_STATE();
;;;1241   #endif /* RCC_HSI48_SUPPORT */
;;;1242   
;;;1243     /* Get the PLL configuration -----------------------------------------------*/
;;;1244     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
0000b2  490f              LDR      r1,|L8.240|
0000b4  6809              LDR      r1,[r1,#0]
0000b6  2201              MOVS     r2,#1
0000b8  0612              LSLS     r2,r2,#24
0000ba  4011              ANDS     r1,r1,r2
0000bc  4291              CMP      r1,r2
0000be  d102              BNE      |L8.198|
;;;1245     {
;;;1246       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000c0  2102              MOVS     r1,#2
0000c2  6201              STR      r1,[r0,#0x20]
0000c4  e001              B        |L8.202|
                  |L8.198|
;;;1247     }
;;;1248     else
;;;1249     {
;;;1250       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000c6  2101              MOVS     r1,#1
0000c8  6201              STR      r1,[r0,#0x20]
                  |L8.202|
;;;1251     }
;;;1252     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
0000ca  4909              LDR      r1,|L8.240|
0000cc  6849              LDR      r1,[r1,#4]
0000ce  2203              MOVS     r2,#3
0000d0  03d2              LSLS     r2,r2,#15
0000d2  4011              ANDS     r1,r1,r2
0000d4  6241              STR      r1,[r0,#0x24]
;;;1253     RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
0000d6  4906              LDR      r1,|L8.240|
0000d8  6849              LDR      r1,[r1,#4]
0000da  220f              MOVS     r2,#0xf
0000dc  0492              LSLS     r2,r2,#18
0000de  4011              ANDS     r1,r1,r2
0000e0  6281              STR      r1,[r0,#0x28]
;;;1254     RCC_OscInitStruct->PLL.PREDIV = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV);
0000e2  4903              LDR      r1,|L8.240|
0000e4  6ac9              LDR      r1,[r1,#0x2c]
0000e6  070a              LSLS     r2,r1,#28
0000e8  0f12              LSRS     r2,r2,#28
0000ea  62c2              STR      r2,[r0,#0x2c]
;;;1255   }
0000ec  4770              BX       lr
;;;1256   
                          ENDP

0000ee  0000              DCW      0x0000
                  |L8.240|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1149     */
;;;1150   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;1151   {
;;;1152     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1153     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4905              LDR      r1,|L9.28|
000008  6849              LDR      r1,[r1,#4]
00000a  2207              MOVS     r2,#7
00000c  0212              LSLS     r2,r2,#8
00000e  4011              ANDS     r1,r1,r2
000010  0a09              LSRS     r1,r1,#8
000012  4a03              LDR      r2,|L9.32|
000014  5c51              LDRB     r1,[r2,r1]
000016  40c8              LSRS     r0,r0,r1
;;;1154   }    
000018  bd00              POP      {pc}
;;;1155   
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40021000
                  |L9.32|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;1063     */
;;;1064   uint32_t HAL_RCC_GetSysClockFreq(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1065   {
000002  b089              SUB      sp,sp,#0x24
;;;1066     const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
000004  a025              ADR      r0,|L10.156|
000006  4601              MOV      r1,r0
000008  c90e              LDM      r1,{r1-r3}
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  ac05              ADD      r4,sp,#0x14
00000e  c40e              STM      r4!,{r1-r3}
000010  9008              STR      r0,[sp,#0x20]
;;;1067                                            10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
;;;1068     const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
000012  a026              ADR      r0,|L10.172|
000014  4601              MOV      r1,r0
000016  c90e              LDM      r1,{r1-r3}
000018  68c0              LDR      r0,[r0,#0xc]
00001a  ac01              ADD      r4,sp,#4
00001c  c40e              STM      r4!,{r1-r3}
00001e  9004              STR      r0,[sp,#0x10]
;;;1069                                              9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};
;;;1070   
;;;1071     uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
000020  2400              MOVS     r4,#0
000022  2600              MOVS     r6,#0
000024  2700              MOVS     r7,#0
000026  2500              MOVS     r5,#0
;;;1072     uint32_t sysclockfreq = 0U;
000028  2000              MOVS     r0,#0
00002a  9000              STR      r0,[sp,#0]
;;;1073     
;;;1074     tmpreg = RCC->CFGR;
00002c  4823              LDR      r0,|L10.188|
00002e  6844              LDR      r4,[r0,#4]
;;;1075     
;;;1076     /* Get SYSCLK source -------------------------------------------------------*/
;;;1077     switch (tmpreg & RCC_CFGR_SWS)
000030  200c              MOVS     r0,#0xc
000032  4020              ANDS     r0,r0,r4
000034  2800              CMP      r0,#0
000036  d02a              BEQ      |L10.142|
000038  2804              CMP      r0,#4
00003a  d002              BEQ      |L10.66|
00003c  2808              CMP      r0,#8
00003e  d125              BNE      |L10.140|
000040  e002              B        |L10.72|
                  |L10.66|
;;;1078     {
;;;1079       case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
;;;1080       {
;;;1081         sysclockfreq = HSE_VALUE;
000042  481f              LDR      r0,|L10.192|
000044  9000              STR      r0,[sp,#0]
;;;1082         break;
000046  e025              B        |L10.148|
                  |L10.72|
;;;1083       }
;;;1084       case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
;;;1085       {
;;;1086         pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
000048  200f              MOVS     r0,#0xf
00004a  0480              LSLS     r0,r0,#18
00004c  4020              ANDS     r0,r0,r4
00004e  0c80              LSRS     r0,r0,#18
000050  a905              ADD      r1,sp,#0x14
000052  5c0d              LDRB     r5,[r1,r0]
;;;1087         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
000054  4819              LDR      r0,|L10.188|
000056  6ac0              LDR      r0,[r0,#0x2c]
000058  0700              LSLS     r0,r0,#28
00005a  0f00              LSRS     r0,r0,#28
00005c  a901              ADD      r1,sp,#4
00005e  5c0e              LDRB     r6,[r1,r0]
;;;1088         if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
000060  2003              MOVS     r0,#3
000062  03c0              LSLS     r0,r0,#15
000064  4020              ANDS     r0,r0,r4
000066  2101              MOVS     r1,#1
000068  0409              LSLS     r1,r1,#16
00006a  4288              CMP      r0,r1
00006c  d106              BNE      |L10.124|
;;;1089         {
;;;1090           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
;;;1091           pllclk = (HSE_VALUE / prediv) * pllmul;
00006e  4631              MOV      r1,r6
000070  4813              LDR      r0,|L10.192|
000072  f7fffffe          BL       __aeabi_uidivmod
000076  4368              MULS     r0,r5,r0
000078  4607              MOV      r7,r0
00007a  e005              B        |L10.136|
                  |L10.124|
;;;1092         }
;;;1093   #if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
;;;1094         else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
;;;1095         {
;;;1096           /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
;;;1097           pllclk = (HSI48_VALUE / prediv) * pllmul;
;;;1098         }
;;;1099   #endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
;;;1100         else
;;;1101         {
;;;1102   #if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
;;;1103           /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
;;;1104           pllclk = (HSI_VALUE / prediv) * pllmul;
00007c  4631              MOV      r1,r6
00007e  4810              LDR      r0,|L10.192|
000080  f7fffffe          BL       __aeabi_uidivmod
000084  4368              MULS     r0,r5,r0
000086  4607              MOV      r7,r0
                  |L10.136|
;;;1105   #else
;;;1106           /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
;;;1107           pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
;;;1108   #endif
;;;1109         }
;;;1110         sysclockfreq = pllclk;
000088  9700              STR      r7,[sp,#0]
;;;1111         break;
00008a  e003              B        |L10.148|
                  |L10.140|
;;;1112       }
;;;1113   #if defined(RCC_CFGR_SWS_HSI48)
;;;1114       case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
;;;1115       {
;;;1116         sysclockfreq = HSI48_VALUE;
;;;1117         break;
;;;1118       }
;;;1119   #endif /* RCC_CFGR_SWS_HSI48 */
;;;1120       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
00008c  bf00              NOP      
                  |L10.142|
;;;1121       default: /* HSI used as system clock */
;;;1122       {
;;;1123         sysclockfreq = HSI_VALUE;
00008e  480c              LDR      r0,|L10.192|
000090  9000              STR      r0,[sp,#0]
;;;1124         break;
000092  bf00              NOP      
                  |L10.148|
000094  bf00              NOP                            ;1082
;;;1125       }
;;;1126     }
;;;1127     return sysclockfreq;
000096  9800              LDR      r0,[sp,#0]
;;;1128   }
000098  b009              ADD      sp,sp,#0x24
00009a  bdf0              POP      {r4-r7,pc}
;;;1129   
                          ENDP

                  |L10.156|
00009c  02030405          DCB      2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16,16
0000a0  06070809
0000a4  0a0b0c0d
0000a8  0e0f1010
                  |L10.172|
0000ac  01020304          DCB      1,2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16
0000b0  05060708
0000b4  090a0b0c
0000b8  0d0e0f10
                  |L10.188|
                          DCD      0x40021000
                  |L10.192|
                          DCD      0x007a1200

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;984    #endif
;;;985    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;986    {
000002  b086              SUB      sp,sp,#0x18
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;987      GPIO_InitTypeDef gpio;
;;;988    
;;;989      /* Check the parameters */
;;;990      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;991      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;992      assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;993      
;;;994      /* Configure the MCO1 pin in alternate function mode */
;;;995      gpio.Mode      = GPIO_MODE_AF_PP;
00000a  2002              MOVS     r0,#2
00000c  9002              STR      r0,[sp,#8]
;;;996      gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
00000e  2003              MOVS     r0,#3
000010  9004              STR      r0,[sp,#0x10]
;;;997      gpio.Pull      = GPIO_NOPULL;
000012  2000              MOVS     r0,#0
000014  9003              STR      r0,[sp,#0xc]
;;;998      gpio.Pin       = MCO1_PIN;
000016  20ff              MOVS     r0,#0xff
000018  3001              ADDS     r0,#1
00001a  9001              STR      r0,[sp,#4]
;;;999      gpio.Alternate = GPIO_AF0_MCO;
00001c  2000              MOVS     r0,#0
00001e  9005              STR      r0,[sp,#0x14]
;;;1000   
;;;1001     /* MCO1 Clock Enable */
;;;1002     MCO1_CLK_ENABLE();
000020  bf00              NOP      
000022  4810              LDR      r0,|L11.100|
000024  6940              LDR      r0,[r0,#0x14]
000026  2101              MOVS     r1,#1
000028  0449              LSLS     r1,r1,#17
00002a  4308              ORRS     r0,r0,r1
00002c  490d              LDR      r1,|L11.100|
00002e  6148              STR      r0,[r1,#0x14]
000030  4608              MOV      r0,r1
000032  6940              LDR      r0,[r0,#0x14]
000034  2101              MOVS     r1,#1
000036  0449              LSLS     r1,r1,#17
000038  4008              ANDS     r0,r0,r1
00003a  9000              STR      r0,[sp,#0]
00003c  bf00              NOP      
00003e  bf00              NOP      
;;;1003     
;;;1004     HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
000040  a901              ADD      r1,sp,#4
000042  2009              MOVS     r0,#9
000044  06c0              LSLS     r0,r0,#27
000046  f7fffffe          BL       HAL_GPIO_Init
;;;1005     
;;;1006     /* Configure the MCO clock source */
;;;1007     __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
00004a  4806              LDR      r0,|L11.100|
00004c  6840              LDR      r0,[r0,#4]
00004e  217f              MOVS     r1,#0x7f
000050  0609              LSLS     r1,r1,#24
000052  4388              BICS     r0,r0,r1
000054  4621              MOV      r1,r4
000056  4329              ORRS     r1,r1,r5
000058  4308              ORRS     r0,r0,r1
00005a  4902              LDR      r1,|L11.100|
00005c  6048              STR      r0,[r1,#4]
;;;1008   }
00005e  b006              ADD      sp,sp,#0x18
000060  bd70              POP      {r4-r6,pc}
;;;1009   
                          ENDP

000062  0000              DCW      0x0000
                  |L11.100|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1290     */
;;;1291   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1292   {
;;;1293     /* Check RCC CSSF flag  */
;;;1294     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L12.28|
000004  6880              LDR      r0,[r0,#8]
000006  2180              MOVS     r1,#0x80
000008  4008              ANDS     r0,r0,r1
00000a  2880              CMP      r0,#0x80
00000c  d104              BNE      |L12.24|
;;;1295     {
;;;1296       /* RCC Clock Security System interrupt user callback */
;;;1297       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1298       
;;;1299       /* Clear RCC CSS pending bit */
;;;1300       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L12.28|
000016  7288              STRB     r0,[r1,#0xa]
                  |L12.24|
;;;1301     }
;;;1302   }
000018  bd10              POP      {r4,pc}
;;;1303   
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;268      */
;;;269    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;270    {
000002  4604              MOV      r4,r0
;;;271       uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;272      
;;;273      /* Check the parameters */
;;;274      assert_param(RCC_OscInitStruct != NULL);
;;;275      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;276    
;;;277      /*------------------------------- HSE Configuration ------------------------*/ 
;;;278      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
000006  7820              LDRB     r0,[r4,#0]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
00000c  2800              CMP      r0,#0
00000e  d072              BEQ      |L13.246|
;;;279      {
;;;280        /* Check the parameters */
;;;281        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;282    
;;;283        /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
;;;284        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
000010  48fa              LDR      r0,|L13.1020|
000012  6840              LDR      r0,[r0,#4]
000014  210c              MOVS     r1,#0xc
000016  4008              ANDS     r0,r0,r1
000018  2804              CMP      r0,#4
00001a  d00c              BEQ      |L13.54|
;;;285           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
00001c  48f7              LDR      r0,|L13.1020|
00001e  6840              LDR      r0,[r0,#4]
000020  4008              ANDS     r0,r0,r1
000022  2808              CMP      r0,#8
000024  d113              BNE      |L13.78|
000026  48f5              LDR      r0,|L13.1020|
000028  6840              LDR      r0,[r0,#4]
00002a  0349              LSLS     r1,r1,#13
00002c  4008              ANDS     r0,r0,r1
00002e  2101              MOVS     r1,#1
000030  0409              LSLS     r1,r1,#16
000032  4288              CMP      r0,r1
000034  d10b              BNE      |L13.78|
                  |L13.54|
;;;286        {
;;;287          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000036  48f1              LDR      r0,|L13.1020|
000038  6800              LDR      r0,[r0,#0]
00003a  2101              MOVS     r1,#1
00003c  0449              LSLS     r1,r1,#17
00003e  4008              ANDS     r0,r0,r1
000040  2800              CMP      r0,#0
000042  d06b              BEQ      |L13.284|
000044  6860              LDR      r0,[r4,#4]
000046  2800              CMP      r0,#0
000048  d168              BNE      |L13.284|
;;;288          {
;;;289            return HAL_ERROR;
00004a  2001              MOVS     r0,#1
                  |L13.76|
;;;290          }
;;;291        }
;;;292        else
;;;293        {
;;;294          /* Set the new HSE configuration ---------------------------------------*/
;;;295          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;296          
;;;297    
;;;298           /* Check the HSE State */
;;;299          if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;300          {
;;;301            /* Get Start Tick */
;;;302            tickstart = HAL_GetTick();
;;;303            
;;;304            /* Wait till HSE is ready */
;;;305            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;306            {
;;;307              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;308              {
;;;309                return HAL_TIMEOUT;
;;;310              }
;;;311            }
;;;312          }
;;;313          else
;;;314          {
;;;315            /* Get Start Tick */
;;;316            tickstart = HAL_GetTick();
;;;317            
;;;318            /* Wait till HSE is disabled */
;;;319            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;320            {
;;;321               if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;322              {
;;;323                return HAL_TIMEOUT;
;;;324              }
;;;325            }
;;;326          }
;;;327        }
;;;328      }
;;;329      /*----------------------------- HSI Configuration --------------------------*/ 
;;;330      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;331      {
;;;332        /* Check the parameters */
;;;333        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;334        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;335        
;;;336        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
;;;337        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
;;;338           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
;;;339        {
;;;340          /* When HSI is used as system clock it will not disabled */
;;;341          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;342          {
;;;343            return HAL_ERROR;
;;;344          }
;;;345          /* Otherwise, just the calibration is allowed */
;;;346          else
;;;347          {
;;;348            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;349            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;350          }
;;;351        }
;;;352        else
;;;353        {
;;;354          /* Check the HSI State */
;;;355          if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
;;;356          {
;;;357           /* Enable the Internal High Speed oscillator (HSI). */
;;;358            __HAL_RCC_HSI_ENABLE();
;;;359            
;;;360            /* Get Start Tick */
;;;361            tickstart = HAL_GetTick();
;;;362            
;;;363            /* Wait till HSI is ready */
;;;364            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;365            {
;;;366              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;367              {
;;;368                return HAL_TIMEOUT;
;;;369              }
;;;370            }
;;;371                    
;;;372            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;373            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;374          }
;;;375          else
;;;376          {
;;;377            /* Disable the Internal High Speed oscillator (HSI). */
;;;378            __HAL_RCC_HSI_DISABLE();
;;;379            
;;;380            /* Get Start Tick */
;;;381            tickstart = HAL_GetTick();
;;;382            
;;;383            /* Wait till HSI is disabled */
;;;384            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;385            {
;;;386              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;387              {
;;;388                return HAL_TIMEOUT;
;;;389              }
;;;390            }
;;;391          }
;;;392        }
;;;393      }
;;;394      /*------------------------------ LSI Configuration -------------------------*/ 
;;;395      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;396      {
;;;397        /* Check the parameters */
;;;398        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;399        
;;;400        /* Check the LSI State */
;;;401        if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
;;;402        {
;;;403          /* Enable the Internal Low Speed oscillator (LSI). */
;;;404          __HAL_RCC_LSI_ENABLE();
;;;405          
;;;406          /* Get Start Tick */
;;;407          tickstart = HAL_GetTick();
;;;408          
;;;409          /* Wait till LSI is ready */  
;;;410          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;411          {
;;;412            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;413            {
;;;414              return HAL_TIMEOUT;
;;;415            }
;;;416          }
;;;417        }
;;;418        else
;;;419        {
;;;420          /* Disable the Internal Low Speed oscillator (LSI). */
;;;421          __HAL_RCC_LSI_DISABLE();
;;;422          
;;;423          /* Get Start Tick */
;;;424          tickstart = HAL_GetTick();
;;;425          
;;;426          /* Wait till LSI is disabled */  
;;;427          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;428          {
;;;429            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;430            {
;;;431              return HAL_TIMEOUT;
;;;432            }
;;;433          }
;;;434        }
;;;435      }
;;;436      /*------------------------------ LSE Configuration -------------------------*/ 
;;;437      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;438      {
;;;439        FlagStatus       pwrclkchanged = RESET;
;;;440        
;;;441        /* Check the parameters */
;;;442        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;443    
;;;444        /* Update LSE configuration in Backup Domain control register    */
;;;445        /* Requires to enable write access to Backup Domain of necessary */
;;;446        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;447        {
;;;448          __HAL_RCC_PWR_CLK_ENABLE();
;;;449          pwrclkchanged = SET;
;;;450        }
;;;451        
;;;452        if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;453        {
;;;454          /* Enable write access to Backup domain */
;;;455          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;456          
;;;457          /* Wait for Backup domain Write protection disable */
;;;458          tickstart = HAL_GetTick();
;;;459    
;;;460          while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;461          {
;;;462            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;463            {
;;;464              return HAL_TIMEOUT;
;;;465            }
;;;466          }
;;;467        }
;;;468    
;;;469        /* Set the new LSE configuration -----------------------------------------*/
;;;470        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;471        /* Check the LSE State */
;;;472        if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
;;;473        {
;;;474          /* Get Start Tick */
;;;475          tickstart = HAL_GetTick();
;;;476          
;;;477          /* Wait till LSE is ready */  
;;;478          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;479          {
;;;480            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;481            {
;;;482              return HAL_TIMEOUT;
;;;483            }
;;;484          }
;;;485        }
;;;486        else
;;;487        {
;;;488          /* Get Start Tick */
;;;489          tickstart = HAL_GetTick();
;;;490          
;;;491          /* Wait till LSE is disabled */  
;;;492          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;493          {
;;;494            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;495            {
;;;496              return HAL_TIMEOUT;
;;;497            }
;;;498          }
;;;499        }
;;;500    
;;;501        /* Require to disable power clock if necessary */
;;;502        if(pwrclkchanged == SET)
;;;503        {
;;;504          __HAL_RCC_PWR_CLK_DISABLE();
;;;505        }
;;;506      }
;;;507    
;;;508      /*----------------------------- HSI14 Configuration --------------------------*/
;;;509      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
;;;510      {
;;;511        /* Check the parameters */
;;;512        assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
;;;513        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
;;;514    
;;;515        /* Check the HSI14 State */
;;;516        if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
;;;517        {
;;;518          /* Disable ADC control of the Internal High Speed oscillator HSI14 */
;;;519          __HAL_RCC_HSI14ADC_DISABLE();
;;;520    
;;;521          /* Enable the Internal High Speed oscillator (HSI). */
;;;522          __HAL_RCC_HSI14_ENABLE();
;;;523    
;;;524          /* Get Start Tick */
;;;525          tickstart = HAL_GetTick();
;;;526          
;;;527          /* Wait till HSI is ready */  
;;;528          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
;;;529          {
;;;530            if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
;;;531            {
;;;532              return HAL_TIMEOUT;
;;;533            }      
;;;534          } 
;;;535    
;;;536          /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
;;;537          __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
;;;538        }
;;;539        else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
;;;540        {
;;;541          /* Enable ADC control of the Internal High Speed oscillator HSI14 */
;;;542          __HAL_RCC_HSI14ADC_ENABLE();
;;;543    
;;;544          /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
;;;545          __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
;;;546        }
;;;547        else
;;;548        {
;;;549          /* Disable ADC control of the Internal High Speed oscillator HSI14 */
;;;550          __HAL_RCC_HSI14ADC_DISABLE();
;;;551    
;;;552          /* Disable the Internal High Speed oscillator (HSI). */
;;;553          __HAL_RCC_HSI14_DISABLE();
;;;554    
;;;555          /* Get Start Tick */
;;;556          tickstart = HAL_GetTick();
;;;557          
;;;558          /* Wait till HSI is ready */  
;;;559          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
;;;560          {
;;;561            if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
;;;562            {
;;;563              return HAL_TIMEOUT;
;;;564            }
;;;565          }
;;;566        }
;;;567      }
;;;568    
;;;569    #if defined(RCC_HSI48_SUPPORT)
;;;570      /*----------------------------- HSI48 Configuration --------------------------*/
;;;571      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
;;;572      {
;;;573        /* Check the parameters */
;;;574        assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
;;;575    
;;;576        /* When the HSI48 is used as system clock it is not allowed to be disabled */
;;;577        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
;;;578           ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
;;;579        {
;;;580          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
;;;581          {
;;;582            return HAL_ERROR;
;;;583          }
;;;584        }
;;;585        else
;;;586        {
;;;587          /* Check the HSI48 State */
;;;588          if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
;;;589          {
;;;590            /* Enable the Internal High Speed oscillator (HSI48). */
;;;591            __HAL_RCC_HSI48_ENABLE();
;;;592    
;;;593            /* Get Start Tick */
;;;594            tickstart = HAL_GetTick();
;;;595          
;;;596            /* Wait till HSI48 is ready */  
;;;597            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
;;;598            {
;;;599              if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
;;;600              {
;;;601                return HAL_TIMEOUT;
;;;602              }
;;;603            } 
;;;604          }
;;;605          else
;;;606          {
;;;607            /* Disable the Internal High Speed oscillator (HSI48). */
;;;608            __HAL_RCC_HSI48_DISABLE();
;;;609    
;;;610            /* Get Start Tick */
;;;611            tickstart = HAL_GetTick();
;;;612          
;;;613            /* Wait till HSI48 is ready */  
;;;614            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
;;;615            {
;;;616              if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
;;;617              {
;;;618                return HAL_TIMEOUT;
;;;619              }
;;;620            }
;;;621          }
;;;622        }
;;;623      }
;;;624    #endif /* RCC_HSI48_SUPPORT */
;;;625           
;;;626      /*-------------------------------- PLL Configuration -----------------------*/
;;;627      /* Check the parameters */
;;;628      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;629      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;630      {
;;;631        /* Check if the PLL is used as system clock or not */
;;;632        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;633        { 
;;;634          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;635          {
;;;636            /* Check the parameters */
;;;637            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;638            assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
;;;639            assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
;;;640      
;;;641            /* Disable the main PLL. */
;;;642            __HAL_RCC_PLL_DISABLE();
;;;643            
;;;644            /* Get Start Tick */
;;;645            tickstart = HAL_GetTick();
;;;646            
;;;647            /* Wait till PLL is disabled */
;;;648            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;649            {
;;;650              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;651              {
;;;652                return HAL_TIMEOUT;
;;;653              }
;;;654            }
;;;655    
;;;656            /* Configure the main PLL clock source, predivider and multiplication factor. */
;;;657            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;658                                 RCC_OscInitStruct->PLL.PREDIV,
;;;659                                 RCC_OscInitStruct->PLL.PLLMUL);
;;;660            /* Enable the main PLL. */
;;;661            __HAL_RCC_PLL_ENABLE();
;;;662            
;;;663            /* Get Start Tick */
;;;664            tickstart = HAL_GetTick();
;;;665            
;;;666            /* Wait till PLL is ready */
;;;667            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
;;;668            {
;;;669              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;670              {
;;;671                return HAL_TIMEOUT;
;;;672              }
;;;673            }
;;;674          }
;;;675          else
;;;676          {
;;;677            /* Disable the main PLL. */
;;;678            __HAL_RCC_PLL_DISABLE();
;;;679     
;;;680            /* Get Start Tick */
;;;681            tickstart = HAL_GetTick();
;;;682            
;;;683            /* Wait till PLL is disabled */  
;;;684            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;685            {
;;;686              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;687              {
;;;688                return HAL_TIMEOUT;
;;;689              }
;;;690            }
;;;691          }
;;;692        }
;;;693        else
;;;694        {
;;;695          return HAL_ERROR;
;;;696        }
;;;697      }
;;;698      
;;;699      return HAL_OK;
;;;700    }
00004c  bdf8              POP      {r3-r7,pc}
                  |L13.78|
00004e  bf00              NOP                            ;295
000050  6860              LDR      r0,[r4,#4]            ;295
000052  2801              CMP      r0,#1                 ;295
000054  d107              BNE      |L13.102|
000056  48e9              LDR      r0,|L13.1020|
000058  6800              LDR      r0,[r0,#0]            ;295
00005a  2101              MOVS     r1,#1                 ;295
00005c  0409              LSLS     r1,r1,#16             ;295
00005e  4308              ORRS     r0,r0,r1              ;295
000060  49e6              LDR      r1,|L13.1020|
000062  6008              STR      r0,[r1,#0]            ;295
000064  e031              B        |L13.202|
                  |L13.102|
000066  6860              LDR      r0,[r4,#4]            ;295
000068  2800              CMP      r0,#0                 ;295
00006a  d10e              BNE      |L13.138|
00006c  48e3              LDR      r0,|L13.1020|
00006e  6800              LDR      r0,[r0,#0]            ;295
000070  2101              MOVS     r1,#1                 ;295
000072  0409              LSLS     r1,r1,#16             ;295
000074  4388              BICS     r0,r0,r1              ;295
000076  49e1              LDR      r1,|L13.1020|
000078  6008              STR      r0,[r1,#0]            ;295
00007a  4608              MOV      r0,r1                 ;295
00007c  6800              LDR      r0,[r0,#0]            ;295
00007e  2101              MOVS     r1,#1                 ;295
000080  0489              LSLS     r1,r1,#18             ;295
000082  4388              BICS     r0,r0,r1              ;295
000084  49dd              LDR      r1,|L13.1020|
000086  6008              STR      r0,[r1,#0]            ;295
000088  e01f              B        |L13.202|
                  |L13.138|
00008a  6860              LDR      r0,[r4,#4]            ;295
00008c  2805              CMP      r0,#5                 ;295
00008e  d10e              BNE      |L13.174|
000090  48da              LDR      r0,|L13.1020|
000092  6800              LDR      r0,[r0,#0]            ;295
000094  2101              MOVS     r1,#1                 ;295
000096  0489              LSLS     r1,r1,#18             ;295
000098  4308              ORRS     r0,r0,r1              ;295
00009a  49d8              LDR      r1,|L13.1020|
00009c  6008              STR      r0,[r1,#0]            ;295
00009e  4608              MOV      r0,r1                 ;295
0000a0  6800              LDR      r0,[r0,#0]            ;295
0000a2  2101              MOVS     r1,#1                 ;295
0000a4  0409              LSLS     r1,r1,#16             ;295
0000a6  4308              ORRS     r0,r0,r1              ;295
0000a8  49d4              LDR      r1,|L13.1020|
0000aa  6008              STR      r0,[r1,#0]            ;295
0000ac  e00d              B        |L13.202|
                  |L13.174|
0000ae  48d3              LDR      r0,|L13.1020|
0000b0  6800              LDR      r0,[r0,#0]            ;295
0000b2  2101              MOVS     r1,#1                 ;295
0000b4  0409              LSLS     r1,r1,#16             ;295
0000b6  4388              BICS     r0,r0,r1              ;295
0000b8  49d0              LDR      r1,|L13.1020|
0000ba  6008              STR      r0,[r1,#0]            ;295
0000bc  4608              MOV      r0,r1                 ;295
0000be  6800              LDR      r0,[r0,#0]            ;295
0000c0  2101              MOVS     r1,#1                 ;295
0000c2  0489              LSLS     r1,r1,#18             ;295
0000c4  4388              BICS     r0,r0,r1              ;295
0000c6  49cd              LDR      r1,|L13.1020|
0000c8  6008              STR      r0,[r1,#0]            ;295
                  |L13.202|
0000ca  bf00              NOP                            ;295
0000cc  6860              LDR      r0,[r4,#4]            ;299
0000ce  2800              CMP      r0,#0                 ;299
0000d0  d012              BEQ      |L13.248|
0000d2  f7fffffe          BL       HAL_GetTick
0000d6  4605              MOV      r5,r0                 ;302
0000d8  e006              B        |L13.232|
                  |L13.218|
0000da  f7fffffe          BL       HAL_GetTick
0000de  1b40              SUBS     r0,r0,r5              ;307
0000e0  2864              CMP      r0,#0x64              ;307
0000e2  d901              BLS      |L13.232|
0000e4  2003              MOVS     r0,#3                 ;309
0000e6  e7b1              B        |L13.76|
                  |L13.232|
0000e8  48c4              LDR      r0,|L13.1020|
0000ea  6800              LDR      r0,[r0,#0]            ;305
0000ec  2101              MOVS     r1,#1                 ;305
0000ee  0449              LSLS     r1,r1,#17             ;305
0000f0  4008              ANDS     r0,r0,r1              ;305
0000f2  2800              CMP      r0,#0                 ;305
0000f4  d0f1              BEQ      |L13.218|
                  |L13.246|
0000f6  e011              B        |L13.284|
                  |L13.248|
0000f8  f7fffffe          BL       HAL_GetTick
0000fc  4605              MOV      r5,r0                 ;316
0000fe  e006              B        |L13.270|
                  |L13.256|
000100  f7fffffe          BL       HAL_GetTick
000104  1b40              SUBS     r0,r0,r5              ;321
000106  2864              CMP      r0,#0x64              ;321
000108  d901              BLS      |L13.270|
00010a  2003              MOVS     r0,#3                 ;323
00010c  e79e              B        |L13.76|
                  |L13.270|
00010e  48bb              LDR      r0,|L13.1020|
000110  6800              LDR      r0,[r0,#0]            ;319
000112  2101              MOVS     r1,#1                 ;319
000114  0449              LSLS     r1,r1,#17             ;319
000116  4008              ANDS     r0,r0,r1              ;319
000118  2800              CMP      r0,#0                 ;319
00011a  d1f1              BNE      |L13.256|
                  |L13.284|
00011c  2102              MOVS     r1,#2                 ;330
00011e  6820              LDR      r0,[r4,#0]            ;330
000120  4008              ANDS     r0,r0,r1              ;330
000122  2802              CMP      r0,#2                 ;330
000124  d162              BNE      |L13.492|
000126  48b5              LDR      r0,|L13.1020|
000128  6840              LDR      r0,[r0,#4]            ;337
00012a  210c              MOVS     r1,#0xc               ;337
00012c  4008              ANDS     r0,r0,r1              ;337
00012e  2800              CMP      r0,#0                 ;337
000130  d00c              BEQ      |L13.332|
000132  48b2              LDR      r0,|L13.1020|
000134  6840              LDR      r0,[r0,#4]            ;338
000136  4008              ANDS     r0,r0,r1              ;338
000138  2808              CMP      r0,#8                 ;338
00013a  d11c              BNE      |L13.374|
00013c  48af              LDR      r0,|L13.1020|
00013e  6840              LDR      r0,[r0,#4]            ;338
000140  0349              LSLS     r1,r1,#13             ;338
000142  4008              ANDS     r0,r0,r1              ;338
000144  2101              MOVS     r1,#1                 ;338
000146  03c9              LSLS     r1,r1,#15             ;338
000148  4288              CMP      r0,r1                 ;338
00014a  d114              BNE      |L13.374|
                  |L13.332|
00014c  48ab              LDR      r0,|L13.1020|
00014e  6800              LDR      r0,[r0,#0]            ;341
000150  2102              MOVS     r1,#2                 ;341
000152  4008              ANDS     r0,r0,r1              ;341
000154  2800              CMP      r0,#0                 ;341
000156  d004              BEQ      |L13.354|
000158  68e0              LDR      r0,[r4,#0xc]          ;341
00015a  2801              CMP      r0,#1                 ;341
00015c  d001              BEQ      |L13.354|
00015e  2001              MOVS     r0,#1                 ;343
000160  e774              B        |L13.76|
                  |L13.354|
000162  48a6              LDR      r0,|L13.1020|
000164  6800              LDR      r0,[r0,#0]            ;349
000166  21f8              MOVS     r1,#0xf8              ;349
000168  4388              BICS     r0,r0,r1              ;349
00016a  6921              LDR      r1,[r4,#0x10]         ;349
00016c  00c9              LSLS     r1,r1,#3              ;349
00016e  4308              ORRS     r0,r0,r1              ;349
000170  49a2              LDR      r1,|L13.1020|
000172  6008              STR      r0,[r1,#0]            ;349
000174  e03a              B        |L13.492|
                  |L13.374|
000176  68e0              LDR      r0,[r4,#0xc]          ;355
000178  2800              CMP      r0,#0                 ;355
00017a  d020              BEQ      |L13.446|
00017c  489f              LDR      r0,|L13.1020|
00017e  6800              LDR      r0,[r0,#0]            ;358
000180  2101              MOVS     r1,#1                 ;358
000182  4308              ORRS     r0,r0,r1              ;358
000184  499d              LDR      r1,|L13.1020|
000186  6008              STR      r0,[r1,#0]            ;358
000188  f7fffffe          BL       HAL_GetTick
00018c  4605              MOV      r5,r0                 ;361
00018e  e006              B        |L13.414|
                  |L13.400|
000190  f7fffffe          BL       HAL_GetTick
000194  1b40              SUBS     r0,r0,r5              ;366
000196  2802              CMP      r0,#2                 ;366
000198  d901              BLS      |L13.414|
00019a  2003              MOVS     r0,#3                 ;368
00019c  e756              B        |L13.76|
                  |L13.414|
00019e  4897              LDR      r0,|L13.1020|
0001a0  6800              LDR      r0,[r0,#0]            ;364
0001a2  2102              MOVS     r1,#2                 ;364
0001a4  4008              ANDS     r0,r0,r1              ;364
0001a6  2800              CMP      r0,#0                 ;364
0001a8  d0f2              BEQ      |L13.400|
0001aa  4894              LDR      r0,|L13.1020|
0001ac  6800              LDR      r0,[r0,#0]            ;373
0001ae  21f8              MOVS     r1,#0xf8              ;373
0001b0  4388              BICS     r0,r0,r1              ;373
0001b2  6921              LDR      r1,[r4,#0x10]         ;373
0001b4  00c9              LSLS     r1,r1,#3              ;373
0001b6  4308              ORRS     r0,r0,r1              ;373
0001b8  4990              LDR      r1,|L13.1020|
0001ba  6008              STR      r0,[r1,#0]            ;373
0001bc  e016              B        |L13.492|
                  |L13.446|
0001be  488f              LDR      r0,|L13.1020|
0001c0  6800              LDR      r0,[r0,#0]            ;378
0001c2  0840              LSRS     r0,r0,#1              ;378
0001c4  0040              LSLS     r0,r0,#1              ;378
0001c6  498d              LDR      r1,|L13.1020|
0001c8  6008              STR      r0,[r1,#0]            ;378
0001ca  f7fffffe          BL       HAL_GetTick
0001ce  4605              MOV      r5,r0                 ;381
0001d0  e006              B        |L13.480|
                  |L13.466|
0001d2  f7fffffe          BL       HAL_GetTick
0001d6  1b40              SUBS     r0,r0,r5              ;386
0001d8  2802              CMP      r0,#2                 ;386
0001da  d901              BLS      |L13.480|
0001dc  2003              MOVS     r0,#3                 ;388
0001de  e735              B        |L13.76|
                  |L13.480|
0001e0  4886              LDR      r0,|L13.1020|
0001e2  6800              LDR      r0,[r0,#0]            ;384
0001e4  2102              MOVS     r1,#2                 ;384
0001e6  4008              ANDS     r0,r0,r1              ;384
0001e8  2800              CMP      r0,#0                 ;384
0001ea  d1f2              BNE      |L13.466|
                  |L13.492|
0001ec  2108              MOVS     r1,#8                 ;395
0001ee  6820              LDR      r0,[r4,#0]            ;395
0001f0  4008              ANDS     r0,r0,r1              ;395
0001f2  2808              CMP      r0,#8                 ;395
0001f4  d131              BNE      |L13.602|
0001f6  69e0              LDR      r0,[r4,#0x1c]         ;401
0001f8  2800              CMP      r0,#0                 ;401
0001fa  d017              BEQ      |L13.556|
0001fc  487f              LDR      r0,|L13.1020|
0001fe  6a40              LDR      r0,[r0,#0x24]         ;404
000200  2101              MOVS     r1,#1                 ;404
000202  4308              ORRS     r0,r0,r1              ;404
000204  497d              LDR      r1,|L13.1020|
000206  6248              STR      r0,[r1,#0x24]         ;404
000208  f7fffffe          BL       HAL_GetTick
00020c  4605              MOV      r5,r0                 ;407
00020e  e006              B        |L13.542|
                  |L13.528|
000210  f7fffffe          BL       HAL_GetTick
000214  1b40              SUBS     r0,r0,r5              ;412
000216  2802              CMP      r0,#2                 ;412
000218  d901              BLS      |L13.542|
00021a  2003              MOVS     r0,#3                 ;414
00021c  e716              B        |L13.76|
                  |L13.542|
00021e  4877              LDR      r0,|L13.1020|
000220  6a40              LDR      r0,[r0,#0x24]         ;410
000222  2102              MOVS     r1,#2                 ;410
000224  4008              ANDS     r0,r0,r1              ;410
000226  2800              CMP      r0,#0                 ;410
000228  d0f2              BEQ      |L13.528|
00022a  e016              B        |L13.602|
                  |L13.556|
00022c  4873              LDR      r0,|L13.1020|
00022e  6a40              LDR      r0,[r0,#0x24]         ;421
000230  0840              LSRS     r0,r0,#1              ;421
000232  0040              LSLS     r0,r0,#1              ;421
000234  4971              LDR      r1,|L13.1020|
000236  6248              STR      r0,[r1,#0x24]         ;421
000238  f7fffffe          BL       HAL_GetTick
00023c  4605              MOV      r5,r0                 ;424
00023e  e006              B        |L13.590|
                  |L13.576|
000240  f7fffffe          BL       HAL_GetTick
000244  1b40              SUBS     r0,r0,r5              ;429
000246  2802              CMP      r0,#2                 ;429
000248  d901              BLS      |L13.590|
00024a  2003              MOVS     r0,#3                 ;431
00024c  e6fe              B        |L13.76|
                  |L13.590|
00024e  486b              LDR      r0,|L13.1020|
000250  6a40              LDR      r0,[r0,#0x24]         ;427
000252  2102              MOVS     r1,#2                 ;427
000254  4008              ANDS     r0,r0,r1              ;427
000256  2800              CMP      r0,#0                 ;427
000258  d1f2              BNE      |L13.576|
                  |L13.602|
00025a  2104              MOVS     r1,#4                 ;437
00025c  6820              LDR      r0,[r4,#0]            ;437
00025e  4008              ANDS     r0,r0,r1              ;437
000260  2804              CMP      r0,#4                 ;437
000262  d171              BNE      |L13.840|
000264  2600              MOVS     r6,#0                 ;439
000266  4865              LDR      r0,|L13.1020|
000268  69c0              LDR      r0,[r0,#0x1c]         ;446
00026a  0689              LSLS     r1,r1,#26             ;446
00026c  4008              ANDS     r0,r0,r1              ;446
00026e  2800              CMP      r0,#0                 ;446
000270  d10d              BNE      |L13.654|
000272  bf00              NOP                            ;448
000274  4861              LDR      r0,|L13.1020|
000276  69c0              LDR      r0,[r0,#0x1c]         ;448
000278  4308              ORRS     r0,r0,r1              ;448
00027a  4960              LDR      r1,|L13.1020|
00027c  61c8              STR      r0,[r1,#0x1c]         ;448
00027e  4608              MOV      r0,r1                 ;448
000280  69c0              LDR      r0,[r0,#0x1c]         ;448
000282  0409              LSLS     r1,r1,#16             ;448
000284  4008              ANDS     r0,r0,r1              ;448
000286  9000              STR      r0,[sp,#0]            ;448
000288  bf00              NOP                            ;448
00028a  bf00              NOP                            ;448
00028c  2601              MOVS     r6,#1                 ;449
                  |L13.654|
00028e  485c              LDR      r0,|L13.1024|
000290  6800              LDR      r0,[r0,#0]            ;452
000292  21ff              MOVS     r1,#0xff              ;452
000294  3101              ADDS     r1,#1                 ;452
000296  4008              ANDS     r0,r0,r1              ;452
000298  2800              CMP      r0,#0                 ;452
00029a  d116              BNE      |L13.714|
00029c  4858              LDR      r0,|L13.1024|
00029e  6800              LDR      r0,[r0,#0]            ;455
0002a0  4308              ORRS     r0,r0,r1              ;455
0002a2  4957              LDR      r1,|L13.1024|
0002a4  6008              STR      r0,[r1,#0]            ;455
0002a6  f7fffffe          BL       HAL_GetTick
0002aa  4605              MOV      r5,r0                 ;458
0002ac  e006              B        |L13.700|
                  |L13.686|
0002ae  f7fffffe          BL       HAL_GetTick
0002b2  1b40              SUBS     r0,r0,r5              ;462
0002b4  2864              CMP      r0,#0x64              ;462
0002b6  d901              BLS      |L13.700|
0002b8  2003              MOVS     r0,#3                 ;464
0002ba  e6c7              B        |L13.76|
                  |L13.700|
0002bc  4850              LDR      r0,|L13.1024|
0002be  6800              LDR      r0,[r0,#0]            ;460
0002c0  21ff              MOVS     r1,#0xff              ;460
0002c2  3101              ADDS     r1,#1                 ;460
0002c4  4008              ANDS     r0,r0,r1              ;460
0002c6  2800              CMP      r0,#0                 ;460
0002c8  d0f1              BEQ      |L13.686|
                  |L13.714|
0002ca  bf00              NOP                            ;470
0002cc  68a0              LDR      r0,[r4,#8]            ;470
0002ce  2801              CMP      r0,#1                 ;470
0002d0  d106              BNE      |L13.736|
0002d2  484a              LDR      r0,|L13.1020|
0002d4  6a00              LDR      r0,[r0,#0x20]         ;470
0002d6  2101              MOVS     r1,#1                 ;470
0002d8  4308              ORRS     r0,r0,r1              ;470
0002da  4948              LDR      r1,|L13.1020|
0002dc  6208              STR      r0,[r1,#0x20]         ;470
0002de  e02b              B        |L13.824|
                  |L13.736|
0002e0  68a0              LDR      r0,[r4,#8]            ;470
0002e2  2800              CMP      r0,#0                 ;470
0002e4  d10c              BNE      |L13.768|
0002e6  4845              LDR      r0,|L13.1020|
0002e8  6a00              LDR      r0,[r0,#0x20]         ;470
0002ea  0840              LSRS     r0,r0,#1              ;470
0002ec  0040              LSLS     r0,r0,#1              ;470
0002ee  4943              LDR      r1,|L13.1020|
0002f0  6208              STR      r0,[r1,#0x20]         ;470
0002f2  4608              MOV      r0,r1                 ;470
0002f4  6a00              LDR      r0,[r0,#0x20]         ;470
0002f6  2104              MOVS     r1,#4                 ;470
0002f8  4388              BICS     r0,r0,r1              ;470
0002fa  4940              LDR      r1,|L13.1020|
0002fc  6208              STR      r0,[r1,#0x20]         ;470
0002fe  e01b              B        |L13.824|
                  |L13.768|
000300  68a0              LDR      r0,[r4,#8]            ;470
000302  2805              CMP      r0,#5                 ;470
000304  d10c              BNE      |L13.800|
000306  483d              LDR      r0,|L13.1020|
000308  6a00              LDR      r0,[r0,#0x20]         ;470
00030a  2104              MOVS     r1,#4                 ;470
00030c  4308              ORRS     r0,r0,r1              ;470
00030e  493b              LDR      r1,|L13.1020|
000310  6208              STR      r0,[r1,#0x20]         ;470
000312  4608              MOV      r0,r1                 ;470
000314  6a00              LDR      r0,[r0,#0x20]         ;470
000316  2101              MOVS     r1,#1                 ;470
000318  4308              ORRS     r0,r0,r1              ;470
00031a  4938              LDR      r1,|L13.1020|
00031c  6208              STR      r0,[r1,#0x20]         ;470
00031e  e00b              B        |L13.824|
                  |L13.800|
000320  4836              LDR      r0,|L13.1020|
000322  6a00              LDR      r0,[r0,#0x20]         ;470
000324  0840              LSRS     r0,r0,#1              ;470
000326  0040              LSLS     r0,r0,#1              ;470
000328  4934              LDR      r1,|L13.1020|
00032a  6208              STR      r0,[r1,#0x20]         ;470
00032c  4608              MOV      r0,r1                 ;470
00032e  6a00              LDR      r0,[r0,#0x20]         ;470
000330  2104              MOVS     r1,#4                 ;470
000332  4388              BICS     r0,r0,r1              ;470
000334  4931              LDR      r1,|L13.1020|
000336  6208              STR      r0,[r1,#0x20]         ;470
                  |L13.824|
000338  bf00              NOP                            ;470
00033a  68a0              LDR      r0,[r4,#8]            ;472
00033c  2800              CMP      r0,#0                 ;472
00033e  d013              BEQ      |L13.872|
000340  f7fffffe          BL       HAL_GetTick
000344  4605              MOV      r5,r0                 ;475
000346  e008              B        |L13.858|
                  |L13.840|
000348  e029              B        |L13.926|
                  |L13.842|
00034a  f7fffffe          BL       HAL_GetTick
00034e  1b40              SUBS     r0,r0,r5              ;480
000350  492c              LDR      r1,|L13.1028|
000352  4288              CMP      r0,r1                 ;480
000354  d901              BLS      |L13.858|
000356  2003              MOVS     r0,#3                 ;482
000358  e678              B        |L13.76|
                  |L13.858|
00035a  4828              LDR      r0,|L13.1020|
00035c  6a00              LDR      r0,[r0,#0x20]         ;478
00035e  2102              MOVS     r1,#2                 ;478
000360  4008              ANDS     r0,r0,r1              ;478
000362  2800              CMP      r0,#0                 ;478
000364  d0f1              BEQ      |L13.842|
000366  e011              B        |L13.908|
                  |L13.872|
000368  f7fffffe          BL       HAL_GetTick
00036c  4605              MOV      r5,r0                 ;489
00036e  e007              B        |L13.896|
                  |L13.880|
000370  f7fffffe          BL       HAL_GetTick
000374  1b40              SUBS     r0,r0,r5              ;494
000376  4923              LDR      r1,|L13.1028|
000378  4288              CMP      r0,r1                 ;494
00037a  d901              BLS      |L13.896|
00037c  2003              MOVS     r0,#3                 ;496
00037e  e665              B        |L13.76|
                  |L13.896|
000380  481e              LDR      r0,|L13.1020|
000382  6a00              LDR      r0,[r0,#0x20]         ;492
000384  2102              MOVS     r1,#2                 ;492
000386  4008              ANDS     r0,r0,r1              ;492
000388  2800              CMP      r0,#0                 ;492
00038a  d1f1              BNE      |L13.880|
                  |L13.908|
00038c  2e01              CMP      r6,#1                 ;502
00038e  d105              BNE      |L13.924|
000390  481a              LDR      r0,|L13.1020|
000392  69c0              LDR      r0,[r0,#0x1c]         ;504
000394  0731              LSLS     r1,r6,#28             ;504
000396  4388              BICS     r0,r0,r1              ;504
000398  4918              LDR      r1,|L13.1020|
00039a  61c8              STR      r0,[r1,#0x1c]         ;504
                  |L13.924|
00039c  bf00              NOP                            ;506
                  |L13.926|
00039e  2110              MOVS     r1,#0x10              ;509
0003a0  6820              LDR      r0,[r4,#0]            ;509
0003a2  4008              ANDS     r0,r0,r1              ;509
0003a4  2810              CMP      r0,#0x10              ;509
0003a6  d15f              BNE      |L13.1128|
0003a8  6960              LDR      r0,[r4,#0x14]         ;516
0003aa  2801              CMP      r0,#1                 ;516
0003ac  d12c              BNE      |L13.1032|
0003ae  4813              LDR      r0,|L13.1020|
0003b0  6b40              LDR      r0,[r0,#0x34]         ;519
0003b2  2104              MOVS     r1,#4                 ;519
0003b4  4308              ORRS     r0,r0,r1              ;519
0003b6  4911              LDR      r1,|L13.1020|
0003b8  6348              STR      r0,[r1,#0x34]         ;519
0003ba  4608              MOV      r0,r1                 ;522
0003bc  6b40              LDR      r0,[r0,#0x34]         ;522
0003be  2101              MOVS     r1,#1                 ;522
0003c0  4308              ORRS     r0,r0,r1              ;522
0003c2  490e              LDR      r1,|L13.1020|
0003c4  6348              STR      r0,[r1,#0x34]         ;522
0003c6  f7fffffe          BL       HAL_GetTick
0003ca  4605              MOV      r5,r0                 ;525
0003cc  e006              B        |L13.988|
                  |L13.974|
0003ce  f7fffffe          BL       HAL_GetTick
0003d2  1b40              SUBS     r0,r0,r5              ;530
0003d4  2802              CMP      r0,#2                 ;530
0003d6  d901              BLS      |L13.988|
0003d8  2003              MOVS     r0,#3                 ;532
0003da  e637              B        |L13.76|
                  |L13.988|
0003dc  4807              LDR      r0,|L13.1020|
0003de  6b40              LDR      r0,[r0,#0x34]         ;528
0003e0  2102              MOVS     r1,#2                 ;528
0003e2  4008              ANDS     r0,r0,r1              ;528
0003e4  2800              CMP      r0,#0                 ;528
0003e6  d0f2              BEQ      |L13.974|
0003e8  4804              LDR      r0,|L13.1020|
0003ea  6b40              LDR      r0,[r0,#0x34]         ;537
0003ec  21f8              MOVS     r1,#0xf8              ;537
0003ee  4388              BICS     r0,r0,r1              ;537
0003f0  69a1              LDR      r1,[r4,#0x18]         ;537
0003f2  00c9              LSLS     r1,r1,#3              ;537
0003f4  4308              ORRS     r0,r0,r1              ;537
0003f6  4901              LDR      r1,|L13.1020|
0003f8  6348              STR      r0,[r1,#0x34]         ;537
0003fa  e035              B        |L13.1128|
                  |L13.1020|
                          DCD      0x40021000
                  |L13.1024|
                          DCD      0x40007000
                  |L13.1028|
                          DCD      0x00001388
                  |L13.1032|
000408  6960              LDR      r0,[r4,#0x14]         ;539
00040a  1d40              ADDS     r0,r0,#5              ;539
00040c  2800              CMP      r0,#0                 ;539
00040e  d10f              BNE      |L13.1072|
000410  484e              LDR      r0,|L13.1356|
000412  6b40              LDR      r0,[r0,#0x34]         ;542
000414  2104              MOVS     r1,#4                 ;542
000416  4388              BICS     r0,r0,r1              ;542
000418  494c              LDR      r1,|L13.1356|
00041a  6348              STR      r0,[r1,#0x34]         ;542
00041c  4608              MOV      r0,r1                 ;545
00041e  6b40              LDR      r0,[r0,#0x34]         ;545
000420  21f8              MOVS     r1,#0xf8              ;545
000422  4388              BICS     r0,r0,r1              ;545
000424  69a1              LDR      r1,[r4,#0x18]         ;545
000426  00c9              LSLS     r1,r1,#3              ;545
000428  4308              ORRS     r0,r0,r1              ;545
00042a  4948              LDR      r1,|L13.1356|
00042c  6348              STR      r0,[r1,#0x34]         ;545
00042e  e01b              B        |L13.1128|
                  |L13.1072|
000430  4846              LDR      r0,|L13.1356|
000432  6b40              LDR      r0,[r0,#0x34]         ;550
000434  2104              MOVS     r1,#4                 ;550
000436  4308              ORRS     r0,r0,r1              ;550
000438  4944              LDR      r1,|L13.1356|
00043a  6348              STR      r0,[r1,#0x34]         ;550
00043c  4608              MOV      r0,r1                 ;553
00043e  6b40              LDR      r0,[r0,#0x34]         ;553
000440  0840              LSRS     r0,r0,#1              ;553
000442  0040              LSLS     r0,r0,#1              ;553
000444  6348              STR      r0,[r1,#0x34]         ;553
000446  f7fffffe          BL       HAL_GetTick
00044a  4605              MOV      r5,r0                 ;556
00044c  e006              B        |L13.1116|
                  |L13.1102|
00044e  f7fffffe          BL       HAL_GetTick
000452  1b40              SUBS     r0,r0,r5              ;561
000454  2802              CMP      r0,#2                 ;561
000456  d901              BLS      |L13.1116|
000458  2003              MOVS     r0,#3                 ;563
00045a  e5f7              B        |L13.76|
                  |L13.1116|
00045c  483b              LDR      r0,|L13.1356|
00045e  6b40              LDR      r0,[r0,#0x34]         ;559
000460  2102              MOVS     r1,#2                 ;559
000462  4008              ANDS     r0,r0,r1              ;559
000464  2800              CMP      r0,#0                 ;559
000466  d1f2              BNE      |L13.1102|
                  |L13.1128|
000468  6a20              LDR      r0,[r4,#0x20]         ;629
00046a  2800              CMP      r0,#0                 ;629
00046c  d06c              BEQ      |L13.1352|
00046e  4837              LDR      r0,|L13.1356|
000470  6840              LDR      r0,[r0,#4]            ;632
000472  210c              MOVS     r1,#0xc               ;632
000474  4008              ANDS     r0,r0,r1              ;632
000476  2808              CMP      r0,#8                 ;632
000478  d064              BEQ      |L13.1348|
00047a  6a20              LDR      r0,[r4,#0x20]         ;634
00047c  2802              CMP      r0,#2                 ;634
00047e  d147              BNE      |L13.1296|
000480  4832              LDR      r0,|L13.1356|
000482  6800              LDR      r0,[r0,#0]            ;642
000484  2101              MOVS     r1,#1                 ;642
000486  0609              LSLS     r1,r1,#24             ;642
000488  4388              BICS     r0,r0,r1              ;642
00048a  4930              LDR      r1,|L13.1356|
00048c  6008              STR      r0,[r1,#0]            ;642
00048e  f7fffffe          BL       HAL_GetTick
000492  4605              MOV      r5,r0                 ;645
000494  e006              B        |L13.1188|
                  |L13.1174|
000496  f7fffffe          BL       HAL_GetTick
00049a  1b40              SUBS     r0,r0,r5              ;650
00049c  2802              CMP      r0,#2                 ;650
00049e  d901              BLS      |L13.1188|
0004a0  2003              MOVS     r0,#3                 ;652
0004a2  e5d3              B        |L13.76|
                  |L13.1188|
0004a4  4829              LDR      r0,|L13.1356|
0004a6  6800              LDR      r0,[r0,#0]            ;648
0004a8  2101              MOVS     r1,#1                 ;648
0004aa  0649              LSLS     r1,r1,#25             ;648
0004ac  4008              ANDS     r0,r0,r1              ;648
0004ae  2800              CMP      r0,#0                 ;648
0004b0  d1f1              BNE      |L13.1174|
0004b2  bf00              NOP                            ;657
0004b4  4825              LDR      r0,|L13.1356|
0004b6  6ac0              LDR      r0,[r0,#0x2c]         ;657
0004b8  0900              LSRS     r0,r0,#4              ;657
0004ba  0100              LSLS     r0,r0,#4              ;657
0004bc  6ae1              LDR      r1,[r4,#0x2c]         ;657
0004be  4308              ORRS     r0,r0,r1              ;657
0004c0  4922              LDR      r1,|L13.1356|
0004c2  62c8              STR      r0,[r1,#0x2c]         ;657
0004c4  6a61              LDR      r1,[r4,#0x24]         ;657
0004c6  6aa0              LDR      r0,[r4,#0x28]         ;657
0004c8  4308              ORRS     r0,r0,r1              ;657
0004ca  4920              LDR      r1,|L13.1356|
0004cc  6849              LDR      r1,[r1,#4]            ;657
0004ce  227b              MOVS     r2,#0x7b              ;657
0004d0  03d2              LSLS     r2,r2,#15             ;657
0004d2  4391              BICS     r1,r1,r2              ;657
0004d4  4308              ORRS     r0,r0,r1              ;657
0004d6  491d              LDR      r1,|L13.1356|
0004d8  6048              STR      r0,[r1,#4]            ;657
0004da  bf00              NOP                            ;657
0004dc  4608              MOV      r0,r1                 ;661
0004de  6800              LDR      r0,[r0,#0]            ;661
0004e0  2101              MOVS     r1,#1                 ;661
0004e2  0609              LSLS     r1,r1,#24             ;661
0004e4  4308              ORRS     r0,r0,r1              ;661
0004e6  4919              LDR      r1,|L13.1356|
0004e8  6008              STR      r0,[r1,#0]            ;661
0004ea  f7fffffe          BL       HAL_GetTick
0004ee  4605              MOV      r5,r0                 ;664
0004f0  e006              B        |L13.1280|
                  |L13.1266|
0004f2  f7fffffe          BL       HAL_GetTick
0004f6  1b40              SUBS     r0,r0,r5              ;669
0004f8  2802              CMP      r0,#2                 ;669
0004fa  d901              BLS      |L13.1280|
0004fc  2003              MOVS     r0,#3                 ;671
0004fe  e5a5              B        |L13.76|
                  |L13.1280|
000500  4812              LDR      r0,|L13.1356|
000502  6800              LDR      r0,[r0,#0]            ;667
000504  2101              MOVS     r1,#1                 ;667
000506  0649              LSLS     r1,r1,#25             ;667
000508  4008              ANDS     r0,r0,r1              ;667
00050a  2800              CMP      r0,#0                 ;667
00050c  d0f1              BEQ      |L13.1266|
00050e  e01b              B        |L13.1352|
                  |L13.1296|
000510  480e              LDR      r0,|L13.1356|
000512  6800              LDR      r0,[r0,#0]            ;678
000514  2101              MOVS     r1,#1                 ;678
000516  0609              LSLS     r1,r1,#24             ;678
000518  4388              BICS     r0,r0,r1              ;678
00051a  490c              LDR      r1,|L13.1356|
00051c  6008              STR      r0,[r1,#0]            ;678
00051e  f7fffffe          BL       HAL_GetTick
000522  4605              MOV      r5,r0                 ;681
000524  e006              B        |L13.1332|
                  |L13.1318|
000526  f7fffffe          BL       HAL_GetTick
00052a  1b40              SUBS     r0,r0,r5              ;686
00052c  2802              CMP      r0,#2                 ;686
00052e  d901              BLS      |L13.1332|
000530  2003              MOVS     r0,#3                 ;688
000532  e58b              B        |L13.76|
                  |L13.1332|
000534  4805              LDR      r0,|L13.1356|
000536  6800              LDR      r0,[r0,#0]            ;684
000538  2101              MOVS     r1,#1                 ;684
00053a  0649              LSLS     r1,r1,#25             ;684
00053c  4008              ANDS     r0,r0,r1              ;684
00053e  2800              CMP      r0,#0                 ;684
000540  d1f1              BNE      |L13.1318|
000542  e001              B        |L13.1352|
                  |L13.1348|
000544  2001              MOVS     r0,#1                 ;695
000546  e581              B        |L13.76|
                  |L13.1352|
000548  2000              MOVS     r0,#0                 ;699
00054a  e57f              B        |L13.76|
;;;701    
                          ENDP

                  |L13.1356|
                          DCD      0x40021000

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_rcc_c_b7071a4b____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f0xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_rcc_c_b7071a4b____REVSH|
#line 402
|__asm___19_stm32f0xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
