; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_rtc_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_rtc_ex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_rtc_ex.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_rtc_ex.c]
                          THUMB

                          AREA ||i.HAL_RTCEx_DeactivateCalibrationOutPut||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_DeactivateCalibrationOutPut PROC
;;;1389     */
;;;1390   HAL_StatusTypeDef HAL_RTCEx_DeactivateCalibrationOutPut(RTC_HandleTypeDef* hrtc)
000000  4601              MOV      r1,r0
;;;1391   {
;;;1392     /* Process Locked */
;;;1393     __HAL_LOCK(hrtc);
000002  bf00              NOP      
000004  7f08              LDRB     r0,[r1,#0x1c]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L1.14|
00000a  2002              MOVS     r0,#2
                  |L1.12|
;;;1394   
;;;1395     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1396   
;;;1397     /* Disable the write protection for RTC registers */
;;;1398     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1399   
;;;1400     __HAL_RTC_CALIBRATION_OUTPUT_DISABLE(hrtc);
;;;1401   
;;;1402     /* Enable the write protection for RTC registers */
;;;1403     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1404   
;;;1405     /* Change RTC state */
;;;1406     hrtc->State = HAL_RTC_STATE_READY;
;;;1407   
;;;1408     /* Process Unlocked */
;;;1409     __HAL_UNLOCK(hrtc);
;;;1410   
;;;1411     return HAL_OK;
;;;1412   }
00000c  4770              BX       lr
                  |L1.14|
00000e  2001              MOVS     r0,#1                 ;1393
000010  7708              STRB     r0,[r1,#0x1c]         ;1393
000012  bf00              NOP                            ;1393
000014  2002              MOVS     r0,#2                 ;1395
000016  7748              STRB     r0,[r1,#0x1d]         ;1395
000018  bf00              NOP                            ;1398
00001a  20ca              MOVS     r0,#0xca              ;1398
00001c  680a              LDR      r2,[r1,#0]            ;1398
00001e  6250              STR      r0,[r2,#0x24]         ;1398
000020  2053              MOVS     r0,#0x53              ;1398
000022  680a              LDR      r2,[r1,#0]            ;1398
000024  6250              STR      r0,[r2,#0x24]         ;1398
000026  bf00              NOP                            ;1398
000028  6808              LDR      r0,[r1,#0]            ;1400
00002a  6880              LDR      r0,[r0,#8]            ;1400
00002c  2201              MOVS     r2,#1                 ;1400
00002e  05d2              LSLS     r2,r2,#23             ;1400
000030  4390              BICS     r0,r0,r2              ;1400
000032  680a              LDR      r2,[r1,#0]            ;1400
000034  6090              STR      r0,[r2,#8]            ;1400
000036  bf00              NOP                            ;1403
000038  20ff              MOVS     r0,#0xff              ;1403
00003a  680a              LDR      r2,[r1,#0]            ;1403
00003c  6250              STR      r0,[r2,#0x24]         ;1403
00003e  bf00              NOP                            ;1403
000040  2001              MOVS     r0,#1                 ;1406
000042  7748              STRB     r0,[r1,#0x1d]         ;1406
000044  bf00              NOP                            ;1409
000046  2000              MOVS     r0,#0                 ;1409
000048  7708              STRB     r0,[r1,#0x1c]         ;1409
00004a  bf00              NOP                            ;1409
00004c  bf00              NOP                            ;1411
00004e  e7dd              B        |L1.12|
;;;1413   
                          ENDP


                          AREA ||i.HAL_RTCEx_DeactivateRefClock||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_DeactivateRefClock PROC
;;;1467     */
;;;1468   HAL_StatusTypeDef HAL_RTCEx_DeactivateRefClock(RTC_HandleTypeDef* hrtc)
000000  b510              PUSH     {r4,lr}
;;;1469   {
000002  4604              MOV      r4,r0
;;;1470     /* Process Locked */
;;;1471     __HAL_LOCK(hrtc);
000004  bf00              NOP      
000006  7f20              LDRB     r0,[r4,#0x1c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L2.16|
00000c  2002              MOVS     r0,#2
                  |L2.14|
;;;1472   
;;;1473     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1474   
;;;1475     /* Disable the write protection for RTC registers */
;;;1476     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1477     
;;;1478     /* Set Initialization mode */
;;;1479     if(RTC_EnterInitMode(hrtc) != HAL_OK)
;;;1480     {
;;;1481       /* Enable the write protection for RTC registers */
;;;1482       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1483   
;;;1484       /* Set RTC state*/
;;;1485       hrtc->State = HAL_RTC_STATE_ERROR;
;;;1486   
;;;1487       /* Process Unlocked */
;;;1488       __HAL_UNLOCK(hrtc);
;;;1489   
;;;1490       return HAL_ERROR;
;;;1491     }
;;;1492     else
;;;1493     {
;;;1494       __HAL_RTC_CLOCKREF_DETECTION_DISABLE(hrtc);
;;;1495   
;;;1496       /* Exit Initialization mode */
;;;1497       hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
;;;1498     }
;;;1499   
;;;1500     /* Enable the write protection for RTC registers */
;;;1501     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1502   
;;;1503     /* Change RTC state */
;;;1504     hrtc->State = HAL_RTC_STATE_READY;
;;;1505   
;;;1506     /* Process Unlocked */
;;;1507     __HAL_UNLOCK(hrtc);
;;;1508   
;;;1509     return HAL_OK;
;;;1510   }
00000e  bd10              POP      {r4,pc}
                  |L2.16|
000010  2001              MOVS     r0,#1                 ;1471
000012  7720              STRB     r0,[r4,#0x1c]         ;1471
000014  bf00              NOP                            ;1471
000016  2002              MOVS     r0,#2                 ;1473
000018  7760              STRB     r0,[r4,#0x1d]         ;1473
00001a  bf00              NOP                            ;1476
00001c  20ca              MOVS     r0,#0xca              ;1476
00001e  6821              LDR      r1,[r4,#0]            ;1476
000020  6248              STR      r0,[r1,#0x24]         ;1476
000022  2053              MOVS     r0,#0x53              ;1476
000024  6821              LDR      r1,[r4,#0]            ;1476
000026  6248              STR      r0,[r1,#0x24]         ;1476
000028  bf00              NOP                            ;1476
00002a  4620              MOV      r0,r4                 ;1479
00002c  f7fffffe          BL       RTC_EnterInitMode
000030  2800              CMP      r0,#0                 ;1479
000032  d00c              BEQ      |L2.78|
000034  bf00              NOP                            ;1482
000036  20ff              MOVS     r0,#0xff              ;1482
000038  6821              LDR      r1,[r4,#0]            ;1482
00003a  6248              STR      r0,[r1,#0x24]         ;1482
00003c  bf00              NOP                            ;1482
00003e  2004              MOVS     r0,#4                 ;1485
000040  7760              STRB     r0,[r4,#0x1d]         ;1485
000042  bf00              NOP                            ;1488
000044  2000              MOVS     r0,#0                 ;1488
000046  7720              STRB     r0,[r4,#0x1c]         ;1488
000048  bf00              NOP                            ;1488
00004a  2001              MOVS     r0,#1                 ;1490
00004c  e7df              B        |L2.14|
                  |L2.78|
00004e  6820              LDR      r0,[r4,#0]            ;1494
000050  6880              LDR      r0,[r0,#8]            ;1494
000052  2110              MOVS     r1,#0x10              ;1494
000054  4388              BICS     r0,r0,r1              ;1494
000056  6821              LDR      r1,[r4,#0]            ;1494
000058  6088              STR      r0,[r1,#8]            ;1494
00005a  6820              LDR      r0,[r4,#0]            ;1497
00005c  68c0              LDR      r0,[r0,#0xc]          ;1497
00005e  2180              MOVS     r1,#0x80              ;1497
000060  4388              BICS     r0,r0,r1              ;1497
000062  6821              LDR      r1,[r4,#0]            ;1497
000064  60c8              STR      r0,[r1,#0xc]          ;1497
000066  bf00              NOP                            ;1501
000068  20ff              MOVS     r0,#0xff              ;1501
00006a  6821              LDR      r1,[r4,#0]            ;1501
00006c  6248              STR      r0,[r1,#0x24]         ;1501
00006e  bf00              NOP                            ;1501
000070  2001              MOVS     r0,#1                 ;1504
000072  7760              STRB     r0,[r4,#0x1d]         ;1504
000074  bf00              NOP                            ;1507
000076  2000              MOVS     r0,#0                 ;1507
000078  7720              STRB     r0,[r4,#0x1c]         ;1507
00007a  bf00              NOP                            ;1507
00007c  bf00              NOP                            ;1509
00007e  e7c6              B        |L2.14|
;;;1511   
                          ENDP


                          AREA ||i.HAL_RTCEx_DeactivateTamper||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_DeactivateTamper PROC
;;;454      */
;;;455    HAL_StatusTypeDef HAL_RTCEx_DeactivateTamper(RTC_HandleTypeDef *hrtc, uint32_t Tamper)
000000  4602              MOV      r2,r0
;;;456    {
;;;457      assert_param(IS_RTC_TAMPER(Tamper));
;;;458    
;;;459      /* Process Locked */
;;;460      __HAL_LOCK(hrtc);
000002  bf00              NOP      
000004  7f10              LDRB     r0,[r2,#0x1c]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L3.14|
00000a  2002              MOVS     r0,#2
                  |L3.12|
;;;461    
;;;462      hrtc->State = HAL_RTC_STATE_BUSY;
;;;463    
;;;464      /* Disable the selected Tamper pin */
;;;465      hrtc->Instance->TAFCR &= (uint32_t)~Tamper;
;;;466    
;;;467      hrtc->State = HAL_RTC_STATE_READY;
;;;468    
;;;469      /* Process Unlocked */
;;;470      __HAL_UNLOCK(hrtc);
;;;471    
;;;472      return HAL_OK;
;;;473    }
00000c  4770              BX       lr
                  |L3.14|
00000e  2001              MOVS     r0,#1                 ;460
000010  7710              STRB     r0,[r2,#0x1c]         ;460
000012  bf00              NOP                            ;460
000014  2002              MOVS     r0,#2                 ;462
000016  7750              STRB     r0,[r2,#0x1d]         ;462
000018  6810              LDR      r0,[r2,#0]            ;465
00001a  6c00              LDR      r0,[r0,#0x40]         ;465
00001c  4388              BICS     r0,r0,r1              ;465
00001e  6813              LDR      r3,[r2,#0]            ;465
000020  6418              STR      r0,[r3,#0x40]         ;465
000022  2001              MOVS     r0,#1                 ;467
000024  7750              STRB     r0,[r2,#0x1d]         ;467
000026  bf00              NOP                            ;470
000028  2000              MOVS     r0,#0                 ;470
00002a  7710              STRB     r0,[r2,#0x1c]         ;470
00002c  bf00              NOP                            ;470
00002e  bf00              NOP                            ;472
000030  e7ec              B        |L3.12|
;;;474    
                          ENDP


                          AREA ||i.HAL_RTCEx_DeactivateTimeStamp||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_DeactivateTimeStamp PROC
;;;253      */
;;;254    HAL_StatusTypeDef HAL_RTCEx_DeactivateTimeStamp(RTC_HandleTypeDef *hrtc)
000000  4601              MOV      r1,r0
;;;255    {
;;;256      uint32_t tmpreg = 0U;
000002  2200              MOVS     r2,#0
;;;257    
;;;258      /* Process Locked */
;;;259      __HAL_LOCK(hrtc);
000004  bf00              NOP      
000006  7f08              LDRB     r0,[r1,#0x1c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L4.16|
00000c  2002              MOVS     r0,#2
                  |L4.14|
;;;260    
;;;261      hrtc->State = HAL_RTC_STATE_BUSY;
;;;262    
;;;263      /* Disable the write protection for RTC registers */
;;;264      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;265    
;;;266      /* In case of interrupt mode is used, the interrupt source must disabled */
;;;267      __HAL_RTC_TIMESTAMP_DISABLE_IT(hrtc, RTC_IT_TS);
;;;268    
;;;269      /* Get the RTC_CR register and clear the bits to be configured */
;;;270      tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
;;;271    
;;;272      /* Configure the Time Stamp TSEDGE and Enable bits */
;;;273      hrtc->Instance->CR = (uint32_t)tmpreg;
;;;274    
;;;275      /* Enable the write protection for RTC registers */
;;;276      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;277    
;;;278      hrtc->State = HAL_RTC_STATE_READY;
;;;279    
;;;280      /* Process Unlocked */
;;;281      __HAL_UNLOCK(hrtc);
;;;282    
;;;283      return HAL_OK;
;;;284    }
00000e  4770              BX       lr
                  |L4.16|
000010  2001              MOVS     r0,#1                 ;259
000012  7708              STRB     r0,[r1,#0x1c]         ;259
000014  bf00              NOP                            ;259
000016  2002              MOVS     r0,#2                 ;261
000018  7748              STRB     r0,[r1,#0x1d]         ;261
00001a  bf00              NOP                            ;264
00001c  20ca              MOVS     r0,#0xca              ;264
00001e  680b              LDR      r3,[r1,#0]            ;264
000020  6258              STR      r0,[r3,#0x24]         ;264
000022  2053              MOVS     r0,#0x53              ;264
000024  680b              LDR      r3,[r1,#0]            ;264
000026  6258              STR      r0,[r3,#0x24]         ;264
000028  bf00              NOP                            ;264
00002a  6808              LDR      r0,[r1,#0]            ;267
00002c  6880              LDR      r0,[r0,#8]            ;267
00002e  2301              MOVS     r3,#1                 ;267
000030  03db              LSLS     r3,r3,#15             ;267
000032  4398              BICS     r0,r0,r3              ;267
000034  680b              LDR      r3,[r1,#0]            ;267
000036  6098              STR      r0,[r3,#8]            ;267
000038  6808              LDR      r0,[r1,#0]            ;270
00003a  6880              LDR      r0,[r0,#8]            ;270
00003c  4b08              LDR      r3,|L4.96|
00003e  4018              ANDS     r0,r0,r3              ;270
000040  4602              MOV      r2,r0                 ;270
000042  6808              LDR      r0,[r1,#0]            ;273
000044  6082              STR      r2,[r0,#8]            ;273
000046  bf00              NOP                            ;276
000048  20ff              MOVS     r0,#0xff              ;276
00004a  680b              LDR      r3,[r1,#0]            ;276
00004c  6258              STR      r0,[r3,#0x24]         ;276
00004e  bf00              NOP                            ;276
000050  2001              MOVS     r0,#1                 ;278
000052  7748              STRB     r0,[r1,#0x1d]         ;278
000054  bf00              NOP                            ;281
000056  2000              MOVS     r0,#0                 ;281
000058  7708              STRB     r0,[r1,#0x1c]         ;281
00005a  bf00              NOP                            ;281
00005c  bf00              NOP                            ;283
00005e  e7d6              B        |L4.14|
;;;285    
                          ENDP

                  |L4.96|
                          DCD      0xfffff7f7

                          AREA ||i.HAL_RTCEx_DeactivateWakeUpTimer||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_DeactivateWakeUpTimer PROC
;;;959      */
;;;960    uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
000000  b570              PUSH     {r4-r6,lr}
;;;961    {
000002  4604              MOV      r4,r0
;;;962      uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;963    
;;;964      /* Process Locked */
;;;965      __HAL_LOCK(hrtc);
000006  bf00              NOP      
000008  7f20              LDRB     r0,[r4,#0x1c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L5.18|
00000e  2002              MOVS     r0,#2
                  |L5.16|
;;;966    
;;;967      hrtc->State = HAL_RTC_STATE_BUSY;
;;;968    
;;;969      /* Disable the write protection for RTC registers */
;;;970      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;971    
;;;972      /* Disable the Wakeup Timer */
;;;973      __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
;;;974    
;;;975      /* In case of interrupt mode is used, the interrupt source must disabled */
;;;976      __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
;;;977    
;;;978      tickstart = HAL_GetTick();
;;;979      /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
;;;980      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
;;;981      {
;;;982        if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
;;;983        {
;;;984          /* Enable the write protection for RTC registers */
;;;985          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;986    
;;;987          hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;988    
;;;989          /* Process Unlocked */
;;;990          __HAL_UNLOCK(hrtc);
;;;991    
;;;992          return HAL_TIMEOUT;
;;;993        }
;;;994      }
;;;995    
;;;996      /* Enable the write protection for RTC registers */
;;;997      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;998    
;;;999      hrtc->State = HAL_RTC_STATE_READY;
;;;1000   
;;;1001     /* Process Unlocked */
;;;1002     __HAL_UNLOCK(hrtc);
;;;1003   
;;;1004     return HAL_OK;
;;;1005   }
000010  bd70              POP      {r4-r6,pc}
                  |L5.18|
000012  2001              MOVS     r0,#1                 ;965
000014  7720              STRB     r0,[r4,#0x1c]         ;965
000016  bf00              NOP                            ;965
000018  2002              MOVS     r0,#2                 ;967
00001a  7760              STRB     r0,[r4,#0x1d]         ;967
00001c  bf00              NOP                            ;970
00001e  20ca              MOVS     r0,#0xca              ;970
000020  6821              LDR      r1,[r4,#0]            ;970
000022  6248              STR      r0,[r1,#0x24]         ;970
000024  2053              MOVS     r0,#0x53              ;970
000026  6821              LDR      r1,[r4,#0]            ;970
000028  6248              STR      r0,[r1,#0x24]         ;970
00002a  bf00              NOP                            ;970
00002c  6820              LDR      r0,[r4,#0]            ;973
00002e  6880              LDR      r0,[r0,#8]            ;973
000030  2101              MOVS     r1,#1                 ;973
000032  0289              LSLS     r1,r1,#10             ;973
000034  4388              BICS     r0,r0,r1              ;973
000036  6821              LDR      r1,[r4,#0]            ;973
000038  6088              STR      r0,[r1,#8]            ;973
00003a  6820              LDR      r0,[r4,#0]            ;976
00003c  6880              LDR      r0,[r0,#8]            ;976
00003e  2101              MOVS     r1,#1                 ;976
000040  0389              LSLS     r1,r1,#14             ;976
000042  4388              BICS     r0,r0,r1              ;976
000044  6821              LDR      r1,[r4,#0]            ;976
000046  6088              STR      r0,[r1,#8]            ;976
000048  f7fffffe          BL       HAL_GetTick
00004c  4605              MOV      r5,r0                 ;978
00004e  e013              B        |L5.120|
                  |L5.80|
000050  f7fffffe          BL       HAL_GetTick
000054  1b40              SUBS     r0,r0,r5              ;982
000056  217d              MOVS     r1,#0x7d              ;982
000058  00c9              LSLS     r1,r1,#3              ;982
00005a  4288              CMP      r0,r1                 ;982
00005c  d90c              BLS      |L5.120|
00005e  bf00              NOP                            ;985
000060  20ff              MOVS     r0,#0xff              ;985
000062  6821              LDR      r1,[r4,#0]            ;985
000064  6248              STR      r0,[r1,#0x24]         ;985
000066  bf00              NOP                            ;985
000068  2003              MOVS     r0,#3                 ;987
00006a  7760              STRB     r0,[r4,#0x1d]         ;987
00006c  bf00              NOP                            ;990
00006e  2000              MOVS     r0,#0                 ;990
000070  7720              STRB     r0,[r4,#0x1c]         ;990
000072  bf00              NOP                            ;990
000074  2003              MOVS     r0,#3                 ;992
000076  e7cb              B        |L5.16|
                  |L5.120|
000078  6820              LDR      r0,[r4,#0]            ;980
00007a  68c0              LDR      r0,[r0,#0xc]          ;980
00007c  2104              MOVS     r1,#4                 ;980
00007e  4008              ANDS     r0,r0,r1              ;980
000080  0880              LSRS     r0,r0,#2              ;980
000082  2800              CMP      r0,#0                 ;980
000084  d0e4              BEQ      |L5.80|
000086  bf00              NOP                            ;997
000088  20ff              MOVS     r0,#0xff              ;997
00008a  6821              LDR      r1,[r4,#0]            ;997
00008c  6248              STR      r0,[r1,#0x24]         ;997
00008e  bf00              NOP                            ;997
000090  2001              MOVS     r0,#1                 ;999
000092  7760              STRB     r0,[r4,#0x1d]         ;999
000094  bf00              NOP                            ;1002
000096  2000              MOVS     r0,#0                 ;1002
000098  7720              STRB     r0,[r4,#0x1c]         ;1002
00009a  bf00              NOP                            ;1002
00009c  bf00              NOP                            ;1004
00009e  e7b7              B        |L5.16|
;;;1006   
                          ENDP


                          AREA ||i.HAL_RTCEx_DisableBypassShadow||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_DisableBypassShadow PROC
;;;1550     */
;;;1551   HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
000000  4601              MOV      r1,r0
;;;1552   {
;;;1553     /* Process Locked */
;;;1554     __HAL_LOCK(hrtc);
000002  bf00              NOP      
000004  7f08              LDRB     r0,[r1,#0x1c]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L6.14|
00000a  2002              MOVS     r0,#2
                  |L6.12|
;;;1555   
;;;1556     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1557   
;;;1558     /* Disable the write protection for RTC registers */
;;;1559     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1560   
;;;1561     /* Reset the BYPSHAD bit */
;;;1562     hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
;;;1563   
;;;1564     /* Enable the write protection for RTC registers */
;;;1565     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1566   
;;;1567     /* Change RTC state */
;;;1568     hrtc->State = HAL_RTC_STATE_READY;
;;;1569   
;;;1570     /* Process Unlocked */
;;;1571     __HAL_UNLOCK(hrtc);
;;;1572   
;;;1573     return HAL_OK;
;;;1574   }
00000c  4770              BX       lr
                  |L6.14|
00000e  2001              MOVS     r0,#1                 ;1554
000010  7708              STRB     r0,[r1,#0x1c]         ;1554
000012  bf00              NOP                            ;1554
000014  2002              MOVS     r0,#2                 ;1556
000016  7748              STRB     r0,[r1,#0x1d]         ;1556
000018  bf00              NOP                            ;1559
00001a  20ca              MOVS     r0,#0xca              ;1559
00001c  680a              LDR      r2,[r1,#0]            ;1559
00001e  6250              STR      r0,[r2,#0x24]         ;1559
000020  2053              MOVS     r0,#0x53              ;1559
000022  680a              LDR      r2,[r1,#0]            ;1559
000024  6250              STR      r0,[r2,#0x24]         ;1559
000026  bf00              NOP                            ;1559
000028  6808              LDR      r0,[r1,#0]            ;1562
00002a  6880              LDR      r0,[r0,#8]            ;1562
00002c  22df              MOVS     r2,#0xdf              ;1562
00002e  4010              ANDS     r0,r0,r2              ;1562
000030  680a              LDR      r2,[r1,#0]            ;1562
000032  6090              STR      r0,[r2,#8]            ;1562
000034  bf00              NOP                            ;1565
000036  20ff              MOVS     r0,#0xff              ;1565
000038  680a              LDR      r2,[r1,#0]            ;1565
00003a  6250              STR      r0,[r2,#0x24]         ;1565
00003c  bf00              NOP                            ;1565
00003e  2001              MOVS     r0,#1                 ;1568
000040  7748              STRB     r0,[r1,#0x1d]         ;1568
000042  bf00              NOP                            ;1571
000044  2000              MOVS     r0,#0                 ;1571
000046  7708              STRB     r0,[r1,#0x1c]         ;1571
000048  bf00              NOP                            ;1571
00004a  bf00              NOP                            ;1573
00004c  e7de              B        |L6.12|
;;;1575   
                          ENDP


                          AREA ||i.HAL_RTCEx_EnableBypassShadow||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_EnableBypassShadow PROC
;;;1518     */
;;;1519   HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
000000  4601              MOV      r1,r0
;;;1520   {
;;;1521     /* Process Locked */
;;;1522     __HAL_LOCK(hrtc);
000002  bf00              NOP      
000004  7f08              LDRB     r0,[r1,#0x1c]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L7.14|
00000a  2002              MOVS     r0,#2
                  |L7.12|
;;;1523   
;;;1524     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1525   
;;;1526     /* Disable the write protection for RTC registers */
;;;1527     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1528   
;;;1529     /* Set the BYPSHAD bit */
;;;1530     hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
;;;1531   
;;;1532     /* Enable the write protection for RTC registers */
;;;1533     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1534   
;;;1535     /* Change RTC state */
;;;1536     hrtc->State = HAL_RTC_STATE_READY;
;;;1537   
;;;1538     /* Process Unlocked */
;;;1539     __HAL_UNLOCK(hrtc);
;;;1540   
;;;1541     return HAL_OK;
;;;1542   }
00000c  4770              BX       lr
                  |L7.14|
00000e  2001              MOVS     r0,#1                 ;1522
000010  7708              STRB     r0,[r1,#0x1c]         ;1522
000012  bf00              NOP                            ;1522
000014  2002              MOVS     r0,#2                 ;1524
000016  7748              STRB     r0,[r1,#0x1d]         ;1524
000018  bf00              NOP                            ;1527
00001a  20ca              MOVS     r0,#0xca              ;1527
00001c  680a              LDR      r2,[r1,#0]            ;1527
00001e  6250              STR      r0,[r2,#0x24]         ;1527
000020  2053              MOVS     r0,#0x53              ;1527
000022  680a              LDR      r2,[r1,#0]            ;1527
000024  6250              STR      r0,[r2,#0x24]         ;1527
000026  bf00              NOP                            ;1527
000028  6808              LDR      r0,[r1,#0]            ;1530
00002a  6880              LDR      r0,[r0,#8]            ;1530
00002c  2220              MOVS     r2,#0x20              ;1530
00002e  4310              ORRS     r0,r0,r2              ;1530
000030  680a              LDR      r2,[r1,#0]            ;1530
000032  6090              STR      r0,[r2,#8]            ;1530
000034  bf00              NOP                            ;1533
000036  20ff              MOVS     r0,#0xff              ;1533
000038  680a              LDR      r2,[r1,#0]            ;1533
00003a  6250              STR      r0,[r2,#0x24]         ;1533
00003c  bf00              NOP                            ;1533
00003e  2001              MOVS     r0,#1                 ;1536
000040  7748              STRB     r0,[r1,#0x1d]         ;1536
000042  bf00              NOP                            ;1539
000044  2000              MOVS     r0,#0                 ;1539
000046  7708              STRB     r0,[r1,#0x1c]         ;1539
000048  bf00              NOP                            ;1539
00004a  bf00              NOP                            ;1541
00004c  e7de              B        |L7.12|
;;;1543   
                          ENDP


                          AREA ||i.HAL_RTCEx_GetTimeStamp||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_GetTimeStamp PROC
;;;297      */
;;;298    HAL_StatusTypeDef HAL_RTCEx_GetTimeStamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef* sTimeStamp, RTC_DateTypeDef* sTimeStampDate, uint32_t Format)
000000  b5ff              PUSH     {r0-r7,lr}
;;;299    {
000002  b081              SUB      sp,sp,#4
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;300      uint32_t tmptime = 0U, tmpdate = 0U;
00000a  2700              MOVS     r7,#0
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;301    
;;;302      /* Check the parameters */
;;;303      assert_param(IS_RTC_FORMAT(Format));
;;;304    
;;;305      /* Get the TimeStamp time and date registers values */
;;;306      tmptime = (uint32_t)(hrtc->Instance->TSTR & RTC_TR_RESERVED_MASK);
000010  6830              LDR      r0,[r6,#0]
000012  6b00              LDR      r0,[r0,#0x30]
000014  492a              LDR      r1,|L8.192|
000016  4008              ANDS     r0,r0,r1
000018  4607              MOV      r7,r0
;;;307      tmpdate = (uint32_t)(hrtc->Instance->TSDR & RTC_DR_RESERVED_MASK);
00001a  6830              LDR      r0,[r6,#0]
00001c  6b40              LDR      r0,[r0,#0x34]
00001e  4929              LDR      r1,|L8.196|
000020  4008              ANDS     r0,r0,r1
000022  9000              STR      r0,[sp,#0]
;;;308    
;;;309      /* Fill the Time structure fields with the read parameters */
;;;310      sTimeStamp->Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
000024  203f              MOVS     r0,#0x3f
000026  0400              LSLS     r0,r0,#16
000028  4038              ANDS     r0,r0,r7
00002a  0c00              LSRS     r0,r0,#16
00002c  7020              STRB     r0,[r4,#0]
;;;311      sTimeStamp->Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
00002e  207f              MOVS     r0,#0x7f
000030  0200              LSLS     r0,r0,#8
000032  4038              ANDS     r0,r0,r7
000034  0a00              LSRS     r0,r0,#8
000036  7060              STRB     r0,[r4,#1]
;;;312      sTimeStamp->Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
000038  0678              LSLS     r0,r7,#25
00003a  0e40              LSRS     r0,r0,#25
00003c  70a0              STRB     r0,[r4,#2]
;;;313      sTimeStamp->TimeFormat = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16U);
00003e  2001              MOVS     r0,#1
000040  0580              LSLS     r0,r0,#22
000042  4038              ANDS     r0,r0,r7
000044  0c00              LSRS     r0,r0,#16
000046  70e0              STRB     r0,[r4,#3]
;;;314      sTimeStamp->SubSeconds = (uint32_t) hrtc->Instance->TSSSR;
000048  6830              LDR      r0,[r6,#0]
00004a  6b80              LDR      r0,[r0,#0x38]
00004c  6060              STR      r0,[r4,#4]
;;;315    
;;;316      /* Fill the Date structure fields with the read parameters */
;;;317      sTimeStampDate->Year = 0;
00004e  2000              MOVS     r0,#0
000050  70e8              STRB     r0,[r5,#3]
;;;318      sTimeStampDate->Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
000052  211f              MOVS     r1,#0x1f
000054  0209              LSLS     r1,r1,#8
000056  9800              LDR      r0,[sp,#0]
000058  4008              ANDS     r0,r0,r1
00005a  0a00              LSRS     r0,r0,#8
00005c  7068              STRB     r0,[r5,#1]
;;;319      sTimeStampDate->Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
00005e  9800              LDR      r0,[sp,#0]
000060  0680              LSLS     r0,r0,#26
000062  0e80              LSRS     r0,r0,#26
000064  70a8              STRB     r0,[r5,#2]
;;;320      sTimeStampDate->WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13U);
000066  2107              MOVS     r1,#7
000068  0349              LSLS     r1,r1,#13
00006a  9800              LDR      r0,[sp,#0]
00006c  4008              ANDS     r0,r0,r1
00006e  0b40              LSRS     r0,r0,#13
000070  7028              STRB     r0,[r5,#0]
;;;321    
;;;322      /* Check the input parameters format */
;;;323      if(Format == RTC_FORMAT_BIN)
000072  9804              LDR      r0,[sp,#0x10]
000074  2800              CMP      r0,#0
000076  d117              BNE      |L8.168|
;;;324      {
;;;325        /* Convert the TimeStamp structure parameters to Binary format */
;;;326        sTimeStamp->Hours = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Hours);
000078  7820              LDRB     r0,[r4,#0]
00007a  f7fffffe          BL       RTC_Bcd2ToByte
00007e  7020              STRB     r0,[r4,#0]
;;;327        sTimeStamp->Minutes = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Minutes);
000080  7860              LDRB     r0,[r4,#1]
000082  f7fffffe          BL       RTC_Bcd2ToByte
000086  7060              STRB     r0,[r4,#1]
;;;328        sTimeStamp->Seconds = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Seconds);
000088  78a0              LDRB     r0,[r4,#2]
00008a  f7fffffe          BL       RTC_Bcd2ToByte
00008e  70a0              STRB     r0,[r4,#2]
;;;329    
;;;330        /* Convert the DateTimeStamp structure parameters to Binary format */
;;;331        sTimeStampDate->Month = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Month);
000090  7868              LDRB     r0,[r5,#1]
000092  f7fffffe          BL       RTC_Bcd2ToByte
000096  7068              STRB     r0,[r5,#1]
;;;332        sTimeStampDate->Date = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Date);
000098  78a8              LDRB     r0,[r5,#2]
00009a  f7fffffe          BL       RTC_Bcd2ToByte
00009e  70a8              STRB     r0,[r5,#2]
;;;333        sTimeStampDate->WeekDay = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->WeekDay);
0000a0  7828              LDRB     r0,[r5,#0]
0000a2  f7fffffe          BL       RTC_Bcd2ToByte
0000a6  7028              STRB     r0,[r5,#0]
                  |L8.168|
;;;334      }
;;;335    
;;;336      /* Clear the TIMESTAMP Flag */
;;;337      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
0000a8  6830              LDR      r0,[r6,#0]
0000aa  68c0              LDR      r0,[r0,#0xc]
0000ac  2180              MOVS     r1,#0x80
0000ae  4008              ANDS     r0,r0,r1
0000b0  4905              LDR      r1,|L8.200|
0000b2  4308              ORRS     r0,r0,r1
0000b4  6831              LDR      r1,[r6,#0]
0000b6  60c8              STR      r0,[r1,#0xc]
;;;338    
;;;339      return HAL_OK;
0000b8  2000              MOVS     r0,#0
;;;340    }
0000ba  b005              ADD      sp,sp,#0x14
0000bc  bdf0              POP      {r4-r7,pc}
;;;341    
                          ENDP

0000be  0000              DCW      0x0000
                  |L8.192|
                          DCD      0x007f7f7f
                  |L8.196|
                          DCD      0x00ffff3f
                  |L8.200|
                          DCD      0xfffff77f

                          AREA ||i.HAL_RTCEx_GetWakeUpTimer||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_GetWakeUpTimer PROC
;;;1011     */
;;;1012   uint32_t HAL_RTCEx_GetWakeUpTimer(RTC_HandleTypeDef *hrtc)
000000  4601              MOV      r1,r0
;;;1013   {
;;;1014     /* Get the counter value */
;;;1015     return ((uint32_t)(hrtc->Instance->WUTR & RTC_WUTR_WUT));
000002  6808              LDR      r0,[r1,#0]
000004  6940              LDR      r0,[r0,#0x14]
000006  b280              UXTH     r0,r0
;;;1016   }
000008  4770              BX       lr
;;;1017   
                          ENDP


                          AREA ||i.HAL_RTCEx_PollForTamper1Event||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_PollForTamper1Event PROC
;;;653      */
;;;654    HAL_StatusTypeDef HAL_RTCEx_PollForTamper1Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;655    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;656      uint32_t tickstart = HAL_GetTick();
000006  f7fffffe          BL       HAL_GetTick
00000a  4606              MOV      r6,r0
;;;657    
;;;658      /* Get the status of the Interrupt */
;;;659      while(__HAL_RTC_TAMPER_GET_FLAG(hrtc,RTC_FLAG_TAMP1F)== RESET)
00000c  e00c              B        |L10.40|
                  |L10.14|
;;;660      {
;;;661        if(Timeout != HAL_MAX_DELAY)
00000e  1c68              ADDS     r0,r5,#1
000010  2800              CMP      r0,#0
000012  d009              BEQ      |L10.40|
;;;662        {
;;;663          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
000014  2d00              CMP      r5,#0
000016  d004              BEQ      |L10.34|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  42a8              CMP      r0,r5
000020  d902              BLS      |L10.40|
                  |L10.34|
;;;664          {
;;;665            hrtc->State = HAL_RTC_STATE_TIMEOUT;
000022  2003              MOVS     r0,#3
000024  7760              STRB     r0,[r4,#0x1d]
                  |L10.38|
;;;666            return HAL_TIMEOUT;
;;;667          }
;;;668        }
;;;669      }
;;;670    
;;;671      /* Clear the Tamper Flag */
;;;672      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
;;;673      
;;;674      /* Change RTC state */
;;;675      hrtc->State = HAL_RTC_STATE_READY;
;;;676      
;;;677      return HAL_OK; 
;;;678    }
000026  bd70              POP      {r4-r6,pc}
                  |L10.40|
000028  6820              LDR      r0,[r4,#0]            ;659
00002a  68c0              LDR      r0,[r0,#0xc]          ;659
00002c  2101              MOVS     r1,#1                 ;659
00002e  0349              LSLS     r1,r1,#13             ;659
000030  4008              ANDS     r0,r0,r1              ;659
000032  0b40              LSRS     r0,r0,#13             ;659
000034  2800              CMP      r0,#0                 ;659
000036  d0ea              BEQ      |L10.14|
000038  6820              LDR      r0,[r4,#0]            ;672
00003a  68c0              LDR      r0,[r0,#0xc]          ;672
00003c  2180              MOVS     r1,#0x80              ;672
00003e  4008              ANDS     r0,r0,r1              ;672
000040  4903              LDR      r1,|L10.80|
000042  4308              ORRS     r0,r0,r1              ;672
000044  6821              LDR      r1,[r4,#0]            ;672
000046  60c8              STR      r0,[r1,#0xc]          ;672
000048  2001              MOVS     r0,#1                 ;675
00004a  7760              STRB     r0,[r4,#0x1d]         ;675
00004c  2000              MOVS     r0,#0                 ;677
00004e  e7ea              B        |L10.38|
;;;679    
                          ENDP

                  |L10.80|
                          DCD      0xffffdf7f

                          AREA ||i.HAL_RTCEx_PollForTamper2Event||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_PollForTamper2Event PROC
;;;685      */
;;;686    HAL_StatusTypeDef HAL_RTCEx_PollForTamper2Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;687    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;688      uint32_t tickstart = HAL_GetTick();
000006  f7fffffe          BL       HAL_GetTick
00000a  4606              MOV      r6,r0
;;;689    
;;;690      /* Get the status of the Interrupt */
;;;691      while(__HAL_RTC_TAMPER_GET_FLAG(hrtc,RTC_FLAG_TAMP2F) == RESET)
00000c  e00c              B        |L11.40|
                  |L11.14|
;;;692      {
;;;693        if(Timeout != HAL_MAX_DELAY)
00000e  1c68              ADDS     r0,r5,#1
000010  2800              CMP      r0,#0
000012  d009              BEQ      |L11.40|
;;;694        {
;;;695          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
000014  2d00              CMP      r5,#0
000016  d004              BEQ      |L11.34|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  42a8              CMP      r0,r5
000020  d902              BLS      |L11.40|
                  |L11.34|
;;;696          {
;;;697            hrtc->State = HAL_RTC_STATE_TIMEOUT;
000022  2003              MOVS     r0,#3
000024  7760              STRB     r0,[r4,#0x1d]
                  |L11.38|
;;;698            return HAL_TIMEOUT;
;;;699          }
;;;700        }
;;;701      }
;;;702    
;;;703      /* Clear the Tamper Flag */
;;;704      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP2F);
;;;705    
;;;706      /* Change RTC state */
;;;707      hrtc->State = HAL_RTC_STATE_READY;
;;;708    
;;;709      return HAL_OK;
;;;710    }
000026  bd70              POP      {r4-r6,pc}
                  |L11.40|
000028  6820              LDR      r0,[r4,#0]            ;691
00002a  68c0              LDR      r0,[r0,#0xc]          ;691
00002c  2101              MOVS     r1,#1                 ;691
00002e  0389              LSLS     r1,r1,#14             ;691
000030  4008              ANDS     r0,r0,r1              ;691
000032  0b80              LSRS     r0,r0,#14             ;691
000034  2800              CMP      r0,#0                 ;691
000036  d0ea              BEQ      |L11.14|
000038  6820              LDR      r0,[r4,#0]            ;704
00003a  68c0              LDR      r0,[r0,#0xc]          ;704
00003c  2180              MOVS     r1,#0x80              ;704
00003e  4008              ANDS     r0,r0,r1              ;704
000040  4903              LDR      r1,|L11.80|
000042  4308              ORRS     r0,r0,r1              ;704
000044  6821              LDR      r1,[r4,#0]            ;704
000046  60c8              STR      r0,[r1,#0xc]          ;704
000048  2001              MOVS     r0,#1                 ;707
00004a  7760              STRB     r0,[r4,#0x1d]         ;707
00004c  2000              MOVS     r0,#0                 ;709
00004e  e7ea              B        |L11.38|
;;;711    
                          ENDP

                  |L11.80|
                          DCD      0xffffbf7f

                          AREA ||i.HAL_RTCEx_PollForTimeStampEvent||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_PollForTimeStampEvent PROC
;;;614      */
;;;615    HAL_StatusTypeDef HAL_RTCEx_PollForTimeStampEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;616    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;617      uint32_t tickstart = HAL_GetTick();
000006  f7fffffe          BL       HAL_GetTick
00000a  4606              MOV      r6,r0
;;;618    
;;;619      while(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) == RESET)
00000c  e020              B        |L12.80|
                  |L12.14|
;;;620      {
;;;621        if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSOVF) != RESET)
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  2101              MOVS     r1,#1
000014  0309              LSLS     r1,r1,#12
000016  4008              ANDS     r0,r0,r1
000018  0b00              LSRS     r0,r0,#12
00001a  2800              CMP      r0,#0
00001c  d00b              BEQ      |L12.54|
;;;622        {
;;;623          /* Clear the TIMESTAMP OverRun Flag */
;;;624          __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
00001e  6820              LDR      r0,[r4,#0]
000020  68c0              LDR      r0,[r0,#0xc]
000022  2180              MOVS     r1,#0x80
000024  4008              ANDS     r0,r0,r1
000026  4910              LDR      r1,|L12.104|
000028  4308              ORRS     r0,r0,r1
00002a  6821              LDR      r1,[r4,#0]
00002c  60c8              STR      r0,[r1,#0xc]
;;;625    
;;;626          /* Change TIMESTAMP state */
;;;627          hrtc->State = HAL_RTC_STATE_ERROR;
00002e  2004              MOVS     r0,#4
000030  7760              STRB     r0,[r4,#0x1d]
;;;628    
;;;629          return HAL_ERROR;
000032  2001              MOVS     r0,#1
                  |L12.52|
;;;630        }
;;;631    
;;;632        if(Timeout != HAL_MAX_DELAY)
;;;633        {
;;;634          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;635          {
;;;636            hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;637            return HAL_TIMEOUT;
;;;638          }
;;;639        }
;;;640      }
;;;641    
;;;642      /* Change RTC state */
;;;643      hrtc->State = HAL_RTC_STATE_READY;
;;;644      
;;;645      return HAL_OK;
;;;646    }
000034  bd70              POP      {r4-r6,pc}
                  |L12.54|
000036  1c68              ADDS     r0,r5,#1              ;632
000038  2800              CMP      r0,#0                 ;632
00003a  d009              BEQ      |L12.80|
00003c  2d00              CMP      r5,#0                 ;634
00003e  d004              BEQ      |L12.74|
000040  f7fffffe          BL       HAL_GetTick
000044  1b80              SUBS     r0,r0,r6              ;634
000046  42a8              CMP      r0,r5                 ;634
000048  d902              BLS      |L12.80|
                  |L12.74|
00004a  2003              MOVS     r0,#3                 ;636
00004c  7760              STRB     r0,[r4,#0x1d]         ;636
00004e  e7f1              B        |L12.52|
                  |L12.80|
000050  6820              LDR      r0,[r4,#0]            ;619
000052  68c0              LDR      r0,[r0,#0xc]          ;619
000054  2101              MOVS     r1,#1                 ;619
000056  02c9              LSLS     r1,r1,#11             ;619
000058  4008              ANDS     r0,r0,r1              ;619
00005a  0ac0              LSRS     r0,r0,#11             ;619
00005c  2800              CMP      r0,#0                 ;619
00005e  d0d6              BEQ      |L12.14|
000060  2001              MOVS     r0,#1                 ;643
000062  7760              STRB     r0,[r4,#0x1d]         ;643
000064  2000              MOVS     r0,#0                 ;645
000066  e7e5              B        |L12.52|
;;;647    
                          ENDP

                  |L12.104|
                          DCD      0xffffef7f

                          AREA ||i.HAL_RTCEx_PollForWakeUpTimerEvent||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_PollForWakeUpTimerEvent PROC
;;;1067     */
;;;1068   HAL_StatusTypeDef HAL_RTCEx_PollForWakeUpTimerEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;1069   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1070     uint32_t tickstart = HAL_GetTick();
000006  f7fffffe          BL       HAL_GetTick
00000a  4606              MOV      r6,r0
;;;1071   
;;;1072     while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) == RESET)
00000c  e00c              B        |L13.40|
                  |L13.14|
;;;1073     {
;;;1074       if(Timeout != HAL_MAX_DELAY)
00000e  1c68              ADDS     r0,r5,#1
000010  2800              CMP      r0,#0
000012  d009              BEQ      |L13.40|
;;;1075       {
;;;1076         if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
000014  2d00              CMP      r5,#0
000016  d004              BEQ      |L13.34|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  42a8              CMP      r0,r5
000020  d902              BLS      |L13.40|
                  |L13.34|
;;;1077         {
;;;1078           hrtc->State = HAL_RTC_STATE_TIMEOUT;
000022  2003              MOVS     r0,#3
000024  7760              STRB     r0,[r4,#0x1d]
                  |L13.38|
;;;1079         
;;;1080           return HAL_TIMEOUT;
;;;1081         }
;;;1082       }
;;;1083     }
;;;1084   
;;;1085     /* Clear the WAKEUPTIMER Flag */
;;;1086     __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
;;;1087     
;;;1088     /* Change RTC state */
;;;1089     hrtc->State = HAL_RTC_STATE_READY;
;;;1090   
;;;1091     return HAL_OK;
;;;1092   }
000026  bd70              POP      {r4-r6,pc}
                  |L13.40|
000028  6820              LDR      r0,[r4,#0]            ;1072
00002a  68c0              LDR      r0,[r0,#0xc]          ;1072
00002c  2101              MOVS     r1,#1                 ;1072
00002e  0289              LSLS     r1,r1,#10             ;1072
000030  4008              ANDS     r0,r0,r1              ;1072
000032  0a80              LSRS     r0,r0,#10             ;1072
000034  2800              CMP      r0,#0                 ;1072
000036  d0ea              BEQ      |L13.14|
000038  6820              LDR      r0,[r4,#0]            ;1086
00003a  68c0              LDR      r0,[r0,#0xc]          ;1086
00003c  2180              MOVS     r1,#0x80              ;1086
00003e  4008              ANDS     r0,r0,r1              ;1086
000040  4903              LDR      r1,|L13.80|
000042  4308              ORRS     r0,r0,r1              ;1086
000044  6821              LDR      r1,[r4,#0]            ;1086
000046  60c8              STR      r0,[r1,#0xc]          ;1086
000048  2001              MOVS     r0,#1                 ;1089
00004a  7760              STRB     r0,[r4,#0x1d]         ;1089
00004c  2000              MOVS     r0,#0                 ;1091
00004e  e7ea              B        |L13.38|
;;;1093   
                          ENDP

                  |L13.80|
                          DCD      0xfffffb7f

                          AREA ||i.HAL_RTCEx_SetCalibrationOutPut||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_SetCalibrationOutPut PROC
;;;1351     */
;;;1352   HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
000000  4602              MOV      r2,r0
;;;1353   {
;;;1354     /* Check the parameters */
;;;1355     assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));
;;;1356   
;;;1357     /* Process Locked */
;;;1358     __HAL_LOCK(hrtc);
000002  bf00              NOP      
000004  7f10              LDRB     r0,[r2,#0x1c]
000006  2801              CMP      r0,#1
000008  d101              BNE      |L14.14|
00000a  2002              MOVS     r0,#2
                  |L14.12|
;;;1359   
;;;1360     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1361   
;;;1362     /* Disable the write protection for RTC registers */
;;;1363     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1364   
;;;1365     /* Clear flags before config */
;;;1366     hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
;;;1367   
;;;1368     /* Configure the RTC_CR register */
;;;1369     hrtc->Instance->CR |= (uint32_t)CalibOutput;
;;;1370   
;;;1371     __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
;;;1372   
;;;1373     /* Enable the write protection for RTC registers */
;;;1374     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1375   
;;;1376     /* Change RTC state */
;;;1377     hrtc->State = HAL_RTC_STATE_READY;
;;;1378   
;;;1379     /* Process Unlocked */
;;;1380     __HAL_UNLOCK(hrtc);
;;;1381   
;;;1382     return HAL_OK;
;;;1383   }
00000c  4770              BX       lr
                  |L14.14|
00000e  2001              MOVS     r0,#1                 ;1358
000010  7710              STRB     r0,[r2,#0x1c]         ;1358
000012  bf00              NOP                            ;1358
000014  2002              MOVS     r0,#2                 ;1360
000016  7750              STRB     r0,[r2,#0x1d]         ;1360
000018  bf00              NOP                            ;1363
00001a  20ca              MOVS     r0,#0xca              ;1363
00001c  6813              LDR      r3,[r2,#0]            ;1363
00001e  6258              STR      r0,[r3,#0x24]         ;1363
000020  2053              MOVS     r0,#0x53              ;1363
000022  6813              LDR      r3,[r2,#0]            ;1363
000024  6258              STR      r0,[r3,#0x24]         ;1363
000026  bf00              NOP                            ;1363
000028  6810              LDR      r0,[r2,#0]            ;1366
00002a  6880              LDR      r0,[r0,#8]            ;1366
00002c  2301              MOVS     r3,#1                 ;1366
00002e  04db              LSLS     r3,r3,#19             ;1366
000030  4398              BICS     r0,r0,r3              ;1366
000032  6813              LDR      r3,[r2,#0]            ;1366
000034  6098              STR      r0,[r3,#8]            ;1366
000036  6810              LDR      r0,[r2,#0]            ;1369
000038  6880              LDR      r0,[r0,#8]            ;1369
00003a  4308              ORRS     r0,r0,r1              ;1369
00003c  6813              LDR      r3,[r2,#0]            ;1369
00003e  6098              STR      r0,[r3,#8]            ;1369
000040  6810              LDR      r0,[r2,#0]            ;1371
000042  6880              LDR      r0,[r0,#8]            ;1371
000044  2301              MOVS     r3,#1                 ;1371
000046  05db              LSLS     r3,r3,#23             ;1371
000048  4318              ORRS     r0,r0,r3              ;1371
00004a  6813              LDR      r3,[r2,#0]            ;1371
00004c  6098              STR      r0,[r3,#8]            ;1371
00004e  bf00              NOP                            ;1374
000050  20ff              MOVS     r0,#0xff              ;1374
000052  6813              LDR      r3,[r2,#0]            ;1374
000054  6258              STR      r0,[r3,#0x24]         ;1374
000056  bf00              NOP                            ;1374
000058  2001              MOVS     r0,#1                 ;1377
00005a  7750              STRB     r0,[r2,#0x1d]         ;1377
00005c  bf00              NOP                            ;1380
00005e  2000              MOVS     r0,#0                 ;1380
000060  7710              STRB     r0,[r2,#0x1c]         ;1380
000062  bf00              NOP                            ;1380
000064  bf00              NOP                            ;1382
000066  e7d1              B        |L14.12|
;;;1384   
                          ENDP


                          AREA ||i.HAL_RTCEx_SetRefClock||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_SetRefClock PROC
;;;1418     */
;;;1419   HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)
000000  b510              PUSH     {r4,lr}
;;;1420   {
000002  4604              MOV      r4,r0
;;;1421     /* Process Locked */
;;;1422     __HAL_LOCK(hrtc);
000004  bf00              NOP      
000006  7f20              LDRB     r0,[r4,#0x1c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L15.16|
00000c  2002              MOVS     r0,#2
                  |L15.14|
;;;1423   
;;;1424     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1425   
;;;1426     /* Disable the write protection for RTC registers */
;;;1427     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1428   
;;;1429     /* Set Initialization mode */
;;;1430     if(RTC_EnterInitMode(hrtc) != HAL_OK)
;;;1431     {
;;;1432       /* Enable the write protection for RTC registers */
;;;1433       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1434   
;;;1435       /* Set RTC state*/
;;;1436       hrtc->State = HAL_RTC_STATE_ERROR;
;;;1437   
;;;1438       /* Process Unlocked */
;;;1439       __HAL_UNLOCK(hrtc);
;;;1440   
;;;1441       return HAL_ERROR;
;;;1442     }
;;;1443     else
;;;1444     {
;;;1445       __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
;;;1446   
;;;1447       /* Exit Initialization mode */
;;;1448       hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
;;;1449     }
;;;1450   
;;;1451     /* Enable the write protection for RTC registers */
;;;1452     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1453   
;;;1454      /* Change RTC state */
;;;1455     hrtc->State = HAL_RTC_STATE_READY;
;;;1456   
;;;1457     /* Process Unlocked */
;;;1458     __HAL_UNLOCK(hrtc);
;;;1459   
;;;1460     return HAL_OK;
;;;1461   }
00000e  bd10              POP      {r4,pc}
                  |L15.16|
000010  2001              MOVS     r0,#1                 ;1422
000012  7720              STRB     r0,[r4,#0x1c]         ;1422
000014  bf00              NOP                            ;1422
000016  2002              MOVS     r0,#2                 ;1424
000018  7760              STRB     r0,[r4,#0x1d]         ;1424
00001a  bf00              NOP                            ;1427
00001c  20ca              MOVS     r0,#0xca              ;1427
00001e  6821              LDR      r1,[r4,#0]            ;1427
000020  6248              STR      r0,[r1,#0x24]         ;1427
000022  2053              MOVS     r0,#0x53              ;1427
000024  6821              LDR      r1,[r4,#0]            ;1427
000026  6248              STR      r0,[r1,#0x24]         ;1427
000028  bf00              NOP                            ;1427
00002a  4620              MOV      r0,r4                 ;1430
00002c  f7fffffe          BL       RTC_EnterInitMode
000030  2800              CMP      r0,#0                 ;1430
000032  d00c              BEQ      |L15.78|
000034  bf00              NOP                            ;1433
000036  20ff              MOVS     r0,#0xff              ;1433
000038  6821              LDR      r1,[r4,#0]            ;1433
00003a  6248              STR      r0,[r1,#0x24]         ;1433
00003c  bf00              NOP                            ;1433
00003e  2004              MOVS     r0,#4                 ;1436
000040  7760              STRB     r0,[r4,#0x1d]         ;1436
000042  bf00              NOP                            ;1439
000044  2000              MOVS     r0,#0                 ;1439
000046  7720              STRB     r0,[r4,#0x1c]         ;1439
000048  bf00              NOP                            ;1439
00004a  2001              MOVS     r0,#1                 ;1441
00004c  e7df              B        |L15.14|
                  |L15.78|
00004e  6820              LDR      r0,[r4,#0]            ;1445
000050  6880              LDR      r0,[r0,#8]            ;1445
000052  2110              MOVS     r1,#0x10              ;1445
000054  4308              ORRS     r0,r0,r1              ;1445
000056  6821              LDR      r1,[r4,#0]            ;1445
000058  6088              STR      r0,[r1,#8]            ;1445
00005a  6820              LDR      r0,[r4,#0]            ;1448
00005c  68c0              LDR      r0,[r0,#0xc]          ;1448
00005e  2180              MOVS     r1,#0x80              ;1448
000060  4388              BICS     r0,r0,r1              ;1448
000062  6821              LDR      r1,[r4,#0]            ;1448
000064  60c8              STR      r0,[r1,#0xc]          ;1448
000066  bf00              NOP                            ;1452
000068  20ff              MOVS     r0,#0xff              ;1452
00006a  6821              LDR      r1,[r4,#0]            ;1452
00006c  6248              STR      r0,[r1,#0x24]         ;1452
00006e  bf00              NOP                            ;1452
000070  2001              MOVS     r0,#1                 ;1455
000072  7760              STRB     r0,[r4,#0x1d]         ;1455
000074  bf00              NOP                            ;1458
000076  2000              MOVS     r0,#0                 ;1458
000078  7720              STRB     r0,[r4,#0x1c]         ;1458
00007a  bf00              NOP                            ;1458
00007c  bf00              NOP                            ;1460
00007e  e7c6              B        |L15.14|
;;;1462   
                          ENDP


                          AREA ||i.HAL_RTCEx_SetSmoothCalib||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_SetSmoothCalib PROC
;;;1190     */
;;;1191   HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef* hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1192   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;1193     uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;1194   
;;;1195     /* Check the parameters */
;;;1196     assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
;;;1197     assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
;;;1198     assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));
;;;1199   
;;;1200     /* Process Locked */
;;;1201     __HAL_LOCK(hrtc);
00000e  bf00              NOP      
000010  7f20              LDRB     r0,[r4,#0x1c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L16.26|
000016  2002              MOVS     r0,#2
                  |L16.24|
;;;1202   
;;;1203     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1204   
;;;1205     /* Disable the write protection for RTC registers */
;;;1206     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1207   
;;;1208     /* check if a calibration is pending*/
;;;1209     if((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
;;;1210     {
;;;1211       tickstart = HAL_GetTick();
;;;1212   
;;;1213       /* check if a calibration is pending*/
;;;1214       while((hrtc->Instance->ISR & RTC_ISR_RECALPF) != RESET)
;;;1215       {
;;;1216         if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
;;;1217         {
;;;1218           /* Enable the write protection for RTC registers */
;;;1219           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1220   
;;;1221           /* Change RTC state */
;;;1222           hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;1223   
;;;1224           /* Process Unlocked */
;;;1225           __HAL_UNLOCK(hrtc);
;;;1226   
;;;1227           return HAL_TIMEOUT;
;;;1228         }
;;;1229       }
;;;1230     }
;;;1231   
;;;1232     /* Configure the Smooth calibration settings */
;;;1233     hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
;;;1234   
;;;1235     /* Enable the write protection for RTC registers */
;;;1236     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1237   
;;;1238     /* Change RTC state */
;;;1239     hrtc->State = HAL_RTC_STATE_READY;
;;;1240   
;;;1241     /* Process Unlocked */
;;;1242     __HAL_UNLOCK(hrtc);
;;;1243   
;;;1244     return HAL_OK;
;;;1245   }
000018  bdf8              POP      {r3-r7,pc}
                  |L16.26|
00001a  2001              MOVS     r0,#1                 ;1201
00001c  7720              STRB     r0,[r4,#0x1c]         ;1201
00001e  bf00              NOP                            ;1201
000020  2002              MOVS     r0,#2                 ;1203
000022  7760              STRB     r0,[r4,#0x1d]         ;1203
000024  bf00              NOP                            ;1206
000026  20ca              MOVS     r0,#0xca              ;1206
000028  6821              LDR      r1,[r4,#0]            ;1206
00002a  6248              STR      r0,[r1,#0x24]         ;1206
00002c  2053              MOVS     r0,#0x53              ;1206
00002e  6821              LDR      r1,[r4,#0]            ;1206
000030  6248              STR      r0,[r1,#0x24]         ;1206
000032  bf00              NOP                            ;1206
000034  6820              LDR      r0,[r4,#0]            ;1209
000036  68c0              LDR      r0,[r0,#0xc]          ;1209
000038  2101              MOVS     r1,#1                 ;1209
00003a  0409              LSLS     r1,r1,#16             ;1209
00003c  4008              ANDS     r0,r0,r1              ;1209
00003e  2800              CMP      r0,#0                 ;1209
000040  d01f              BEQ      |L16.130|
000042  f7fffffe          BL       HAL_GetTick
000046  9000              STR      r0,[sp,#0]            ;1211
000048  e014              B        |L16.116|
                  |L16.74|
00004a  f7fffffe          BL       HAL_GetTick
00004e  9900              LDR      r1,[sp,#0]            ;1216
000050  1a40              SUBS     r0,r0,r1              ;1216
000052  217d              MOVS     r1,#0x7d              ;1216
000054  00c9              LSLS     r1,r1,#3              ;1216
000056  4288              CMP      r0,r1                 ;1216
000058  d90c              BLS      |L16.116|
00005a  bf00              NOP                            ;1219
00005c  20ff              MOVS     r0,#0xff              ;1219
00005e  6821              LDR      r1,[r4,#0]            ;1219
000060  6248              STR      r0,[r1,#0x24]         ;1219
000062  bf00              NOP                            ;1219
000064  2003              MOVS     r0,#3                 ;1222
000066  7760              STRB     r0,[r4,#0x1d]         ;1222
000068  bf00              NOP                            ;1225
00006a  2000              MOVS     r0,#0                 ;1225
00006c  7720              STRB     r0,[r4,#0x1c]         ;1225
00006e  bf00              NOP                            ;1225
000070  2003              MOVS     r0,#3                 ;1227
000072  e7d1              B        |L16.24|
                  |L16.116|
000074  6820              LDR      r0,[r4,#0]            ;1214
000076  68c0              LDR      r0,[r0,#0xc]          ;1214
000078  2101              MOVS     r1,#1                 ;1214
00007a  0409              LSLS     r1,r1,#16             ;1214
00007c  4008              ANDS     r0,r0,r1              ;1214
00007e  2800              CMP      r0,#0                 ;1214
000080  d1e3              BNE      |L16.74|
                  |L16.130|
000082  4628              MOV      r0,r5                 ;1233
000084  4330              ORRS     r0,r0,r6              ;1233
000086  4338              ORRS     r0,r0,r7              ;1233
000088  6821              LDR      r1,[r4,#0]            ;1233
00008a  63c8              STR      r0,[r1,#0x3c]         ;1233
00008c  bf00              NOP                            ;1236
00008e  20ff              MOVS     r0,#0xff              ;1236
000090  6821              LDR      r1,[r4,#0]            ;1236
000092  6248              STR      r0,[r1,#0x24]         ;1236
000094  bf00              NOP                            ;1236
000096  2001              MOVS     r0,#1                 ;1239
000098  7760              STRB     r0,[r4,#0x1d]         ;1239
00009a  bf00              NOP                            ;1242
00009c  2000              MOVS     r0,#0                 ;1242
00009e  7720              STRB     r0,[r4,#0x1c]         ;1242
0000a0  bf00              NOP                            ;1242
0000a2  bf00              NOP                            ;1244
0000a4  e7b8              B        |L16.24|
;;;1246   
                          ENDP


                          AREA ||i.HAL_RTCEx_SetSynchroShift||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_SetSynchroShift PROC
;;;1258     */
;;;1259   HAL_StatusTypeDef HAL_RTCEx_SetSynchroShift(RTC_HandleTypeDef* hrtc, uint32_t ShiftAdd1S, uint32_t ShiftSubFS)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1260   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1261     uint32_t tickstart = 0U;
000008  2700              MOVS     r7,#0
;;;1262   
;;;1263     /* Check the parameters */
;;;1264     assert_param(IS_RTC_SHIFT_ADD1S(ShiftAdd1S));
;;;1265     assert_param(IS_RTC_SHIFT_SUBFS(ShiftSubFS));
;;;1266   
;;;1267     /* Process Locked */
;;;1268     __HAL_LOCK(hrtc);
00000a  bf00              NOP      
00000c  7f20              LDRB     r0,[r4,#0x1c]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L17.22|
000012  2002              MOVS     r0,#2
                  |L17.20|
;;;1269   
;;;1270     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1271   
;;;1272     /* Disable the write protection for RTC registers */
;;;1273     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1274   
;;;1275       tickstart = HAL_GetTick();
;;;1276   
;;;1277       /* Wait until the shift is completed*/
;;;1278       while((hrtc->Instance->ISR & RTC_ISR_SHPF) != RESET)
;;;1279       {
;;;1280         if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
;;;1281         {
;;;1282           /* Enable the write protection for RTC registers */
;;;1283           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1284   
;;;1285           hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;1286   
;;;1287           /* Process Unlocked */
;;;1288           __HAL_UNLOCK(hrtc);
;;;1289   
;;;1290           return HAL_TIMEOUT;
;;;1291         }
;;;1292       }
;;;1293   
;;;1294       /* Check if the reference clock detection is disabled */
;;;1295       if((hrtc->Instance->CR & RTC_CR_REFCKON) == RESET)
;;;1296       {
;;;1297         /* Configure the Shift settings */
;;;1298         hrtc->Instance->SHIFTR = (uint32_t)(uint32_t)(ShiftSubFS) | (uint32_t)(ShiftAdd1S);
;;;1299   
;;;1300         /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
;;;1301         if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
;;;1302         {
;;;1303           if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
;;;1304           {
;;;1305             /* Enable the write protection for RTC registers */
;;;1306             __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1307   
;;;1308             hrtc->State = HAL_RTC_STATE_ERROR;
;;;1309   
;;;1310             /* Process Unlocked */
;;;1311             __HAL_UNLOCK(hrtc);
;;;1312   
;;;1313             return HAL_ERROR;
;;;1314           }
;;;1315         }
;;;1316       }
;;;1317       else
;;;1318       {
;;;1319         /* Enable the write protection for RTC registers */
;;;1320         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1321   
;;;1322         /* Change RTC state */
;;;1323         hrtc->State = HAL_RTC_STATE_ERROR;
;;;1324   
;;;1325         /* Process Unlocked */
;;;1326         __HAL_UNLOCK(hrtc);
;;;1327   
;;;1328         return HAL_ERROR;
;;;1329       }
;;;1330   
;;;1331     /* Enable the write protection for RTC registers */
;;;1332     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1333   
;;;1334     /* Change RTC state */
;;;1335     hrtc->State = HAL_RTC_STATE_READY;
;;;1336   
;;;1337     /* Process Unlocked */
;;;1338     __HAL_UNLOCK(hrtc);
;;;1339   
;;;1340     return HAL_OK;
;;;1341   }
000014  bdf8              POP      {r3-r7,pc}
                  |L17.22|
000016  2001              MOVS     r0,#1                 ;1268
000018  7720              STRB     r0,[r4,#0x1c]         ;1268
00001a  bf00              NOP                            ;1268
00001c  2002              MOVS     r0,#2                 ;1270
00001e  7760              STRB     r0,[r4,#0x1d]         ;1270
000020  bf00              NOP                            ;1273
000022  20ca              MOVS     r0,#0xca              ;1273
000024  6821              LDR      r1,[r4,#0]            ;1273
000026  6248              STR      r0,[r1,#0x24]         ;1273
000028  2053              MOVS     r0,#0x53              ;1273
00002a  6821              LDR      r1,[r4,#0]            ;1273
00002c  6248              STR      r0,[r1,#0x24]         ;1273
00002e  bf00              NOP                            ;1273
000030  f7fffffe          BL       HAL_GetTick
000034  4607              MOV      r7,r0                 ;1275
000036  e013              B        |L17.96|
                  |L17.56|
000038  f7fffffe          BL       HAL_GetTick
00003c  1bc0              SUBS     r0,r0,r7              ;1280
00003e  217d              MOVS     r1,#0x7d              ;1280
000040  00c9              LSLS     r1,r1,#3              ;1280
000042  4288              CMP      r0,r1                 ;1280
000044  d90c              BLS      |L17.96|
000046  bf00              NOP                            ;1283
000048  20ff              MOVS     r0,#0xff              ;1283
00004a  6821              LDR      r1,[r4,#0]            ;1283
00004c  6248              STR      r0,[r1,#0x24]         ;1283
00004e  bf00              NOP                            ;1283
000050  2003              MOVS     r0,#3                 ;1285
000052  7760              STRB     r0,[r4,#0x1d]         ;1285
000054  bf00              NOP                            ;1288
000056  2000              MOVS     r0,#0                 ;1288
000058  7720              STRB     r0,[r4,#0x1c]         ;1288
00005a  bf00              NOP                            ;1288
00005c  2003              MOVS     r0,#3                 ;1290
00005e  e7d9              B        |L17.20|
                  |L17.96|
000060  6820              LDR      r0,[r4,#0]            ;1278
000062  68c0              LDR      r0,[r0,#0xc]          ;1278
000064  2108              MOVS     r1,#8                 ;1278
000066  4008              ANDS     r0,r0,r1              ;1278
000068  2800              CMP      r0,#0                 ;1278
00006a  d1e5              BNE      |L17.56|
00006c  6820              LDR      r0,[r4,#0]            ;1295
00006e  6880              LDR      r0,[r0,#8]            ;1295
000070  2110              MOVS     r1,#0x10              ;1295
000072  4008              ANDS     r0,r0,r1              ;1295
000074  2800              CMP      r0,#0                 ;1295
000076  d11b              BNE      |L17.176|
000078  4630              MOV      r0,r6                 ;1298
00007a  4328              ORRS     r0,r0,r5              ;1298
00007c  6821              LDR      r1,[r4,#0]            ;1298
00007e  62c8              STR      r0,[r1,#0x2c]         ;1298
000080  6820              LDR      r0,[r4,#0]            ;1301
000082  6880              LDR      r0,[r0,#8]            ;1301
000084  2120              MOVS     r1,#0x20              ;1301
000086  4008              ANDS     r0,r0,r1              ;1301
000088  2800              CMP      r0,#0                 ;1301
00008a  d11e              BNE      |L17.202|
00008c  4620              MOV      r0,r4                 ;1303
00008e  f7fffffe          BL       HAL_RTC_WaitForSynchro
000092  2800              CMP      r0,#0                 ;1303
000094  d019              BEQ      |L17.202|
000096  bf00              NOP                            ;1306
000098  20ff              MOVS     r0,#0xff              ;1306
00009a  6821              LDR      r1,[r4,#0]            ;1306
00009c  6248              STR      r0,[r1,#0x24]         ;1306
00009e  bf00              NOP                            ;1306
0000a0  2004              MOVS     r0,#4                 ;1308
0000a2  7760              STRB     r0,[r4,#0x1d]         ;1308
0000a4  bf00              NOP                            ;1311
0000a6  2000              MOVS     r0,#0                 ;1311
0000a8  7720              STRB     r0,[r4,#0x1c]         ;1311
0000aa  bf00              NOP                            ;1311
0000ac  2001              MOVS     r0,#1                 ;1313
0000ae  e7b1              B        |L17.20|
                  |L17.176|
0000b0  bf00              NOP                            ;1320
0000b2  20ff              MOVS     r0,#0xff              ;1320
0000b4  6821              LDR      r1,[r4,#0]            ;1320
0000b6  6248              STR      r0,[r1,#0x24]         ;1320
0000b8  bf00              NOP                            ;1320
0000ba  2004              MOVS     r0,#4                 ;1323
0000bc  7760              STRB     r0,[r4,#0x1d]         ;1323
0000be  bf00              NOP                            ;1326
0000c0  2000              MOVS     r0,#0                 ;1326
0000c2  7720              STRB     r0,[r4,#0x1c]         ;1326
0000c4  bf00              NOP                            ;1326
0000c6  2001              MOVS     r0,#1                 ;1328
0000c8  e7a4              B        |L17.20|
                  |L17.202|
0000ca  bf00              NOP                            ;1332
0000cc  20ff              MOVS     r0,#0xff              ;1332
0000ce  6821              LDR      r1,[r4,#0]            ;1332
0000d0  6248              STR      r0,[r1,#0x24]         ;1332
0000d2  bf00              NOP                            ;1332
0000d4  2001              MOVS     r0,#1                 ;1335
0000d6  7760              STRB     r0,[r4,#0x1d]         ;1335
0000d8  bf00              NOP                            ;1338
0000da  2000              MOVS     r0,#0                 ;1338
0000dc  7720              STRB     r0,[r4,#0x1c]         ;1338
0000de  bf00              NOP                            ;1338
0000e0  bf00              NOP                            ;1340
0000e2  e797              B        |L17.20|
;;;1342   
                          ENDP


                          AREA ||i.HAL_RTCEx_SetTamper||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_SetTamper PROC
;;;348      */
;;;349    HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
000000  b510              PUSH     {r4,lr}
;;;350    {
000002  4602              MOV      r2,r0
;;;351      uint32_t tmpreg = 0U;
000004  2300              MOVS     r3,#0
;;;352    
;;;353      /* Check the parameters */
;;;354      assert_param(IS_RTC_TAMPER(sTamper->Tamper));
;;;355      assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));
;;;356      assert_param(IS_RTC_TAMPER_FILTER(sTamper->Filter));
;;;357      assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(sTamper->SamplingFrequency));
;;;358      assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
;;;359      assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
;;;360      assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
;;;361    
;;;362      /* Process Locked */
;;;363      __HAL_LOCK(hrtc);
000006  bf00              NOP      
000008  7f10              LDRB     r0,[r2,#0x1c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L18.18|
00000e  2002              MOVS     r0,#2
                  |L18.16|
;;;364    
;;;365      hrtc->State = HAL_RTC_STATE_BUSY;
;;;366    
;;;367      if(sTamper->Trigger != RTC_TAMPERTRIGGER_RISINGEDGE)
;;;368      {
;;;369        sTamper->Trigger = (uint32_t)(sTamper->Tamper << 1U);
;;;370      }
;;;371    
;;;372      tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Trigger | (uint32_t)sTamper->Filter |\
;;;373                (uint32_t)sTamper->SamplingFrequency | (uint32_t)sTamper->PrechargeDuration |\
;;;374                (uint32_t)sTamper->TamperPullUp | sTamper->TimeStampOnTamperDetection);
;;;375    
;;;376      hrtc->Instance->TAFCR &= (uint32_t)~((uint32_t)sTamper->Tamper | (uint32_t)(sTamper->Tamper << 1U) | (uint32_t)RTC_TAFCR_TAMPTS |\
;;;377                                           (uint32_t)RTC_TAFCR_TAMPFREQ | (uint32_t)RTC_TAFCR_TAMPFLT | (uint32_t)RTC_TAFCR_TAMPPRCH |\
;;;378                                           (uint32_t)RTC_TAFCR_TAMPPUDIS | (uint32_t)RTC_TAFCR_TAMPIE);
;;;379    
;;;380      hrtc->Instance->TAFCR |= tmpreg;
;;;381      
;;;382      hrtc->State = HAL_RTC_STATE_READY; 
;;;383    
;;;384      /* Process Unlocked */
;;;385      __HAL_UNLOCK(hrtc);
;;;386    
;;;387      return HAL_OK;
;;;388    }
000010  bd10              POP      {r4,pc}
                  |L18.18|
000012  2001              MOVS     r0,#1                 ;363
000014  7710              STRB     r0,[r2,#0x1c]         ;363
000016  bf00              NOP                            ;363
000018  2002              MOVS     r0,#2                 ;365
00001a  7750              STRB     r0,[r2,#0x1d]         ;365
00001c  6848              LDR      r0,[r1,#4]            ;367
00001e  2800              CMP      r0,#0                 ;367
000020  d002              BEQ      |L18.40|
000022  6808              LDR      r0,[r1,#0]            ;369
000024  0040              LSLS     r0,r0,#1              ;369
000026  6048              STR      r0,[r1,#4]            ;369
                  |L18.40|
000028  684c              LDR      r4,[r1,#4]            ;372
00002a  6808              LDR      r0,[r1,#0]            ;372
00002c  4320              ORRS     r0,r0,r4              ;372
00002e  688c              LDR      r4,[r1,#8]            ;372
000030  4320              ORRS     r0,r0,r4              ;372
000032  68cc              LDR      r4,[r1,#0xc]          ;372
000034  4320              ORRS     r0,r0,r4              ;372
000036  690c              LDR      r4,[r1,#0x10]         ;372
000038  4320              ORRS     r0,r0,r4              ;372
00003a  694c              LDR      r4,[r1,#0x14]         ;372
00003c  4320              ORRS     r0,r0,r4              ;372
00003e  698c              LDR      r4,[r1,#0x18]         ;372
000040  4320              ORRS     r0,r0,r4              ;372
000042  4603              MOV      r3,r0                 ;372
000044  6808              LDR      r0,[r1,#0]            ;376
000046  0044              LSLS     r4,r0,#1              ;376
000048  4320              ORRS     r0,r0,r4              ;376
00004a  4c0a              LDR      r4,|L18.116|
00004c  4320              ORRS     r0,r0,r4              ;376
00004e  6814              LDR      r4,[r2,#0]            ;376
000050  6c24              LDR      r4,[r4,#0x40]         ;376
000052  4384              BICS     r4,r4,r0              ;376
000054  6810              LDR      r0,[r2,#0]            ;376
000056  6404              STR      r4,[r0,#0x40]         ;376
000058  6810              LDR      r0,[r2,#0]            ;380
00005a  6c00              LDR      r0,[r0,#0x40]         ;380
00005c  4318              ORRS     r0,r0,r3              ;380
00005e  6814              LDR      r4,[r2,#0]            ;380
000060  6420              STR      r0,[r4,#0x40]         ;380
000062  2001              MOVS     r0,#1                 ;382
000064  7750              STRB     r0,[r2,#0x1d]         ;382
000066  bf00              NOP                            ;385
000068  2000              MOVS     r0,#0                 ;385
00006a  7710              STRB     r0,[r2,#0x1c]         ;385
00006c  bf00              NOP                            ;385
00006e  bf00              NOP                            ;387
000070  e7ce              B        |L18.16|
;;;389    
                          ENDP

000072  0000              DCW      0x0000
                  |L18.116|
                          DCD      0x0000ff84

                          AREA ||i.HAL_RTCEx_SetTamper_IT||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_SetTamper_IT PROC
;;;397      */
;;;398    HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef* sTamper)
000000  b510              PUSH     {r4,lr}
;;;399    {
000002  4602              MOV      r2,r0
;;;400      uint32_t tmpreg = 0U;
000004  2300              MOVS     r3,#0
;;;401    
;;;402      /* Check the parameters */
;;;403      assert_param(IS_RTC_TAMPER(sTamper->Tamper)); 
;;;404      assert_param(IS_RTC_TAMPER_TRIGGER(sTamper->Trigger));
;;;405      assert_param(IS_RTC_TAMPER_FILTER(sTamper->Filter));
;;;406      assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(sTamper->SamplingFrequency));
;;;407      assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
;;;408      assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
;;;409      assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
;;;410    
;;;411      /* Process Locked */
;;;412      __HAL_LOCK(hrtc);
000006  bf00              NOP      
000008  7f10              LDRB     r0,[r2,#0x1c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L19.18|
00000e  2002              MOVS     r0,#2
                  |L19.16|
;;;413    
;;;414      hrtc->State = HAL_RTC_STATE_BUSY;
;;;415    
;;;416      /* Configure the tamper trigger */
;;;417      if(sTamper->Trigger != RTC_TAMPERTRIGGER_RISINGEDGE)
;;;418      {
;;;419        sTamper->Trigger = (uint32_t)(sTamper->Tamper << 1U);
;;;420      }
;;;421    
;;;422      tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Trigger | (uint32_t)sTamper->Filter |\
;;;423                (uint32_t)sTamper->SamplingFrequency | (uint32_t)sTamper->PrechargeDuration |\
;;;424                (uint32_t)sTamper->TamperPullUp | sTamper->TimeStampOnTamperDetection);
;;;425    
;;;426      hrtc->Instance->TAFCR &= (uint32_t)~((uint32_t)sTamper->Tamper | (uint32_t)(sTamper->Tamper << 1U) | (uint32_t)RTC_TAFCR_TAMPTS |\
;;;427                                           (uint32_t)RTC_TAFCR_TAMPFREQ | (uint32_t)RTC_TAFCR_TAMPFLT | (uint32_t)RTC_TAFCR_TAMPPRCH |\
;;;428                                           (uint32_t)RTC_TAFCR_TAMPPUDIS);
;;;429    
;;;430      hrtc->Instance->TAFCR |= tmpreg;
;;;431    
;;;432      /* Configure the Tamper Interrupt in the RTC_TAFCR */
;;;433      hrtc->Instance->TAFCR |= (uint32_t)RTC_TAFCR_TAMPIE;
;;;434    
;;;435      /* RTC Tamper Interrupt Configuration: EXTI configuration */
;;;436      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
;;;437      
;;;438      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
;;;439    
;;;440      hrtc->State = HAL_RTC_STATE_READY;
;;;441    
;;;442      /* Process Unlocked */
;;;443      __HAL_UNLOCK(hrtc);
;;;444    
;;;445      return HAL_OK;
;;;446    }
000010  bd10              POP      {r4,pc}
                  |L19.18|
000012  2001              MOVS     r0,#1                 ;412
000014  7710              STRB     r0,[r2,#0x1c]         ;412
000016  bf00              NOP                            ;412
000018  2002              MOVS     r0,#2                 ;414
00001a  7750              STRB     r0,[r2,#0x1d]         ;414
00001c  6848              LDR      r0,[r1,#4]            ;417
00001e  2800              CMP      r0,#0                 ;417
000020  d002              BEQ      |L19.40|
000022  6808              LDR      r0,[r1,#0]            ;419
000024  0040              LSLS     r0,r0,#1              ;419
000026  6048              STR      r0,[r1,#4]            ;419
                  |L19.40|
000028  684c              LDR      r4,[r1,#4]            ;422
00002a  6808              LDR      r0,[r1,#0]            ;422
00002c  4320              ORRS     r0,r0,r4              ;422
00002e  688c              LDR      r4,[r1,#8]            ;422
000030  4320              ORRS     r0,r0,r4              ;422
000032  68cc              LDR      r4,[r1,#0xc]          ;422
000034  4320              ORRS     r0,r0,r4              ;422
000036  690c              LDR      r4,[r1,#0x10]         ;422
000038  4320              ORRS     r0,r0,r4              ;422
00003a  694c              LDR      r4,[r1,#0x14]         ;422
00003c  4320              ORRS     r0,r0,r4              ;422
00003e  698c              LDR      r4,[r1,#0x18]         ;422
000040  4320              ORRS     r0,r0,r4              ;422
000042  4603              MOV      r3,r0                 ;422
000044  6808              LDR      r0,[r1,#0]            ;426
000046  0044              LSLS     r4,r0,#1              ;426
000048  4320              ORRS     r0,r0,r4              ;426
00004a  4c14              LDR      r4,|L19.156|
00004c  4320              ORRS     r0,r0,r4              ;426
00004e  6814              LDR      r4,[r2,#0]            ;426
000050  6c24              LDR      r4,[r4,#0x40]         ;426
000052  4384              BICS     r4,r4,r0              ;426
000054  6810              LDR      r0,[r2,#0]            ;426
000056  6404              STR      r4,[r0,#0x40]         ;426
000058  6810              LDR      r0,[r2,#0]            ;430
00005a  6c00              LDR      r0,[r0,#0x40]         ;430
00005c  4318              ORRS     r0,r0,r3              ;430
00005e  6814              LDR      r4,[r2,#0]            ;430
000060  6420              STR      r0,[r4,#0x40]         ;430
000062  6810              LDR      r0,[r2,#0]            ;433
000064  6c00              LDR      r0,[r0,#0x40]         ;433
000066  2404              MOVS     r4,#4                 ;433
000068  4320              ORRS     r0,r0,r4              ;433
00006a  6814              LDR      r4,[r2,#0]            ;433
00006c  6420              STR      r0,[r4,#0x40]         ;433
00006e  480c              LDR      r0,|L19.160|
000070  6800              LDR      r0,[r0,#0]            ;436
000072  2401              MOVS     r4,#1                 ;436
000074  04e4              LSLS     r4,r4,#19             ;436
000076  4320              ORRS     r0,r0,r4              ;436
000078  4c09              LDR      r4,|L19.160|
00007a  6020              STR      r0,[r4,#0]            ;436
00007c  4620              MOV      r0,r4                 ;438
00007e  6880              LDR      r0,[r0,#8]            ;438
000080  2401              MOVS     r4,#1                 ;438
000082  04e4              LSLS     r4,r4,#19             ;438
000084  4320              ORRS     r0,r0,r4              ;438
000086  4c06              LDR      r4,|L19.160|
000088  60a0              STR      r0,[r4,#8]            ;438
00008a  2001              MOVS     r0,#1                 ;440
00008c  7750              STRB     r0,[r2,#0x1d]         ;440
00008e  bf00              NOP                            ;443
000090  2000              MOVS     r0,#0                 ;443
000092  7710              STRB     r0,[r2,#0x1c]         ;443
000094  bf00              NOP                            ;443
000096  bf00              NOP                            ;445
000098  e7ba              B        |L19.16|
;;;447    
                          ENDP

00009a  0000              DCW      0x0000
                  |L19.156|
                          DCD      0x0000ff80
                  |L19.160|
                          DCD      0x40010400

                          AREA ||i.HAL_RTCEx_SetTimeStamp||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_SetTimeStamp PROC
;;;149      */
;;;150    HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
000000  b530              PUSH     {r4,r5,lr}
;;;151    {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;152      uint32_t tmpreg = 0U;
000006  2200              MOVS     r2,#0
;;;153    
;;;154      /* Check the parameters */
;;;155      assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
;;;156      assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
;;;157    
;;;158      /* Process Locked */
;;;159      __HAL_LOCK(hrtc);
000008  bf00              NOP      
00000a  7f18              LDRB     r0,[r3,#0x1c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L20.20|
000010  2002              MOVS     r0,#2
                  |L20.18|
;;;160    
;;;161      hrtc->State = HAL_RTC_STATE_BUSY;
;;;162    
;;;163      /* Get the RTC_CR register and clear the bits to be configured */
;;;164      tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
;;;165    
;;;166      tmpreg|= TimeStampEdge;
;;;167    
;;;168      /* Disable the write protection for RTC registers */
;;;169      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;170    
;;;171      /* Configure the Time Stamp TSEDGE and Enable bits */
;;;172      hrtc->Instance->CR = (uint32_t)tmpreg;
;;;173    
;;;174      __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
;;;175    
;;;176      /* Enable the write protection for RTC registers */
;;;177      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;178    
;;;179      /* Change RTC state */
;;;180      hrtc->State = HAL_RTC_STATE_READY;
;;;181    
;;;182      /* Process Unlocked */
;;;183      __HAL_UNLOCK(hrtc);
;;;184    
;;;185      return HAL_OK;
;;;186    }
000012  bd30              POP      {r4,r5,pc}
                  |L20.20|
000014  2001              MOVS     r0,#1                 ;159
000016  7718              STRB     r0,[r3,#0x1c]         ;159
000018  bf00              NOP                            ;159
00001a  2002              MOVS     r0,#2                 ;161
00001c  7758              STRB     r0,[r3,#0x1d]         ;161
00001e  6818              LDR      r0,[r3,#0]            ;164
000020  6880              LDR      r0,[r0,#8]            ;164
000022  4d12              LDR      r5,|L20.108|
000024  4028              ANDS     r0,r0,r5              ;164
000026  4602              MOV      r2,r0                 ;164
000028  4610              MOV      r0,r2                 ;166
00002a  4308              ORRS     r0,r0,r1              ;166
00002c  4602              MOV      r2,r0                 ;166
00002e  bf00              NOP                            ;169
000030  20ca              MOVS     r0,#0xca              ;169
000032  681d              LDR      r5,[r3,#0]            ;169
000034  6268              STR      r0,[r5,#0x24]         ;169
000036  2053              MOVS     r0,#0x53              ;169
000038  681d              LDR      r5,[r3,#0]            ;169
00003a  6268              STR      r0,[r5,#0x24]         ;169
00003c  bf00              NOP                            ;169
00003e  6818              LDR      r0,[r3,#0]            ;172
000040  6082              STR      r2,[r0,#8]            ;172
000042  6818              LDR      r0,[r3,#0]            ;174
000044  6880              LDR      r0,[r0,#8]            ;174
000046  2501              MOVS     r5,#1                 ;174
000048  02ed              LSLS     r5,r5,#11             ;174
00004a  4328              ORRS     r0,r0,r5              ;174
00004c  681d              LDR      r5,[r3,#0]            ;174
00004e  60a8              STR      r0,[r5,#8]            ;174
000050  bf00              NOP                            ;177
000052  20ff              MOVS     r0,#0xff              ;177
000054  681d              LDR      r5,[r3,#0]            ;177
000056  6268              STR      r0,[r5,#0x24]         ;177
000058  bf00              NOP                            ;177
00005a  2001              MOVS     r0,#1                 ;180
00005c  7758              STRB     r0,[r3,#0x1d]         ;180
00005e  bf00              NOP                            ;183
000060  2000              MOVS     r0,#0                 ;183
000062  7718              STRB     r0,[r3,#0x1c]         ;183
000064  bf00              NOP                            ;183
000066  bf00              NOP                            ;185
000068  e7d3              B        |L20.18|
;;;187    
                          ENDP

00006a  0000              DCW      0x0000
                  |L20.108|
                          DCD      0xfffff7f7

                          AREA ||i.HAL_RTCEx_SetTimeStamp_IT||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_SetTimeStamp_IT PROC
;;;203      */
;;;204    HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
000000  b530              PUSH     {r4,r5,lr}
;;;205    {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;206      uint32_t tmpreg = 0U;
000006  2200              MOVS     r2,#0
;;;207    
;;;208      /* Check the parameters */
;;;209      assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
;;;210      assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
;;;211    
;;;212      /* Process Locked */ 
;;;213      __HAL_LOCK(hrtc);
000008  bf00              NOP      
00000a  7f18              LDRB     r0,[r3,#0x1c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L21.20|
000010  2002              MOVS     r0,#2
                  |L21.18|
;;;214    
;;;215      hrtc->State = HAL_RTC_STATE_BUSY;
;;;216    
;;;217      /* Get the RTC_CR register and clear the bits to be configured */
;;;218      tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
;;;219    
;;;220      tmpreg |= TimeStampEdge;
;;;221    
;;;222      /* Disable the write protection for RTC registers */
;;;223      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;224    
;;;225      /* Configure the Time Stamp TSEDGE and Enable bits */
;;;226      hrtc->Instance->CR = (uint32_t)tmpreg;
;;;227    
;;;228      __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
;;;229    
;;;230      /* Enable IT timestamp */
;;;231      __HAL_RTC_TIMESTAMP_ENABLE_IT(hrtc,RTC_IT_TS);
;;;232    
;;;233      /* RTC timestamp Interrupt Configuration: EXTI configuration */
;;;234      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
;;;235    
;;;236      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
;;;237    
;;;238      /* Enable the write protection for RTC registers */
;;;239      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;240    
;;;241      hrtc->State = HAL_RTC_STATE_READY;
;;;242    
;;;243      /* Process Unlocked */
;;;244      __HAL_UNLOCK(hrtc);
;;;245    
;;;246      return HAL_OK;
;;;247    }
000012  bd30              POP      {r4,r5,pc}
                  |L21.20|
000014  2001              MOVS     r0,#1                 ;213
000016  7718              STRB     r0,[r3,#0x1c]         ;213
000018  bf00              NOP                            ;213
00001a  2002              MOVS     r0,#2                 ;215
00001c  7758              STRB     r0,[r3,#0x1d]         ;215
00001e  6818              LDR      r0,[r3,#0]            ;218
000020  6880              LDR      r0,[r0,#8]            ;218
000022  4d1c              LDR      r5,|L21.148|
000024  4028              ANDS     r0,r0,r5              ;218
000026  4602              MOV      r2,r0                 ;218
000028  4610              MOV      r0,r2                 ;220
00002a  4308              ORRS     r0,r0,r1              ;220
00002c  4602              MOV      r2,r0                 ;220
00002e  bf00              NOP                            ;223
000030  20ca              MOVS     r0,#0xca              ;223
000032  681d              LDR      r5,[r3,#0]            ;223
000034  6268              STR      r0,[r5,#0x24]         ;223
000036  2053              MOVS     r0,#0x53              ;223
000038  681d              LDR      r5,[r3,#0]            ;223
00003a  6268              STR      r0,[r5,#0x24]         ;223
00003c  bf00              NOP                            ;223
00003e  6818              LDR      r0,[r3,#0]            ;226
000040  6082              STR      r2,[r0,#8]            ;226
000042  6818              LDR      r0,[r3,#0]            ;228
000044  6880              LDR      r0,[r0,#8]            ;228
000046  2501              MOVS     r5,#1                 ;228
000048  02ed              LSLS     r5,r5,#11             ;228
00004a  4328              ORRS     r0,r0,r5              ;228
00004c  681d              LDR      r5,[r3,#0]            ;228
00004e  60a8              STR      r0,[r5,#8]            ;228
000050  6818              LDR      r0,[r3,#0]            ;231
000052  6880              LDR      r0,[r0,#8]            ;231
000054  2501              MOVS     r5,#1                 ;231
000056  03ed              LSLS     r5,r5,#15             ;231
000058  4328              ORRS     r0,r0,r5              ;231
00005a  681d              LDR      r5,[r3,#0]            ;231
00005c  60a8              STR      r0,[r5,#8]            ;231
00005e  480e              LDR      r0,|L21.152|
000060  6800              LDR      r0,[r0,#0]            ;234
000062  2501              MOVS     r5,#1                 ;234
000064  04ed              LSLS     r5,r5,#19             ;234
000066  4328              ORRS     r0,r0,r5              ;234
000068  4d0b              LDR      r5,|L21.152|
00006a  6028              STR      r0,[r5,#0]            ;234
00006c  4628              MOV      r0,r5                 ;236
00006e  6880              LDR      r0,[r0,#8]            ;236
000070  2501              MOVS     r5,#1                 ;236
000072  04ed              LSLS     r5,r5,#19             ;236
000074  4328              ORRS     r0,r0,r5              ;236
000076  4d08              LDR      r5,|L21.152|
000078  60a8              STR      r0,[r5,#8]            ;236
00007a  bf00              NOP                            ;239
00007c  20ff              MOVS     r0,#0xff              ;239
00007e  681d              LDR      r5,[r3,#0]            ;239
000080  6268              STR      r0,[r5,#0x24]         ;239
000082  bf00              NOP                            ;239
000084  2001              MOVS     r0,#1                 ;241
000086  7758              STRB     r0,[r3,#0x1d]         ;241
000088  bf00              NOP                            ;244
00008a  2000              MOVS     r0,#0                 ;244
00008c  7718              STRB     r0,[r3,#0x1c]         ;244
00008e  bf00              NOP                            ;244
000090  bf00              NOP                            ;246
000092  e7be              B        |L21.18|
;;;248    
                          ENDP

                  |L21.148|
                          DCD      0xfffff7f7
                  |L21.152|
                          DCD      0x40010400

                          AREA ||i.HAL_RTCEx_SetWakeUpTimer||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_SetWakeUpTimer PROC
;;;771      */
;;;772    HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
000000  b5f8              PUSH     {r3-r7,lr}
;;;773    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;774      uint32_t tickstart = 0U;
000008  2700              MOVS     r7,#0
;;;775    
;;;776      /* Check the parameters */
;;;777      assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
;;;778      assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
;;;779    
;;;780      /* Process Locked */
;;;781      __HAL_LOCK(hrtc);
00000a  bf00              NOP      
00000c  7f20              LDRB     r0,[r4,#0x1c]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L22.22|
000012  2002              MOVS     r0,#2
                  |L22.20|
;;;782    
;;;783      hrtc->State = HAL_RTC_STATE_BUSY;
;;;784    
;;;785      /* Disable the write protection for RTC registers */
;;;786      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;787    
;;;788      /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
;;;789      if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
;;;790        tickstart = HAL_GetTick();
;;;791    
;;;792       /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
;;;793       while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
;;;794       {
;;;795        if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;796          {
;;;797           /* Enable the write protection for RTC registers */
;;;798           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;799    
;;;800           hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;801    
;;;802           /* Process Unlocked */ 
;;;803           __HAL_UNLOCK(hrtc);
;;;804    
;;;805           return HAL_TIMEOUT;
;;;806          }
;;;807        }
;;;808      }
;;;809    
;;;810      __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
;;;811    
;;;812      tickstart = HAL_GetTick();
;;;813    
;;;814      /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
;;;815      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
;;;816      {
;;;817        if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
;;;818        {
;;;819          /* Enable the write protection for RTC registers */
;;;820          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;821    
;;;822          hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;823    
;;;824          /* Process Unlocked */
;;;825          __HAL_UNLOCK(hrtc);
;;;826    
;;;827          return HAL_TIMEOUT;
;;;828        }
;;;829      }
;;;830    
;;;831      /* Clear the Wakeup Timer clock source bits in CR register */
;;;832      hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
;;;833    
;;;834      /* Configure the clock source */
;;;835      hrtc->Instance->CR |= (uint32_t)WakeUpClock;
;;;836    
;;;837      /* Configure the Wakeup Timer counter */
;;;838      hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
;;;839    
;;;840       /* Enable the Wakeup Timer */
;;;841      __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
;;;842    
;;;843      /* Enable the write protection for RTC registers */
;;;844      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;845    
;;;846      hrtc->State = HAL_RTC_STATE_READY;
;;;847    
;;;848      /* Process Unlocked */
;;;849      __HAL_UNLOCK(hrtc);
;;;850    
;;;851      return HAL_OK;
;;;852    }
000014  bdf8              POP      {r3-r7,pc}
                  |L22.22|
000016  2001              MOVS     r0,#1                 ;781
000018  7720              STRB     r0,[r4,#0x1c]         ;781
00001a  bf00              NOP                            ;781
00001c  2002              MOVS     r0,#2                 ;783
00001e  7760              STRB     r0,[r4,#0x1d]         ;783
000020  bf00              NOP                            ;786
000022  20ca              MOVS     r0,#0xca              ;786
000024  6821              LDR      r1,[r4,#0]            ;786
000026  6248              STR      r0,[r1,#0x24]         ;786
000028  2053              MOVS     r0,#0x53              ;786
00002a  6821              LDR      r1,[r4,#0]            ;786
00002c  6248              STR      r0,[r1,#0x24]         ;786
00002e  bf00              NOP                            ;786
000030  6820              LDR      r0,[r4,#0]            ;789
000032  6880              LDR      r0,[r0,#8]            ;789
000034  2101              MOVS     r1,#1                 ;789
000036  0289              LSLS     r1,r1,#10             ;789
000038  4008              ANDS     r0,r0,r1              ;789
00003a  2800              CMP      r0,#0                 ;789
00003c  d01e              BEQ      |L22.124|
00003e  f7fffffe          BL       HAL_GetTick
000042  4607              MOV      r7,r0                 ;790
000044  e013              B        |L22.110|
                  |L22.70|
000046  f7fffffe          BL       HAL_GetTick
00004a  1bc0              SUBS     r0,r0,r7              ;795
00004c  217d              MOVS     r1,#0x7d              ;795
00004e  00c9              LSLS     r1,r1,#3              ;795
000050  4288              CMP      r0,r1                 ;795
000052  d90c              BLS      |L22.110|
000054  bf00              NOP                            ;798
000056  20ff              MOVS     r0,#0xff              ;798
000058  6821              LDR      r1,[r4,#0]            ;798
00005a  6248              STR      r0,[r1,#0x24]         ;798
00005c  bf00              NOP                            ;798
00005e  2003              MOVS     r0,#3                 ;800
000060  7760              STRB     r0,[r4,#0x1d]         ;800
000062  bf00              NOP                            ;803
000064  2000              MOVS     r0,#0                 ;803
000066  7720              STRB     r0,[r4,#0x1c]         ;803
000068  bf00              NOP                            ;803
00006a  2003              MOVS     r0,#3                 ;805
00006c  e7d2              B        |L22.20|
                  |L22.110|
00006e  6820              LDR      r0,[r4,#0]            ;793
000070  68c0              LDR      r0,[r0,#0xc]          ;793
000072  2104              MOVS     r1,#4                 ;793
000074  4008              ANDS     r0,r0,r1              ;793
000076  0880              LSRS     r0,r0,#2              ;793
000078  2800              CMP      r0,#0                 ;793
00007a  d1e4              BNE      |L22.70|
                  |L22.124|
00007c  6820              LDR      r0,[r4,#0]            ;810
00007e  6880              LDR      r0,[r0,#8]            ;810
000080  2101              MOVS     r1,#1                 ;810
000082  0289              LSLS     r1,r1,#10             ;810
000084  4388              BICS     r0,r0,r1              ;810
000086  6821              LDR      r1,[r4,#0]            ;810
000088  6088              STR      r0,[r1,#8]            ;810
00008a  f7fffffe          BL       HAL_GetTick
00008e  4607              MOV      r7,r0                 ;812
000090  e013              B        |L22.186|
                  |L22.146|
000092  f7fffffe          BL       HAL_GetTick
000096  1bc0              SUBS     r0,r0,r7              ;817
000098  217d              MOVS     r1,#0x7d              ;817
00009a  00c9              LSLS     r1,r1,#3              ;817
00009c  4288              CMP      r0,r1                 ;817
00009e  d90c              BLS      |L22.186|
0000a0  bf00              NOP                            ;820
0000a2  20ff              MOVS     r0,#0xff              ;820
0000a4  6821              LDR      r1,[r4,#0]            ;820
0000a6  6248              STR      r0,[r1,#0x24]         ;820
0000a8  bf00              NOP                            ;820
0000aa  2003              MOVS     r0,#3                 ;822
0000ac  7760              STRB     r0,[r4,#0x1d]         ;822
0000ae  bf00              NOP                            ;825
0000b0  2000              MOVS     r0,#0                 ;825
0000b2  7720              STRB     r0,[r4,#0x1c]         ;825
0000b4  bf00              NOP                            ;825
0000b6  2003              MOVS     r0,#3                 ;827
0000b8  e7ac              B        |L22.20|
                  |L22.186|
0000ba  6820              LDR      r0,[r4,#0]            ;815
0000bc  68c0              LDR      r0,[r0,#0xc]          ;815
0000be  2104              MOVS     r1,#4                 ;815
0000c0  4008              ANDS     r0,r0,r1              ;815
0000c2  0880              LSRS     r0,r0,#2              ;815
0000c4  2800              CMP      r0,#0                 ;815
0000c6  d0e4              BEQ      |L22.146|
0000c8  6820              LDR      r0,[r4,#0]            ;832
0000ca  6880              LDR      r0,[r0,#8]            ;832
0000cc  08c0              LSRS     r0,r0,#3              ;832
0000ce  00c0              LSLS     r0,r0,#3              ;832
0000d0  6821              LDR      r1,[r4,#0]            ;832
0000d2  6088              STR      r0,[r1,#8]            ;832
0000d4  6820              LDR      r0,[r4,#0]            ;835
0000d6  6880              LDR      r0,[r0,#8]            ;835
0000d8  4330              ORRS     r0,r0,r6              ;835
0000da  6821              LDR      r1,[r4,#0]            ;835
0000dc  6088              STR      r0,[r1,#8]            ;835
0000de  6820              LDR      r0,[r4,#0]            ;838
0000e0  6145              STR      r5,[r0,#0x14]         ;838
0000e2  6820              LDR      r0,[r4,#0]            ;841
0000e4  6880              LDR      r0,[r0,#8]            ;841
0000e6  2101              MOVS     r1,#1                 ;841
0000e8  0289              LSLS     r1,r1,#10             ;841
0000ea  4308              ORRS     r0,r0,r1              ;841
0000ec  6821              LDR      r1,[r4,#0]            ;841
0000ee  6088              STR      r0,[r1,#8]            ;841
0000f0  bf00              NOP                            ;844
0000f2  20ff              MOVS     r0,#0xff              ;844
0000f4  6821              LDR      r1,[r4,#0]            ;844
0000f6  6248              STR      r0,[r1,#0x24]         ;844
0000f8  bf00              NOP                            ;844
0000fa  2001              MOVS     r0,#1                 ;846
0000fc  7760              STRB     r0,[r4,#0x1d]         ;846
0000fe  bf00              NOP                            ;849
000100  2000              MOVS     r0,#0                 ;849
000102  7720              STRB     r0,[r4,#0x1c]         ;849
000104  bf00              NOP                            ;849
000106  bf00              NOP                            ;851
000108  e784              B        |L22.20|
;;;853    
                          ENDP


                          AREA ||i.HAL_RTCEx_SetWakeUpTimer_IT||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_SetWakeUpTimer_IT PROC
;;;860      */
;;;861    HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
000000  b5f8              PUSH     {r3-r7,lr}
;;;862    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;863      uint32_t tickstart = 0U;
000008  2700              MOVS     r7,#0
;;;864    
;;;865      /* Check the parameters */
;;;866      assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
;;;867      assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
;;;868    
;;;869      /* Process Locked */
;;;870      __HAL_LOCK(hrtc);
00000a  bf00              NOP      
00000c  7f20              LDRB     r0,[r4,#0x1c]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L23.22|
000012  2002              MOVS     r0,#2
                  |L23.20|
;;;871    
;;;872      hrtc->State = HAL_RTC_STATE_BUSY;
;;;873    
;;;874      /* Disable the write protection for RTC registers */
;;;875      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;876    
;;;877      /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
;;;878      if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
;;;879        tickstart = HAL_GetTick();
;;;880    
;;;881       /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
;;;882       while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
;;;883       {
;;;884        if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;885          {
;;;886           /* Enable the write protection for RTC registers */
;;;887           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;888    
;;;889           hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;890    
;;;891           /* Process Unlocked */ 
;;;892           __HAL_UNLOCK(hrtc);
;;;893    
;;;894           return HAL_TIMEOUT;
;;;895          }
;;;896        }
;;;897      }
;;;898    
;;;899      /* Disable the Wake-Up timer */
;;;900      __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
;;;901    
;;;902      /* Clear flag Wake-Up */
;;;903      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
;;;904    
;;;905      tickstart = HAL_GetTick();
;;;906    
;;;907      /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
;;;908      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
;;;909      {
;;;910        if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
;;;911        {
;;;912          /* Enable the write protection for RTC registers */
;;;913          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;914    
;;;915          hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;916    
;;;917          /* Process Unlocked */
;;;918          __HAL_UNLOCK(hrtc);
;;;919    
;;;920          return HAL_TIMEOUT;
;;;921        }
;;;922      }
;;;923    
;;;924      /* Configure the Wakeup Timer counter */
;;;925      hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
;;;926    
;;;927      /* Clear the Wakeup Timer clock source bits in CR register */
;;;928      hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
;;;929    
;;;930      /* Configure the clock source */
;;;931      hrtc->Instance->CR |= (uint32_t)WakeUpClock;
;;;932    
;;;933      /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
;;;934      __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
;;;935    
;;;936      __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
;;;937    
;;;938      /* Configure the Interrupt in the RTC_CR register */
;;;939      __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
;;;940      
;;;941      /* Enable the Wakeup Timer */
;;;942      __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
;;;943    
;;;944      /* Enable the write protection for RTC registers */
;;;945      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;946    
;;;947      hrtc->State = HAL_RTC_STATE_READY;
;;;948    
;;;949      /* Process Unlocked */
;;;950      __HAL_UNLOCK(hrtc);
;;;951    
;;;952      return HAL_OK;
;;;953    }
000014  bdf8              POP      {r3-r7,pc}
                  |L23.22|
000016  2001              MOVS     r0,#1                 ;870
000018  7720              STRB     r0,[r4,#0x1c]         ;870
00001a  bf00              NOP                            ;870
00001c  2002              MOVS     r0,#2                 ;872
00001e  7760              STRB     r0,[r4,#0x1d]         ;872
000020  bf00              NOP                            ;875
000022  20ca              MOVS     r0,#0xca              ;875
000024  6821              LDR      r1,[r4,#0]            ;875
000026  6248              STR      r0,[r1,#0x24]         ;875
000028  2053              MOVS     r0,#0x53              ;875
00002a  6821              LDR      r1,[r4,#0]            ;875
00002c  6248              STR      r0,[r1,#0x24]         ;875
00002e  bf00              NOP                            ;875
000030  6820              LDR      r0,[r4,#0]            ;878
000032  6880              LDR      r0,[r0,#8]            ;878
000034  2101              MOVS     r1,#1                 ;878
000036  0289              LSLS     r1,r1,#10             ;878
000038  4008              ANDS     r0,r0,r1              ;878
00003a  2800              CMP      r0,#0                 ;878
00003c  d01e              BEQ      |L23.124|
00003e  f7fffffe          BL       HAL_GetTick
000042  4607              MOV      r7,r0                 ;879
000044  e013              B        |L23.110|
                  |L23.70|
000046  f7fffffe          BL       HAL_GetTick
00004a  1bc0              SUBS     r0,r0,r7              ;884
00004c  217d              MOVS     r1,#0x7d              ;884
00004e  00c9              LSLS     r1,r1,#3              ;884
000050  4288              CMP      r0,r1                 ;884
000052  d90c              BLS      |L23.110|
000054  bf00              NOP                            ;887
000056  20ff              MOVS     r0,#0xff              ;887
000058  6821              LDR      r1,[r4,#0]            ;887
00005a  6248              STR      r0,[r1,#0x24]         ;887
00005c  bf00              NOP                            ;887
00005e  2003              MOVS     r0,#3                 ;889
000060  7760              STRB     r0,[r4,#0x1d]         ;889
000062  bf00              NOP                            ;892
000064  2000              MOVS     r0,#0                 ;892
000066  7720              STRB     r0,[r4,#0x1c]         ;892
000068  bf00              NOP                            ;892
00006a  2003              MOVS     r0,#3                 ;894
00006c  e7d2              B        |L23.20|
                  |L23.110|
00006e  6820              LDR      r0,[r4,#0]            ;882
000070  68c0              LDR      r0,[r0,#0xc]          ;882
000072  2104              MOVS     r1,#4                 ;882
000074  4008              ANDS     r0,r0,r1              ;882
000076  0880              LSRS     r0,r0,#2              ;882
000078  2800              CMP      r0,#0                 ;882
00007a  d1e4              BNE      |L23.70|
                  |L23.124|
00007c  6820              LDR      r0,[r4,#0]            ;900
00007e  6880              LDR      r0,[r0,#8]            ;900
000080  2101              MOVS     r1,#1                 ;900
000082  0289              LSLS     r1,r1,#10             ;900
000084  4388              BICS     r0,r0,r1              ;900
000086  6821              LDR      r1,[r4,#0]            ;900
000088  6088              STR      r0,[r1,#8]            ;900
00008a  6820              LDR      r0,[r4,#0]            ;903
00008c  68c0              LDR      r0,[r0,#0xc]          ;903
00008e  2180              MOVS     r1,#0x80              ;903
000090  4008              ANDS     r0,r0,r1              ;903
000092  492c              LDR      r1,|L23.324|
000094  4308              ORRS     r0,r0,r1              ;903
000096  6821              LDR      r1,[r4,#0]            ;903
000098  60c8              STR      r0,[r1,#0xc]          ;903
00009a  f7fffffe          BL       HAL_GetTick
00009e  4607              MOV      r7,r0                 ;905
0000a0  e013              B        |L23.202|
                  |L23.162|
0000a2  f7fffffe          BL       HAL_GetTick
0000a6  1bc0              SUBS     r0,r0,r7              ;910
0000a8  217d              MOVS     r1,#0x7d              ;910
0000aa  00c9              LSLS     r1,r1,#3              ;910
0000ac  4288              CMP      r0,r1                 ;910
0000ae  d90c              BLS      |L23.202|
0000b0  bf00              NOP                            ;913
0000b2  20ff              MOVS     r0,#0xff              ;913
0000b4  6821              LDR      r1,[r4,#0]            ;913
0000b6  6248              STR      r0,[r1,#0x24]         ;913
0000b8  bf00              NOP                            ;913
0000ba  2003              MOVS     r0,#3                 ;915
0000bc  7760              STRB     r0,[r4,#0x1d]         ;915
0000be  bf00              NOP                            ;918
0000c0  2000              MOVS     r0,#0                 ;918
0000c2  7720              STRB     r0,[r4,#0x1c]         ;918
0000c4  bf00              NOP                            ;918
0000c6  2003              MOVS     r0,#3                 ;920
0000c8  e7a4              B        |L23.20|
                  |L23.202|
0000ca  6820              LDR      r0,[r4,#0]            ;908
0000cc  68c0              LDR      r0,[r0,#0xc]          ;908
0000ce  2104              MOVS     r1,#4                 ;908
0000d0  4008              ANDS     r0,r0,r1              ;908
0000d2  0880              LSRS     r0,r0,#2              ;908
0000d4  2800              CMP      r0,#0                 ;908
0000d6  d0e4              BEQ      |L23.162|
0000d8  6820              LDR      r0,[r4,#0]            ;925
0000da  6145              STR      r5,[r0,#0x14]         ;925
0000dc  6820              LDR      r0,[r4,#0]            ;928
0000de  6880              LDR      r0,[r0,#8]            ;928
0000e0  08c0              LSRS     r0,r0,#3              ;928
0000e2  00c0              LSLS     r0,r0,#3              ;928
0000e4  6821              LDR      r1,[r4,#0]            ;928
0000e6  6088              STR      r0,[r1,#8]            ;928
0000e8  6820              LDR      r0,[r4,#0]            ;931
0000ea  6880              LDR      r0,[r0,#8]            ;931
0000ec  4330              ORRS     r0,r0,r6              ;931
0000ee  6821              LDR      r1,[r4,#0]            ;931
0000f0  6088              STR      r0,[r1,#8]            ;931
0000f2  4815              LDR      r0,|L23.328|
0000f4  6800              LDR      r0,[r0,#0]            ;934
0000f6  2101              MOVS     r1,#1                 ;934
0000f8  0509              LSLS     r1,r1,#20             ;934
0000fa  4308              ORRS     r0,r0,r1              ;934
0000fc  4912              LDR      r1,|L23.328|
0000fe  6008              STR      r0,[r1,#0]            ;934
000100  4608              MOV      r0,r1                 ;936
000102  6880              LDR      r0,[r0,#8]            ;936
000104  2101              MOVS     r1,#1                 ;936
000106  0509              LSLS     r1,r1,#20             ;936
000108  4308              ORRS     r0,r0,r1              ;936
00010a  490f              LDR      r1,|L23.328|
00010c  6088              STR      r0,[r1,#8]            ;936
00010e  6820              LDR      r0,[r4,#0]            ;939
000110  6880              LDR      r0,[r0,#8]            ;939
000112  2101              MOVS     r1,#1                 ;939
000114  0389              LSLS     r1,r1,#14             ;939
000116  4308              ORRS     r0,r0,r1              ;939
000118  6821              LDR      r1,[r4,#0]            ;939
00011a  6088              STR      r0,[r1,#8]            ;939
00011c  6820              LDR      r0,[r4,#0]            ;942
00011e  6880              LDR      r0,[r0,#8]            ;942
000120  2101              MOVS     r1,#1                 ;942
000122  0289              LSLS     r1,r1,#10             ;942
000124  4308              ORRS     r0,r0,r1              ;942
000126  6821              LDR      r1,[r4,#0]            ;942
000128  6088              STR      r0,[r1,#8]            ;942
00012a  bf00              NOP                            ;945
00012c  20ff              MOVS     r0,#0xff              ;945
00012e  6821              LDR      r1,[r4,#0]            ;945
000130  6248              STR      r0,[r1,#0x24]         ;945
000132  bf00              NOP                            ;945
000134  2001              MOVS     r0,#1                 ;947
000136  7760              STRB     r0,[r4,#0x1d]         ;947
000138  bf00              NOP                            ;950
00013a  2000              MOVS     r0,#0                 ;950
00013c  7720              STRB     r0,[r4,#0x1c]         ;950
00013e  bf00              NOP                            ;950
000140  bf00              NOP                            ;952
000142  e767              B        |L23.20|
;;;954    
                          ENDP

                  |L23.324|
                          DCD      0xfffffb7f
                  |L23.328|
                          DCD      0x40010400

                          AREA ||i.HAL_RTCEx_Tamper1EventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_Tamper1EventCallback PROC
;;;566      */
;;;567    __weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;568    {
;;;569      /* Prevent unused argument(s) compilation warning */
;;;570      UNUSED(hrtc);
;;;571    
;;;572      /* NOTE : This function should not be modified, when the callback is needed,
;;;573                the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
;;;574       */
;;;575    }
;;;576    
                          ENDP


                          AREA ||i.HAL_RTCEx_Tamper2EventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_Tamper2EventCallback PROC
;;;581      */
;;;582    __weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;583    {
;;;584      /* Prevent unused argument(s) compilation warning */
;;;585      UNUSED(hrtc);
;;;586    
;;;587      /* NOTE : This function should not be modified, when the callback is needed,
;;;588                the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
;;;589       */
;;;590    }
;;;591    
                          ENDP


                          AREA ||i.HAL_RTCEx_TamperTimeStampIRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_TamperTimeStampIRQHandler PROC
;;;479      */
;;;480    void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
000000  b510              PUSH     {r4,lr}
;;;481    {  
000002  4604              MOV      r4,r0
;;;482      /* Get the TimeStamp interrupt source enable status */
;;;483      if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != RESET)
000004  6820              LDR      r0,[r4,#0]
000006  6880              LDR      r0,[r0,#8]
000008  2101              MOVS     r1,#1
00000a  03c9              LSLS     r1,r1,#15
00000c  4008              ANDS     r0,r0,r1
00000e  0bc0              LSRS     r0,r0,#15
000010  2800              CMP      r0,#0
000012  d011              BEQ      |L26.56|
;;;484      {
;;;485        /* Get the pending status of the TIMESTAMP Interrupt */
;;;486        if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != RESET)
000014  6820              LDR      r0,[r4,#0]
000016  68c0              LDR      r0,[r0,#0xc]
000018  1109              ASRS     r1,r1,#4
00001a  4008              ANDS     r0,r0,r1
00001c  0ac0              LSRS     r0,r0,#11
00001e  2800              CMP      r0,#0
000020  d00a              BEQ      |L26.56|
;;;487        {
;;;488          /* TIMESTAMP callback */ 
;;;489          HAL_RTCEx_TimeStampEventCallback(hrtc);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       HAL_RTCEx_TimeStampEventCallback
;;;490          
;;;491          /* Clear the TIMESTAMP interrupt pending bit */
;;;492          __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  2180              MOVS     r1,#0x80
00002e  4008              ANDS     r0,r0,r1
000030  491e              LDR      r1,|L26.172|
000032  4308              ORRS     r0,r0,r1
000034  6821              LDR      r1,[r4,#0]
000036  60c8              STR      r0,[r1,#0xc]
                  |L26.56|
;;;493        }
;;;494      }
;;;495    
;;;496      /* Get the Tamper interrupts source enable status */
;;;497      if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP))
000038  6820              LDR      r0,[r4,#0]
00003a  6c00              LDR      r0,[r0,#0x40]
00003c  2104              MOVS     r1,#4
00003e  4008              ANDS     r0,r0,r1
000040  0880              LSRS     r0,r0,#2
000042  2800              CMP      r0,#0
000044  d011              BEQ      |L26.106|
;;;498      {
;;;499       /* Get the pending status of the Tamper1 Interrupt */
;;;500        if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != RESET)
000046  6820              LDR      r0,[r4,#0]
000048  68c0              LDR      r0,[r0,#0xc]
00004a  02c9              LSLS     r1,r1,#11
00004c  4008              ANDS     r0,r0,r1
00004e  0b40              LSRS     r0,r0,#13
000050  2800              CMP      r0,#0
000052  d00a              BEQ      |L26.106|
;;;501        {
;;;502          /* Tamper1 callback */
;;;503          HAL_RTCEx_Tamper1EventCallback(hrtc);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       HAL_RTCEx_Tamper1EventCallback
;;;504    
;;;505          /* Clear the Tamper1 interrupt pending bit */
;;;506          __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
00005a  6820              LDR      r0,[r4,#0]
00005c  68c0              LDR      r0,[r0,#0xc]
00005e  2180              MOVS     r1,#0x80
000060  4008              ANDS     r0,r0,r1
000062  4913              LDR      r1,|L26.176|
000064  4308              ORRS     r0,r0,r1
000066  6821              LDR      r1,[r4,#0]
000068  60c8              STR      r0,[r1,#0xc]
                  |L26.106|
;;;507        }
;;;508      }
;;;509    
;;;510      /* Get the Tamper interrupts source enable status */
;;;511      if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP))
00006a  6820              LDR      r0,[r4,#0]
00006c  6c00              LDR      r0,[r0,#0x40]
00006e  2104              MOVS     r1,#4
000070  4008              ANDS     r0,r0,r1
000072  0880              LSRS     r0,r0,#2
000074  2800              CMP      r0,#0
000076  d011              BEQ      |L26.156|
;;;512      {
;;;513       /* Get the pending status of the Tamper2 Interrupt */
;;;514        if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != RESET)
000078  6820              LDR      r0,[r4,#0]
00007a  68c0              LDR      r0,[r0,#0xc]
00007c  0309              LSLS     r1,r1,#12
00007e  4008              ANDS     r0,r0,r1
000080  0b80              LSRS     r0,r0,#14
000082  2800              CMP      r0,#0
000084  d00a              BEQ      |L26.156|
;;;515        {
;;;516          /* Tamper2 callback */
;;;517          HAL_RTCEx_Tamper2EventCallback(hrtc);
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       HAL_RTCEx_Tamper2EventCallback
;;;518    
;;;519          /* Clear the Tamper2 interrupt pending bit */
;;;520          __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
00008c  6820              LDR      r0,[r4,#0]
00008e  68c0              LDR      r0,[r0,#0xc]
000090  2180              MOVS     r1,#0x80
000092  4008              ANDS     r0,r0,r1
000094  4907              LDR      r1,|L26.180|
000096  4308              ORRS     r0,r0,r1
000098  6821              LDR      r1,[r4,#0]
00009a  60c8              STR      r0,[r1,#0xc]
                  |L26.156|
;;;521        }
;;;522      }
;;;523    
;;;524    #if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined(STM32F098xx)
;;;525      /* Get the Tamper interrupts source enable status */
;;;526      if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP))
;;;527      {
;;;528       /* Get the pending status of the Tamper3 Interrupt */
;;;529        if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != RESET)
;;;530        {
;;;531          /* Tamper3 callback */
;;;532          HAL_RTCEx_Tamper3EventCallback(hrtc);
;;;533    
;;;534          /* Clear the Tamper3 interrupt pending bit */
;;;535          __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
;;;536        }
;;;537      }
;;;538    #endif
;;;539    
;;;540      /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
;;;541      __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
00009c  2001              MOVS     r0,#1
00009e  04c0              LSLS     r0,r0,#19
0000a0  4905              LDR      r1,|L26.184|
0000a2  6148              STR      r0,[r1,#0x14]
;;;542    
;;;543      /* Change RTC state */
;;;544      hrtc->State = HAL_RTC_STATE_READY;
0000a4  2001              MOVS     r0,#1
0000a6  7760              STRB     r0,[r4,#0x1d]
;;;545    }
0000a8  bd10              POP      {r4,pc}
;;;546    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L26.172|
                          DCD      0xfffff77f
                  |L26.176|
                          DCD      0xffffdf7f
                  |L26.180|
                          DCD      0xffffbf7f
                  |L26.184|
                          DCD      0x40010400

                          AREA ||i.HAL_RTCEx_TimeStampEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_TimeStampEventCallback PROC
;;;551      */
;;;552    __weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;553    {
;;;554      /* Prevent unused argument(s) compilation warning */
;;;555      UNUSED(hrtc);
;;;556    
;;;557      /* NOTE : This function should not be modified, when the callback is needed,
;;;558                the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
;;;559      */
;;;560    }
;;;561    
                          ENDP


                          AREA ||i.HAL_RTCEx_WakeUpTimerEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTCEx_WakeUpTimerEventCallback PROC
;;;1050     */
;;;1051   __weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;1052   {
;;;1053     /* Prevent unused argument(s) compilation warning */
;;;1054     UNUSED(hrtc);
;;;1055   
;;;1056     /* NOTE : This function should not be modified, when the callback is needed,
;;;1057               the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
;;;1058      */
;;;1059   }
;;;1060   
                          ENDP


                          AREA ||i.HAL_RTCEx_WakeUpTimerIRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RTCEx_WakeUpTimerIRQHandler PROC
;;;1022     */
;;;1023   void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
000000  b510              PUSH     {r4,lr}
;;;1024   {
000002  4604              MOV      r4,r0
;;;1025     /* Get the WAKEUPTIMER interrupt source enable status */
;;;1026     if(__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
000004  6820              LDR      r0,[r4,#0]
000006  6880              LDR      r0,[r0,#8]
000008  2101              MOVS     r1,#1
00000a  0389              LSLS     r1,r1,#14
00000c  4008              ANDS     r0,r0,r1
00000e  0b80              LSRS     r0,r0,#14
000010  2800              CMP      r0,#0
000012  d011              BEQ      |L29.56|
;;;1027     {
;;;1028      /* Get the pending status of the WAKEUPTIMER Interrupt */
;;;1029       if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
000014  6820              LDR      r0,[r4,#0]
000016  68c0              LDR      r0,[r0,#0xc]
000018  1109              ASRS     r1,r1,#4
00001a  4008              ANDS     r0,r0,r1
00001c  0a80              LSRS     r0,r0,#10
00001e  2800              CMP      r0,#0
000020  d00a              BEQ      |L29.56|
;;;1030       {
;;;1031         /* WAKEUPTIMER callback */ 
;;;1032         HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       HAL_RTCEx_WakeUpTimerEventCallback
;;;1033         
;;;1034         /* Clear the WAKEUPTIMER interrupt pending bit */
;;;1035         __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  2180              MOVS     r1,#0x80
00002e  4008              ANDS     r0,r0,r1
000030  4905              LDR      r1,|L29.72|
000032  4308              ORRS     r0,r0,r1
000034  6821              LDR      r1,[r4,#0]
000036  60c8              STR      r0,[r1,#0xc]
                  |L29.56|
;;;1036       }
;;;1037     }
;;;1038   
;;;1039     /* Clear the EXTI's line Flag for RTC WakeUpTimer */
;;;1040     __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
000038  2001              MOVS     r0,#1
00003a  0500              LSLS     r0,r0,#20
00003c  4903              LDR      r1,|L29.76|
00003e  6148              STR      r0,[r1,#0x14]
;;;1041     
;;;1042     /* Change RTC state */
;;;1043     hrtc->State = HAL_RTC_STATE_READY;
000040  2001              MOVS     r0,#1
000042  7760              STRB     r0,[r4,#0x1d]
;;;1044   }
000044  bd10              POP      {r4,pc}
;;;1045   
                          ENDP

000046  0000              DCW      0x0000
                  |L29.72|
                          DCD      0xfffffb7f
                  |L29.76|
                          DCD      0x40010400

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_rtc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_rtc_ex_c_7fcc3a7e____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f0xx_hal_rtc_ex_c_7fcc3a7e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_rtc_ex_c_7fcc3a7e____REVSH|
#line 402
|__asm___22_stm32f0xx_hal_rtc_ex_c_7fcc3a7e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
