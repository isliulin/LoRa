; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\board.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\board.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\board.crf ..\HAL\system\board.c]
                          THUMB

                          AREA ||i.BoardDeInitMcu||, CODE, READONLY, ALIGN=2

                  BoardDeInitMcu PROC
;;;148     */
;;;149    void BoardDeInitMcu( void )
000000  b500              PUSH     {lr}
;;;150    { 
000002  b087              SUB      sp,sp,#0x1c
;;;151    	GPIO_InitTypeDef GPIO_InitStructure;
;;;152    	
;;;153    	__HAL_RCC_HSI_DISABLE();
000004  485a              LDR      r0,|L1.368|
000006  6800              LDR      r0,[r0,#0]
000008  0840              LSRS     r0,r0,#1
00000a  0040              LSLS     r0,r0,#1
00000c  4958              LDR      r1,|L1.368|
00000e  6008              STR      r0,[r1,#0]
;;;154    	__HAL_RCC_PLL_DISABLE();
000010  4608              MOV      r0,r1
000012  6800              LDR      r0,[r0,#0]
000014  2101              MOVS     r1,#1
000016  0609              LSLS     r1,r1,#24
000018  4388              BICS     r0,r0,r1
00001a  4955              LDR      r1,|L1.368|
00001c  6008              STR      r0,[r1,#0]
;;;155    	  /* Enable Power Control clock */
;;;156      __HAL_RCC_PWR_CLK_DISABLE();
00001e  4608              MOV      r0,r1
000020  69c0              LDR      r0,[r0,#0x1c]
000022  0409              LSLS     r1,r1,#16
000024  4388              BICS     r0,r0,r1
000026  4952              LDR      r1,|L1.368|
000028  61c8              STR      r0,[r1,#0x1c]
;;;157    	
;;;158    	  /* Enable GPIOs clock */
;;;159      __HAL_RCC_GPIOA_CLK_ENABLE();
00002a  bf00              NOP      
00002c  4608              MOV      r0,r1
00002e  6940              LDR      r0,[r0,#0x14]
000030  2101              MOVS     r1,#1
000032  0449              LSLS     r1,r1,#17
000034  4308              ORRS     r0,r0,r1
000036  494e              LDR      r1,|L1.368|
000038  6148              STR      r0,[r1,#0x14]
00003a  4608              MOV      r0,r1
00003c  6940              LDR      r0,[r0,#0x14]
00003e  2101              MOVS     r1,#1
000040  0449              LSLS     r1,r1,#17
000042  4008              ANDS     r0,r0,r1
000044  9001              STR      r0,[sp,#4]
000046  bf00              NOP      
000048  bf00              NOP      
;;;160      __HAL_RCC_GPIOB_CLK_ENABLE();
00004a  bf00              NOP      
00004c  4848              LDR      r0,|L1.368|
00004e  6940              LDR      r0,[r0,#0x14]
000050  0049              LSLS     r1,r1,#1
000052  4308              ORRS     r0,r0,r1
000054  4946              LDR      r1,|L1.368|
000056  6148              STR      r0,[r1,#0x14]
000058  4608              MOV      r0,r1
00005a  6940              LDR      r0,[r0,#0x14]
00005c  2101              MOVS     r1,#1
00005e  0489              LSLS     r1,r1,#18
000060  4008              ANDS     r0,r0,r1
000062  9001              STR      r0,[sp,#4]
000064  bf00              NOP      
000066  bf00              NOP      
;;;161      __HAL_RCC_GPIOC_CLK_ENABLE();
000068  bf00              NOP      
00006a  4841              LDR      r0,|L1.368|
00006c  6940              LDR      r0,[r0,#0x14]
00006e  0049              LSLS     r1,r1,#1
000070  4308              ORRS     r0,r0,r1
000072  493f              LDR      r1,|L1.368|
000074  6148              STR      r0,[r1,#0x14]
000076  4608              MOV      r0,r1
000078  6940              LDR      r0,[r0,#0x14]
00007a  2101              MOVS     r1,#1
00007c  04c9              LSLS     r1,r1,#19
00007e  4008              ANDS     r0,r0,r1
000080  9001              STR      r0,[sp,#4]
000082  bf00              NOP      
000084  bf00              NOP      
;;;162    	__HAL_RCC_GPIOF_CLK_ENABLE();
000086  bf00              NOP      
000088  4839              LDR      r0,|L1.368|
00008a  6940              LDR      r0,[r0,#0x14]
00008c  00c9              LSLS     r1,r1,#3
00008e  4308              ORRS     r0,r0,r1
000090  4937              LDR      r1,|L1.368|
000092  6148              STR      r0,[r1,#0x14]
000094  4608              MOV      r0,r1
000096  6940              LDR      r0,[r0,#0x14]
000098  2101              MOVS     r1,#1
00009a  0589              LSLS     r1,r1,#22
00009c  4008              ANDS     r0,r0,r1
00009e  9001              STR      r0,[sp,#4]
0000a0  bf00              NOP      
0000a2  bf00              NOP      
;;;163    	
;;;164    	/****************************************/
;;;165     /* Disable the Peripheral */
;;;166    	__HAL_UART_DISABLE(&huart1);
0000a4  4833              LDR      r0,|L1.372|
0000a6  6800              LDR      r0,[r0,#0]  ; huart1
0000a8  6800              LDR      r0,[r0,#0]
0000aa  0840              LSRS     r0,r0,#1
0000ac  0040              LSLS     r0,r0,#1
0000ae  4931              LDR      r1,|L1.372|
0000b0  6809              LDR      r1,[r1,#0]  ; huart1
0000b2  6008              STR      r0,[r1,#0]
;;;167    //	HAL_UART_MspDeInit(&UartHandle);
;;;168    		
;;;169    	/*******************关闭SPI*********************/
;;;170    	/* Disble the selected SPI peripheral */
;;;171      HAL_SPI_DeInit(&hspi1);
0000b4  4830              LDR      r0,|L1.376|
0000b6  f7fffffe          BL       HAL_SPI_DeInit
;;;172    
;;;173      GPIO_InitStructure.Pin = 0xFF0F;  /// LED5---PA15  UART TXIO---PA9 Power_Insert --- PA0 设置为输出
0000ba  4830              LDR      r0,|L1.380|
0000bc  9002              STR      r0,[sp,#8]
;;;174      GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
0000be  2003              MOVS     r0,#3
0000c0  9003              STR      r0,[sp,#0xc]
;;;175      GPIO_InitStructure.Pull = GPIO_NOPULL;
0000c2  2000              MOVS     r0,#0
0000c4  9004              STR      r0,[sp,#0x10]
;;;176    	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
0000c6  2003              MOVS     r0,#3
0000c8  9005              STR      r0,[sp,#0x14]
;;;177    	
;;;178    	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure); 
0000ca  a902              ADD      r1,sp,#8
0000cc  2009              MOVS     r0,#9
0000ce  06c0              LSLS     r0,r0,#27
0000d0  f7fffffe          BL       HAL_GPIO_Init
;;;179    	
;;;180    	GPIO_InitStructure.Pin = 0xF338;  /// LED7---PB15   485控制IO: PB8、PB9  I2C: SCL --- PB6  SDA --- PB7   PB0  PB1 设置为输出0x7C2F
0000d4  482a              LDR      r0,|L1.384|
0000d6  9002              STR      r0,[sp,#8]
;;;181      GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
0000d8  2003              MOVS     r0,#3
0000da  9003              STR      r0,[sp,#0xc]
;;;182      GPIO_InitStructure.Pull = GPIO_NOPULL;
0000dc  2000              MOVS     r0,#0
0000de  9004              STR      r0,[sp,#0x10]
;;;183    	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
0000e0  2003              MOVS     r0,#3
0000e2  9005              STR      r0,[sp,#0x14]
;;;184    	
;;;185    	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
0000e4  a902              ADD      r1,sp,#8
0000e6  4827              LDR      r0,|L1.388|
0000e8  f7fffffe          BL       HAL_GPIO_Init
;;;186    	
;;;187    	GPIO_InitStructure.Pin = GPIO_PIN_All;
0000ec  4823              LDR      r0,|L1.380|
0000ee  30f0              ADDS     r0,r0,#0xf0
0000f0  9002              STR      r0,[sp,#8]
;;;188      GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
0000f2  2003              MOVS     r0,#3
0000f4  9003              STR      r0,[sp,#0xc]
;;;189      GPIO_InitStructure.Pull = GPIO_NOPULL;
0000f6  2000              MOVS     r0,#0
0000f8  9004              STR      r0,[sp,#0x10]
;;;190    	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
0000fa  2003              MOVS     r0,#3
0000fc  9005              STR      r0,[sp,#0x14]
;;;191    	
;;;192    	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);	
0000fe  a902              ADD      r1,sp,#8
000100  4821              LDR      r0,|L1.392|
000102  f7fffffe          BL       HAL_GPIO_Init
;;;193    	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
000106  a902              ADD      r1,sp,#8
000108  4820              LDR      r0,|L1.396|
00010a  f7fffffe          BL       HAL_GPIO_Init
;;;194    		
;;;195    	/******************* Disable Systick*********************/
;;;196    	SysTick->CTRL  &= ~SysTick_CTRL_TICKINT_Msk;    // Systick IRQ off 
00010e  4820              LDR      r0,|L1.400|
000110  6900              LDR      r0,[r0,#0x10]
000112  2102              MOVS     r1,#2
000114  4388              BICS     r0,r0,r1
000116  491e              LDR      r1,|L1.400|
000118  6108              STR      r0,[r1,#0x10]
;;;197    	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;            // Clear SysTick Exception pending flag
00011a  481e              LDR      r0,|L1.404|
00011c  6840              LDR      r0,[r0,#4]
00011e  2101              MOVS     r1,#1
000120  0649              LSLS     r1,r1,#25
000122  4308              ORRS     r0,r0,r1
000124  491b              LDR      r1,|L1.404|
000126  6048              STR      r0,[r1,#4]
;;;198    	
;;;199    	McuInitialized = false;
000128  2000              MOVS     r0,#0
00012a  491b              LDR      r1,|L1.408|
00012c  7008              STRB     r0,[r1,#0]
;;;200    	RtcInitialized = false;
00012e  491b              LDR      r1,|L1.412|
000130  7008              STRB     r0,[r1,#0]
;;;201      /* Disable GPIOs clock */
;;;202    	__HAL_RCC_GPIOA_CLK_DISABLE();
000132  480f              LDR      r0,|L1.368|
000134  6940              LDR      r0,[r0,#0x14]
000136  2101              MOVS     r1,#1
000138  0449              LSLS     r1,r1,#17
00013a  4388              BICS     r0,r0,r1
00013c  490c              LDR      r1,|L1.368|
00013e  6148              STR      r0,[r1,#0x14]
;;;203      __HAL_RCC_GPIOB_CLK_DISABLE();
000140  4608              MOV      r0,r1
000142  6940              LDR      r0,[r0,#0x14]
000144  2101              MOVS     r1,#1
000146  0489              LSLS     r1,r1,#18
000148  4388              BICS     r0,r0,r1
00014a  4909              LDR      r1,|L1.368|
00014c  6148              STR      r0,[r1,#0x14]
;;;204      __HAL_RCC_GPIOC_CLK_DISABLE();
00014e  4608              MOV      r0,r1
000150  6940              LDR      r0,[r0,#0x14]
000152  2101              MOVS     r1,#1
000154  04c9              LSLS     r1,r1,#19
000156  4388              BICS     r0,r0,r1
000158  4905              LDR      r1,|L1.368|
00015a  6148              STR      r0,[r1,#0x14]
;;;205    	__HAL_RCC_GPIOF_CLK_DISABLE();	
00015c  4608              MOV      r0,r1
00015e  6940              LDR      r0,[r0,#0x14]
000160  2101              MOVS     r1,#1
000162  0589              LSLS     r1,r1,#22
000164  4388              BICS     r0,r0,r1
000166  4902              LDR      r1,|L1.368|
000168  6148              STR      r0,[r1,#0x14]
;;;206    	DEBUG(4,"__WFI\r\n");
;;;207     }
00016a  b007              ADD      sp,sp,#0x1c
00016c  bd00              POP      {pc}
;;;208    
                          ENDP

00016e  0000              DCW      0x0000
                  |L1.368|
                          DCD      0x40021000
                  |L1.372|
                          DCD      huart1
                  |L1.376|
                          DCD      hspi1
                  |L1.380|
                          DCD      0x0000ff0f
                  |L1.384|
                          DCD      0x0000f338
                  |L1.388|
                          DCD      0x48000400
                  |L1.392|
                          DCD      0x48000800
                  |L1.396|
                          DCD      0x48001400
                  |L1.400|
                          DCD      0xe000e000
                  |L1.404|
                          DCD      0xe000ed00
                  |L1.408|
                          DCD      McuInitialized
                  |L1.412|
                          DCD      RtcInitialized

                          AREA ||i.BoardGetBatteryLevel||, CODE, READONLY, ALIGN=1

                  BoardGetBatteryLevel PROC
;;;225    
;;;226    uint8_t BoardGetBatteryLevel( void )
000000  2000              MOVS     r0,#0
;;;227    {
;;;228        uint8_t batteryLevel = 0;
;;;229    
;;;230    //    batteryLevel =  CheckBattery();
;;;231        return batteryLevel;
;;;232    }
000002  4770              BX       lr
;;;233    
                          ENDP


                          AREA ||i.BoardGetRandomSeed||, CODE, READONLY, ALIGN=2

                  BoardGetRandomSeed PROC
;;;208    
;;;209    uint32_t BoardGetRandomSeed( void )
000000  4804              LDR      r0,|L3.20|
;;;210    {
;;;211        return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
000002  6a80              LDR      r0,[r0,#0x28]
000004  4903              LDR      r1,|L3.20|
000006  6ac9              LDR      r1,[r1,#0x2c]
000008  4048              EORS     r0,r0,r1
00000a  4902              LDR      r1,|L3.20|
00000c  6b09              LDR      r1,[r1,#0x30]
00000e  4048              EORS     r0,r0,r1
;;;212    }
000010  4770              BX       lr
;;;213    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x1ffff7c0

                          AREA ||i.BoardGetUniqueId||, CODE, READONLY, ALIGN=2

                  BoardGetUniqueId PROC
;;;213    
;;;214    void BoardGetUniqueId( uint8_t *id )
000000  4917              LDR      r1,|L4.96|
;;;215    {
;;;216        id[7] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 24;
000002  6a89              LDR      r1,[r1,#0x28]
000004  4a16              LDR      r2,|L4.96|
000006  6b12              LDR      r2,[r2,#0x30]
000008  1889              ADDS     r1,r1,r2
00000a  0e09              LSRS     r1,r1,#24
00000c  71c1              STRB     r1,[r0,#7]
;;;217        id[6] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 16;
00000e  4914              LDR      r1,|L4.96|
000010  6a89              LDR      r1,[r1,#0x28]
000012  4a13              LDR      r2,|L4.96|
000014  6b12              LDR      r2,[r2,#0x30]
000016  1889              ADDS     r1,r1,r2
000018  0209              LSLS     r1,r1,#8
00001a  0e09              LSRS     r1,r1,#24
00001c  7181              STRB     r1,[r0,#6]
;;;218        id[5] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 8;
00001e  4910              LDR      r1,|L4.96|
000020  8d09              LDRH     r1,[r1,#0x28]
000022  4a0f              LDR      r2,|L4.96|
000024  8e12              LDRH     r2,[r2,#0x30]
000026  1889              ADDS     r1,r1,r2
000028  0409              LSLS     r1,r1,#16
00002a  0e09              LSRS     r1,r1,#24
00002c  7141              STRB     r1,[r0,#5]
;;;219        id[4] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) );
00002e  490c              LDR      r1,|L4.96|
000030  8d09              LDRH     r1,[r1,#0x28]
000032  4a0b              LDR      r2,|L4.96|
000034  8e12              LDRH     r2,[r2,#0x30]
000036  1889              ADDS     r1,r1,r2
000038  7101              STRB     r1,[r0,#4]
;;;220        id[3] = ( ( *( uint32_t* )ID2 ) ) >> 24;
00003a  4909              LDR      r1,|L4.96|
00003c  6ac9              LDR      r1,[r1,#0x2c]
00003e  0e09              LSRS     r1,r1,#24
000040  70c1              STRB     r1,[r0,#3]
;;;221        id[2] = ( ( *( uint32_t* )ID2 ) ) >> 16;
000042  4907              LDR      r1,|L4.96|
000044  6ac9              LDR      r1,[r1,#0x2c]
000046  0209              LSLS     r1,r1,#8
000048  0e09              LSRS     r1,r1,#24
00004a  7081              STRB     r1,[r0,#2]
;;;222        id[1] = ( ( *( uint32_t* )ID2 ) ) >> 8;
00004c  4904              LDR      r1,|L4.96|
00004e  8d89              LDRH     r1,[r1,#0x2c]
000050  0409              LSLS     r1,r1,#16
000052  0e09              LSRS     r1,r1,#24
000054  7041              STRB     r1,[r0,#1]
;;;223        id[0] = ( ( *( uint32_t* )ID2 ) );
000056  4902              LDR      r1,|L4.96|
000058  8d89              LDRH     r1,[r1,#0x2c]
00005a  7001              STRB     r1,[r0,#0]
;;;224    }
00005c  4770              BX       lr
;;;225    
                          ENDP

00005e  0000              DCW      0x0000
                  |L4.96|
                          DCD      0x1ffff7c0

                          AREA ||i.BoardInitMcu||, CODE, READONLY, ALIGN=2

                  BoardInitMcu PROC
;;;75     
;;;76     void BoardInitMcu( void )
000000  b508              PUSH     {r3,lr}
;;;77     {
;;;78     	if( McuInitialized == false )
000002  4835              LDR      r0,|L5.216|
000004  7800              LDRB     r0,[r0,#0]  ; McuInitialized
000006  2800              CMP      r0,#0
000008  d164              BNE      |L5.212|
;;;79     	{
;;;80     
;;;81     		HAL_Init( );
00000a  f7fffffe          BL       HAL_Init
;;;82     	
;;;83      /***************时钟初始化********************/
;;;84     		SystemClockConfig( );
00000e  f7fffffe          BL       SystemClockConfig
;;;85     			
;;;86     		delay_init( 16 ); ///产生US
000012  2010              MOVS     r0,#0x10
000014  f7fffffe          BL       delay_init
;;;87     		
;;;88     		/* Enable Power Control clock */
;;;89     		__HAL_RCC_GPIOC_CLK_ENABLE();
000018  bf00              NOP      
00001a  4830              LDR      r0,|L5.220|
00001c  6940              LDR      r0,[r0,#0x14]
00001e  2101              MOVS     r1,#1
000020  04c9              LSLS     r1,r1,#19
000022  4308              ORRS     r0,r0,r1
000024  492d              LDR      r1,|L5.220|
000026  6148              STR      r0,[r1,#0x14]
000028  4608              MOV      r0,r1
00002a  6940              LDR      r0,[r0,#0x14]
00002c  2101              MOVS     r1,#1
00002e  04c9              LSLS     r1,r1,#19
000030  4008              ANDS     r0,r0,r1
000032  9000              STR      r0,[sp,#0]
000034  bf00              NOP      
000036  bf00              NOP      
;;;90     		__HAL_RCC_GPIOF_CLK_ENABLE();
000038  bf00              NOP      
00003a  4828              LDR      r0,|L5.220|
00003c  6940              LDR      r0,[r0,#0x14]
00003e  00c9              LSLS     r1,r1,#3
000040  4308              ORRS     r0,r0,r1
000042  4926              LDR      r1,|L5.220|
000044  6148              STR      r0,[r1,#0x14]
000046  4608              MOV      r0,r1
000048  6940              LDR      r0,[r0,#0x14]
00004a  2101              MOVS     r1,#1
00004c  0589              LSLS     r1,r1,#22
00004e  4008              ANDS     r0,r0,r1
000050  9000              STR      r0,[sp,#0]
000052  bf00              NOP      
000054  bf00              NOP      
;;;91     		__HAL_RCC_GPIOA_CLK_ENABLE();
000056  bf00              NOP      
000058  4820              LDR      r0,|L5.220|
00005a  6940              LDR      r0,[r0,#0x14]
00005c  1149              ASRS     r1,r1,#5
00005e  4308              ORRS     r0,r0,r1
000060  491e              LDR      r1,|L5.220|
000062  6148              STR      r0,[r1,#0x14]
000064  4608              MOV      r0,r1
000066  6940              LDR      r0,[r0,#0x14]
000068  2101              MOVS     r1,#1
00006a  0449              LSLS     r1,r1,#17
00006c  4008              ANDS     r0,r0,r1
00006e  9000              STR      r0,[sp,#0]
000070  bf00              NOP      
000072  bf00              NOP      
;;;92     		__HAL_RCC_GPIOB_CLK_ENABLE();
000074  bf00              NOP      
000076  4819              LDR      r0,|L5.220|
000078  6940              LDR      r0,[r0,#0x14]
00007a  0049              LSLS     r1,r1,#1
00007c  4308              ORRS     r0,r0,r1
00007e  4917              LDR      r1,|L5.220|
000080  6148              STR      r0,[r1,#0x14]
000082  4608              MOV      r0,r1
000084  6940              LDR      r0,[r0,#0x14]
000086  2101              MOVS     r1,#1
000088  0489              LSLS     r1,r1,#18
00008a  4008              ANDS     r0,r0,r1
00008c  9000              STR      r0,[sp,#0]
00008e  bf00              NOP      
000090  bf00              NOP      
;;;93     	
;;;94     /***************串口初始化********************/
;;;95     		MX_USART1_UART_Init( );  
000092  f7fffffe          BL       MX_USART1_UART_Init
;;;96     		
;;;97     		MX_USART5_UART_Init( );
000096  f7fffffe          BL       MX_USART5_UART_Init
;;;98     
;;;99     		RTC_Init( );
00009a  f7fffffe          BL       RTC_Init
;;;100    	
;;;101    		/*******************开启RTC中断*******************/
;;;102    		HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
00009e  2200              MOVS     r2,#0
0000a0  2101              MOVS     r1,#1
0000a2  2002              MOVS     r0,#2
0000a4  f7fffffe          BL       HAL_NVIC_SetPriority
;;;103    		HAL_NVIC_EnableIRQ(RTC_IRQn);
0000a8  2002              MOVS     r0,#2
0000aa  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;104    		
;;;105    		
;;;106    		/*******************开启UART5中断*******************/
;;;107    		HAL_NVIC_SetPriority(USART3_6_IRQn, 3, 0);
0000ae  2200              MOVS     r2,#0
0000b0  2103              MOVS     r1,#3
0000b2  201d              MOVS     r0,#0x1d
0000b4  f7fffffe          BL       HAL_NVIC_SetPriority
;;;108    		HAL_NVIC_EnableIRQ(USART3_6_IRQn);
0000b8  201d              MOVS     r0,#0x1d
0000ba  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;109    
;;;110    	
;;;111    	/***************SX1276 I/O初始化********************/
;;;112    		SX1276IoInit( );
0000be  f7fffffe          BL       SX1276IoInit
;;;113    		
;;;114    		/***************LoRa状态灯 I/O初始化********************/
;;;115    		LoRaLed_Init( );
0000c2  f7fffffe          BL       LoRaLed_Init
;;;116    	
;;;117    	/****************SPI初始化*******************/
;;;118    		SPI1_NSS( );						///片选初始化
0000c6  f7fffffe          BL       SPI1_NSS
;;;119    		SPI1_Init( );					///SPI初始化	
0000ca  f7fffffe          BL       SPI1_Init
;;;120    
;;;121    		McuInitialized = true;
0000ce  2001              MOVS     r0,#1
0000d0  4901              LDR      r1,|L5.216|
0000d2  7008              STRB     r0,[r1,#0]
                  |L5.212|
;;;122    	} 
;;;123           
;;;124    }
0000d4  bd08              POP      {r3,pc}
;;;125    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L5.216|
                          DCD      McuInitialized
                  |L5.220|
                          DCD      0x40021000

                          AREA ||i.BoardInitPeriph||, CODE, READONLY, ALIGN=1

                  BoardInitPeriph PROC
;;;69     
;;;70     void BoardInitPeriph( void )
000000  4770              BX       lr
;;;71     {
;;;72      
;;;73     
;;;74     }
;;;75     
                          ENDP


                          AREA ||i.GetBoardPowerSource||, CODE, READONLY, ALIGN=1

                  GetBoardPowerSource PROC
;;;318    
;;;319    uint8_t GetBoardPowerSource( void )
000000  2001              MOVS     r0,#1
;;;320    {
;;;321    #if defined( USE_USB_CDC )
;;;322        if( UartUsbIsUsbCableConnected( ) == 0 )
;;;323        {
;;;324            return BATTERY_POWER;
;;;325        }
;;;326        else
;;;327        {
;;;328            return USB_POWER;
;;;329        }
;;;330    #else
;;;331        return BATTERY_POWER;
;;;332    #endif
;;;333    }
000002  4770              BX       lr
;;;334    
                          ENDP


                          AREA ||i.Rs485_Turn_Off||, CODE, READONLY, ALIGN=2

                  Rs485_Turn_Off PROC
;;;128    
;;;129    void Rs485_Turn_Off(void) ///关闭485电源
000000  b500              PUSH     {lr}
;;;130    {
000002  b087              SUB      sp,sp,#0x1c
;;;131        GPIO_InitTypeDef GPIO_Initure;
;;;132        __HAL_RCC_GPIOC_CLK_ENABLE();           //开启GPIOB时钟
000004  bf00              NOP      
000006  4814              LDR      r0,|L8.88|
000008  6940              LDR      r0,[r0,#0x14]
00000a  2101              MOVS     r1,#1
00000c  04c9              LSLS     r1,r1,#19
00000e  4308              ORRS     r0,r0,r1
000010  4911              LDR      r1,|L8.88|
000012  6148              STR      r0,[r1,#0x14]
000014  4608              MOV      r0,r1
000016  6940              LDR      r0,[r0,#0x14]
000018  2101              MOVS     r1,#1
00001a  04c9              LSLS     r1,r1,#19
00001c  4008              ANDS     r0,r0,r1
00001e  9001              STR      r0,[sp,#4]
000020  bf00              NOP      
000022  bf00              NOP      
;;;133    	
;;;134    		//PB0、PB1 --- 读取硬件版本   PB8 --- 485_RE  PB9 ---- 485_DE  
;;;135        GPIO_Initure.Pin=GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9; 
000024  480d              LDR      r0,|L8.92|
000026  9002              STR      r0,[sp,#8]
;;;136        GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
000028  2001              MOVS     r0,#1
00002a  9003              STR      r0,[sp,#0xc]
;;;137        GPIO_Initure.Pull=GPIO_NOPULL;          //上拉
00002c  2000              MOVS     r0,#0
00002e  9004              STR      r0,[sp,#0x10]
;;;138        GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;     //高速
000030  2003              MOVS     r0,#3
000032  9005              STR      r0,[sp,#0x14]
;;;139        HAL_GPIO_Init(GPIOB,&GPIO_Initure);
000034  a902              ADD      r1,sp,#8
000036  480a              LDR      r0,|L8.96|
000038  f7fffffe          BL       HAL_GPIO_Init
;;;140    	
;;;141    	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8,GPIO_PIN_SET);	//PB15置1
00003c  2201              MOVS     r2,#1
00003e  21ff              MOVS     r1,#0xff
000040  3104              ADDS     r1,#4
000042  4807              LDR      r0,|L8.96|
000044  f7fffffe          BL       HAL_GPIO_WritePin
;;;142    	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);	//PB15置1
000048  2200              MOVS     r2,#0
00004a  2101              MOVS     r1,#1
00004c  0249              LSLS     r1,r1,#9
00004e  4804              LDR      r0,|L8.96|
000050  f7fffffe          BL       HAL_GPIO_WritePin
;;;143    }
000054  b007              ADD      sp,sp,#0x1c
000056  bd00              POP      {pc}
;;;144    
                          ENDP

                  |L8.88|
                          DCD      0x40021000
                  |L8.92|
                          DCD      0x00000303
                  |L8.96|
                          DCD      0x48000400

                          AREA ||i.SystemClockConfig||, CODE, READONLY, ALIGN=2

                  SystemClockConfig PROC
;;;239      */
;;;240    void SystemClockConfig( void )
000000  b530              PUSH     {r4,r5,lr}
;;;241    {
000002  b095              SUB      sp,sp,#0x54
;;;242      RCC_OscInitTypeDef RCC_OscInitStruct;
;;;243      RCC_ClkInitTypeDef RCC_ClkInitStruct;
;;;244      RCC_PeriphCLKInitTypeDef PeriphClkInit;
;;;245    
;;;246        /**Initializes the CPU, AHB and APB busses clocks 
;;;247        */
;;;248      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
000004  2006              MOVS     r0,#6
000006  9009              STR      r0,[sp,#0x24]
;;;249      RCC_OscInitStruct.LSEState = RCC_LSE_ON;
000008  2001              MOVS     r0,#1
00000a  900b              STR      r0,[sp,#0x2c]
;;;250      RCC_OscInitStruct.HSIState = RCC_HSI_ON;
00000c  900c              STR      r0,[sp,#0x30]
;;;251      RCC_OscInitStruct.HSICalibrationValue = 16;
00000e  2010              MOVS     r0,#0x10
000010  900d              STR      r0,[sp,#0x34]
;;;252      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
000012  2002              MOVS     r0,#2
000014  9011              STR      r0,[sp,#0x44]
;;;253      RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
000016  0381              LSLS     r1,r0,#14
000018  9112              STR      r1,[sp,#0x48]
;;;254      RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
00001a  2100              MOVS     r1,#0
00001c  9113              STR      r1,[sp,#0x4c]
;;;255      RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
00001e  9114              STR      r1,[sp,#0x50]
;;;256      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
000020  a809              ADD      r0,sp,#0x24
000022  f7fffffe          BL       HAL_RCC_OscConfig
000026  2800              CMP      r0,#0
000028  d001              BEQ      |L9.46|
;;;257      {
;;;258        Error_Handler();
00002a  f7fffffe          BL       Error_Handler
                  |L9.46|
;;;259      }
;;;260    
;;;261        /**Initializes the CPU, AHB and APB busses clocks 
;;;262        */
;;;263      RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
00002e  2007              MOVS     r0,#7
000030  9005              STR      r0,[sp,#0x14]
;;;264                                  |RCC_CLOCKTYPE_PCLK1;
;;;265      RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
000032  2002              MOVS     r0,#2
000034  9006              STR      r0,[sp,#0x18]
;;;266      RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
000036  2000              MOVS     r0,#0
000038  9007              STR      r0,[sp,#0x1c]
;;;267      RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
00003a  9008              STR      r0,[sp,#0x20]
;;;268    
;;;269      if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
00003c  2100              MOVS     r1,#0
00003e  a805              ADD      r0,sp,#0x14
000040  f7fffffe          BL       HAL_RCC_ClockConfig
000044  2800              CMP      r0,#0
000046  d001              BEQ      |L9.76|
;;;270      {
;;;271        Error_Handler();
000048  f7fffffe          BL       Error_Handler
                  |L9.76|
;;;272      }
;;;273    
;;;274      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
00004c  4813              LDR      r0,|L9.156|
00004e  9001              STR      r0,[sp,#4]
;;;275      PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
000050  2000              MOVS     r0,#0
000052  9003              STR      r0,[sp,#0xc]
;;;276      PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
000054  20ff              MOVS     r0,#0xff
000056  3001              ADDS     r0,#1
000058  9002              STR      r0,[sp,#8]
;;;277      if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
00005a  a801              ADD      r0,sp,#4
00005c  f7fffffe          BL       HAL_RCCEx_PeriphCLKConfig
000060  2800              CMP      r0,#0
000062  d001              BEQ      |L9.104|
;;;278      {
;;;279        Error_Handler();
000064  f7fffffe          BL       Error_Handler
                  |L9.104|
;;;280      }
;;;281    
;;;282        /**Configure LSE Drive Capability 
;;;283        */
;;;284      __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
000068  480d              LDR      r0,|L9.160|
00006a  6a00              LDR      r0,[r0,#0x20]
00006c  2118              MOVS     r1,#0x18
00006e  4388              BICS     r0,r0,r1
000070  490b              LDR      r1,|L9.160|
000072  6208              STR      r0,[r1,#0x20]
;;;285    
;;;286        /**Configure the Systick interrupt time 
;;;287        */
;;;288      HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
000074  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000078  4605              MOV      r5,r0
00007a  217d              MOVS     r1,#0x7d
00007c  00c9              LSLS     r1,r1,#3
00007e  f7fffffe          BL       __aeabi_uidivmod
000082  4604              MOV      r4,r0
000084  f7fffffe          BL       HAL_SYSTICK_Config
;;;289    
;;;290        /**Configure the Systick 
;;;291        */
;;;292      HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
000088  2004              MOVS     r0,#4
00008a  f7fffffe          BL       HAL_SYSTICK_CLKSourceConfig
;;;293    
;;;294      /* SysTick_IRQn interrupt configuration */
;;;295      HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
00008e  2200              MOVS     r2,#0
000090  4611              MOV      r1,r2
000092  1e50              SUBS     r0,r2,#1
000094  f7fffffe          BL       HAL_NVIC_SetPriority
;;;296    
;;;297    
;;;298    }
000098  b015              ADD      sp,sp,#0x54
00009a  bd30              POP      {r4,r5,pc}
;;;299    
                          ENDP

                  |L9.156|
                          DCD      0x00010001
                  |L9.160|
                          DCD      0x40021000

                          AREA ||.data||, DATA, ALIGN=0

                  McuInitialized
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\HAL\\system\\board.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_board_c_0249cac4____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_board_c_0249cac4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_board_c_0249cac4____REVSH|
#line 402
|__asm___7_board_c_0249cac4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
