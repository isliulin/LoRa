; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\hexbin_decoct.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\hexbin_decoct.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\hexbin_decoct.crf ..\HAL\src\hexbin_decoct.c]
                          THUMB

                          AREA ||i.Convert16To10||, CODE, READONLY, ALIGN=1

                  Convert16To10 PROC
;;;24     */
;;;25     int Convert16To10(int number)
000000  b5f0              PUSH     {r4-r7,lr}
;;;26     {
000002  4604              MOV      r4,r0
;;;27     	int r = 0 ;
000004  2600              MOVS     r6,#0
;;;28     	int i = 0 ;
000006  2700              MOVS     r7,#0
;;;29     	int result = 0 ;
000008  2500              MOVS     r5,#0
;;;30     	while(number)
00000a  e012              B        |L1.50|
                  |L1.12|
;;;31     	{
;;;32     		r = number % 16 ;
00000c  4620              MOV      r0,r4
00000e  17e1              ASRS     r1,r4,#31
000010  0f09              LSRS     r1,r1,#28
000012  1809              ADDS     r1,r1,r0
000014  1109              ASRS     r1,r1,#4
000016  0109              LSLS     r1,r1,#4
000018  1a66              SUBS     r6,r4,r1
;;;33     		result += r * PowerXY(16, i++) ;
00001a  4639              MOV      r1,r7
00001c  1c7f              ADDS     r7,r7,#1
00001e  2010              MOVS     r0,#0x10
000020  f7fffffe          BL       PowerXY
000024  4370              MULS     r0,r6,r0
000026  1945              ADDS     r5,r0,r5
;;;34     		number /= 16 ;
000028  4620              MOV      r0,r4
00002a  17e1              ASRS     r1,r4,#31
00002c  0f09              LSRS     r1,r1,#28
00002e  1809              ADDS     r1,r1,r0
000030  110c              ASRS     r4,r1,#4
                  |L1.50|
000032  2c00              CMP      r4,#0                 ;30
000034  d1ea              BNE      |L1.12|
;;;35     	}
;;;36     	return result ;
000036  4628              MOV      r0,r5
;;;37     }
000038  bdf0              POP      {r4-r7,pc}
;;;38     
                          ENDP


                          AREA ||i.PowerXY||, CODE, READONLY, ALIGN=1

                  PowerXY PROC
;;;13     
;;;14     int PowerXY(int x, int y)
000000  b530              PUSH     {r4,r5,lr}
;;;15     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;16     	if(y == 0)
000006  2c00              CMP      r4,#0
000008  d101              BNE      |L2.14|
;;;17     	return 1 ;
00000a  2001              MOVS     r0,#1
                  |L2.12|
;;;18     	else
;;;19     	return x * PowerXY(x, y -1 ) ;
;;;20     }
00000c  bd30              POP      {r4,r5,pc}
                  |L2.14|
00000e  1e61              SUBS     r1,r4,#1              ;19
000010  4628              MOV      r0,r5                 ;19
000012  f7fffffe          BL       PowerXY
000016  4368              MULS     r0,r5,r0              ;19
000018  e7f8              B        |L2.12|
;;;21     /*!
                          ENDP


                          AREA ||i.Read_DecNumber||, CODE, READONLY, ALIGN=1

                  Read_DecNumber PROC
;;;42     */
;;;43     uint32_t Read_DecNumber(char *str)
000000  4601              MOV      r1,r0
;;;44     {
;;;45         uint32_t value;
;;;46     
;;;47         if (! str)
000002  2900              CMP      r1,#0
000004  d100              BNE      |L3.8|
                  |L3.6|
;;;48         {
;;;49             return 0;
;;;50         }
;;;51         value = 0;
;;;52         while ((*str >= '0') && (*str <= '9'))
;;;53         {
;;;54             value = value*10 + (*str - '0');
;;;55             str++;
;;;56         }
;;;57         return value;
;;;58     }
000006  4770              BX       lr
                  |L3.8|
000008  2200              MOVS     r2,#0                 ;51
00000a  e005              B        |L3.24|
                  |L3.12|
00000c  200a              MOVS     r0,#0xa               ;54
00000e  4350              MULS     r0,r2,r0              ;54
000010  780b              LDRB     r3,[r1,#0]            ;54
000012  3b30              SUBS     r3,r3,#0x30           ;54
000014  18c2              ADDS     r2,r0,r3              ;54
000016  1c49              ADDS     r1,r1,#1              ;55
                  |L3.24|
000018  7808              LDRB     r0,[r1,#0]            ;52
00001a  2830              CMP      r0,#0x30              ;52
00001c  db02              BLT      |L3.36|
00001e  7808              LDRB     r0,[r1,#0]            ;52
000020  2839              CMP      r0,#0x39              ;52
000022  ddf3              BLE      |L3.12|
                  |L3.36|
000024  4610              MOV      r0,r2                 ;57
000026  e7ee              B        |L3.6|
;;;59     
                          ENDP


                          AREA ||i.String_Conversion||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                  String_Conversion PROC
;;;63     */
;;;64     void String_Conversion(char *str, uint8_t *src, uint8_t len)
000000  b57c              PUSH     {r2-r6,lr}
;;;65     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;66        volatile int i,v;
;;;67             
;;;68        for(i=0; i<len/2; i++)
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
00000c  e00c              B        |L4.40|
                  |L4.14|
;;;69        {
;;;70         sscanf(str+i*2,"%2X",&v);
00000e  9901              LDR      r1,[sp,#4]
000010  0049              LSLS     r1,r1,#1
000012  1948              ADDS     r0,r1,r5
000014  466a              MOV      r2,sp
000016  a108              ADR      r1,|L4.56|
000018  f7fffffe          BL       __0sscanf
;;;71         src[i]=(uint8_t)v;
00001c  9800              LDR      r0,[sp,#0]
00001e  9901              LDR      r1,[sp,#4]
000020  5470              STRB     r0,[r6,r1]
000022  9801              LDR      r0,[sp,#4]            ;68
000024  1c40              ADDS     r0,r0,#1              ;68
000026  9001              STR      r0,[sp,#4]            ;68
                  |L4.40|
000028  0fe1              LSRS     r1,r4,#31             ;68
00002a  1909              ADDS     r1,r1,r4              ;68
00002c  1049              ASRS     r1,r1,#1              ;68
00002e  9a01              LDR      r2,[sp,#4]            ;68
000030  4291              CMP      r1,r2                 ;68
000032  dcec              BGT      |L4.14|
;;;72     
;;;73     //     printf("%02X ", src[i]);
;;;74       }
;;;75     //   printf("\r\n ");
;;;76     }
000034  bd7c              POP      {r2-r6,pc}
;;;77     
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
000038  25325800          DCB      "%2X",0
