; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_pwr.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_pwr.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_pwr.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;90       */
;;;91     void HAL_PWR_DeInit(void)
000000  4806              LDR      r0,|L1.28|
;;;92     {
;;;93       __HAL_RCC_PWR_FORCE_RESET();
000002  6900              LDR      r0,[r0,#0x10]
000004  2101              MOVS     r1,#1
000006  0709              LSLS     r1,r1,#28
000008  4308              ORRS     r0,r0,r1
00000a  4904              LDR      r1,|L1.28|
00000c  6108              STR      r0,[r1,#0x10]
;;;94       __HAL_RCC_PWR_RELEASE_RESET();
00000e  4608              MOV      r0,r1
000010  6900              LDR      r0,[r0,#0x10]
000012  0409              LSLS     r1,r1,#16
000014  4388              BICS     r0,r0,r1
000016  4901              LDR      r1,|L1.28|
000018  6108              STR      r0,[r1,#0x10]
;;;95     }
00001a  4770              BX       lr
;;;96     
                          ENDP

                  |L1.28|
                          DCD      0x40021000

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;115      */
;;;116    void HAL_PWR_DisableBkUpAccess(void)
000000  4803              LDR      r0,|L2.16|
;;;117    {
;;;118      PWR->CR &= ~((uint32_t)PWR_CR_DBP);
000002  6800              LDR      r0,[r0,#0]
000004  21ff              MOVS     r1,#0xff
000006  3101              ADDS     r1,#1
000008  4388              BICS     r0,r0,r1
00000a  4901              LDR      r1,|L2.16|
00000c  6008              STR      r0,[r1,#0]
;;;119    }
00000e  4770              BX       lr
;;;120    
                          ENDP

                  |L2.16|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;446      */
;;;447    void HAL_PWR_DisableSEVOnPend(void)
000000  4803              LDR      r0,|L3.16|
;;;448    {
;;;449      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;450      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6900              LDR      r0,[r0,#0x10]
000004  2110              MOVS     r1,#0x10
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L3.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;451    }
00000c  4770              BX       lr
;;;452    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe000ed00

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;419      */
;;;420    void HAL_PWR_DisableSleepOnExit(void)
000000  4803              LDR      r0,|L4.16|
;;;421    {
;;;422      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;423      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6900              LDR      r0,[r0,#0x10]
000004  2102              MOVS     r1,#2
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L4.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;424    }
00000c  4770              BX       lr
;;;425    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0xe000ed00

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;261      */
;;;262    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L5.12|
;;;263    {
;;;264      /* Check the parameters */
;;;265      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;266      /* Disable the EWUPx pin */
;;;267      CLEAR_BIT(PWR->CSR, WakeUpPinx);
000002  6849              LDR      r1,[r1,#4]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L5.12|
000008  6051              STR      r1,[r2,#4]
;;;268    }
00000a  4770              BX       lr
;;;269    
                          ENDP

                  |L5.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;103      */
;;;104    void HAL_PWR_EnableBkUpAccess(void)
000000  4803              LDR      r0,|L6.16|
;;;105    {
;;;106      PWR->CR |= (uint32_t)PWR_CR_DBP;
000002  6800              LDR      r0,[r0,#0]
000004  21ff              MOVS     r1,#0xff
000006  3101              ADDS     r1,#1
000008  4308              ORRS     r0,r0,r1
00000a  4901              LDR      r1,|L6.16|
00000c  6008              STR      r0,[r1,#0]
;;;107    }
00000e  4770              BX       lr
;;;108    
                          ENDP

                  |L6.16|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;433      */
;;;434    void HAL_PWR_EnableSEVOnPend(void)
000000  4803              LDR      r0,|L7.16|
;;;435    {
;;;436      /* Set SEVONPEND bit of Cortex System Control Register */
;;;437      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6900              LDR      r0,[r0,#0x10]
000004  2110              MOVS     r1,#0x10
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L7.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;438    }
00000c  4770              BX       lr
;;;439    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0xe000ed00

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;406      */
;;;407    void HAL_PWR_EnableSleepOnExit(void)
000000  4803              LDR      r0,|L8.16|
;;;408    {
;;;409      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;410      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6900              LDR      r0,[r0,#0x10]
000004  2102              MOVS     r1,#2
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L8.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;411    }
00000c  4770              BX       lr
;;;412    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0xe000ed00

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;246      */
;;;247    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L9.12|
;;;248    {
;;;249      /* Check the parameters */
;;;250      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;251      /* Enable the EWUPx pin */
;;;252      SET_BIT(PWR->CSR, WakeUpPinx);
000002  6849              LDR      r1,[r1,#4]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L9.12|
000008  6051              STR      r1,[r2,#4]
;;;253    }
00000a  4770              BX       lr
;;;254    
                          ENDP

                  |L9.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;284      */
;;;285    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4a06              LDR      r2,|L10.28|
;;;286    {
;;;287      /* Check the parameters */
;;;288      assert_param(IS_PWR_REGULATOR(Regulator));
;;;289      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;290    
;;;291      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;292      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
000002  6912              LDR      r2,[r2,#0x10]
000004  2304              MOVS     r3,#4
000006  439a              BICS     r2,r2,r3
000008  4b04              LDR      r3,|L10.28|
00000a  611a              STR      r2,[r3,#0x10]
;;;293    
;;;294      /* Select SLEEP mode entry -------------------------------------------------*/
;;;295      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000c  2901              CMP      r1,#1
00000e  d101              BNE      |L10.20|
;;;296      {
;;;297        /* Request Wait For Interrupt */
;;;298        __WFI();
000010  bf30              WFI      
000012  e002              B        |L10.26|
                  |L10.20|
;;;299      }
;;;300      else
;;;301      {
;;;302        /* Request Wait For Event */
;;;303        __SEV();
000014  bf40              SEV      
;;;304        __WFE();
000016  bf20              WFE      
;;;305        __WFE();
000018  bf20              WFE      
                  |L10.26|
;;;306      }
;;;307    }
00001a  4770              BX       lr
;;;308    
                          ENDP

                  |L10.28|
                          DCD      0xe000ed00

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;382      */
;;;383    void HAL_PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L11.32|
;;;384    {
;;;385      /* Select STANDBY mode */
;;;386      PWR->CR |= (uint32_t)PWR_CR_PDDS;
000002  6800              LDR      r0,[r0,#0]
000004  2102              MOVS     r1,#2
000006  4308              ORRS     r0,r0,r1
000008  4905              LDR      r1,|L11.32|
00000a  6008              STR      r0,[r1,#0]
;;;387    
;;;388      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;389      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
00000c  4805              LDR      r0,|L11.36|
00000e  6900              LDR      r0,[r0,#0x10]
000010  2104              MOVS     r1,#4
000012  4308              ORRS     r0,r0,r1
000014  4903              LDR      r1,|L11.36|
000016  6108              STR      r0,[r1,#0x10]
;;;390    
;;;391      /* This option is used to ensure that store operations are completed */
;;;392    #if defined ( __CC_ARM)
;;;393      __force_stores();
000018  bf00              NOP      
00001a  bf00              NOP      
;;;394    #endif
;;;395      /* Request Wait For Interrupt */
;;;396      __WFI();
00001c  bf30              WFI      
;;;397    }
00001e  4770              BX       lr
;;;398    
                          ENDP

                  |L11.32|
                          DCD      0x40007000
                  |L11.36|
                          DCD      0xe000ed00

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;327      */
;;;328    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;329    {
000002  4602              MOV      r2,r0
;;;330      uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;331    
;;;332      /* Check the parameters */
;;;333      assert_param(IS_PWR_REGULATOR(Regulator));
;;;334      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;335    
;;;336      /* Select the regulator state in STOP mode ---------------------------------*/
;;;337      tmpreg = PWR->CR;
000006  4b0e              LDR      r3,|L12.64|
000008  6818              LDR      r0,[r3,#0]
;;;338      
;;;339      /* Clear PDDS and LPDS bits */
;;;340      tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
00000a  0880              LSRS     r0,r0,#2
00000c  0080              LSLS     r0,r0,#2
;;;341    
;;;342      /* Set LPDS bit according to Regulator value */
;;;343      tmpreg |= Regulator;
00000e  4603              MOV      r3,r0
000010  4313              ORRS     r3,r3,r2
000012  4618              MOV      r0,r3
;;;344    
;;;345      /* Store the new value */
;;;346      PWR->CR = tmpreg;
000014  4b0a              LDR      r3,|L12.64|
000016  6018              STR      r0,[r3,#0]
;;;347    
;;;348      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;349      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000018  4b0a              LDR      r3,|L12.68|
00001a  691b              LDR      r3,[r3,#0x10]
00001c  2404              MOVS     r4,#4
00001e  4323              ORRS     r3,r3,r4
000020  4c08              LDR      r4,|L12.68|
000022  6123              STR      r3,[r4,#0x10]
;;;350    
;;;351      /* Select STOP mode entry --------------------------------------------------*/
;;;352      if(STOPEntry == PWR_STOPENTRY_WFI)
000024  2901              CMP      r1,#1
000026  d101              BNE      |L12.44|
;;;353      {
;;;354        /* Request Wait For Interrupt */
;;;355        __WFI();
000028  bf30              WFI      
00002a  e002              B        |L12.50|
                  |L12.44|
;;;356      }
;;;357      else
;;;358      {
;;;359        /* Request Wait For Event */
;;;360        __SEV();
00002c  bf40              SEV      
;;;361        __WFE();
00002e  bf20              WFE      
;;;362        __WFE();
000030  bf20              WFE      
                  |L12.50|
;;;363      }
;;;364    
;;;365      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;366      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
000032  4b04              LDR      r3,|L12.68|
000034  691b              LDR      r3,[r3,#0x10]
000036  2404              MOVS     r4,#4
000038  43a3              BICS     r3,r3,r4
00003a  4c02              LDR      r4,|L12.68|
00003c  6123              STR      r3,[r4,#0x10]
;;;367    }
00003e  bd10              POP      {r4,pc}
;;;368    
                          ENDP

                  |L12.64|
                          DCD      0x40007000
                  |L12.68|
                          DCD      0xe000ed00

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_pwr_c_f2cfe8be____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f0xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_pwr_c_f2cfe8be____REVSH|
#line 402
|__asm___19_stm32f0xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
