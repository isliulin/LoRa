; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\timer-board.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timer-board.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\timer-board.crf ..\HAL\src\timer-board.c]
                          THUMB

                          AREA ||i.HAL_TIM_Base_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspDeInit PROC
;;;87     
;;;88     void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
000000  b510              PUSH     {r4,lr}
;;;89     {
000002  4604              MOV      r4,r0
;;;90     
;;;91       if(htim_base->Instance==TIM3)
000004  4906              LDR      r1,|L1.32|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d108              BNE      |L1.30|
;;;92       {
;;;93       /* USER CODE BEGIN TIM2_MspDeInit 0 */
;;;94     
;;;95       /* USER CODE END TIM2_MspDeInit 0 */
;;;96         /* Peripheral clock disable */
;;;97         __HAL_RCC_TIM3_CLK_DISABLE();
00000c  4805              LDR      r0,|L1.36|
00000e  69c0              LDR      r0,[r0,#0x1c]
000010  2102              MOVS     r1,#2
000012  4388              BICS     r0,r0,r1
000014  4903              LDR      r1,|L1.36|
000016  61c8              STR      r0,[r1,#0x1c]
;;;98     
;;;99         /* Peripheral interrupt Deinit*/
;;;100        HAL_NVIC_DisableIRQ(TIM3_IRQn);
000018  2010              MOVS     r0,#0x10
00001a  f7fffffe          BL       HAL_NVIC_DisableIRQ
                  |L1.30|
;;;101    
;;;102      }
;;;103      /* USER CODE BEGIN TIM2_MspDeInit 1 */
;;;104    
;;;105      /* USER CODE END TIM2_MspDeInit 1 */
;;;106    } 
00001e  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  |L1.32|
                          DCD      0x40000400
                  |L1.36|
                          DCD      0x40021000

                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspInit PROC
;;;71     
;;;72     void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
000000  b508              PUSH     {r3,lr}
;;;73     {
;;;74     
;;;75       if(htim_base->Instance==TIM3)
000002  4a09              LDR      r2,|L2.40|
000004  6801              LDR      r1,[r0,#0]
000006  4291              CMP      r1,r2
000008  d10d              BNE      |L2.38|
;;;76       {
;;;77       /* USER CODE BEGIN TIM2_MspInit 0 */
;;;78     
;;;79       /* USER CODE END TIM2_MspInit 0 */
;;;80         /* Peripheral clock enable */
;;;81         __HAL_RCC_TIM3_CLK_ENABLE();
00000a  bf00              NOP      
00000c  4907              LDR      r1,|L2.44|
00000e  69c9              LDR      r1,[r1,#0x1c]
000010  2202              MOVS     r2,#2
000012  4311              ORRS     r1,r1,r2
000014  4a05              LDR      r2,|L2.44|
000016  61d1              STR      r1,[r2,#0x1c]
000018  4611              MOV      r1,r2
00001a  69c9              LDR      r1,[r1,#0x1c]
00001c  2202              MOVS     r2,#2
00001e  4011              ANDS     r1,r1,r2
000020  9100              STR      r1,[sp,#0]
000022  bf00              NOP      
000024  bf00              NOP      
                  |L2.38|
;;;82       /* USER CODE BEGIN TIM2_MspInit 1 */
;;;83     
;;;84       /* USER CODE END TIM2_MspInit 1 */
;;;85       }
;;;86     }
000026  bd08              POP      {r3,pc}
;;;87     
                          ENDP

                  |L2.40|
                          DCD      0x40000400
                  |L2.44|
                          DCD      0x40021000

                          AREA ||i.TimerHwDeInit||, CODE, READONLY, ALIGN=2

                  TimerHwDeInit PROC
;;;107    
;;;108    void TimerHwDeInit( void )
000000  b510              PUSH     {r4,lr}
;;;109    {
;;;110        /* Deinitialize the timer */
;;;111        //TIM_DeInit( TIM2 );
;;;112    	HAL_TIM_Base_DeInit(&htim3);
000002  4802              LDR      r0,|L3.12|
000004  f7fffffe          BL       HAL_TIM_Base_DeInit
;;;113    }
000008  bd10              POP      {r4,pc}
;;;114    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      htim3

                          AREA ||i.TimerHwDelayMs||, CODE, READONLY, ALIGN=2

                  TimerHwDelayMs PROC
;;;144    
;;;145    void TimerHwDelayMs( uint32_t delay )
000000  b5f0              PUSH     {r4-r7,lr}
;;;146    {
000002  b087              SUB      sp,sp,#0x1c
000004  4607              MOV      r7,r0
;;;147        uint64_t delayValue = 0;
000006  bf00              NOP      
;;;148        uint64_t timeout = 0;
000008  bf00              NOP      
;;;149        uint32_t systick = 0;
00000a  bf00              NOP      
;;;150    
;;;151        delayValue = delay * 1000;
00000c  4638              MOV      r0,r7
00000e  217d              MOVS     r1,#0x7d
000010  00c9              LSLS     r1,r1,#3
000012  4348              MULS     r0,r1,r0
000014  2100              MOVS     r1,#0
000016  9105              STR      r1,[sp,#0x14]
000018  9004              STR      r0,[sp,#0x10]
;;;152    
;;;153        timeout = TimerHwGetTimerValue( );
00001a  f7fffffe          BL       TimerHwGetTimerValue
00001e  9103              STR      r1,[sp,#0xc]
000020  9002              STR      r0,[sp,#8]
;;;154        systick = TimerOverTime;
000022  4811              LDR      r0,|L4.104|
000024  6800              LDR      r0,[r0,#0]  ; TimerOverTime
000026  9001              STR      r0,[sp,#4]
;;;155     
;;;156        ///系统时钟超时10ms：防止Timer2异常,采用10ms原因是TimerHwDelayMs最大延时使用6ms
;;;157        while( ((( TimerHwGetTimerValue( ) - timeout  ) * HW_TIMER_TIME_BASE ) < delayValue) && ((TimerOverTime - systick)<10) )
000028  e000              B        |L4.44|
                  |L4.42|
;;;158        {
;;;159            __NOP( ); 
00002a  bf00              NOP      
                  |L4.44|
00002c  f7fffffe          BL       TimerHwGetTimerValue
000030  9b03              LDR      r3,[sp,#0xc]          ;157
000032  9a02              LDR      r2,[sp,#8]            ;157
000034  1a84              SUBS     r4,r0,r2              ;157
000036  4199              SBCS     r1,r1,r3              ;157
000038  2564              MOVS     r5,#0x64              ;157
00003a  2600              MOVS     r6,#0                 ;157
00003c  4620              MOV      r0,r4                 ;157
00003e  462a              MOV      r2,r5                 ;157
000040  4633              MOV      r3,r6                 ;157
000042  9106              STR      r1,[sp,#0x18]         ;157
000044  f7fffffe          BL       __aeabi_lmul
000048  9b05              LDR      r3,[sp,#0x14]         ;157
00004a  9a04              LDR      r2,[sp,#0x10]         ;157
00004c  1a80              SUBS     r0,r0,r2              ;157
00004e  4199              SBCS     r1,r1,r3              ;157
000050  d205              BCS      |L4.94|
000052  4805              LDR      r0,|L4.104|
000054  6801              LDR      r1,[r0,#0]            ;157  ; TimerOverTime
000056  9801              LDR      r0,[sp,#4]            ;157
000058  1a08              SUBS     r0,r1,r0              ;157
00005a  280a              CMP      r0,#0xa               ;157
00005c  d3e5              BCC      |L4.42|
                  |L4.94|
;;;160    //         DEBUG(2,"TimerHwGetTimerValue( )  = %lld delayValue = %lld\r\n",( ( TimerHwGetTimerValue( ) - timeout  ) * HW_TIMER_TIME_BASE ),delayValue);
;;;161    //       DEBUG(2,"systick  = %d Tick-systick = %d\r\n",systick,Tick-systick);
;;;162      }
;;;163      TimerOverTime = 0;
00005e  2000              MOVS     r0,#0
000060  4901              LDR      r1,|L4.104|
000062  6008              STR      r0,[r1,#0]  ; TimerOverTime
;;;164    
;;;165        
;;;166    }
000064  b007              ADD      sp,sp,#0x1c
000066  bdf0              POP      {r4-r7,pc}
;;;167    
                          ENDP

                  |L4.104|
                          DCD      TimerOverTime

                          AREA ||i.TimerHwEnterLowPowerStopMode||, CODE, READONLY, ALIGN=1

                  TimerHwEnterLowPowerStopMode PROC
;;;200    
;;;201    void TimerHwEnterLowPowerStopMode( void )
000000  4770              BX       lr
;;;202    {
;;;203    //#ifndef USE_DEBUGGER
;;;204    //    __WFI( );
;;;205    //#endif
;;;206    }
                          ENDP


                          AREA ||i.TimerHwGetElapsedTime||, CODE, READONLY, ALIGN=2

                  TimerHwGetElapsedTime PROC
;;;167    
;;;168    uint64_t TimerHwGetElapsedTime( void )
000000  b5f8              PUSH     {r3-r7,lr}
;;;169    {
;;;170         return( ( ( TimerHwGetTimerValue( ) - TimerTickCounterContext ) + 1 )  * HW_TIMER_TIME_BASE );
000002  f7fffffe          BL       TimerHwGetTimerValue
000006  4b08              LDR      r3,|L6.40|
000008  cb0c              LDM      r3,{r2,r3}
00000a  1a80              SUBS     r0,r0,r2
00000c  4199              SBCS     r1,r1,r3
00000e  2200              MOVS     r2,#0
000010  1c44              ADDS     r4,r0,#1
000012  460d              MOV      r5,r1
000014  4155              ADCS     r5,r5,r2
000016  2664              MOVS     r6,#0x64
000018  4617              MOV      r7,r2
00001a  4620              MOV      r0,r4
00001c  4629              MOV      r1,r5
00001e  4632              MOV      r2,r6
000020  463b              MOV      r3,r7
000022  f7fffffe          BL       __aeabi_lmul
;;;171    }
000026  bdf8              POP      {r3-r7,pc}
;;;172    
                          ENDP

                  |L6.40|
                          DCD      TimerTickCounterContext

                          AREA ||i.TimerHwGetMinimumTimeout||, CODE, READONLY, ALIGN=2

                  TimerHwGetMinimumTimeout PROC
;;;114    
;;;115    uint32_t TimerHwGetMinimumTimeout( void )
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
;;;117        return( ceil( 2 * HW_TIMER_TIME_BASE ) );
000002  2000              MOVS     r0,#0
000004  4903              LDR      r1,|L7.20|
000006  f7fffffe          BL       ceil
00000a  4604              MOV      r4,r0
00000c  f7fffffe          BL       __aeabi_d2uiz
;;;118    }
000010  bd70              POP      {r4-r6,pc}
;;;119    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40690000

                          AREA ||i.TimerHwGetTime||, CODE, READONLY, ALIGN=1

                  TimerHwGetTime PROC
;;;172    
;;;173    TimerTime_t TimerHwGetTime( void )
000000  b5f8              PUSH     {r3-r7,lr}
;;;174    {
;;;175    
;;;176        return TimerHwGetTimerValue( ) * HW_TIMER_TIME_BASE;
000002  f7fffffe          BL       TimerHwGetTimerValue
000006  2464              MOVS     r4,#0x64
000008  2500              MOVS     r5,#0
00000a  4606              MOV      r6,r0
00000c  460f              MOV      r7,r1
00000e  4622              MOV      r2,r4
000010  462b              MOV      r3,r5
000012  f7fffffe          BL       __aeabi_lmul
;;;177    }
000016  bdf8              POP      {r3-r7,pc}
;;;178    
                          ENDP


                          AREA ||i.TimerHwGetTimerValue||, CODE, READONLY, ALIGN=2

                  TimerHwGetTimerValue PROC
;;;178    
;;;179    uint64_t TimerHwGetTimerValue( void )
000000  bf00              NOP      
;;;180    {
;;;181        uint64_t val = 0;
;;;182    
;;;183        __disable_irq( );
000002  b672              CPSID    i
;;;184    
;;;185        val = TimerTickCounter;
000004  4803              LDR      r0,|L9.20|
000006  6802              LDR      r2,[r0,#0]  ; TimerTickCounter
000008  6843              LDR      r3,[r0,#4]  ; TimerTickCounter
;;;186    
;;;187        __enable_irq( );
00000a  b662              CPSIE    i
;;;188    
;;;189        return( val );
00000c  4610              MOV      r0,r2
00000e  4619              MOV      r1,r3
;;;190    }
000010  4770              BX       lr
;;;191    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      TimerTickCounter

                          AREA ||i.TimerHwInit||, CODE, READONLY, ALIGN=2

                  TimerHwInit PROC
;;;40     
;;;41     void TimerHwInit( void )
000000  b500              PUSH     {lr}
;;;42     {
000002  b087              SUB      sp,sp,#0x1c
;;;43       TIM_ClockConfigTypeDef sClockSourceConfig;
;;;44       TIM_MasterConfigTypeDef sMasterConfig;
;;;45     
;;;46       htim3.Instance = TIM3;
000004  4816              LDR      r0,|L10.96|
000006  4917              LDR      r1,|L10.100|
000008  6008              STR      r0,[r1,#0]  ; htim3
;;;47       htim3.Init.Prescaler = 0;
00000a  2000              MOVS     r0,#0
00000c  6048              STR      r0,[r1,#4]  ; htim3
;;;48       htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
00000e  2110              MOVS     r1,#0x10
000010  4814              LDR      r0,|L10.100|
000012  6081              STR      r1,[r0,#8]
;;;49       htim3.Init.Period = 3200-1;
000014  4914              LDR      r1,|L10.104|
000016  60c1              STR      r1,[r0,#0xc]
;;;50       htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
000018  2100              MOVS     r1,#0
00001a  6101              STR      r1,[r0,#0x10]
;;;51       HAL_TIM_Base_Init(&htim3);
00001c  f7fffffe          BL       HAL_TIM_Base_Init
;;;52     
;;;53       sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
000020  2001              MOVS     r0,#1
000022  0300              LSLS     r0,r0,#12
000024  9003              STR      r0,[sp,#0xc]
;;;54       HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
000026  a903              ADD      r1,sp,#0xc
000028  480e              LDR      r0,|L10.100|
00002a  f7fffffe          BL       HAL_TIM_ConfigClockSource
;;;55     
;;;56       sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
00002e  2000              MOVS     r0,#0
000030  9001              STR      r0,[sp,#4]
;;;57       sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
000032  9002              STR      r0,[sp,#8]
;;;58       HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
000034  a901              ADD      r1,sp,#4
000036  480b              LDR      r0,|L10.100|
000038  f7fffffe          BL       HAL_TIMEx_MasterConfigSynchronization
;;;59        
;;;60       if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
00003c  4809              LDR      r0,|L10.100|
00003e  f7fffffe          BL       HAL_TIM_Base_Start_IT
000042  2800              CMP      r0,#0
000044  d001              BEQ      |L10.74|
;;;61       {
;;;62     	/* Starting Error */
;;;63     	 Error_Handler( );
000046  f7fffffe          BL       Error_Handler
                  |L10.74|
;;;64       }
;;;65       /* TIM2_IRQn interrupt configuration */
;;;66       HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
00004a  2200              MOVS     r2,#0
00004c  2104              MOVS     r1,#4
00004e  2010              MOVS     r0,#0x10
000050  f7fffffe          BL       HAL_NVIC_SetPriority
;;;67       HAL_NVIC_EnableIRQ(TIM3_IRQn);
000054  2010              MOVS     r0,#0x10
000056  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;68        
;;;69       
;;;70     }
00005a  b007              ADD      sp,sp,#0x1c
00005c  bd00              POP      {pc}
;;;71     
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      0x40000400
                  |L10.100|
                          DCD      htim3
                  |L10.104|
                          DCD      0x00000c7f

                          AREA ||i.TimerHwStart||, CODE, READONLY, ALIGN=2

                  TimerHwStart PROC
;;;119    
;;;120    void TimerHwStart( uint32_t val )
000000  b510              PUSH     {r4,lr}
;;;121    {
000002  4604              MOV      r4,r0
;;;122        
;;;123        TimerTickCounterContext = TimerHwGetTimerValue( );
000004  f7fffffe          BL       TimerHwGetTimerValue
000008  4a0d              LDR      r2,|L11.64|
00000a  c203              STM      r2!,{r0,r1}
;;;124    
;;;125        if( val <= HW_TIMER_TIME_BASE + 1 )
00000c  2c65              CMP      r4,#0x65
00000e  d809              BHI      |L11.36|
;;;126        {
;;;127            TimeoutCntValue = TimerTickCounterContext + 1;
000010  480b              LDR      r0,|L11.64|
000012  6802              LDR      r2,[r0,#0]  ; TimerTickCounterContext
000014  6840              LDR      r0,[r0,#4]  ; TimerTickCounterContext
000016  2100              MOVS     r1,#0
000018  1c52              ADDS     r2,r2,#1
00001a  4148              ADCS     r0,r0,r1
00001c  4909              LDR      r1,|L11.68|
00001e  600a              STR      r2,[r1,#0]  ; TimeoutCntValue
000020  6048              STR      r0,[r1,#4]  ; TimeoutCntValue
000022  e00b              B        |L11.60|
                  |L11.36|
;;;128        }
;;;129        else
;;;130        {
;;;131            TimeoutCntValue = TimerTickCounterContext + ( ( val - 1 ) / HW_TIMER_TIME_BASE );
000024  1e60              SUBS     r0,r4,#1
000026  2164              MOVS     r1,#0x64
000028  f7fffffe          BL       __aeabi_uidivmod
00002c  2100              MOVS     r1,#0
00002e  4b04              LDR      r3,|L11.64|
000030  cb0c              LDM      r3,{r2,r3}
000032  1880              ADDS     r0,r0,r2
000034  4159              ADCS     r1,r1,r3
000036  4a03              LDR      r2,|L11.68|
000038  6010              STR      r0,[r2,#0]  ; TimeoutCntValue
00003a  6051              STR      r1,[r2,#4]  ; TimeoutCntValue
                  |L11.60|
;;;132         
;;;133        }
;;;134    }
00003c  bd10              POP      {r4,pc}
;;;135    
                          ENDP

00003e  0000              DCW      0x0000
                  |L11.64|
                          DCD      TimerTickCounterContext
                  |L11.68|
                          DCD      TimeoutCntValue

                          AREA ||i.TimerHwStop||, CODE, READONLY, ALIGN=1

                  TimerHwStop PROC
;;;135    
;;;136    void TimerHwStop( void )
000000  4770              BX       lr
;;;137    {
;;;138        //TIM_ITConfig( TIM2, TIM_IT_CC1, DISABLE );
;;;139        //TIM_Cmd( TIM2, DISABLE );
;;;140        
;;;141    }
;;;142    
                          ENDP


                          AREA ||i.TimerIncrementTickCounter||, CODE, READONLY, ALIGN=2

                  TimerIncrementTickCounter PROC
;;;191    
;;;192    void TimerIncrementTickCounter( void )
000000  b672              CPSID    i
;;;193    {
;;;194        __disable_irq( );
;;;195    
;;;196        TimerTickCounter++;
000002  4805              LDR      r0,|L13.24|
000004  6803              LDR      r3,[r0,#0]  ; TimerTickCounter
000006  6840              LDR      r0,[r0,#4]  ; TimerTickCounter
000008  2100              MOVS     r1,#0
00000a  1c5a              ADDS     r2,r3,#1
00000c  4148              ADCS     r0,r0,r1
00000e  4902              LDR      r1,|L13.24|
000010  600a              STR      r2,[r1,#0]  ; TimerTickCounter
000012  6048              STR      r0,[r1,#4]  ; TimerTickCounter
;;;197    
;;;198        __enable_irq( );
000014  b662              CPSIE    i
;;;199    }
000016  4770              BX       lr
;;;200    
                          ENDP

                  |L13.24|
                          DCD      TimerTickCounter

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  htim3
                          %        64

                          AREA ||.data||, DATA, ALIGN=3

                  TimerTickCounter
000000  00000001          DCQ      0x0000000000000001
000004  00000000
                  TimerTickCounterContext
000008  00000000          DCQ      0x0000000000000000
00000c  00000000
                  TimeoutCntValue
000010  00000000          DCQ      0x0000000000000000
000014  00000000
                  uwPrescalerValue
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\HAL\\src\\timer-board.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_timer_board_c_ba1ce664____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_timer_board_c_ba1ce664____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_timer_board_c_ba1ce664____REVSH|
#line 402
|__asm___13_timer_board_c_ba1ce664____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
