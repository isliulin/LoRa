; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_uart_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_uart_ex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_uart_ex.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_uart_ex.c]
                          THUMB

                          AREA ||i.HAL_MultiProcessorEx_AddressLength_Set||, CODE, READONLY, ALIGN=1

                  HAL_MultiProcessorEx_AddressLength_Set PROC
;;;518      */
;;;519    HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;521      /* Check the UART handle allocation */
;;;522      if(huart == NULL)
000006  2c00              CMP      r4,#0
000008  d101              BNE      |L1.14|
;;;523      {
;;;524        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L1.12|
;;;525      }
;;;526    
;;;527      /* Check the address length parameter */
;;;528      assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));
;;;529    
;;;530      huart->gState = HAL_UART_STATE_BUSY;
;;;531    
;;;532      /* Disable the Peripheral */
;;;533      __HAL_UART_DISABLE(huart);
;;;534    
;;;535      /* Set the address length */
;;;536      MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
;;;537    
;;;538      /* Enable the Peripheral */
;;;539      __HAL_UART_ENABLE(huart);
;;;540    
;;;541      /* TEACK and/or REACK to check before moving huart->gState to Ready */
;;;542      return (UART_CheckIdleState(huart));
;;;543    }
00000c  bd70              POP      {r4-r6,pc}
                  |L1.14|
00000e  2124              MOVS     r1,#0x24              ;530
000010  2069              MOVS     r0,#0x69              ;530
000012  5501              STRB     r1,[r0,r4]            ;530
000014  6820              LDR      r0,[r4,#0]            ;533
000016  6800              LDR      r0,[r0,#0]            ;533
000018  0840              LSRS     r0,r0,#1              ;533
00001a  0040              LSLS     r0,r0,#1              ;533
00001c  6821              LDR      r1,[r4,#0]            ;533
00001e  6008              STR      r0,[r1,#0]            ;533
000020  6820              LDR      r0,[r4,#0]            ;536
000022  6840              LDR      r0,[r0,#4]            ;536
000024  2110              MOVS     r1,#0x10              ;536
000026  4388              BICS     r0,r0,r1              ;536
000028  4328              ORRS     r0,r0,r5              ;536
00002a  6821              LDR      r1,[r4,#0]            ;536
00002c  6048              STR      r0,[r1,#4]            ;536
00002e  6820              LDR      r0,[r4,#0]            ;539
000030  6800              LDR      r0,[r0,#0]            ;539
000032  2101              MOVS     r1,#1                 ;539
000034  4308              ORRS     r0,r0,r1              ;539
000036  6821              LDR      r1,[r4,#0]            ;539
000038  6008              STR      r0,[r1,#0]            ;539
00003a  4620              MOV      r0,r4                 ;542
00003c  f7fffffe          BL       UART_CheckIdleState
000040  e7e4              B        |L1.12|
;;;544    
                          ENDP


                          AREA ||i.HAL_RS485Ex_Init||, CODE, READONLY, ALIGN=2

                  HAL_RS485Ex_Init PROC
;;;181      */
;;;182    HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime)
000000  b5ff              PUSH     {r0-r7,lr}
;;;183    {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;184      uint32_t temp = 0x0U;
00000a  2700              MOVS     r7,#0
;;;185    
;;;186      /* Check the UART handle allocation */
;;;187      if(huart == NULL)
00000c  2c00              CMP      r4,#0
00000e  d102              BNE      |L2.22|
;;;188      {
;;;189        return HAL_ERROR;
000010  2001              MOVS     r0,#1
                  |L2.18|
;;;190      }
;;;191      /* Check the Driver Enable UART instance */
;;;192      assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
;;;193    
;;;194      /* Check the Driver Enable polarity */
;;;195      assert_param(IS_UART_DE_POLARITY(Polarity));
;;;196    
;;;197      /* Check the Driver Enable assertion time */
;;;198      assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
;;;199    
;;;200      /* Check the Driver Enable deassertion time */
;;;201      assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
;;;202    
;;;203      if(huart->gState == HAL_UART_STATE_RESET)
;;;204      {
;;;205        /* Allocate lock resource and initialize it */
;;;206        huart->Lock = HAL_UNLOCKED;
;;;207    
;;;208        /* Init the low level hardware : GPIO, CLOCK, CORTEX */
;;;209        HAL_UART_MspInit(huart);
;;;210      }
;;;211    
;;;212      huart->gState = HAL_UART_STATE_BUSY;
;;;213    
;;;214      /* Disable the Peripheral */
;;;215      __HAL_UART_DISABLE(huart);
;;;216    
;;;217      /* Set the UART Communication parameters */
;;;218      if (UART_SetConfig(huart) == HAL_ERROR)
;;;219      {
;;;220        return HAL_ERROR;
;;;221      }
;;;222    
;;;223      if(huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
;;;224      {
;;;225        UART_AdvFeatureConfig(huart);
;;;226      }
;;;227    
;;;228      /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
;;;229      SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
;;;230    
;;;231      /* Set the Driver Enable polarity */
;;;232      MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
;;;233    
;;;234      /* Set the Driver Enable assertion and deassertion times */
;;;235      temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
;;;236      temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
;;;237      MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT|USART_CR1_DEAT), temp);
;;;238    
;;;239      /* Enable the Peripheral */
;;;240      __HAL_UART_ENABLE(huart);
;;;241    
;;;242      /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
;;;243      return (UART_CheckIdleState(huart));
;;;244    }
000012  b005              ADD      sp,sp,#0x14
000014  bdf0              POP      {r4-r7,pc}
                  |L2.22|
000016  2069              MOVS     r0,#0x69              ;203
000018  5d00              LDRB     r0,[r0,r4]            ;203
00001a  2800              CMP      r0,#0                 ;203
00001c  d105              BNE      |L2.42|
00001e  2100              MOVS     r1,#0                 ;206
000020  2068              MOVS     r0,#0x68              ;206
000022  5501              STRB     r1,[r0,r4]            ;206
000024  4620              MOV      r0,r4                 ;209
000026  f7fffffe          BL       HAL_UART_MspInit
                  |L2.42|
00002a  2124              MOVS     r1,#0x24              ;212
00002c  2069              MOVS     r0,#0x69              ;212
00002e  5501              STRB     r1,[r0,r4]            ;212
000030  6820              LDR      r0,[r4,#0]            ;215
000032  6800              LDR      r0,[r0,#0]            ;215
000034  0840              LSRS     r0,r0,#1              ;215
000036  0040              LSLS     r0,r0,#1              ;215
000038  6821              LDR      r1,[r4,#0]            ;215
00003a  6008              STR      r0,[r1,#0]            ;215
00003c  4620              MOV      r0,r4                 ;218
00003e  f7fffffe          BL       UART_SetConfig
000042  2801              CMP      r0,#1                 ;218
000044  d100              BNE      |L2.72|
000046  e7e4              B        |L2.18|
                  |L2.72|
000048  6a60              LDR      r0,[r4,#0x24]         ;223
00004a  2800              CMP      r0,#0                 ;223
00004c  d002              BEQ      |L2.84|
00004e  4620              MOV      r0,r4                 ;225
000050  f7fffffe          BL       UART_AdvFeatureConfig
                  |L2.84|
000054  6820              LDR      r0,[r4,#0]            ;229
000056  6880              LDR      r0,[r0,#8]            ;229
000058  2101              MOVS     r1,#1                 ;229
00005a  0389              LSLS     r1,r1,#14             ;229
00005c  4308              ORRS     r0,r0,r1              ;229
00005e  6821              LDR      r1,[r4,#0]            ;229
000060  6088              STR      r0,[r1,#8]            ;229
000062  6820              LDR      r0,[r4,#0]            ;232
000064  6880              LDR      r0,[r0,#8]            ;232
000066  2101              MOVS     r1,#1                 ;232
000068  03c9              LSLS     r1,r1,#15             ;232
00006a  4388              BICS     r0,r0,r1              ;232
00006c  4328              ORRS     r0,r0,r5              ;232
00006e  6821              LDR      r1,[r4,#0]            ;232
000070  6088              STR      r0,[r1,#8]            ;232
000072  0577              LSLS     r7,r6,#21             ;235
000074  9804              LDR      r0,[sp,#0x10]         ;236
000076  0400              LSLS     r0,r0,#16             ;236
000078  4307              ORRS     r7,r7,r0              ;236
00007a  6820              LDR      r0,[r4,#0]            ;237
00007c  6800              LDR      r0,[r0,#0]            ;237
00007e  4907              LDR      r1,|L2.156|
000080  4008              ANDS     r0,r0,r1              ;237
000082  4338              ORRS     r0,r0,r7              ;237
000084  6821              LDR      r1,[r4,#0]            ;237
000086  6008              STR      r0,[r1,#0]            ;237
000088  6820              LDR      r0,[r4,#0]            ;240
00008a  6800              LDR      r0,[r0,#0]            ;240
00008c  2101              MOVS     r1,#1                 ;240
00008e  4308              ORRS     r0,r0,r1              ;240
000090  6821              LDR      r1,[r4,#0]            ;240
000092  6008              STR      r0,[r1,#0]            ;240
000094  4620              MOV      r0,r4                 ;243
000096  f7fffffe          BL       UART_CheckIdleState
00009a  e7ba              B        |L2.18|
;;;245    
                          ENDP

                  |L2.156|
                          DCD      0xfc00ffff

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_uart_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___23_stm32f0xx_hal_uart_ex_c_83a37df4____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___23_stm32f0xx_hal_uart_ex_c_83a37df4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___23_stm32f0xx_hal_uart_ex_c_83a37df4____REVSH|
#line 402
|__asm___23_stm32f0xx_hal_uart_ex_c_83a37df4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
