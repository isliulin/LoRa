; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_flash.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_flash.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;614      */
;;;615    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  2200              MOVS     r2,#0
;;;616    {
;;;617      /* Clean the error context */
;;;618      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4b05              LDR      r3,|L1.24|
000004  61da              STR      r2,[r3,#0x1c]  ; pFlash
;;;619      
;;;620        /* Proceed to program the new data */
;;;621        SET_BIT(FLASH->CR, FLASH_CR_PG);
000006  4a05              LDR      r2,|L1.28|
000008  6912              LDR      r2,[r2,#0x10]
00000a  2301              MOVS     r3,#1
00000c  431a              ORRS     r2,r2,r3
00000e  4b03              LDR      r3,|L1.28|
000010  611a              STR      r2,[r3,#0x10]
;;;622    
;;;623      /* Write data in the address */
;;;624      *(__IO uint16_t*)Address = Data;
000012  8001              STRH     r1,[r0,#0]
;;;625    }
000014  4770              BX       lr
;;;626    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      pFlash
                  |L1.28|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;674      */
;;;675    static void FLASH_SetErrorCode(void)
000000  2000              MOVS     r0,#0
;;;676    {
;;;677      uint32_t flags = 0U;
;;;678      
;;;679      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
000002  490f              LDR      r1,|L2.64|
000004  68c9              LDR      r1,[r1,#0xc]
000006  2210              MOVS     r2,#0x10
000008  4011              ANDS     r1,r1,r2
00000a  2910              CMP      r1,#0x10
00000c  d107              BNE      |L2.30|
;;;680      {
;;;681        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
00000e  490d              LDR      r1,|L2.68|
000010  69c9              LDR      r1,[r1,#0x1c]  ; pFlash
000012  2202              MOVS     r2,#2
000014  4311              ORRS     r1,r1,r2
000016  4a0b              LDR      r2,|L2.68|
000018  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;682        flags |= FLASH_FLAG_WRPERR;
00001a  2110              MOVS     r1,#0x10
00001c  4308              ORRS     r0,r0,r1
                  |L2.30|
;;;683      }
;;;684      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
00001e  4908              LDR      r1,|L2.64|
000020  68c9              LDR      r1,[r1,#0xc]
000022  2204              MOVS     r2,#4
000024  4011              ANDS     r1,r1,r2
000026  2904              CMP      r1,#4
000028  d107              BNE      |L2.58|
;;;685      {
;;;686        pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
00002a  4906              LDR      r1,|L2.68|
00002c  69c9              LDR      r1,[r1,#0x1c]  ; pFlash
00002e  2201              MOVS     r2,#1
000030  4311              ORRS     r1,r1,r2
000032  4a04              LDR      r2,|L2.68|
000034  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;687        flags |= FLASH_FLAG_PGERR;
000036  2104              MOVS     r1,#4
000038  4308              ORRS     r0,r0,r1
                  |L2.58|
;;;688      }
;;;689      /* Clear FLASH error pending bits */
;;;690      __HAL_FLASH_CLEAR_FLAG(flags);
00003a  4901              LDR      r1,|L2.64|
00003c  60c8              STR      r0,[r1,#0xc]
;;;691    }  
00003e  4770              BX       lr
;;;692    /**
                          ENDP

                  |L2.64|
                          DCD      0x40022000
                  |L2.68|
                          DCD      pFlash

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;631      */
;;;632    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;633    {
000002  4604              MOV      r4,r0
;;;634      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;635         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;636         flag will be set */
;;;637         
;;;638      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;639         
;;;640      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
00000a  e00b              B        |L3.36|
                  |L3.12|
;;;641      { 
;;;642        if (Timeout != HAL_MAX_DELAY)
00000c  1c60              ADDS     r0,r4,#1
00000e  2800              CMP      r0,#0
000010  d008              BEQ      |L3.36|
;;;643        {
;;;644          if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
000012  2c00              CMP      r4,#0
000014  d004              BEQ      |L3.32|
000016  f7fffffe          BL       HAL_GetTick
00001a  1b40              SUBS     r0,r0,r5
00001c  42a0              CMP      r0,r4
00001e  d901              BLS      |L3.36|
                  |L3.32|
;;;645          {
;;;646            return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L3.34|
;;;647          }
;;;648        }
;;;649      }
;;;650      
;;;651      /* Check FLASH End of Operation flag  */
;;;652      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;653      {
;;;654        /* Clear FLASH End of Operation pending bit */
;;;655        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;656      }
;;;657      
;;;658      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;659         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;660      {
;;;661        /*Save the error code*/
;;;662        FLASH_SetErrorCode();
;;;663        return HAL_ERROR;
;;;664      }
;;;665    
;;;666      /* There is no error flag set */
;;;667      return HAL_OK;
;;;668    }
000022  bd70              POP      {r4-r6,pc}
                  |L3.36|
000024  480f              LDR      r0,|L3.100|
000026  68c0              LDR      r0,[r0,#0xc]          ;640
000028  07c0              LSLS     r0,r0,#31             ;640
00002a  0fc0              LSRS     r0,r0,#31             ;640
00002c  2800              CMP      r0,#0                 ;640
00002e  d1ed              BNE      |L3.12|
000030  480c              LDR      r0,|L3.100|
000032  68c0              LDR      r0,[r0,#0xc]          ;652
000034  2120              MOVS     r1,#0x20              ;652
000036  4008              ANDS     r0,r0,r1              ;652
000038  2820              CMP      r0,#0x20              ;652
00003a  d101              BNE      |L3.64|
00003c  4909              LDR      r1,|L3.100|
00003e  60c8              STR      r0,[r1,#0xc]          ;655
                  |L3.64|
000040  4808              LDR      r0,|L3.100|
000042  68c0              LDR      r0,[r0,#0xc]          ;658
000044  2110              MOVS     r1,#0x10              ;658
000046  4008              ANDS     r0,r0,r1              ;658
000048  2810              CMP      r0,#0x10              ;658
00004a  d005              BEQ      |L3.88|
00004c  4805              LDR      r0,|L3.100|
00004e  68c0              LDR      r0,[r0,#0xc]          ;659
000050  2104              MOVS     r1,#4                 ;659
000052  4008              ANDS     r0,r0,r1              ;659
000054  2804              CMP      r0,#4                 ;659
000056  d103              BNE      |L3.96|
                  |L3.88|
000058  f7fffffe          BL       FLASH_SetErrorCode
00005c  2001              MOVS     r0,#1                 ;663
00005e  e7e0              B        |L3.34|
                  |L3.96|
000060  2000              MOVS     r0,#0                 ;667
000062  e7de              B        |L3.34|
;;;669    
                          ENDP

                  |L3.100|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;443      */
;;;444    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;445    {
;;;446      /* Prevent unused argument(s) compilation warning */
;;;447      UNUSED(ReturnValue);
;;;448    
;;;449      /* NOTE : This function Should not be modified, when the callback is needed,
;;;450                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;451       */ 
;;;452    }
;;;453    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;591      */
;;;592    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L5.8|
;;;593    {
;;;594       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;595    }
000004  4770              BX       lr
;;;596    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;300      */
;;;301    void HAL_FLASH_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;302    {
;;;303      uint32_t addresstmp = 0U;
000002  2400              MOVS     r4,#0
;;;304      
;;;305      /* Check FLASH operation error flags */
;;;306      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000004  485f              LDR      r0,|L6.388|
000006  68c0              LDR      r0,[r0,#0xc]
000008  2110              MOVS     r1,#0x10
00000a  4008              ANDS     r0,r0,r1
00000c  2810              CMP      r0,#0x10
00000e  d005              BEQ      |L6.28|
000010  485c              LDR      r0,|L6.388|
000012  68c0              LDR      r0,[r0,#0xc]
000014  2104              MOVS     r1,#4
000016  4008              ANDS     r0,r0,r1
000018  2804              CMP      r0,#4
00001a  d10d              BNE      |L6.56|
                  |L6.28|
;;;307      {
;;;308        /* Return the faulty address */
;;;309        addresstmp = pFlash.Address;
00001c  485a              LDR      r0,|L6.392|
00001e  6884              LDR      r4,[r0,#8]  ; pFlash
;;;310        /* Reset address */
;;;311        pFlash.Address = 0xFFFFFFFFU;
000020  2000              MOVS     r0,#0
000022  43c0              MVNS     r0,r0
000024  4958              LDR      r1,|L6.392|
000026  6088              STR      r0,[r1,#8]  ; pFlash
;;;312      
;;;313        /* Save the Error code */
;;;314        FLASH_SetErrorCode();
000028  f7fffffe          BL       FLASH_SetErrorCode
;;;315        
;;;316        /* FLASH error interrupt user callback */
;;;317        HAL_FLASH_OperationErrorCallback(addresstmp);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;318    
;;;319        /* Stop the procedure ongoing */
;;;320        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000032  2000              MOVS     r0,#0
000034  4954              LDR      r1,|L6.392|
000036  7008              STRB     r0,[r1,#0]
                  |L6.56|
;;;321      }
;;;322    
;;;323      /* Check FLASH End of Operation flag  */
;;;324      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
000038  4852              LDR      r0,|L6.388|
00003a  68c0              LDR      r0,[r0,#0xc]
00003c  2120              MOVS     r1,#0x20
00003e  4008              ANDS     r0,r0,r1
000040  2820              CMP      r0,#0x20
000042  d127              BNE      |L6.148|
;;;325      {
;;;326        /* Clear FLASH End of Operation pending bit */
;;;327        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000044  494f              LDR      r1,|L6.388|
000046  60c8              STR      r0,[r1,#0xc]
;;;328        
;;;329        /* Process can continue only if no error detected */
;;;330        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
000048  484f              LDR      r0,|L6.392|
00004a  7800              LDRB     r0,[r0,#0]  ; pFlash
00004c  2800              CMP      r0,#0
00004e  d021              BEQ      |L6.148|
;;;331        {
;;;332          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
000050  484d              LDR      r0,|L6.392|
000052  7800              LDRB     r0,[r0,#0]  ; pFlash
000054  2801              CMP      r0,#1
000056  d129              BNE      |L6.172|
;;;333          {
;;;334            /* Nb of pages to erased can be decreased */
;;;335            pFlash.DataRemaining--;
000058  484b              LDR      r0,|L6.392|
00005a  6840              LDR      r0,[r0,#4]  ; pFlash
00005c  1e40              SUBS     r0,r0,#1
00005e  494a              LDR      r1,|L6.392|
000060  6048              STR      r0,[r1,#4]  ; pFlash
;;;336    
;;;337            /* Check if there are still pages to erase */
;;;338            if(pFlash.DataRemaining != 0U)
000062  4608              MOV      r0,r1
000064  6840              LDR      r0,[r0,#4]  ; pFlash
000066  2800              CMP      r0,#0
000068  d015              BEQ      |L6.150|
;;;339            {
;;;340              addresstmp = pFlash.Address;
00006a  4608              MOV      r0,r1
00006c  6884              LDR      r4,[r0,#8]  ; pFlash
;;;341              /*Indicate user which sector has been erased */
;;;342              HAL_FLASH_EndOfOperationCallback(addresstmp);
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;343    
;;;344              /*Increment sector number*/
;;;345              addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
000074  4844              LDR      r0,|L6.392|
000076  6880              LDR      r0,[r0,#8]  ; pFlash
000078  2101              MOVS     r1,#1
00007a  02c9              LSLS     r1,r1,#11
00007c  1844              ADDS     r4,r0,r1
;;;346              pFlash.Address = addresstmp;
00007e  4842              LDR      r0,|L6.392|
000080  6084              STR      r4,[r0,#8]  ; pFlash
;;;347    
;;;348              /* If the erase operation is completed, disable the PER Bit */
;;;349              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
000082  4840              LDR      r0,|L6.388|
000084  6900              LDR      r0,[r0,#0x10]
000086  2102              MOVS     r1,#2
000088  4388              BICS     r0,r0,r1
00008a  493e              LDR      r1,|L6.388|
00008c  6108              STR      r0,[r1,#0x10]
;;;350    
;;;351              FLASH_PageErase(addresstmp);
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       FLASH_PageErase
                  |L6.148|
000094  e05e              B        |L6.340|
                  |L6.150|
;;;352            }
;;;353            else
;;;354            {
;;;355              /* No more pages to Erase, user callback can be called. */
;;;356              /* Reset Sector and stop Erase pages procedure */
;;;357              pFlash.Address = addresstmp = 0xFFFFFFFFU;
000096  2000              MOVS     r0,#0
000098  43c0              MVNS     r0,r0
00009a  4604              MOV      r4,r0
00009c  493a              LDR      r1,|L6.392|
00009e  6088              STR      r0,[r1,#8]  ; pFlash
;;;358              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000a0  2000              MOVS     r0,#0
0000a2  7008              STRB     r0,[r1,#0]
;;;359              /* FLASH EOP interrupt user callback */
;;;360              HAL_FLASH_EndOfOperationCallback(addresstmp);
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000aa  e053              B        |L6.340|
                  |L6.172|
;;;361            }
;;;362          }
;;;363          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
0000ac  4836              LDR      r0,|L6.392|
0000ae  7800              LDRB     r0,[r0,#0]  ; pFlash
0000b0  2802              CMP      r0,#2
0000b2  d10c              BNE      |L6.206|
;;;364          {
;;;365            /* Operation is completed, disable the MER Bit */
;;;366            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
0000b4  4833              LDR      r0,|L6.388|
0000b6  6900              LDR      r0,[r0,#0x10]
0000b8  2104              MOVS     r1,#4
0000ba  4388              BICS     r0,r0,r1
0000bc  4931              LDR      r1,|L6.388|
0000be  6108              STR      r0,[r1,#0x10]
;;;367    
;;;368              /* MassErase ended. Return the selected bank */
;;;369              /* FLASH EOP interrupt user callback */
;;;370              HAL_FLASH_EndOfOperationCallback(0);
0000c0  2000              MOVS     r0,#0
0000c2  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;371    
;;;372              /* Stop Mass Erase procedure*/
;;;373              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000c6  2000              MOVS     r0,#0
0000c8  492f              LDR      r1,|L6.392|
0000ca  7008              STRB     r0,[r1,#0]
0000cc  e042              B        |L6.340|
                  |L6.206|
;;;374            }
;;;375          else
;;;376          {
;;;377            /* Nb of 16-bit data to program can be decreased */
;;;378            pFlash.DataRemaining--;
0000ce  482e              LDR      r0,|L6.392|
0000d0  6840              LDR      r0,[r0,#4]  ; pFlash
0000d2  1e40              SUBS     r0,r0,#1
0000d4  492c              LDR      r1,|L6.392|
0000d6  6048              STR      r0,[r1,#4]  ; pFlash
;;;379            
;;;380            /* Check if there are still 16-bit data to program */
;;;381            if(pFlash.DataRemaining != 0U)
0000d8  4608              MOV      r0,r1
0000da  6840              LDR      r0,[r0,#4]  ; pFlash
0000dc  2800              CMP      r0,#0
0000de  d01b              BEQ      |L6.280|
;;;382            {
;;;383              /* Increment address to 16-bit */
;;;384              pFlash.Address += 2;
0000e0  4608              MOV      r0,r1
0000e2  6880              LDR      r0,[r0,#8]  ; pFlash
0000e4  1c80              ADDS     r0,r0,#2
0000e6  6088              STR      r0,[r1,#8]  ; pFlash
;;;385              addresstmp = pFlash.Address;
0000e8  4608              MOV      r0,r1
0000ea  6884              LDR      r4,[r0,#8]  ; pFlash
;;;386              
;;;387              /* Shift to have next 16-bit data */
;;;388              pFlash.Data = (pFlash.Data >> 16U);
0000ec  6908              LDR      r0,[r1,#0x10]  ; pFlash
0000ee  6949              LDR      r1,[r1,#0x14]  ; pFlash
0000f0  040a              LSLS     r2,r1,#16
0000f2  0c00              LSRS     r0,r0,#16
0000f4  4310              ORRS     r0,r0,r2
0000f6  0c09              LSRS     r1,r1,#16
0000f8  4a23              LDR      r2,|L6.392|
0000fa  6110              STR      r0,[r2,#0x10]  ; pFlash
0000fc  6151              STR      r1,[r2,#0x14]  ; pFlash
;;;389              
;;;390              /* Operation is completed, disable the PG Bit */
;;;391              CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
0000fe  4821              LDR      r0,|L6.388|
000100  6900              LDR      r0,[r0,#0x10]
000102  0840              LSRS     r0,r0,#1
000104  0040              LSLS     r0,r0,#1
000106  491f              LDR      r1,|L6.388|
000108  6108              STR      r0,[r1,#0x10]
;;;392    
;;;393              /*Program halfword (16-bit) at a specified address.*/
;;;394              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
00010a  6910              LDR      r0,[r2,#0x10]  ; pFlash
00010c  6952              LDR      r2,[r2,#0x14]  ; pFlash
00010e  b281              UXTH     r1,r0
000110  4620              MOV      r0,r4
000112  f7fffffe          BL       FLASH_Program_HalfWord
000116  e01d              B        |L6.340|
                  |L6.280|
;;;395            }
;;;396            else
;;;397            {
;;;398              /* Program ended. Return the selected address */
;;;399              /* FLASH EOP interrupt user callback */
;;;400              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
000118  481b              LDR      r0,|L6.392|
00011a  7800              LDRB     r0,[r0,#0]  ; pFlash
00011c  2803              CMP      r0,#3
00011e  d104              BNE      |L6.298|
;;;401              {
;;;402                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
000120  4919              LDR      r1,|L6.392|
000122  6888              LDR      r0,[r1,#8]  ; pFlash
000124  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
000128  e00e              B        |L6.328|
                  |L6.298|
;;;403              }
;;;404              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
00012a  4817              LDR      r0,|L6.392|
00012c  7800              LDRB     r0,[r0,#0]  ; pFlash
00012e  2804              CMP      r0,#4
000130  d105              BNE      |L6.318|
;;;405              {
;;;406                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
000132  4915              LDR      r1,|L6.392|
000134  6889              LDR      r1,[r1,#8]  ; pFlash
000136  1e88              SUBS     r0,r1,#2
000138  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
00013c  e004              B        |L6.328|
                  |L6.318|
;;;407              }
;;;408              else 
;;;409              {
;;;410                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
00013e  4912              LDR      r1,|L6.392|
000140  6889              LDR      r1,[r1,#8]  ; pFlash
000142  1f88              SUBS     r0,r1,#6
000144  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L6.328|
;;;411              }
;;;412            
;;;413              /* Reset Address and stop Program procedure */
;;;414              pFlash.Address = 0xFFFFFFFFU;
000148  2000              MOVS     r0,#0
00014a  43c0              MVNS     r0,r0
00014c  490e              LDR      r1,|L6.392|
00014e  6088              STR      r0,[r1,#8]  ; pFlash
;;;415              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000150  2000              MOVS     r0,#0
000152  7008              STRB     r0,[r1,#0]
                  |L6.340|
;;;416            }
;;;417          }
;;;418        }
;;;419      }
;;;420      
;;;421    
;;;422      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
000154  480c              LDR      r0,|L6.392|
000156  7800              LDRB     r0,[r0,#0]  ; pFlash
000158  2800              CMP      r0,#0
00015a  d111              BNE      |L6.384|
;;;423      {
;;;424        /* Operation is completed, disable the PG, PER and MER Bits */
;;;425        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
00015c  4809              LDR      r0,|L6.388|
00015e  6900              LDR      r0,[r0,#0x10]
000160  08c0              LSRS     r0,r0,#3
000162  00c0              LSLS     r0,r0,#3
000164  4907              LDR      r1,|L6.388|
000166  6108              STR      r0,[r1,#0x10]
;;;426    
;;;427        /* Disable End of FLASH Operation and Error source interrupts */
;;;428        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
000168  4608              MOV      r0,r1
00016a  6900              LDR      r0,[r0,#0x10]
00016c  2105              MOVS     r1,#5
00016e  0289              LSLS     r1,r1,#10
000170  4388              BICS     r0,r0,r1
000172  4904              LDR      r1,|L6.388|
000174  6108              STR      r0,[r1,#0x10]
;;;429    
;;;430        /* Process Unlocked */
;;;431        __HAL_UNLOCK(&pFlash);
000176  bf00              NOP      
000178  2000              MOVS     r0,#0
00017a  4903              LDR      r1,|L6.392|
00017c  7608              STRB     r0,[r1,#0x18]
00017e  bf00              NOP      
                  |L6.384|
;;;432      }
;;;433    }
000180  bd10              POP      {r4,pc}
;;;434    
                          ENDP

000182  0000              DCW      0x0000
                  |L6.388|
                          DCD      0x40022000
                  |L6.392|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;514      */
;;;515    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L7.16|
;;;516    {
;;;517      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;518      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6900              LDR      r0,[r0,#0x10]
000004  2180              MOVS     r1,#0x80
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L7.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;519      
;;;520      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;521    }
00000e  4770              BX       lr
;;;522    
                          ENDP

                  |L7.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Launch PROC
;;;559      */
;;;560    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;561    {
;;;562      /* Set the OBL_Launch bit to launch the option byte loading */
;;;563      SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
000002  4805              LDR      r0,|L8.24|
000004  6900              LDR      r0,[r0,#0x10]
000006  2101              MOVS     r1,#1
000008  0349              LSLS     r1,r1,#13
00000a  4308              ORRS     r0,r0,r1
00000c  4902              LDR      r1,|L8.24|
00000e  6108              STR      r0,[r1,#0x10]
;;;564      
;;;565      /* Wait for last operation to be completed */
;;;566      return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
000010  4802              LDR      r0,|L8.28|
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;567    }
000016  bd10              POP      {r4,pc}
;;;568    
                          ENDP

                  |L8.24|
                          DCD      0x40022000
                  |L8.28|
                          DCD      0x0000c350

                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;546      */
;;;547    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4804              LDR      r0,|L9.20|
;;;548    {
;;;549      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;550      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
000002  6900              LDR      r0,[r0,#0x10]
000004  2101              MOVS     r1,#1
000006  0249              LSLS     r1,r1,#9
000008  4388              BICS     r0,r0,r1
00000a  4902              LDR      r1,|L9.20|
00000c  6108              STR      r0,[r1,#0x10]
;;;551      
;;;552      return HAL_OK;  
00000e  2000              MOVS     r0,#0
;;;553    }
000010  4770              BX       lr
;;;554      
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;526      */
;;;527    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4808              LDR      r0,|L10.36|
;;;528    {
;;;529      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
000002  6900              LDR      r0,[r0,#0x10]
000004  2101              MOVS     r1,#1
000006  0249              LSLS     r1,r1,#9
000008  4008              ANDS     r0,r0,r1
00000a  2800              CMP      r0,#0
00000c  d105              BNE      |L10.26|
;;;530      {
;;;531        /* Authorizes the Option Byte register programming */
;;;532        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
00000e  4806              LDR      r0,|L10.40|
000010  4904              LDR      r1,|L10.36|
000012  6088              STR      r0,[r1,#8]
;;;533        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
000014  4805              LDR      r0,|L10.44|
000016  6088              STR      r0,[r1,#8]
000018  e001              B        |L10.30|
                  |L10.26|
;;;534      }
;;;535      else
;;;536      {
;;;537        return HAL_ERROR;
00001a  2001              MOVS     r0,#1
                  |L10.28|
;;;538      }  
;;;539      
;;;540      return HAL_OK;  
;;;541    }
00001c  4770              BX       lr
                  |L10.30|
00001e  2000              MOVS     r0,#0                 ;540
000020  e7fc              B        |L10.28|
;;;542    
                          ENDP

000022  0000              DCW      0x0000
                  |L10.36|
                          DCD      0x40022000
                  |L10.40|
                          DCD      0x45670123
                  |L10.44|
                          DCD      0xcdef89ab

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;461      */
;;;462    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;463    {
;;;464      /* Prevent unused argument(s) compilation warning */
;;;465      UNUSED(ReturnValue);
;;;466    
;;;467      /* NOTE : This function Should not be modified, when the callback is needed,
;;;468                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;469       */ 
;;;470    }
;;;471    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;182      */
;;;183    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;184    {
000002  b41f              PUSH     {r0-r4}
000004  b086              SUB      sp,sp,#0x18
000006  4607              MOV      r7,r0
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;185      HAL_StatusTypeDef status = HAL_ERROR;
00000c  2001              MOVS     r0,#1
00000e  9003              STR      r0,[sp,#0xc]
;;;186      uint8_t index = 0U;
000010  2400              MOVS     r4,#0
;;;187      uint8_t nbiterations = 0U;
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;188      
;;;189      /* Process Locked */
;;;190      __HAL_LOCK(&pFlash);
000016  bf00              NOP      
000018  4825              LDR      r0,|L12.176|
00001a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00001c  2801              CMP      r0,#1
00001e  d102              BNE      |L12.38|
000020  2002              MOVS     r0,#2
                  |L12.34|
;;;191    
;;;192      /* Check the parameters */
;;;193      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;194      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;195    
;;;196        /* Wait for last operation to be completed */
;;;197        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;198      
;;;199      if(status == HAL_OK)
;;;200      {
;;;201        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;202        {
;;;203          /* Program halfword (16-bit) at a specified address. */
;;;204          nbiterations = 1U;
;;;205        }
;;;206        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;207        {
;;;208          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;209          nbiterations = 2U;
;;;210        }
;;;211        else
;;;212        {
;;;213          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;214          nbiterations = 4U;
;;;215        }
;;;216    
;;;217        for (index = 0U; index < nbiterations; index++)
;;;218        {
;;;219          FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
;;;220    
;;;221            /* Wait for last operation to be completed */
;;;222            status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;223        
;;;224            /* If the program operation is completed, disable the PG Bit */
;;;225            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;226          /* In case of error, stop programation procedure */
;;;227          if (status != HAL_OK)
;;;228          {
;;;229            break;
;;;230          }
;;;231        }
;;;232      }
;;;233    
;;;234      /* Process Unlocked */
;;;235      __HAL_UNLOCK(&pFlash);
;;;236    
;;;237      return status;
;;;238    }
000022  b00b              ADD      sp,sp,#0x2c
000024  bdf0              POP      {r4-r7,pc}
                  |L12.38|
000026  2001              MOVS     r0,#1                 ;190
000028  4921              LDR      r1,|L12.176|
00002a  7608              STRB     r0,[r1,#0x18]         ;190
00002c  bf00              NOP                            ;190
00002e  4821              LDR      r0,|L12.180|
000030  f7fffffe          BL       FLASH_WaitForLastOperation
000034  9003              STR      r0,[sp,#0xc]          ;197
000036  9803              LDR      r0,[sp,#0xc]          ;199
000038  2800              CMP      r0,#0                 ;199
00003a  d131              BNE      |L12.160|
00003c  2f01              CMP      r7,#1                 ;201
00003e  d102              BNE      |L12.70|
000040  2001              MOVS     r0,#1                 ;204
000042  9002              STR      r0,[sp,#8]            ;204
000044  e006              B        |L12.84|
                  |L12.70|
000046  2f02              CMP      r7,#2                 ;206
000048  d102              BNE      |L12.80|
00004a  2002              MOVS     r0,#2                 ;209
00004c  9002              STR      r0,[sp,#8]            ;209
00004e  e001              B        |L12.84|
                  |L12.80|
000050  2004              MOVS     r0,#4                 ;214
000052  9002              STR      r0,[sp,#8]            ;214
                  |L12.84|
000054  2400              MOVS     r4,#0                 ;217
000056  e01f              B        |L12.152|
                  |L12.88|
000058  0122              LSLS     r2,r4,#4              ;219
00005a  4628              MOV      r0,r5                 ;219
00005c  4631              MOV      r1,r6                 ;219
00005e  9604              STR      r6,[sp,#0x10]         ;219
000060  9505              STR      r5,[sp,#0x14]         ;219
000062  f7fffffe          BL       __aeabi_llsr
000066  b280              UXTH     r0,r0                 ;219
000068  0061              LSLS     r1,r4,#1              ;219
00006a  9001              STR      r0,[sp,#4]            ;219
00006c  9807              LDR      r0,[sp,#0x1c]         ;219
00006e  1808              ADDS     r0,r1,r0              ;219
000070  9000              STR      r0,[sp,#0]            ;219
000072  9901              LDR      r1,[sp,#4]            ;219
000074  f7fffffe          BL       FLASH_Program_HalfWord
000078  480e              LDR      r0,|L12.180|
00007a  f7fffffe          BL       FLASH_WaitForLastOperation
00007e  9003              STR      r0,[sp,#0xc]          ;222
000080  480d              LDR      r0,|L12.184|
000082  6900              LDR      r0,[r0,#0x10]         ;225
000084  0840              LSRS     r0,r0,#1              ;225
000086  0040              LSLS     r0,r0,#1              ;225
000088  490b              LDR      r1,|L12.184|
00008a  6108              STR      r0,[r1,#0x10]         ;225
00008c  9803              LDR      r0,[sp,#0xc]          ;227
00008e  2800              CMP      r0,#0                 ;227
000090  d000              BEQ      |L12.148|
000092  e004              B        |L12.158|
                  |L12.148|
000094  1c60              ADDS     r0,r4,#1              ;217
000096  b2c4              UXTB     r4,r0                 ;217
                  |L12.152|
000098  9802              LDR      r0,[sp,#8]            ;217
00009a  4284              CMP      r4,r0                 ;217
00009c  dbdc              BLT      |L12.88|
                  |L12.158|
00009e  bf00              NOP                            ;229
                  |L12.160|
0000a0  bf00              NOP                            ;235
0000a2  2000              MOVS     r0,#0                 ;235
0000a4  4902              LDR      r1,|L12.176|
0000a6  7608              STRB     r0,[r1,#0x18]         ;235
0000a8  bf00              NOP                            ;235
0000aa  9803              LDR      r0,[sp,#0xc]          ;237
0000ac  e7b9              B        |L12.34|
;;;239    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L12.176|
                          DCD      pFlash
                  |L12.180|
                          DCD      0x0000c350
                  |L12.184|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;254      */
;;;255    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  b5f8              PUSH     {r3-r7,lr}
;;;256    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;257      HAL_StatusTypeDef status = HAL_OK;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;258      
;;;259      /* Process Locked */
;;;260      __HAL_LOCK(&pFlash);
00000e  bf00              NOP      
000010  4817              LDR      r0,|L13.112|
000012  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000014  2801              CMP      r0,#1
000016  d101              BNE      |L13.28|
000018  2002              MOVS     r0,#2
                  |L13.26|
;;;261    
;;;262      /* Check the parameters */
;;;263      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;264      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;265    
;;;266      /* Enable End of FLASH Operation and Error source interrupts */
;;;267      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;268      
;;;269      pFlash.Address = Address;
;;;270      pFlash.Data = Data;
;;;271    
;;;272      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;273      {
;;;274        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;275        /* Program halfword (16-bit) at a specified address. */
;;;276        pFlash.DataRemaining = 1U;
;;;277      }
;;;278      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;279      {
;;;280        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
;;;281        /* Program word (32-bit : 2*16-bit) at a specified address. */
;;;282        pFlash.DataRemaining = 2U;
;;;283      }
;;;284      else
;;;285      {
;;;286        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
;;;287        /* Program double word (64-bit : 4*16-bit) at a specified address. */
;;;288        pFlash.DataRemaining = 4U;
;;;289      }
;;;290    
;;;291      /* Program halfword (16-bit) at a specified address. */
;;;292      FLASH_Program_HalfWord(Address, (uint16_t)Data);
;;;293    
;;;294      return status;
;;;295    }
00001a  bdf8              POP      {r3-r7,pc}
                  |L13.28|
00001c  2001              MOVS     r0,#1                 ;260
00001e  4914              LDR      r1,|L13.112|
000020  7608              STRB     r0,[r1,#0x18]         ;260
000022  bf00              NOP                            ;260
000024  4813              LDR      r0,|L13.116|
000026  6900              LDR      r0,[r0,#0x10]         ;267
000028  2105              MOVS     r1,#5                 ;267
00002a  0289              LSLS     r1,r1,#10             ;267
00002c  4308              ORRS     r0,r0,r1              ;267
00002e  4911              LDR      r1,|L13.116|
000030  6108              STR      r0,[r1,#0x10]         ;267
000032  480f              LDR      r0,|L13.112|
000034  6087              STR      r7,[r0,#8]            ;269  ; pFlash
000036  6104              STR      r4,[r0,#0x10]         ;270  ; pFlash
000038  6145              STR      r5,[r0,#0x14]         ;270  ; pFlash
00003a  2e01              CMP      r6,#1                 ;272
00003c  d105              BNE      |L13.74|
00003e  2003              MOVS     r0,#3                 ;274
000040  490b              LDR      r1,|L13.112|
000042  7008              STRB     r0,[r1,#0]            ;274
000044  2001              MOVS     r0,#1                 ;276
000046  6048              STR      r0,[r1,#4]            ;276  ; pFlash
000048  e00c              B        |L13.100|
                  |L13.74|
00004a  2e02              CMP      r6,#2                 ;278
00004c  d105              BNE      |L13.90|
00004e  2004              MOVS     r0,#4                 ;280
000050  4907              LDR      r1,|L13.112|
000052  7008              STRB     r0,[r1,#0]            ;280
000054  2002              MOVS     r0,#2                 ;282
000056  6048              STR      r0,[r1,#4]            ;282  ; pFlash
000058  e004              B        |L13.100|
                  |L13.90|
00005a  2005              MOVS     r0,#5                 ;286
00005c  4904              LDR      r1,|L13.112|
00005e  7008              STRB     r0,[r1,#0]            ;286
000060  2004              MOVS     r0,#4                 ;288
000062  6048              STR      r0,[r1,#4]            ;288  ; pFlash
                  |L13.100|
000064  b2a1              UXTH     r1,r4                 ;292
000066  4638              MOV      r0,r7                 ;292
000068  f7fffffe          BL       FLASH_Program_HalfWord
00006c  9800              LDR      r0,[sp,#0]            ;294
00006e  e7d4              B        |L13.26|
;;;296    
                          ENDP

                  |L13.112|
                          DCD      pFlash
                  |L13.116|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;494      */
;;;495    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  4807              LDR      r0,|L14.32|
;;;496    {
;;;497      if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
000002  6900              LDR      r0,[r0,#0x10]
000004  2180              MOVS     r1,#0x80
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d005              BEQ      |L14.24|
;;;498      {
;;;499        /* Authorize the FLASH Registers access */
;;;500        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000c  4805              LDR      r0,|L14.36|
00000e  4904              LDR      r1,|L14.32|
000010  6048              STR      r0,[r1,#4]
;;;501        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
000012  4805              LDR      r0,|L14.40|
000014  6048              STR      r0,[r1,#4]
000016  e001              B        |L14.28|
                  |L14.24|
;;;502      }
;;;503      else
;;;504      {
;;;505        return HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L14.26|
;;;506      }
;;;507    
;;;508      return HAL_OK; 
;;;509    }
00001a  4770              BX       lr
                  |L14.28|
00001c  2000              MOVS     r0,#0                 ;508
00001e  e7fc              B        |L14.26|
;;;510    
                          ENDP

                  |L14.32|
                          DCD      0x40022000
                  |L14.36|
                          DCD      0x45670123
                  |L14.40|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f0xx_hal_flash_c_48aa8f3e____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___21_stm32f0xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f0xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f0xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
