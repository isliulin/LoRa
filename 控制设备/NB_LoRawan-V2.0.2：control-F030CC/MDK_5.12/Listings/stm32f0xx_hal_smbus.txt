; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_smbus.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_smbus.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_smbus.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_smbus.c]
                          THUMB

                          AREA ||i.HAL_SMBUS_AddrCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_AddrCallback PROC
;;;1361     */
;;;1362   __weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection, uint16_t AddrMatchCode)
000000  4770              BX       lr
;;;1363   {
;;;1364     /* Prevent unused argument(s) compilation warning */
;;;1365     UNUSED(hsmbus);
;;;1366     UNUSED(TransferDirection);
;;;1367     UNUSED(AddrMatchCode);
;;;1368   
;;;1369     /* NOTE : This function should not be modified, when the callback is needed,
;;;1370               the HAL_SMBUS_AddrCallback() could be implemented in the user file
;;;1371      */
;;;1372   }
;;;1373   
                          ENDP


                          AREA ||i.HAL_SMBUS_ConfigAnalogFilter||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_ConfigAnalogFilter PROC
;;;401      */
;;;402    HAL_StatusTypeDef HAL_SMBUS_ConfigAnalogFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t AnalogFilter)
000000  4602              MOV      r2,r0
;;;403    {
;;;404      /* Check the parameters */
;;;405      assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
;;;406      assert_param(IS_SMBUS_ANALOG_FILTER(AnalogFilter));
;;;407    
;;;408      if(hsmbus->State == HAL_SMBUS_STATE_READY)
000002  6c90              LDR      r0,[r2,#0x48]
000004  2801              CMP      r0,#1
000006  d12c              BNE      |L2.98|
;;;409      {
;;;410        /* Process Locked */
;;;411        __HAL_LOCK(hsmbus);
000008  bf00              NOP      
00000a  2044              MOVS     r0,#0x44
00000c  5c80              LDRB     r0,[r0,r2]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L2.22|
000012  2002              MOVS     r0,#2
                  |L2.20|
;;;412    
;;;413        hsmbus->State = HAL_SMBUS_STATE_BUSY;
;;;414    
;;;415        /* Disable the selected SMBUS peripheral */
;;;416        __HAL_SMBUS_DISABLE(hsmbus);
;;;417    
;;;418        /* Reset ANOFF bit */
;;;419        hsmbus->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
;;;420    
;;;421        /* Set analog filter bit*/
;;;422        hsmbus->Instance->CR1 |= AnalogFilter;
;;;423    
;;;424        __HAL_SMBUS_ENABLE(hsmbus);
;;;425    
;;;426        hsmbus->State = HAL_SMBUS_STATE_READY;
;;;427    
;;;428        /* Process Unlocked */
;;;429        __HAL_UNLOCK(hsmbus);
;;;430    
;;;431        return HAL_OK;
;;;432      }
;;;433      else
;;;434      {
;;;435        return HAL_BUSY;
;;;436      }
;;;437    }
000014  4770              BX       lr
                  |L2.22|
000016  2301              MOVS     r3,#1                 ;411
000018  2044              MOVS     r0,#0x44              ;411
00001a  5483              STRB     r3,[r0,r2]            ;411
00001c  bf00              NOP                            ;411
00001e  2002              MOVS     r0,#2                 ;413
000020  6490              STR      r0,[r2,#0x48]         ;413
000022  6810              LDR      r0,[r2,#0]            ;416
000024  6800              LDR      r0,[r0,#0]            ;416
000026  4398              BICS     r0,r0,r3              ;416
000028  6813              LDR      r3,[r2,#0]            ;416
00002a  6018              STR      r0,[r3,#0]            ;416
00002c  6810              LDR      r0,[r2,#0]            ;419
00002e  6800              LDR      r0,[r0,#0]            ;419
000030  2301              MOVS     r3,#1                 ;419
000032  031b              LSLS     r3,r3,#12             ;419
000034  4398              BICS     r0,r0,r3              ;419
000036  6813              LDR      r3,[r2,#0]            ;419
000038  6018              STR      r0,[r3,#0]            ;419
00003a  6810              LDR      r0,[r2,#0]            ;422
00003c  6800              LDR      r0,[r0,#0]            ;422
00003e  4308              ORRS     r0,r0,r1              ;422
000040  6813              LDR      r3,[r2,#0]            ;422
000042  6018              STR      r0,[r3,#0]            ;422
000044  6810              LDR      r0,[r2,#0]            ;424
000046  6800              LDR      r0,[r0,#0]            ;424
000048  2301              MOVS     r3,#1                 ;424
00004a  4318              ORRS     r0,r0,r3              ;424
00004c  6813              LDR      r3,[r2,#0]            ;424
00004e  6018              STR      r0,[r3,#0]            ;424
000050  2001              MOVS     r0,#1                 ;426
000052  6490              STR      r0,[r2,#0x48]         ;426
000054  bf00              NOP                            ;429
000056  2300              MOVS     r3,#0                 ;429
000058  2044              MOVS     r0,#0x44              ;429
00005a  5483              STRB     r3,[r0,r2]            ;429
00005c  bf00              NOP                            ;429
00005e  2000              MOVS     r0,#0                 ;431
000060  e7d8              B        |L2.20|
                  |L2.98|
000062  2002              MOVS     r0,#2                 ;435
000064  e7d6              B        |L2.20|
;;;438    
                          ENDP


                          AREA ||i.HAL_SMBUS_ConfigDigitalFilter||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_ConfigDigitalFilter PROC
;;;445      */
;;;446    HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
000000  b510              PUSH     {r4,lr}
;;;447    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;448      uint32_t tmpreg = 0U;
000006  2100              MOVS     r1,#0
;;;449    
;;;450      /* Check the parameters */
;;;451      assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
;;;452      assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));
;;;453    
;;;454      if(hsmbus->State == HAL_SMBUS_STATE_READY)
000008  6c90              LDR      r0,[r2,#0x48]
00000a  2801              CMP      r0,#1
00000c  d12b              BNE      |L3.102|
;;;455      {
;;;456        /* Process Locked */
;;;457        __HAL_LOCK(hsmbus);
00000e  bf00              NOP      
000010  2044              MOVS     r0,#0x44
000012  5c80              LDRB     r0,[r0,r2]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L3.28|
000018  2002              MOVS     r0,#2
                  |L3.26|
;;;458    
;;;459        hsmbus->State = HAL_SMBUS_STATE_BUSY;
;;;460    
;;;461        /* Disable the selected SMBUS peripheral */
;;;462        __HAL_SMBUS_DISABLE(hsmbus);
;;;463    
;;;464        /* Get the old register value */
;;;465        tmpreg = hsmbus->Instance->CR1;
;;;466    
;;;467        /* Reset I2C DNF bits [11:8] */
;;;468        tmpreg &= ~(I2C_CR1_DNF);
;;;469    
;;;470        /* Set I2Cx DNF coefficient */
;;;471        tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
;;;472    
;;;473        /* Store the new register value */
;;;474        hsmbus->Instance->CR1 = tmpreg;
;;;475    
;;;476        __HAL_SMBUS_ENABLE(hsmbus);
;;;477    
;;;478        hsmbus->State = HAL_SMBUS_STATE_READY;
;;;479    
;;;480        /* Process Unlocked */
;;;481        __HAL_UNLOCK(hsmbus);
;;;482    
;;;483        return HAL_OK;
;;;484      }
;;;485      else
;;;486      {
;;;487        return HAL_BUSY;
;;;488      }
;;;489    }
00001a  bd10              POP      {r4,pc}
                  |L3.28|
00001c  2401              MOVS     r4,#1                 ;457
00001e  2044              MOVS     r0,#0x44              ;457
000020  5484              STRB     r4,[r0,r2]            ;457
000022  bf00              NOP                            ;457
000024  2002              MOVS     r0,#2                 ;459
000026  6490              STR      r0,[r2,#0x48]         ;459
000028  6810              LDR      r0,[r2,#0]            ;462
00002a  6800              LDR      r0,[r0,#0]            ;462
00002c  43a0              BICS     r0,r0,r4              ;462
00002e  6814              LDR      r4,[r2,#0]            ;462
000030  6020              STR      r0,[r4,#0]            ;462
000032  6810              LDR      r0,[r2,#0]            ;465
000034  6801              LDR      r1,[r0,#0]            ;465
000036  240f              MOVS     r4,#0xf               ;468
000038  0224              LSLS     r4,r4,#8              ;468
00003a  4608              MOV      r0,r1                 ;468
00003c  43a0              BICS     r0,r0,r4              ;468
00003e  4601              MOV      r1,r0                 ;468
000040  0218              LSLS     r0,r3,#8              ;471
000042  4301              ORRS     r1,r1,r0              ;471
000044  6810              LDR      r0,[r2,#0]            ;474
000046  6001              STR      r1,[r0,#0]            ;474
000048  6810              LDR      r0,[r2,#0]            ;476
00004a  6800              LDR      r0,[r0,#0]            ;476
00004c  2401              MOVS     r4,#1                 ;476
00004e  4320              ORRS     r0,r0,r4              ;476
000050  6814              LDR      r4,[r2,#0]            ;476
000052  6020              STR      r0,[r4,#0]            ;476
000054  2001              MOVS     r0,#1                 ;478
000056  6490              STR      r0,[r2,#0x48]         ;478
000058  bf00              NOP                            ;481
00005a  2400              MOVS     r4,#0                 ;481
00005c  2044              MOVS     r0,#0x44              ;481
00005e  5484              STRB     r4,[r0,r2]            ;481
000060  bf00              NOP                            ;481
000062  2000              MOVS     r0,#0                 ;483
000064  e7d9              B        |L3.26|
                  |L3.102|
000066  2002              MOVS     r0,#2                 ;487
000068  e7d7              B        |L3.26|
;;;490    
                          ENDP


                          AREA ||i.HAL_SMBUS_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_DeInit PROC
;;;331      */
;;;332    HAL_StatusTypeDef HAL_SMBUS_DeInit(SMBUS_HandleTypeDef *hsmbus)
000000  b510              PUSH     {r4,lr}
;;;333    {
000002  4604              MOV      r4,r0
;;;334      /* Check the SMBUS handle allocation */
;;;335      if(hsmbus == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L4.12|
;;;336      {
;;;337        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L4.10|
;;;338      }
;;;339      
;;;340      /* Check the parameters */
;;;341      assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
;;;342      
;;;343      hsmbus->State = HAL_SMBUS_STATE_BUSY;
;;;344      
;;;345      /* Disable the SMBUS Peripheral Clock */
;;;346      __HAL_SMBUS_DISABLE(hsmbus);
;;;347      
;;;348      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;349      HAL_SMBUS_MspDeInit(hsmbus);
;;;350      
;;;351      hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
;;;352      hsmbus->PreviousState =  HAL_SMBUS_STATE_RESET;
;;;353      hsmbus->State = HAL_SMBUS_STATE_RESET;
;;;354      
;;;355       /* Release Lock */
;;;356      __HAL_UNLOCK(hsmbus);
;;;357      
;;;358      return HAL_OK;
;;;359    }
00000a  bd10              POP      {r4,pc}
                  |L4.12|
00000c  2002              MOVS     r0,#2                 ;343
00000e  64a0              STR      r0,[r4,#0x48]         ;343
000010  6820              LDR      r0,[r4,#0]            ;346
000012  6800              LDR      r0,[r0,#0]            ;346
000014  0840              LSRS     r0,r0,#1              ;346
000016  0040              LSLS     r0,r0,#1              ;346
000018  6821              LDR      r1,[r4,#0]            ;346
00001a  6008              STR      r0,[r1,#0]            ;346
00001c  4620              MOV      r0,r4                 ;349
00001e  f7fffffe          BL       HAL_SMBUS_MspDeInit
000022  2000              MOVS     r0,#0                 ;351
000024  64e0              STR      r0,[r4,#0x4c]         ;351
000026  6420              STR      r0,[r4,#0x40]         ;352
000028  64a0              STR      r0,[r4,#0x48]         ;353
00002a  bf00              NOP                            ;356
00002c  2100              MOVS     r1,#0                 ;356
00002e  2044              MOVS     r0,#0x44              ;356
000030  5501              STRB     r1,[r0,r4]            ;356
000032  bf00              NOP                            ;356
000034  2000              MOVS     r0,#0                 ;358
000036  e7e8              B        |L4.10|
;;;360    
                          ENDP


                          AREA ||i.HAL_SMBUS_DisableAlert_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_DisableAlert_IT PROC
;;;1016     */
;;;1017   HAL_StatusTypeDef HAL_SMBUS_DisableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
000000  b510              PUSH     {r4,lr}
;;;1018   {
000002  4604              MOV      r4,r0
;;;1019     /* Enable SMBus alert */
;;;1020     hsmbus->Instance->CR1 &= ~I2C_CR1_ALERTEN;   
000004  6820              LDR      r0,[r4,#0]
000006  6800              LDR      r0,[r0,#0]
000008  2101              MOVS     r1,#1
00000a  0589              LSLS     r1,r1,#22
00000c  4388              BICS     r0,r0,r1
00000e  6821              LDR      r1,[r4,#0]
000010  6008              STR      r0,[r1,#0]
;;;1021     
;;;1022     /* Disable Alert Interrupt */
;;;1023     SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ALERT);
000012  2180              MOVS     r1,#0x80
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       SMBUS_Disable_IRQ
;;;1024   
;;;1025     return HAL_OK; 
00001a  2000              MOVS     r0,#0
;;;1026   }
00001c  bd10              POP      {r4,pc}
;;;1027   
                          ENDP


                          AREA ||i.HAL_SMBUS_DisableListen_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_DisableListen_IT PROC
;;;973      */
;;;974    HAL_StatusTypeDef HAL_SMBUS_DisableListen_IT(SMBUS_HandleTypeDef *hsmbus)
000000  b510              PUSH     {r4,lr}
;;;975    {
000002  4604              MOV      r4,r0
;;;976      /* Disable Address listen mode only if a transfer is not ongoing */
;;;977      if(hsmbus->State == HAL_SMBUS_STATE_LISTEN)
000004  6ca0              LDR      r0,[r4,#0x48]
000006  2808              CMP      r0,#8
000008  d107              BNE      |L6.26|
;;;978      {
;;;979        hsmbus->State = HAL_SMBUS_STATE_READY;
00000a  2001              MOVS     r0,#1
00000c  64a0              STR      r0,[r4,#0x48]
;;;980      
;;;981        /* Disable the Address Match interrupt */
;;;982        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
00000e  2138              MOVS     r1,#0x38
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SMBUS_Disable_IRQ
;;;983      
;;;984        return HAL_OK;
000016  2000              MOVS     r0,#0
                  |L6.24|
;;;985      }
;;;986      else
;;;987      {
;;;988        return HAL_BUSY;
;;;989      }
;;;990    }
000018  bd10              POP      {r4,pc}
                  |L6.26|
00001a  2002              MOVS     r0,#2                 ;988
00001c  e7fc              B        |L6.24|
;;;991    
                          ENDP


                          AREA ||i.HAL_SMBUS_ER_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_ER_IRQHandler PROC
;;;1213     */
;;;1214   void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
000000  b510              PUSH     {r4,lr}
;;;1215   {
000002  4604              MOV      r4,r0
;;;1216     /* SMBUS Bus error interrupt occurred ------------------------------------*/
;;;1217     if((__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_BERR) != RESET) && (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_ERRI) != RESET))
000004  6820              LDR      r0,[r4,#0]
000006  6980              LDR      r0,[r0,#0x18]
000008  21ff              MOVS     r1,#0xff
00000a  3101              ADDS     r1,#1
00000c  4008              ANDS     r0,r0,r1
00000e  0a00              LSRS     r0,r0,#8
000010  2800              CMP      r0,#0
000012  d00d              BEQ      |L7.48|
000014  6820              LDR      r0,[r4,#0]
000016  6800              LDR      r0,[r0,#0]
000018  2180              MOVS     r1,#0x80
00001a  4008              ANDS     r0,r0,r1
00001c  09c0              LSRS     r0,r0,#7
00001e  2800              CMP      r0,#0
000020  d006              BEQ      |L7.48|
;;;1218     { 
;;;1219       hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
000022  6ce0              LDR      r0,[r4,#0x4c]
000024  2101              MOVS     r1,#1
000026  4308              ORRS     r0,r0,r1
000028  64e0              STR      r0,[r4,#0x4c]
;;;1220      
;;;1221       /* Clear BERR flag */
;;;1222       __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
00002a  0208              LSLS     r0,r1,#8
00002c  6821              LDR      r1,[r4,#0]
00002e  61c8              STR      r0,[r1,#0x1c]
                  |L7.48|
;;;1223     }
;;;1224     
;;;1225     /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
;;;1226     if((__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_OVR) != RESET) && (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_ERRI) != RESET))
000030  6820              LDR      r0,[r4,#0]
000032  6980              LDR      r0,[r0,#0x18]
000034  2101              MOVS     r1,#1
000036  0289              LSLS     r1,r1,#10
000038  4008              ANDS     r0,r0,r1
00003a  0a80              LSRS     r0,r0,#10
00003c  2800              CMP      r0,#0
00003e  d00d              BEQ      |L7.92|
000040  6820              LDR      r0,[r4,#0]
000042  6800              LDR      r0,[r0,#0]
000044  2180              MOVS     r1,#0x80
000046  4008              ANDS     r0,r0,r1
000048  09c0              LSRS     r0,r0,#7
00004a  2800              CMP      r0,#0
00004c  d006              BEQ      |L7.92|
;;;1227     { 
;;;1228       hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
00004e  6ce0              LDR      r0,[r4,#0x4c]
000050  2108              MOVS     r1,#8
000052  4308              ORRS     r0,r0,r1
000054  64e0              STR      r0,[r4,#0x4c]
;;;1229   
;;;1230       /* Clear OVR flag */
;;;1231       __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
000056  01c8              LSLS     r0,r1,#7
000058  6821              LDR      r1,[r4,#0]
00005a  61c8              STR      r0,[r1,#0x1c]
                  |L7.92|
;;;1232     }
;;;1233   
;;;1234     /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
;;;1235     if((__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_ARLO) != RESET) && (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_ERRI) != RESET))
00005c  6820              LDR      r0,[r4,#0]
00005e  6980              LDR      r0,[r0,#0x18]
000060  2101              MOVS     r1,#1
000062  0249              LSLS     r1,r1,#9
000064  4008              ANDS     r0,r0,r1
000066  0a40              LSRS     r0,r0,#9
000068  2800              CMP      r0,#0
00006a  d00d              BEQ      |L7.136|
00006c  6820              LDR      r0,[r4,#0]
00006e  6800              LDR      r0,[r0,#0]
000070  2180              MOVS     r1,#0x80
000072  4008              ANDS     r0,r0,r1
000074  09c0              LSRS     r0,r0,#7
000076  2800              CMP      r0,#0
000078  d006              BEQ      |L7.136|
;;;1236     { 
;;;1237       hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
00007a  6ce0              LDR      r0,[r4,#0x4c]
00007c  2102              MOVS     r1,#2
00007e  4308              ORRS     r0,r0,r1
000080  64e0              STR      r0,[r4,#0x4c]
;;;1238   
;;;1239       /* Clear ARLO flag */
;;;1240       __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
000082  0208              LSLS     r0,r1,#8
000084  6821              LDR      r1,[r4,#0]
000086  61c8              STR      r0,[r1,#0x1c]
                  |L7.136|
;;;1241     }
;;;1242   
;;;1243     /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
;;;1244     if((__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT) != RESET) && (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_ERRI) != RESET))
000088  6820              LDR      r0,[r4,#0]
00008a  6980              LDR      r0,[r0,#0x18]
00008c  2101              MOVS     r1,#1
00008e  0309              LSLS     r1,r1,#12
000090  4008              ANDS     r0,r0,r1
000092  0b00              LSRS     r0,r0,#12
000094  2800              CMP      r0,#0
000096  d00d              BEQ      |L7.180|
000098  6820              LDR      r0,[r4,#0]
00009a  6800              LDR      r0,[r0,#0]
00009c  2180              MOVS     r1,#0x80
00009e  4008              ANDS     r0,r0,r1
0000a0  09c0              LSRS     r0,r0,#7
0000a2  2800              CMP      r0,#0
0000a4  d006              BEQ      |L7.180|
;;;1245     { 
;;;1246       hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
0000a6  6ce0              LDR      r0,[r4,#0x4c]
0000a8  2120              MOVS     r1,#0x20
0000aa  4308              ORRS     r0,r0,r1
0000ac  64e0              STR      r0,[r4,#0x4c]
;;;1247   
;;;1248       /* Clear TIMEOUT flag */
;;;1249       __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
0000ae  01c8              LSLS     r0,r1,#7
0000b0  6821              LDR      r1,[r4,#0]
0000b2  61c8              STR      r0,[r1,#0x1c]
                  |L7.180|
;;;1250     }
;;;1251   
;;;1252     /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
;;;1253     if((__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_ALERT) != RESET) && (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_ERRI) != RESET))
0000b4  6820              LDR      r0,[r4,#0]
0000b6  6980              LDR      r0,[r0,#0x18]
0000b8  2101              MOVS     r1,#1
0000ba  0349              LSLS     r1,r1,#13
0000bc  4008              ANDS     r0,r0,r1
0000be  0b40              LSRS     r0,r0,#13
0000c0  2800              CMP      r0,#0
0000c2  d00d              BEQ      |L7.224|
0000c4  6820              LDR      r0,[r4,#0]
0000c6  6800              LDR      r0,[r0,#0]
0000c8  2180              MOVS     r1,#0x80
0000ca  4008              ANDS     r0,r0,r1
0000cc  09c0              LSRS     r0,r0,#7
0000ce  2800              CMP      r0,#0
0000d0  d006              BEQ      |L7.224|
;;;1254     { 
;;;1255       hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
0000d2  6ce0              LDR      r0,[r4,#0x4c]
0000d4  2140              MOVS     r1,#0x40
0000d6  4308              ORRS     r0,r0,r1
0000d8  64e0              STR      r0,[r4,#0x4c]
;;;1256   
;;;1257       /* Clear ALERT flag */
;;;1258       __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
0000da  01c8              LSLS     r0,r1,#7
0000dc  6821              LDR      r1,[r4,#0]
0000de  61c8              STR      r0,[r1,#0x1c]
                  |L7.224|
;;;1259     }
;;;1260   
;;;1261     /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
;;;1262     if((__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_PECERR) != RESET) && (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_ERRI) != RESET))
0000e0  6820              LDR      r0,[r4,#0]
0000e2  6980              LDR      r0,[r0,#0x18]
0000e4  2101              MOVS     r1,#1
0000e6  02c9              LSLS     r1,r1,#11
0000e8  4008              ANDS     r0,r0,r1
0000ea  0ac0              LSRS     r0,r0,#11
0000ec  2800              CMP      r0,#0
0000ee  d00c              BEQ      |L7.266|
0000f0  6820              LDR      r0,[r4,#0]
0000f2  6800              LDR      r0,[r0,#0]
0000f4  2180              MOVS     r1,#0x80
0000f6  4008              ANDS     r0,r0,r1
0000f8  09c0              LSRS     r0,r0,#7
0000fa  2800              CMP      r0,#0
0000fc  d005              BEQ      |L7.266|
;;;1263     { 
;;;1264       hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
0000fe  6ce0              LDR      r0,[r4,#0x4c]
000100  4308              ORRS     r0,r0,r1
000102  64e0              STR      r0,[r4,#0x4c]
;;;1265   
;;;1266       /* Clear PEC error flag */
;;;1267       __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
000104  0108              LSLS     r0,r1,#4
000106  6821              LDR      r1,[r4,#0]
000108  61c8              STR      r0,[r1,#0x1c]
                  |L7.266|
;;;1268     }
;;;1269     
;;;1270     /* Call the Error Callback in case of Error detected */
;;;1271     if((hsmbus->ErrorCode != HAL_SMBUS_ERROR_NONE)&&(hsmbus->ErrorCode != HAL_SMBUS_ERROR_ACKF))
00010a  6ce0              LDR      r0,[r4,#0x4c]
00010c  2800              CMP      r0,#0
00010e  d018              BEQ      |L7.322|
000110  6ce0              LDR      r0,[r4,#0x4c]
000112  2804              CMP      r0,#4
000114  d015              BEQ      |L7.322|
;;;1272     {
;;;1273       /* Do not Reset the HAL state in case of ALERT error */
;;;1274       if((hsmbus->ErrorCode & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
000116  6ce0              LDR      r0,[r4,#0x4c]
000118  2140              MOVS     r1,#0x40
00011a  4008              ANDS     r0,r0,r1
00011c  2840              CMP      r0,#0x40
00011e  d00d              BEQ      |L7.316|
;;;1275       {
;;;1276         if(((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
000120  6ca0              LDR      r0,[r4,#0x48]
000122  2132              MOVS     r1,#0x32
000124  4008              ANDS     r0,r0,r1
000126  2832              CMP      r0,#0x32
000128  d004              BEQ      |L7.308|
;;;1277            || ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
00012a  6ca0              LDR      r0,[r4,#0x48]
00012c  2142              MOVS     r1,#0x42
00012e  4008              ANDS     r0,r0,r1
000130  2842              CMP      r0,#0x42
000132  d103              BNE      |L7.316|
                  |L7.308|
;;;1278         {
;;;1279           /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
;;;1280           /* keep HAL_SMBUS_STATE_LISTEN if set */
;;;1281           hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
000134  2001              MOVS     r0,#1
000136  6420              STR      r0,[r4,#0x40]
;;;1282           hsmbus->State = HAL_SMBUS_STATE_LISTEN;
000138  2008              MOVS     r0,#8
00013a  64a0              STR      r0,[r4,#0x48]
                  |L7.316|
;;;1283         }
;;;1284       }
;;;1285       
;;;1286       /* Call the Error callback to prevent upper layer */
;;;1287       HAL_SMBUS_ErrorCallback(hsmbus);
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       HAL_SMBUS_ErrorCallback
                  |L7.322|
;;;1288     }
;;;1289   }
000142  bd10              POP      {r4,pc}
;;;1290   
                          ENDP


                          AREA ||i.HAL_SMBUS_EV_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_EV_IRQHandler PROC
;;;1158     */
;;;1159   void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
000000  b570              PUSH     {r4-r6,lr}
;;;1160   {
000002  4605              MOV      r5,r0
;;;1161     uint32_t tmpisrvalue = 0U;
000004  2400              MOVS     r4,#0
;;;1162     
;;;1163     /* Use a local variable to store the current ISR flags */
;;;1164     /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
;;;1165     tmpisrvalue = SMBUS_GET_ISR_REG(hsmbus);
000006  6828              LDR      r0,[r5,#0]
000008  6984              LDR      r4,[r0,#0x18]
;;;1166       
;;;1167     /* SMBUS in mode Transmitter ---------------------------------------------------*/
;;;1168     if (((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)) && (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, (SMBUS_IT_TCI| SMBUS_IT_STOPI| SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET))
00000a  2002              MOVS     r0,#2
00000c  4020              ANDS     r0,r0,r4
00000e  0840              LSRS     r0,r0,#1
000010  2800              CMP      r0,#0
000012  d113              BNE      |L8.60|
000014  2080              MOVS     r0,#0x80
000016  4020              ANDS     r0,r0,r4
000018  09c0              LSRS     r0,r0,#7
00001a  2800              CMP      r0,#0
00001c  d10e              BNE      |L8.60|
00001e  2040              MOVS     r0,#0x40
000020  4020              ANDS     r0,r0,r4
000022  0980              LSRS     r0,r0,#6
000024  2800              CMP      r0,#0
000026  d109              BNE      |L8.60|
000028  2020              MOVS     r0,#0x20
00002a  4020              ANDS     r0,r0,r4
00002c  0940              LSRS     r0,r0,#5
00002e  2800              CMP      r0,#0
000030  d104              BNE      |L8.60|
000032  2010              MOVS     r0,#0x10
000034  4020              ANDS     r0,r0,r4
000036  0900              LSRS     r0,r0,#4
000038  2800              CMP      r0,#0
00003a  d01b              BEQ      |L8.116|
                  |L8.60|
00003c  6828              LDR      r0,[r5,#0]
00003e  6800              LDR      r0,[r0,#0]
000040  2172              MOVS     r1,#0x72
000042  4008              ANDS     r0,r0,r1
000044  2872              CMP      r0,#0x72
000046  d101              BNE      |L8.76|
000048  2001              MOVS     r0,#1
00004a  e000              B        |L8.78|
                  |L8.76|
00004c  2000              MOVS     r0,#0
                  |L8.78|
00004e  2800              CMP      r0,#0
000050  d010              BEQ      |L8.116|
;;;1169     {     
;;;1170       /* Slave mode selected */
;;;1171       if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
000052  6ca8              LDR      r0,[r5,#0x48]
000054  2132              MOVS     r1,#0x32
000056  4008              ANDS     r0,r0,r1
000058  2832              CMP      r0,#0x32
00005a  d103              BNE      |L8.100|
;;;1172       {
;;;1173         SMBUS_Slave_ISR(hsmbus);
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       SMBUS_Slave_ISR
000062  e007              B        |L8.116|
                  |L8.100|
;;;1174       }
;;;1175       /* Master mode selected */
;;;1176       else if((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
000064  6ca8              LDR      r0,[r5,#0x48]
000066  2112              MOVS     r1,#0x12
000068  4008              ANDS     r0,r0,r1
00006a  2812              CMP      r0,#0x12
00006c  d102              BNE      |L8.116|
;;;1177       {
;;;1178         SMBUS_Master_ISR(hsmbus);
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       SMBUS_Master_ISR
                  |L8.116|
;;;1179       }
;;;1180     }
;;;1181       
;;;1182     /* SMBUS in mode Receiver ----------------------------------------------------*/
;;;1183     if (((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)) && (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, (SMBUS_IT_TCI| SMBUS_IT_STOPI| SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET))
000074  2004              MOVS     r0,#4
000076  4020              ANDS     r0,r0,r4
000078  0880              LSRS     r0,r0,#2
00007a  2800              CMP      r0,#0
00007c  d113              BNE      |L8.166|
00007e  2080              MOVS     r0,#0x80
000080  4020              ANDS     r0,r0,r4
000082  09c0              LSRS     r0,r0,#7
000084  2800              CMP      r0,#0
000086  d10e              BNE      |L8.166|
000088  2040              MOVS     r0,#0x40
00008a  4020              ANDS     r0,r0,r4
00008c  0980              LSRS     r0,r0,#6
00008e  2800              CMP      r0,#0
000090  d109              BNE      |L8.166|
000092  2020              MOVS     r0,#0x20
000094  4020              ANDS     r0,r0,r4
000096  0940              LSRS     r0,r0,#5
000098  2800              CMP      r0,#0
00009a  d104              BNE      |L8.166|
00009c  2010              MOVS     r0,#0x10
00009e  4020              ANDS     r0,r0,r4
0000a0  0900              LSRS     r0,r0,#4
0000a2  2800              CMP      r0,#0
0000a4  d01b              BEQ      |L8.222|
                  |L8.166|
0000a6  6828              LDR      r0,[r5,#0]
0000a8  6800              LDR      r0,[r0,#0]
0000aa  2174              MOVS     r1,#0x74
0000ac  4008              ANDS     r0,r0,r1
0000ae  2874              CMP      r0,#0x74
0000b0  d101              BNE      |L8.182|
0000b2  2001              MOVS     r0,#1
0000b4  e000              B        |L8.184|
                  |L8.182|
0000b6  2000              MOVS     r0,#0
                  |L8.184|
0000b8  2800              CMP      r0,#0
0000ba  d010              BEQ      |L8.222|
;;;1184     {
;;;1185       /* Slave mode selected */
;;;1186       if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
0000bc  6ca8              LDR      r0,[r5,#0x48]
0000be  2142              MOVS     r1,#0x42
0000c0  4008              ANDS     r0,r0,r1
0000c2  2842              CMP      r0,#0x42
0000c4  d103              BNE      |L8.206|
;;;1187       {
;;;1188         SMBUS_Slave_ISR(hsmbus);
0000c6  4628              MOV      r0,r5
0000c8  f7fffffe          BL       SMBUS_Slave_ISR
0000cc  e007              B        |L8.222|
                  |L8.206|
;;;1189       }
;;;1190       /* Master mode selected */
;;;1191       else if((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
0000ce  6ca8              LDR      r0,[r5,#0x48]
0000d0  2122              MOVS     r1,#0x22
0000d2  4008              ANDS     r0,r0,r1
0000d4  2822              CMP      r0,#0x22
0000d6  d102              BNE      |L8.222|
;;;1192       {
;;;1193         SMBUS_Master_ISR(hsmbus);
0000d8  4628              MOV      r0,r5
0000da  f7fffffe          BL       SMBUS_Master_ISR
                  |L8.222|
;;;1194       }
;;;1195     } 
;;;1196         
;;;1197      /* SMBUS in mode Listener Only --------------------------------------------------*/
;;;1198     if (((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) || (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET))
0000de  2008              MOVS     r0,#8
0000e0  4020              ANDS     r0,r0,r4
0000e2  08c0              LSRS     r0,r0,#3
0000e4  2800              CMP      r0,#0
0000e6  d109              BNE      |L8.252|
0000e8  2020              MOVS     r0,#0x20
0000ea  4020              ANDS     r0,r0,r4
0000ec  0940              LSRS     r0,r0,#5
0000ee  2800              CMP      r0,#0
0000f0  d104              BNE      |L8.252|
0000f2  2010              MOVS     r0,#0x10
0000f4  4020              ANDS     r0,r0,r4
0000f6  0900              LSRS     r0,r0,#4
0000f8  2800              CMP      r0,#0
0000fa  d01a              BEQ      |L8.306|
                  |L8.252|
;;;1199        && ((__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_ADDRI) != RESET) || (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_STOPI) != RESET) || (__HAL_SMBUS_GET_IT_SOURCE(hsmbus, SMBUS_IT_NACKI) != RESET)))
0000fc  6828              LDR      r0,[r5,#0]
0000fe  6800              LDR      r0,[r0,#0]
000100  2108              MOVS     r1,#8
000102  4008              ANDS     r0,r0,r1
000104  08c0              LSRS     r0,r0,#3
000106  2800              CMP      r0,#0
000108  d10d              BNE      |L8.294|
00010a  6828              LDR      r0,[r5,#0]
00010c  6800              LDR      r0,[r0,#0]
00010e  2120              MOVS     r1,#0x20
000110  4008              ANDS     r0,r0,r1
000112  0940              LSRS     r0,r0,#5
000114  2800              CMP      r0,#0
000116  d106              BNE      |L8.294|
000118  6828              LDR      r0,[r5,#0]
00011a  6800              LDR      r0,[r0,#0]
00011c  2110              MOVS     r1,#0x10
00011e  4008              ANDS     r0,r0,r1
000120  0900              LSRS     r0,r0,#4
000122  2800              CMP      r0,#0
000124  d005              BEQ      |L8.306|
                  |L8.294|
;;;1200     {
;;;1201       if (hsmbus->State == HAL_SMBUS_STATE_LISTEN)
000126  6ca8              LDR      r0,[r5,#0x48]
000128  2808              CMP      r0,#8
00012a  d102              BNE      |L8.306|
;;;1202       {
;;;1203         SMBUS_Slave_ISR(hsmbus);
00012c  4628              MOV      r0,r5
00012e  f7fffffe          BL       SMBUS_Slave_ISR
                  |L8.306|
;;;1204       }
;;;1205     }
;;;1206   }
000132  bd70              POP      {r4-r6,pc}
;;;1207   
                          ENDP


                          AREA ||i.HAL_SMBUS_EnableAlert_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_EnableAlert_IT PROC
;;;997      */
;;;998    HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
000000  b510              PUSH     {r4,lr}
;;;999    {
000002  4604              MOV      r4,r0
;;;1000     /* Enable SMBus alert */
;;;1001     hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;   
000004  6820              LDR      r0,[r4,#0]
000006  6800              LDR      r0,[r0,#0]
000008  2101              MOVS     r1,#1
00000a  0589              LSLS     r1,r1,#22
00000c  4308              ORRS     r0,r0,r1
00000e  6821              LDR      r1,[r4,#0]
000010  6008              STR      r0,[r1,#0]
;;;1002   
;;;1003     /* Clear ALERT flag */
;;;1004     __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
000012  2001              MOVS     r0,#1
000014  0340              LSLS     r0,r0,#13
000016  6821              LDR      r1,[r4,#0]
000018  61c8              STR      r0,[r1,#0x1c]
;;;1005   
;;;1006     /* Enable Alert Interrupt */
;;;1007     SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
00001a  2180              MOVS     r1,#0x80
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SMBUS_Enable_IRQ
;;;1008   
;;;1009     return HAL_OK; 
000022  2000              MOVS     r0,#0
;;;1010   }
000024  bd10              POP      {r4,pc}
;;;1011   /**
                          ENDP


                          AREA ||i.HAL_SMBUS_EnableListen_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_EnableListen_IT PROC
;;;957      */
;;;958    HAL_StatusTypeDef HAL_SMBUS_EnableListen_IT(SMBUS_HandleTypeDef *hsmbus)
000000  b510              PUSH     {r4,lr}
;;;959    {
000002  4604              MOV      r4,r0
;;;960      hsmbus->State = HAL_SMBUS_STATE_LISTEN;
000004  2008              MOVS     r0,#8
000006  64a0              STR      r0,[r4,#0x48]
;;;961      
;;;962      /* Enable the Address Match interrupt */
;;;963      SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ADDR);
000008  2138              MOVS     r1,#0x38
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SMBUS_Enable_IRQ
;;;964      
;;;965      return HAL_OK;
000010  2000              MOVS     r0,#0
;;;966    }
000012  bd10              POP      {r4,pc}
;;;967    
                          ENDP


                          AREA ||i.HAL_SMBUS_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_ErrorCallback PROC
;;;1395     */
;;;1396   __weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
000000  4770              BX       lr
;;;1397   {
;;;1398     /* Prevent unused argument(s) compilation warning */
;;;1399     UNUSED(hsmbus);
;;;1400   
;;;1401     /* NOTE : This function should not be modified, when the callback is needed,
;;;1402               the HAL_SMBUS_ErrorCallback() could be implemented in the user file
;;;1403      */ 
;;;1404   }
;;;1405   
                          ENDP


                          AREA ||i.HAL_SMBUS_GetError||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_GetError PROC
;;;1442   */
;;;1443   uint32_t HAL_SMBUS_GetError(SMBUS_HandleTypeDef *hsmbus)
000000  4601              MOV      r1,r0
;;;1444   {
;;;1445     return hsmbus->ErrorCode;
000002  6cc8              LDR      r0,[r1,#0x4c]
;;;1446   }
000004  4770              BX       lr
;;;1447   
                          ENDP


                          AREA ||i.HAL_SMBUS_GetState||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_GetState PROC
;;;1430     */
;;;1431   uint32_t HAL_SMBUS_GetState(SMBUS_HandleTypeDef *hsmbus)
000000  4601              MOV      r1,r0
;;;1432   {
;;;1433     /* Return SMBUS handle state */
;;;1434     return hsmbus->State;
000002  6c88              LDR      r0,[r1,#0x48]
;;;1435   }
000004  4770              BX       lr
;;;1436   
                          ENDP


                          AREA ||i.HAL_SMBUS_Init||, CODE, READONLY, ALIGN=2

                  HAL_SMBUS_Init PROC
;;;229      */
;;;230    HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
000000  b510              PUSH     {r4,lr}
;;;231    { 
000002  4604              MOV      r4,r0
;;;232      /* Check the SMBUS handle allocation */
;;;233      if(hsmbus == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L14.12|
;;;234      {
;;;235        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L14.10|
;;;236      }
;;;237      
;;;238      /* Check the parameters */
;;;239      assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
;;;240      assert_param(IS_SMBUS_ANALOG_FILTER(hsmbus->Init.AnalogFilter));
;;;241      assert_param(IS_SMBUS_OWN_ADDRESS1(hsmbus->Init.OwnAddress1));
;;;242      assert_param(IS_SMBUS_ADDRESSING_MODE(hsmbus->Init.AddressingMode));
;;;243      assert_param(IS_SMBUS_DUAL_ADDRESS(hsmbus->Init.DualAddressMode));
;;;244      assert_param(IS_SMBUS_OWN_ADDRESS2(hsmbus->Init.OwnAddress2));
;;;245      assert_param(IS_SMBUS_OWN_ADDRESS2_MASK(hsmbus->Init.OwnAddress2Masks));
;;;246      assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
;;;247      assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
;;;248      assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
;;;249      assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));
;;;250    
;;;251      if(hsmbus->State == HAL_SMBUS_STATE_RESET)
;;;252      {
;;;253        /* Allocate lock resource and initialize it */
;;;254        hsmbus->Lock = HAL_UNLOCKED;
;;;255    
;;;256        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;257        HAL_SMBUS_MspInit(hsmbus);
;;;258      }
;;;259      
;;;260      hsmbus->State = HAL_SMBUS_STATE_BUSY;
;;;261      
;;;262      /* Disable the selected SMBUS peripheral */
;;;263      __HAL_SMBUS_DISABLE(hsmbus);
;;;264      
;;;265      /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/  
;;;266      /* Configure SMBUSx: Frequency range */
;;;267      hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
;;;268      
;;;269      /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/  
;;;270      /* Configure SMBUSx: Bus Timeout  */
;;;271      hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
;;;272      hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
;;;273      hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
;;;274    
;;;275      /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
;;;276      /* Configure SMBUSx: Own Address1 and ack own address1 mode */
;;;277      hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
;;;278      
;;;279      if(hsmbus->Init.OwnAddress1 != 0U)
;;;280      {
;;;281        if(hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
;;;282        {
;;;283          hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
;;;284        }
;;;285        else /* SMBUS_ADDRESSINGMODE_10BIT */
;;;286        {
;;;287          hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
;;;288        }
;;;289      }
;;;290    
;;;291      /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
;;;292      /* Configure SMBUSx: Addressing Master mode */
;;;293      if(hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
;;;294      {
;;;295        hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
;;;296      }
;;;297      /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
;;;298      /* AUTOEND and NACK bit will be manage during Transfer process */
;;;299      hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
;;;300      
;;;301      /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/  
;;;302      /* Configure SMBUSx: Dual mode and Own Address2 */
;;;303      hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
;;;304    
;;;305      /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
;;;306      /* Configure SMBUSx: Generalcall and NoStretch mode */
;;;307      hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
;;;308      
;;;309      /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
;;;310      if( (hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
;;;311         && ( (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP) ) )
;;;312      {
;;;313        hsmbus->Instance->CR1 |= I2C_CR1_SBC;
;;;314      }
;;;315    
;;;316      /* Enable the selected SMBUS peripheral */
;;;317      __HAL_SMBUS_ENABLE(hsmbus);
;;;318      
;;;319      hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
;;;320      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
;;;321      hsmbus->State = HAL_SMBUS_STATE_READY;
;;;322      
;;;323      return HAL_OK;
;;;324    }
00000a  bd10              POP      {r4,pc}
                  |L14.12|
00000c  6ca0              LDR      r0,[r4,#0x48]         ;251
00000e  2800              CMP      r0,#0                 ;251
000010  d105              BNE      |L14.30|
000012  2100              MOVS     r1,#0                 ;254
000014  2044              MOVS     r0,#0x44              ;254
000016  5501              STRB     r1,[r0,r4]            ;254
000018  4620              MOV      r0,r4                 ;257
00001a  f7fffffe          BL       HAL_SMBUS_MspInit
                  |L14.30|
00001e  2002              MOVS     r0,#2                 ;260
000020  64a0              STR      r0,[r4,#0x48]         ;260
000022  6820              LDR      r0,[r4,#0]            ;263
000024  6800              LDR      r0,[r0,#0]            ;263
000026  0840              LSRS     r0,r0,#1              ;263
000028  0040              LSLS     r0,r0,#1              ;263
00002a  6821              LDR      r1,[r4,#0]            ;263
00002c  6008              STR      r0,[r1,#0]            ;263
00002e  210f              MOVS     r1,#0xf               ;267
000030  0609              LSLS     r1,r1,#24             ;267
000032  6860              LDR      r0,[r4,#4]            ;267
000034  4388              BICS     r0,r0,r1              ;267
000036  6821              LDR      r1,[r4,#0]            ;267
000038  6108              STR      r0,[r1,#0x10]         ;267
00003a  6820              LDR      r0,[r4,#0]            ;271
00003c  6940              LDR      r0,[r0,#0x14]         ;271
00003e  2101              MOVS     r1,#1                 ;271
000040  03c9              LSLS     r1,r1,#15             ;271
000042  4388              BICS     r0,r0,r1              ;271
000044  6821              LDR      r1,[r4,#0]            ;271
000046  6148              STR      r0,[r1,#0x14]         ;271
000048  6820              LDR      r0,[r4,#0]            ;272
00004a  6940              LDR      r0,[r0,#0x14]         ;272
00004c  0040              LSLS     r0,r0,#1              ;272
00004e  0840              LSRS     r0,r0,#1              ;272
000050  6821              LDR      r1,[r4,#0]            ;272
000052  6148              STR      r0,[r1,#0x14]         ;272
000054  6821              LDR      r1,[r4,#0]            ;273
000056  6b20              LDR      r0,[r4,#0x30]         ;273
000058  6148              STR      r0,[r1,#0x14]         ;273
00005a  6820              LDR      r0,[r4,#0]            ;277
00005c  6880              LDR      r0,[r0,#8]            ;277
00005e  2101              MOVS     r1,#1                 ;277
000060  03c9              LSLS     r1,r1,#15             ;277
000062  4388              BICS     r0,r0,r1              ;277
000064  6821              LDR      r1,[r4,#0]            ;277
000066  6088              STR      r0,[r1,#8]            ;277
000068  68e0              LDR      r0,[r4,#0xc]          ;279
00006a  2800              CMP      r0,#0                 ;279
00006c  d00f              BEQ      |L14.142|
00006e  6920              LDR      r0,[r4,#0x10]         ;281
000070  2801              CMP      r0,#1                 ;281
000072  d106              BNE      |L14.130|
000074  2101              MOVS     r1,#1                 ;283
000076  03c9              LSLS     r1,r1,#15             ;283
000078  68e0              LDR      r0,[r4,#0xc]          ;283
00007a  4308              ORRS     r0,r0,r1              ;283
00007c  6821              LDR      r1,[r4,#0]            ;283
00007e  6088              STR      r0,[r1,#8]            ;283
000080  e005              B        |L14.142|
                  |L14.130|
000082  2121              MOVS     r1,#0x21              ;287
000084  0289              LSLS     r1,r1,#10             ;287
000086  68e0              LDR      r0,[r4,#0xc]          ;287
000088  4308              ORRS     r0,r0,r1              ;287
00008a  6821              LDR      r1,[r4,#0]            ;287
00008c  6088              STR      r0,[r1,#8]            ;287
                  |L14.142|
00008e  6920              LDR      r0,[r4,#0x10]         ;293
000090  2802              CMP      r0,#2                 ;293
000092  d102              BNE      |L14.154|
000094  0280              LSLS     r0,r0,#10             ;295
000096  6821              LDR      r1,[r4,#0]            ;295
000098  6048              STR      r0,[r1,#4]            ;295
                  |L14.154|
00009a  6820              LDR      r0,[r4,#0]            ;299
00009c  6840              LDR      r0,[r0,#4]            ;299
00009e  491b              LDR      r1,|L14.268|
0000a0  4308              ORRS     r0,r0,r1              ;299
0000a2  6821              LDR      r1,[r4,#0]            ;299
0000a4  6048              STR      r0,[r1,#4]            ;299
0000a6  69a1              LDR      r1,[r4,#0x18]         ;303
0000a8  6960              LDR      r0,[r4,#0x14]         ;303
0000aa  4308              ORRS     r0,r0,r1              ;303
0000ac  69e1              LDR      r1,[r4,#0x1c]         ;303
0000ae  0209              LSLS     r1,r1,#8              ;303
0000b0  4308              ORRS     r0,r0,r1              ;303
0000b2  6821              LDR      r1,[r4,#0]            ;303
0000b4  60c8              STR      r0,[r1,#0xc]          ;303
0000b6  6a61              LDR      r1,[r4,#0x24]         ;307
0000b8  6a20              LDR      r0,[r4,#0x20]         ;307
0000ba  4308              ORRS     r0,r0,r1              ;307
0000bc  6aa1              LDR      r1,[r4,#0x28]         ;307
0000be  4308              ORRS     r0,r0,r1              ;307
0000c0  6ae1              LDR      r1,[r4,#0x2c]         ;307
0000c2  4308              ORRS     r0,r0,r1              ;307
0000c4  68a1              LDR      r1,[r4,#8]            ;307
0000c6  4308              ORRS     r0,r0,r1              ;307
0000c8  6821              LDR      r1,[r4,#0]            ;307
0000ca  6008              STR      r0,[r1,#0]            ;307
0000cc  2101              MOVS     r1,#1                 ;310
0000ce  05c9              LSLS     r1,r1,#23             ;310
0000d0  6aa0              LDR      r0,[r4,#0x28]         ;310
0000d2  4288              CMP      r0,r1                 ;310
0000d4  d10d              BNE      |L14.242|
0000d6  6ae0              LDR      r0,[r4,#0x2c]         ;311
0000d8  2800              CMP      r0,#0                 ;311
0000da  d003              BEQ      |L14.228|
0000dc  1089              ASRS     r1,r1,#2              ;311
0000de  6ae0              LDR      r0,[r4,#0x2c]         ;311
0000e0  4288              CMP      r0,r1                 ;311
0000e2  d106              BNE      |L14.242|
                  |L14.228|
0000e4  6820              LDR      r0,[r4,#0]            ;313
0000e6  6800              LDR      r0,[r0,#0]            ;313
0000e8  2101              MOVS     r1,#1                 ;313
0000ea  0409              LSLS     r1,r1,#16             ;313
0000ec  4308              ORRS     r0,r0,r1              ;313
0000ee  6821              LDR      r1,[r4,#0]            ;313
0000f0  6008              STR      r0,[r1,#0]            ;313
                  |L14.242|
0000f2  6820              LDR      r0,[r4,#0]            ;317
0000f4  6800              LDR      r0,[r0,#0]            ;317
0000f6  2101              MOVS     r1,#1                 ;317
0000f8  4308              ORRS     r0,r0,r1              ;317
0000fa  6821              LDR      r1,[r4,#0]            ;317
0000fc  6008              STR      r0,[r1,#0]            ;317
0000fe  2000              MOVS     r0,#0                 ;319
000100  64e0              STR      r0,[r4,#0x4c]         ;319
000102  2001              MOVS     r0,#1                 ;320
000104  6420              STR      r0,[r4,#0x40]         ;320
000106  64a0              STR      r0,[r4,#0x48]         ;321
000108  2000              MOVS     r0,#0                 ;323
00010a  e77e              B        |L14.10|
;;;325    
                          ENDP

                  |L14.268|
                          DCD      0x02008000

                          AREA ||i.HAL_SMBUS_IsDeviceReady||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_IsDeviceReady PROC
;;;1037     */
;;;1038   HAL_StatusTypeDef HAL_SMBUS_IsDeviceReady(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1039   {  
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461d              MOV      r5,r3
;;;1040     uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;1041     
;;;1042     __IO uint32_t SMBUS_Trials = 0U;
00000e  9000              STR      r0,[sp,#0]
;;;1043    
;;;1044     if(hsmbus->State == HAL_SMBUS_STATE_READY)
000010  6ca0              LDR      r0,[r4,#0x48]
000012  2801              CMP      r0,#1
000014  d177              BNE      |L15.262|
;;;1045     {
;;;1046       if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_BUSY) != RESET)
000016  6820              LDR      r0,[r4,#0]
000018  6980              LDR      r0,[r0,#0x18]
00001a  2101              MOVS     r1,#1
00001c  03c9              LSLS     r1,r1,#15
00001e  4008              ANDS     r0,r0,r1
000020  0bc0              LSRS     r0,r0,#15
000022  2800              CMP      r0,#0
000024  d001              BEQ      |L15.42|
;;;1047       {
;;;1048         return HAL_BUSY;
000026  2002              MOVS     r0,#2
                  |L15.40|
;;;1049       }
;;;1050   
;;;1051       /* Process Locked */
;;;1052       __HAL_LOCK(hsmbus);
;;;1053       
;;;1054       hsmbus->State = HAL_SMBUS_STATE_BUSY;
;;;1055       hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
;;;1056       
;;;1057       do
;;;1058       {
;;;1059         /* Generate Start */
;;;1060         hsmbus->Instance->CR2 = SMBUS_GENERATE_START(hsmbus->Init.AddressingMode,DevAddress);
;;;1061         
;;;1062         /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
;;;1063         /* Wait until STOPF flag is set or a NACK flag is set*/
;;;1064         tickstart = HAL_GetTick();
;;;1065         while((__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_STOPF) == RESET) && (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF) == RESET) && (hsmbus->State != HAL_SMBUS_STATE_TIMEOUT))
;;;1066         {
;;;1067           if(Timeout != HAL_MAX_DELAY)
;;;1068           {    
;;;1069             if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;1070             {
;;;1071               /* Device is ready */
;;;1072               hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1073           
;;;1074               /* Process Unlocked */
;;;1075               __HAL_UNLOCK(hsmbus);
;;;1076               return HAL_TIMEOUT;
;;;1077             }
;;;1078           } 
;;;1079         }
;;;1080         
;;;1081         /* Check if the NACKF flag has not been set */
;;;1082         if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF) == RESET)
;;;1083         {
;;;1084           /* Wait until STOPF flag is reset */ 
;;;1085           if(SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)      
;;;1086           {
;;;1087             return HAL_TIMEOUT;
;;;1088           }
;;;1089           
;;;1090           /* Clear STOP Flag */
;;;1091           __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
;;;1092   
;;;1093           /* Device is ready */
;;;1094           hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1095           
;;;1096           /* Process Unlocked */
;;;1097           __HAL_UNLOCK(hsmbus);
;;;1098           
;;;1099           return HAL_OK;
;;;1100         }
;;;1101         else
;;;1102         {
;;;1103           /* Wait until STOPF flag is reset */ 
;;;1104           if(SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)      
;;;1105           {
;;;1106             return HAL_TIMEOUT;
;;;1107           }
;;;1108   
;;;1109           /* Clear NACK Flag */
;;;1110           __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
;;;1111   
;;;1112           /* Clear STOP Flag, auto generated with autoend*/
;;;1113           __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
;;;1114         }
;;;1115         
;;;1116         /* Check if the maximum allowed number of trials has been reached */
;;;1117         if (SMBUS_Trials++ == Trials)
;;;1118         {
;;;1119           /* Generate Stop */
;;;1120           hsmbus->Instance->CR2 |= I2C_CR2_STOP;
;;;1121           
;;;1122           /* Wait until STOPF flag is reset */ 
;;;1123           if(SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)      
;;;1124           {
;;;1125             return HAL_TIMEOUT;
;;;1126           }
;;;1127           
;;;1128           /* Clear STOP Flag */
;;;1129           __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
;;;1130         }      
;;;1131       }while(SMBUS_Trials < Trials);
;;;1132   
;;;1133       hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1134   
;;;1135       /* Process Unlocked */
;;;1136       __HAL_UNLOCK(hsmbus);
;;;1137           
;;;1138       return HAL_TIMEOUT;
;;;1139     }      
;;;1140     else
;;;1141     {
;;;1142       return HAL_BUSY;
;;;1143     }
;;;1144   }
000028  bdfe              POP      {r1-r7,pc}
                  |L15.42|
00002a  bf00              NOP                            ;1052
00002c  2044              MOVS     r0,#0x44              ;1052
00002e  5d00              LDRB     r0,[r0,r4]            ;1052
000030  2801              CMP      r0,#1                 ;1052
000032  d101              BNE      |L15.56|
000034  2002              MOVS     r0,#2                 ;1052
000036  e7f7              B        |L15.40|
                  |L15.56|
000038  2101              MOVS     r1,#1                 ;1052
00003a  2044              MOVS     r0,#0x44              ;1052
00003c  5501              STRB     r1,[r0,r4]            ;1052
00003e  bf00              NOP                            ;1052
000040  2002              MOVS     r0,#2                 ;1054
000042  64a0              STR      r0,[r4,#0x48]         ;1054
000044  2000              MOVS     r0,#0                 ;1055
000046  64e0              STR      r0,[r4,#0x4c]         ;1055
000048  bf00              NOP                            ;1057
                  |L15.74|
00004a  6920              LDR      r0,[r4,#0x10]         ;1060
00004c  2801              CMP      r0,#1                 ;1060
00004e  d109              BNE      |L15.100|
000050  05b0              LSLS     r0,r6,#22             ;1060
000052  0d80              LSRS     r0,r0,#22             ;1060
000054  2101              MOVS     r1,#1                 ;1060
000056  0349              LSLS     r1,r1,#13             ;1060
000058  1840              ADDS     r0,r0,r1              ;1060
00005a  0309              LSLS     r1,r1,#12             ;1060
00005c  1840              ADDS     r0,r0,r1              ;1060
00005e  13c9              ASRS     r1,r1,#15             ;1060
000060  4388              BICS     r0,r0,r1              ;1060
000062  e008              B        |L15.118|
                  |L15.100|
000064  05b0              LSLS     r0,r6,#22             ;1060
000066  0d80              LSRS     r0,r0,#22             ;1060
000068  2101              MOVS     r1,#1                 ;1060
00006a  02c9              LSLS     r1,r1,#11             ;1060
00006c  1840              ADDS     r0,r0,r1              ;1060
00006e  0089              LSLS     r1,r1,#2              ;1060
000070  1840              ADDS     r0,r0,r1              ;1060
000072  10c9              ASRS     r1,r1,#3              ;1060
000074  4388              BICS     r0,r0,r1              ;1060
                  |L15.118|
000076  6821              LDR      r1,[r4,#0]            ;1060
000078  6048              STR      r0,[r1,#4]            ;1060
00007a  f7fffffe          BL       HAL_GetTick
00007e  9001              STR      r0,[sp,#4]            ;1064
000080  e013              B        |L15.170|
                  |L15.130|
000082  1c68              ADDS     r0,r5,#1              ;1067
000084  2800              CMP      r0,#0                 ;1067
000086  d010              BEQ      |L15.170|
000088  2d00              CMP      r5,#0                 ;1069
00008a  d005              BEQ      |L15.152|
00008c  f7fffffe          BL       HAL_GetTick
000090  9901              LDR      r1,[sp,#4]            ;1069
000092  1a40              SUBS     r0,r0,r1              ;1069
000094  42a8              CMP      r0,r5                 ;1069
000096  d908              BLS      |L15.170|
                  |L15.152|
000098  2001              MOVS     r0,#1                 ;1072
00009a  64a0              STR      r0,[r4,#0x48]         ;1072
00009c  bf00              NOP                            ;1075
00009e  2100              MOVS     r1,#0                 ;1075
0000a0  2044              MOVS     r0,#0x44              ;1075
0000a2  5501              STRB     r1,[r0,r4]            ;1075
0000a4  bf00              NOP                            ;1075
0000a6  2003              MOVS     r0,#3                 ;1076
0000a8  e7be              B        |L15.40|
                  |L15.170|
0000aa  6820              LDR      r0,[r4,#0]            ;1065
0000ac  6980              LDR      r0,[r0,#0x18]         ;1065
0000ae  2120              MOVS     r1,#0x20              ;1065
0000b0  4008              ANDS     r0,r0,r1              ;1065
0000b2  0940              LSRS     r0,r0,#5              ;1065
0000b4  2800              CMP      r0,#0                 ;1065
0000b6  d109              BNE      |L15.204|
0000b8  6820              LDR      r0,[r4,#0]            ;1065
0000ba  6980              LDR      r0,[r0,#0x18]         ;1065
0000bc  2110              MOVS     r1,#0x10              ;1065
0000be  4008              ANDS     r0,r0,r1              ;1065
0000c0  0900              LSRS     r0,r0,#4              ;1065
0000c2  2800              CMP      r0,#0                 ;1065
0000c4  d102              BNE      |L15.204|
0000c6  6ca0              LDR      r0,[r4,#0x48]         ;1065
0000c8  2803              CMP      r0,#3                 ;1065
0000ca  d1da              BNE      |L15.130|
                  |L15.204|
0000cc  6820              LDR      r0,[r4,#0]            ;1082
0000ce  6980              LDR      r0,[r0,#0x18]         ;1082
0000d0  2110              MOVS     r1,#0x10              ;1082
0000d2  4008              ANDS     r0,r0,r1              ;1082
0000d4  0900              LSRS     r0,r0,#4              ;1082
0000d6  2800              CMP      r0,#0                 ;1082
0000d8  d116              BNE      |L15.264|
0000da  462b              MOV      r3,r5                 ;1085
0000dc  2200              MOVS     r2,#0                 ;1085
0000de  2120              MOVS     r1,#0x20              ;1085
0000e0  4620              MOV      r0,r4                 ;1085
0000e2  f7fffffe          BL       SMBUS_WaitOnFlagUntilTimeout
0000e6  2800              CMP      r0,#0                 ;1085
0000e8  d001              BEQ      |L15.238|
0000ea  2003              MOVS     r0,#3                 ;1087
0000ec  e79c              B        |L15.40|
                  |L15.238|
0000ee  2020              MOVS     r0,#0x20              ;1091
0000f0  6821              LDR      r1,[r4,#0]            ;1091
0000f2  61c8              STR      r0,[r1,#0x1c]         ;1091
0000f4  2001              MOVS     r0,#1                 ;1094
0000f6  64a0              STR      r0,[r4,#0x48]         ;1094
0000f8  bf00              NOP                            ;1097
0000fa  2100              MOVS     r1,#0                 ;1097
0000fc  2044              MOVS     r0,#0x44              ;1097
0000fe  5501              STRB     r1,[r0,r4]            ;1097
000100  bf00              NOP                            ;1097
000102  2000              MOVS     r0,#0                 ;1099
000104  e790              B        |L15.40|
                  |L15.262|
000106  e035              B        |L15.372|
                  |L15.264|
000108  462b              MOV      r3,r5                 ;1104
00010a  2200              MOVS     r2,#0                 ;1104
00010c  2120              MOVS     r1,#0x20              ;1104
00010e  4620              MOV      r0,r4                 ;1104
000110  f7fffffe          BL       SMBUS_WaitOnFlagUntilTimeout
000114  2800              CMP      r0,#0                 ;1104
000116  d001              BEQ      |L15.284|
000118  2003              MOVS     r0,#3                 ;1106
00011a  e785              B        |L15.40|
                  |L15.284|
00011c  2010              MOVS     r0,#0x10              ;1110
00011e  6821              LDR      r1,[r4,#0]            ;1110
000120  61c8              STR      r0,[r1,#0x1c]         ;1110
000122  2020              MOVS     r0,#0x20              ;1113
000124  6821              LDR      r1,[r4,#0]            ;1113
000126  61c8              STR      r0,[r1,#0x1c]         ;1113
000128  9800              LDR      r0,[sp,#0]            ;1117
00012a  1c41              ADDS     r1,r0,#1              ;1117
00012c  9100              STR      r1,[sp,#0]            ;1117
00012e  42b8              CMP      r0,r7                 ;1117
000130  d113              BNE      |L15.346|
000132  6820              LDR      r0,[r4,#0]            ;1120
000134  6840              LDR      r0,[r0,#4]            ;1120
000136  2101              MOVS     r1,#1                 ;1120
000138  0389              LSLS     r1,r1,#14             ;1120
00013a  4308              ORRS     r0,r0,r1              ;1120
00013c  6821              LDR      r1,[r4,#0]            ;1120
00013e  6048              STR      r0,[r1,#4]            ;1120
000140  462b              MOV      r3,r5                 ;1123
000142  2200              MOVS     r2,#0                 ;1123
000144  2120              MOVS     r1,#0x20              ;1123
000146  4620              MOV      r0,r4                 ;1123
000148  f7fffffe          BL       SMBUS_WaitOnFlagUntilTimeout
00014c  2800              CMP      r0,#0                 ;1123
00014e  d001              BEQ      |L15.340|
000150  2003              MOVS     r0,#3                 ;1125
000152  e769              B        |L15.40|
                  |L15.340|
000154  2020              MOVS     r0,#0x20              ;1129
000156  6821              LDR      r1,[r4,#0]            ;1129
000158  61c8              STR      r0,[r1,#0x1c]         ;1129
                  |L15.346|
00015a  9800              LDR      r0,[sp,#0]            ;1131
00015c  42b8              CMP      r0,r7                 ;1131
00015e  d200              BCS      |L15.354|
000160  e773              B        |L15.74|
                  |L15.354|
000162  2001              MOVS     r0,#1                 ;1133
000164  64a0              STR      r0,[r4,#0x48]         ;1133
000166  bf00              NOP                            ;1136
000168  2100              MOVS     r1,#0                 ;1136
00016a  2044              MOVS     r0,#0x44              ;1136
00016c  5501              STRB     r1,[r0,r4]            ;1136
00016e  bf00              NOP                            ;1136
000170  2003              MOVS     r0,#3                 ;1138
000172  e759              B        |L15.40|
                  |L15.372|
000174  2002              MOVS     r0,#2                 ;1142
000176  e757              B        |L15.40|
;;;1145   /**
                          ENDP


                          AREA ||i.HAL_SMBUS_ListenCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_ListenCpltCallback PROC
;;;1379     */
;;;1380   __weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
000000  4770              BX       lr
;;;1381   {
;;;1382     /* Prevent unused argument(s) compilation warning */
;;;1383     UNUSED(hsmbus);
;;;1384   
;;;1385     /* NOTE : This function should not be modified, when the callback is needed,
;;;1386               the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
;;;1387      */
;;;1388   }
;;;1389   
                          ENDP


                          AREA ||i.HAL_SMBUS_MasterRxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_MasterRxCpltCallback PROC
;;;1312     */
;;;1313   __weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
000000  4770              BX       lr
;;;1314   {
;;;1315     /* Prevent unused argument(s) compilation warning */
;;;1316     UNUSED(hsmbus);
;;;1317   
;;;1318     /* NOTE : This function should not be modified, when the callback is needed,
;;;1319               the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
;;;1320      */
;;;1321   }
;;;1322   
                          ENDP


                          AREA ||i.HAL_SMBUS_MasterTxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_MasterTxCpltCallback PROC
;;;1296     */
;;;1297   __weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
000000  4770              BX       lr
;;;1298   {
;;;1299     /* Prevent unused argument(s) compilation warning */
;;;1300     UNUSED(hsmbus);
;;;1301   
;;;1302     /* NOTE : This function should not be modified, when the callback is needed,
;;;1303               the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
;;;1304      */ 
;;;1305   }
;;;1306   
                          ENDP


                          AREA ||i.HAL_SMBUS_Master_Abort_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_Master_Abort_IT PROC
;;;726      */
;;;727    HAL_StatusTypeDef HAL_SMBUS_Master_Abort_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress)
000000  b538              PUSH     {r3-r5,lr}
;;;728    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;729      if(hsmbus->State == HAL_SMBUS_STATE_READY)
000006  6ca0              LDR      r0,[r4,#0x48]
000008  2801              CMP      r0,#1
00000a  d136              BNE      |L19.122|
;;;730      {
;;;731        /* Process Locked */
;;;732        __HAL_LOCK(hsmbus);
00000c  bf00              NOP      
00000e  2044              MOVS     r0,#0x44
000010  5d00              LDRB     r0,[r0,r4]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L19.26|
000016  2002              MOVS     r0,#2
                  |L19.24|
;;;733        
;;;734        /* Keep the same state as previous */
;;;735        /* to perform as well the call of the corresponding end of transfer callback */
;;;736        if(hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_TX)
;;;737        {
;;;738          hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_TX;
;;;739        }
;;;740        else if(hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_RX)
;;;741        {
;;;742          hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_RX;
;;;743        }
;;;744        else
;;;745        {
;;;746          /* Wrong usage of abort function */
;;;747          /* This function should be used only in case of abort monitored by master device */
;;;748          return HAL_ERROR;
;;;749        }
;;;750        hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
;;;751        
;;;752        /* Set NBYTES to 1 to generate a dummy read on SMBUS peripheral */
;;;753        /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
;;;754        SMBUS_TransferConfig(hsmbus, DevAddress, 1U, SMBUS_AUTOEND_MODE, SMBUS_NO_STARTSTOP);
;;;755        
;;;756        /* Process Unlocked */
;;;757        __HAL_UNLOCK(hsmbus); 
;;;758    
;;;759        /* Note : The SMBUS interrupts must be enabled after unlocking current process 
;;;760                  to avoid the risk of SMBUS interrupt handle execution before current
;;;761                  process unlock */
;;;762        if(hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
;;;763        {
;;;764          SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_TX);
;;;765        }
;;;766        else if(hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
;;;767        {
;;;768          SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX);
;;;769        }
;;;770        
;;;771        return HAL_OK;
;;;772      }
;;;773      else
;;;774      {
;;;775        return HAL_BUSY; 
;;;776      } 
;;;777    }
000018  bd38              POP      {r3-r5,pc}
                  |L19.26|
00001a  2101              MOVS     r1,#1                 ;732
00001c  2044              MOVS     r0,#0x44              ;732
00001e  5501              STRB     r1,[r0,r4]            ;732
000020  bf00              NOP                            ;732
000022  6c20              LDR      r0,[r4,#0x40]         ;736
000024  2812              CMP      r0,#0x12              ;736
000026  d101              BNE      |L19.44|
000028  64a0              STR      r0,[r4,#0x48]         ;738
00002a  e006              B        |L19.58|
                  |L19.44|
00002c  6c20              LDR      r0,[r4,#0x40]         ;740
00002e  2822              CMP      r0,#0x22              ;740
000030  d101              BNE      |L19.54|
000032  64a0              STR      r0,[r4,#0x48]         ;742
000034  e001              B        |L19.58|
                  |L19.54|
000036  2001              MOVS     r0,#1                 ;748
000038  e7ee              B        |L19.24|
                  |L19.58|
00003a  2000              MOVS     r0,#0                 ;750
00003c  64e0              STR      r0,[r4,#0x4c]         ;750
00003e  2301              MOVS     r3,#1                 ;754
000040  065b              LSLS     r3,r3,#25             ;754
000042  2201              MOVS     r2,#1                 ;754
000044  4629              MOV      r1,r5                 ;754
000046  9000              STR      r0,[sp,#0]            ;754
000048  4620              MOV      r0,r4                 ;754
00004a  f7fffffe          BL       SMBUS_TransferConfig
00004e  bf00              NOP                            ;757
000050  2100              MOVS     r1,#0                 ;757
000052  2044              MOVS     r0,#0x44              ;757
000054  5501              STRB     r1,[r0,r4]            ;757
000056  bf00              NOP                            ;757
000058  6ca0              LDR      r0,[r4,#0x48]         ;762
00005a  2812              CMP      r0,#0x12              ;762
00005c  d104              BNE      |L19.104|
00005e  21f2              MOVS     r1,#0xf2              ;764
000060  4620              MOV      r0,r4                 ;764
000062  f7fffffe          BL       SMBUS_Enable_IRQ
000066  e006              B        |L19.118|
                  |L19.104|
000068  6ca0              LDR      r0,[r4,#0x48]         ;766
00006a  2822              CMP      r0,#0x22              ;766
00006c  d103              BNE      |L19.118|
00006e  21d4              MOVS     r1,#0xd4              ;768
000070  4620              MOV      r0,r4                 ;768
000072  f7fffffe          BL       SMBUS_Enable_IRQ
                  |L19.118|
000076  2000              MOVS     r0,#0                 ;771
000078  e7ce              B        |L19.24|
                  |L19.122|
00007a  2002              MOVS     r0,#2                 ;775
00007c  e7cc              B        |L19.24|
;;;778    
                          ENDP


                          AREA ||i.HAL_SMBUS_Master_Receive_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_Master_Receive_IT PROC
;;;642      */
;;;643    HAL_StatusTypeDef HAL_SMBUS_Master_Receive_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
000000  b5ff              PUSH     {r0-r7,lr}
;;;644    {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  4616              MOV      r6,r2
000008  461d              MOV      r5,r3
00000a  9f0a              LDR      r7,[sp,#0x28]
;;;645      /* Check the parameters */
;;;646      assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));
;;;647    
;;;648      if(hsmbus->State == HAL_SMBUS_STATE_READY)
00000c  6ca0              LDR      r0,[r4,#0x48]
00000e  2801              CMP      r0,#1
000010  d171              BNE      |L20.246|
;;;649      {
;;;650        /* Process Locked */
;;;651        __HAL_LOCK(hsmbus);
000012  bf00              NOP      
000014  2044              MOVS     r0,#0x44
000016  5d00              LDRB     r0,[r0,r4]
000018  2801              CMP      r0,#1
00001a  d102              BNE      |L20.34|
00001c  2002              MOVS     r0,#2
                  |L20.30|
;;;652        
;;;653        hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_RX;
;;;654        hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
;;;655        
;;;656        /* Prepare transfer parameters */
;;;657        hsmbus->pBuffPtr = pData;
;;;658        hsmbus->XferCount = Size;
;;;659        hsmbus->XferOptions = XferOptions;
;;;660        
;;;661        /* In case of Quick command, remove autoend mode */
;;;662        /* Manage the stop generation by software */
;;;663        if(hsmbus->pBuffPtr == NULL)
;;;664        {
;;;665          hsmbus->XferOptions &= ~SMBUS_AUTOEND_MODE;
;;;666        }
;;;667        
;;;668        if(Size > MAX_NBYTE_SIZE)
;;;669        {
;;;670          hsmbus->XferSize = MAX_NBYTE_SIZE;
;;;671        }
;;;672        else
;;;673        {
;;;674          hsmbus->XferSize = Size;
;;;675        }
;;;676        
;;;677        /* Send Slave Address */
;;;678        /* Set NBYTES to write and reload if size > MAX_NBYTE_SIZE and generate RESTART */
;;;679        if( (hsmbus->XferSize == MAX_NBYTE_SIZE) && (hsmbus->XferSize < hsmbus->XferCount) )
;;;680        {
;;;681          SMBUS_TransferConfig(hsmbus,DevAddress,hsmbus->XferSize, SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE), SMBUS_GENERATE_START_READ);
;;;682        }
;;;683        else
;;;684        {
;;;685          /* If transfer direction not change, do not generate Restart Condition */
;;;686          /* Mean Previous state is same as current state */
;;;687          if((hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_RX) && (IS_SMBUS_TRANSFER_OTHER_OPTIONS_REQUEST(hsmbus->XferOptions) == 0))
;;;688          {
;;;689            SMBUS_TransferConfig(hsmbus,DevAddress,hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
;;;690          }
;;;691          /* Else transfer direction change, so generate Restart with new transfer direction */
;;;692          else
;;;693          {
;;;694            /* Convert OTHER_xxx XferOptions if any */
;;;695            SMBUS_ConvertOtherXferOptions(hsmbus);
;;;696    
;;;697            /* Handle Transfer */
;;;698            SMBUS_TransferConfig(hsmbus,DevAddress,hsmbus->XferSize, hsmbus->XferOptions, SMBUS_GENERATE_START_READ);
;;;699          }
;;;700        }
;;;701        
;;;702        /* Process Unlocked */
;;;703        __HAL_UNLOCK(hsmbus); 
;;;704    
;;;705        /* Note : The SMBUS interrupts must be enabled after unlocking current process 
;;;706                  to avoid the risk of SMBUS interrupt handle execution before current
;;;707                  process unlock */
;;;708        SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX);
;;;709        
;;;710        return HAL_OK;
;;;711      }
;;;712      else
;;;713      {
;;;714        return HAL_BUSY; 
;;;715      } 
;;;716    }
00001e  b005              ADD      sp,sp,#0x14
000020  bdf0              POP      {r4-r7,pc}
                  |L20.34|
000022  2101              MOVS     r1,#1                 ;651
000024  2044              MOVS     r0,#0x44              ;651
000026  5501              STRB     r1,[r0,r4]            ;651
000028  bf00              NOP                            ;651
00002a  2022              MOVS     r0,#0x22              ;653
00002c  64a0              STR      r0,[r4,#0x48]         ;653
00002e  2000              MOVS     r0,#0                 ;654
000030  64e0              STR      r0,[r4,#0x4c]         ;654
000032  6366              STR      r6,[r4,#0x34]         ;657
000034  8765              STRH     r5,[r4,#0x3a]         ;658
000036  63e7              STR      r7,[r4,#0x3c]         ;659
000038  6b60              LDR      r0,[r4,#0x34]         ;663
00003a  2800              CMP      r0,#0                 ;663
00003c  d103              BNE      |L20.70|
00003e  6be0              LDR      r0,[r4,#0x3c]         ;665
000040  0649              LSLS     r1,r1,#25             ;665
000042  4388              BICS     r0,r0,r1              ;665
000044  63e0              STR      r0,[r4,#0x3c]         ;665
                  |L20.70|
000046  2dff              CMP      r5,#0xff              ;668
000048  d902              BLS      |L20.80|
00004a  20ff              MOVS     r0,#0xff              ;670
00004c  8720              STRH     r0,[r4,#0x38]         ;670
00004e  e000              B        |L20.82|
                  |L20.80|
000050  8725              STRH     r5,[r4,#0x38]         ;674
                  |L20.82|
000052  8f20              LDRH     r0,[r4,#0x38]         ;679
000054  28ff              CMP      r0,#0xff              ;679
000056  d114              BNE      |L20.130|
000058  8f20              LDRH     r0,[r4,#0x38]         ;679
00005a  8f61              LDRH     r1,[r4,#0x3a]         ;679
00005c  4288              CMP      r0,r1                 ;679
00005e  da10              BGE      |L20.130|
000060  2009              MOVS     r0,#9                 ;681
000062  0280              LSLS     r0,r0,#10             ;681
000064  9000              STR      r0,[sp,#0]            ;681
000066  6be0              LDR      r0,[r4,#0x3c]         ;681
000068  2101              MOVS     r1,#1                 ;681
00006a  0689              LSLS     r1,r1,#26             ;681
00006c  4008              ANDS     r0,r0,r1              ;681
00006e  1089              ASRS     r1,r1,#2              ;681
000070  4308              ORRS     r0,r0,r1              ;681
000072  4603              MOV      r3,r0                 ;681
000074  8f20              LDRH     r0,[r4,#0x38]         ;681
000076  b2c2              UXTB     r2,r0                 ;681
000078  4620              MOV      r0,r4                 ;681
00007a  9902              LDR      r1,[sp,#8]            ;681
00007c  f7fffffe          BL       SMBUS_TransferConfig
000080  e02d              B        |L20.222|
                  |L20.130|
000082  6c20              LDR      r0,[r4,#0x40]         ;687
000084  2822              CMP      r0,#0x22              ;687
000086  d11d              BNE      |L20.196|
000088  6be0              LDR      r0,[r4,#0x3c]         ;687
00008a  28aa              CMP      r0,#0xaa              ;687
00008c  d00c              BEQ      |L20.168|
00008e  6be0              LDR      r0,[r4,#0x3c]         ;687
000090  2155              MOVS     r1,#0x55              ;687
000092  0449              LSLS     r1,r1,#17             ;687
000094  4288              CMP      r0,r1                 ;687
000096  d007              BEQ      |L20.168|
000098  6be0              LDR      r0,[r4,#0x3c]         ;687
00009a  1209              ASRS     r1,r1,#8              ;687
00009c  4288              CMP      r0,r1                 ;687
00009e  d003              BEQ      |L20.168|
0000a0  6be0              LDR      r0,[r4,#0x3c]         ;687
0000a2  0409              LSLS     r1,r1,#16             ;687
0000a4  4288              CMP      r0,r1                 ;687
0000a6  d101              BNE      |L20.172|
                  |L20.168|
0000a8  2001              MOVS     r0,#1                 ;687
0000aa  e000              B        |L20.174|
                  |L20.172|
0000ac  2000              MOVS     r0,#0                 ;687
                  |L20.174|
0000ae  2800              CMP      r0,#0                 ;687
0000b0  d108              BNE      |L20.196|
0000b2  9000              STR      r0,[sp,#0]            ;689
0000b4  6be3              LDR      r3,[r4,#0x3c]         ;689
0000b6  8f20              LDRH     r0,[r4,#0x38]         ;689
0000b8  b2c2              UXTB     r2,r0                 ;689
0000ba  4620              MOV      r0,r4                 ;689
0000bc  9902              LDR      r1,[sp,#8]            ;689
0000be  f7fffffe          BL       SMBUS_TransferConfig
0000c2  e00c              B        |L20.222|
                  |L20.196|
0000c4  4620              MOV      r0,r4                 ;695
0000c6  f7fffffe          BL       SMBUS_ConvertOtherXferOptions
0000ca  2009              MOVS     r0,#9                 ;698
0000cc  0280              LSLS     r0,r0,#10             ;698
0000ce  9000              STR      r0,[sp,#0]            ;698
0000d0  6be3              LDR      r3,[r4,#0x3c]         ;698
0000d2  8f20              LDRH     r0,[r4,#0x38]         ;698
0000d4  b2c2              UXTB     r2,r0                 ;698
0000d6  4620              MOV      r0,r4                 ;698
0000d8  9902              LDR      r1,[sp,#8]            ;698
0000da  f7fffffe          BL       SMBUS_TransferConfig
                  |L20.222|
0000de  bf00              NOP                            ;703
0000e0  2100              MOVS     r1,#0                 ;703
0000e2  2044              MOVS     r0,#0x44              ;703
0000e4  5501              STRB     r1,[r0,r4]            ;703
0000e6  bf00              NOP                            ;703
0000e8  21d4              MOVS     r1,#0xd4              ;708
0000ea  4620              MOV      r0,r4                 ;708
0000ec  f7fffffe          BL       SMBUS_Enable_IRQ
0000f0  2000              MOVS     r0,#0                 ;710
0000f2  e794              B        |L20.30|
0000f4  e7ff              B        |L20.246|
                  |L20.246|
0000f6  2002              MOVS     r0,#2                 ;714
0000f8  e791              B        |L20.30|
;;;717    
                          ENDP


                          AREA ||i.HAL_SMBUS_Master_Transmit_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_Master_Transmit_IT PROC
;;;549      */
;;;550    HAL_StatusTypeDef HAL_SMBUS_Master_Transmit_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
000000  b5ff              PUSH     {r0-r7,lr}
;;;551    {   
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  4616              MOV      r6,r2
000008  461d              MOV      r5,r3
00000a  9f0a              LDR      r7,[sp,#0x28]
;;;552      /* Check the parameters */
;;;553      assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));
;;;554    
;;;555      if(hsmbus->State == HAL_SMBUS_STATE_READY)
00000c  6ca0              LDR      r0,[r4,#0x48]
00000e  2801              CMP      r0,#1
000010  d17e              BNE      |L21.272|
;;;556      {
;;;557        /* Process Locked */
;;;558        __HAL_LOCK(hsmbus);
000012  bf00              NOP      
000014  2044              MOVS     r0,#0x44
000016  5d00              LDRB     r0,[r0,r4]
000018  2801              CMP      r0,#1
00001a  d102              BNE      |L21.34|
00001c  2002              MOVS     r0,#2
                  |L21.30|
;;;559        
;;;560        hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_TX;
;;;561        hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
;;;562        /* Prepare transfer parameters */
;;;563        hsmbus->pBuffPtr = pData;
;;;564        hsmbus->XferCount = Size;
;;;565        hsmbus->XferOptions = XferOptions;
;;;566    
;;;567        /* In case of Quick command, remove autoend mode */
;;;568        /* Manage the stop generation by software */
;;;569        if(hsmbus->pBuffPtr == NULL)
;;;570        {
;;;571          hsmbus->XferOptions &= ~SMBUS_AUTOEND_MODE;
;;;572        }
;;;573    
;;;574        if(Size > MAX_NBYTE_SIZE)
;;;575        {
;;;576          hsmbus->XferSize = MAX_NBYTE_SIZE;
;;;577        }
;;;578        else
;;;579        {
;;;580          hsmbus->XferSize = Size;
;;;581        }
;;;582    
;;;583        /* Send Slave Address */
;;;584        /* Set NBYTES to write and reload if size > MAX_NBYTE_SIZE and generate RESTART */
;;;585        if( (hsmbus->XferSize == MAX_NBYTE_SIZE) && (hsmbus->XferSize < hsmbus->XferCount) )
;;;586        {
;;;587          SMBUS_TransferConfig(hsmbus,DevAddress,hsmbus->XferSize, SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE), SMBUS_GENERATE_START_WRITE);
;;;588        }
;;;589        else
;;;590        {
;;;591          /* If transfer direction not change, do not generate Restart Condition */
;;;592          /* Mean Previous state is same as current state */
;;;593          if((hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_TX) && (IS_SMBUS_TRANSFER_OTHER_OPTIONS_REQUEST(hsmbus->XferOptions) == 0))
;;;594          {
;;;595            SMBUS_TransferConfig(hsmbus,DevAddress,hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
;;;596          }
;;;597          /* Else transfer direction change, so generate Restart with new transfer direction */
;;;598          else
;;;599          {
;;;600            /* Convert OTHER_xxx XferOptions if any */
;;;601            SMBUS_ConvertOtherXferOptions(hsmbus);
;;;602    
;;;603            /* Handle Transfer */
;;;604            SMBUS_TransferConfig(hsmbus,DevAddress,hsmbus->XferSize, hsmbus->XferOptions, SMBUS_GENERATE_START_WRITE);
;;;605          }
;;;606    
;;;607          /* If PEC mode is enable, size to transmit manage by SW part should be Size-1 byte, corresponding to PEC byte */
;;;608          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
;;;609          if(SMBUS_GET_PEC_MODE(hsmbus) != RESET)
;;;610          {
;;;611            hsmbus->XferSize--;
;;;612            hsmbus->XferCount--;
;;;613          }
;;;614        }
;;;615        
;;;616        /* Process Unlocked */
;;;617        __HAL_UNLOCK(hsmbus); 
;;;618    
;;;619        /* Note : The SMBUS interrupts must be enabled after unlocking current process 
;;;620                  to avoid the risk of SMBUS interrupt handle execution before current
;;;621                  process unlock */
;;;622        SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_TX);
;;;623        
;;;624        return HAL_OK;
;;;625      }
;;;626      else
;;;627      {
;;;628        return HAL_BUSY;
;;;629      } 
;;;630    }
00001e  b005              ADD      sp,sp,#0x14
000020  bdf0              POP      {r4-r7,pc}
                  |L21.34|
000022  2101              MOVS     r1,#1                 ;558
000024  2044              MOVS     r0,#0x44              ;558
000026  5501              STRB     r1,[r0,r4]            ;558
000028  bf00              NOP                            ;558
00002a  2012              MOVS     r0,#0x12              ;560
00002c  64a0              STR      r0,[r4,#0x48]         ;560
00002e  2000              MOVS     r0,#0                 ;561
000030  64e0              STR      r0,[r4,#0x4c]         ;561
000032  6366              STR      r6,[r4,#0x34]         ;563
000034  8765              STRH     r5,[r4,#0x3a]         ;564
000036  63e7              STR      r7,[r4,#0x3c]         ;565
000038  6b60              LDR      r0,[r4,#0x34]         ;569
00003a  2800              CMP      r0,#0                 ;569
00003c  d103              BNE      |L21.70|
00003e  6be0              LDR      r0,[r4,#0x3c]         ;571
000040  0649              LSLS     r1,r1,#25             ;571
000042  4388              BICS     r0,r0,r1              ;571
000044  63e0              STR      r0,[r4,#0x3c]         ;571
                  |L21.70|
000046  2dff              CMP      r5,#0xff              ;574
000048  d902              BLS      |L21.80|
00004a  20ff              MOVS     r0,#0xff              ;576
00004c  8720              STRH     r0,[r4,#0x38]         ;576
00004e  e000              B        |L21.82|
                  |L21.80|
000050  8725              STRH     r5,[r4,#0x38]         ;580
                  |L21.82|
000052  8f20              LDRH     r0,[r4,#0x38]         ;585
000054  28ff              CMP      r0,#0xff              ;585
000056  d114              BNE      |L21.130|
000058  8f20              LDRH     r0,[r4,#0x38]         ;585
00005a  8f61              LDRH     r1,[r4,#0x3a]         ;585
00005c  4288              CMP      r0,r1                 ;585
00005e  da10              BGE      |L21.130|
000060  2001              MOVS     r0,#1                 ;587
000062  0340              LSLS     r0,r0,#13             ;587
000064  9000              STR      r0,[sp,#0]            ;587
000066  6be0              LDR      r0,[r4,#0x3c]         ;587
000068  2101              MOVS     r1,#1                 ;587
00006a  0689              LSLS     r1,r1,#26             ;587
00006c  4008              ANDS     r0,r0,r1              ;587
00006e  1089              ASRS     r1,r1,#2              ;587
000070  4308              ORRS     r0,r0,r1              ;587
000072  4603              MOV      r3,r0                 ;587
000074  8f20              LDRH     r0,[r4,#0x38]         ;587
000076  b2c2              UXTB     r2,r0                 ;587
000078  4620              MOV      r0,r4                 ;587
00007a  9902              LDR      r1,[sp,#8]            ;587
00007c  f7fffffe          BL       SMBUS_TransferConfig
000080  e03a              B        |L21.248|
                  |L21.130|
000082  6c20              LDR      r0,[r4,#0x40]         ;593
000084  2812              CMP      r0,#0x12              ;593
000086  d11d              BNE      |L21.196|
000088  6be0              LDR      r0,[r4,#0x3c]         ;593
00008a  28aa              CMP      r0,#0xaa              ;593
00008c  d00c              BEQ      |L21.168|
00008e  6be0              LDR      r0,[r4,#0x3c]         ;593
000090  2155              MOVS     r1,#0x55              ;593
000092  0449              LSLS     r1,r1,#17             ;593
000094  4288              CMP      r0,r1                 ;593
000096  d007              BEQ      |L21.168|
000098  6be0              LDR      r0,[r4,#0x3c]         ;593
00009a  1209              ASRS     r1,r1,#8              ;593
00009c  4288              CMP      r0,r1                 ;593
00009e  d003              BEQ      |L21.168|
0000a0  6be0              LDR      r0,[r4,#0x3c]         ;593
0000a2  0409              LSLS     r1,r1,#16             ;593
0000a4  4288              CMP      r0,r1                 ;593
0000a6  d101              BNE      |L21.172|
                  |L21.168|
0000a8  2001              MOVS     r0,#1                 ;593
0000aa  e000              B        |L21.174|
                  |L21.172|
0000ac  2000              MOVS     r0,#0                 ;593
                  |L21.174|
0000ae  2800              CMP      r0,#0                 ;593
0000b0  d108              BNE      |L21.196|
0000b2  9000              STR      r0,[sp,#0]            ;595
0000b4  6be3              LDR      r3,[r4,#0x3c]         ;595
0000b6  8f20              LDRH     r0,[r4,#0x38]         ;595
0000b8  b2c2              UXTB     r2,r0                 ;595
0000ba  4620              MOV      r0,r4                 ;595
0000bc  9902              LDR      r1,[sp,#8]            ;595
0000be  f7fffffe          BL       SMBUS_TransferConfig
0000c2  e00c              B        |L21.222|
                  |L21.196|
0000c4  4620              MOV      r0,r4                 ;601
0000c6  f7fffffe          BL       SMBUS_ConvertOtherXferOptions
0000ca  2001              MOVS     r0,#1                 ;604
0000cc  0340              LSLS     r0,r0,#13             ;604
0000ce  9000              STR      r0,[sp,#0]            ;604
0000d0  6be3              LDR      r3,[r4,#0x3c]         ;604
0000d2  8f20              LDRH     r0,[r4,#0x38]         ;604
0000d4  b2c2              UXTB     r2,r0                 ;604
0000d6  4620              MOV      r0,r4                 ;604
0000d8  9902              LDR      r1,[sp,#8]            ;604
0000da  f7fffffe          BL       SMBUS_TransferConfig
                  |L21.222|
0000de  6820              LDR      r0,[r4,#0]            ;609
0000e0  6840              LDR      r0,[r0,#4]            ;609
0000e2  2101              MOVS     r1,#1                 ;609
0000e4  0689              LSLS     r1,r1,#26             ;609
0000e6  4008              ANDS     r0,r0,r1              ;609
0000e8  2800              CMP      r0,#0                 ;609
0000ea  d005              BEQ      |L21.248|
0000ec  8f20              LDRH     r0,[r4,#0x38]         ;611
0000ee  1e40              SUBS     r0,r0,#1              ;611
0000f0  8720              STRH     r0,[r4,#0x38]         ;611
0000f2  8f60              LDRH     r0,[r4,#0x3a]         ;612
0000f4  1e40              SUBS     r0,r0,#1              ;612
0000f6  8760              STRH     r0,[r4,#0x3a]         ;612
                  |L21.248|
0000f8  bf00              NOP                            ;617
0000fa  2100              MOVS     r1,#0                 ;617
0000fc  2044              MOVS     r0,#0x44              ;617
0000fe  5501              STRB     r1,[r0,r4]            ;617
000100  bf00              NOP                            ;617
000102  21f2              MOVS     r1,#0xf2              ;622
000104  4620              MOV      r0,r4                 ;622
000106  f7fffffe          BL       SMBUS_Enable_IRQ
00010a  2000              MOVS     r0,#0                 ;624
00010c  e787              B        |L21.30|
00010e  e7ff              B        |L21.272|
                  |L21.272|
000110  2002              MOVS     r0,#2                 ;628
000112  e784              B        |L21.30|
;;;631    
                          ENDP


                          AREA ||i.HAL_SMBUS_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_MspDeInit PROC
;;;382      */
;;;383    __weak void HAL_SMBUS_MspDeInit(SMBUS_HandleTypeDef *hsmbus)
000000  4770              BX       lr
;;;384    {
;;;385      /* Prevent unused argument(s) compilation warning */
;;;386      UNUSED(hsmbus);
;;;387    
;;;388      /* NOTE : This function should not be modified, when the callback is needed,
;;;389                the HAL_SMBUS_MspDeInit could be implemented in the user file
;;;390       */ 
;;;391    }
;;;392    
                          ENDP


                          AREA ||i.HAL_SMBUS_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_MspInit PROC
;;;366      */
;;;367    __weak void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef *hsmbus)
000000  4770              BX       lr
;;;368    {
;;;369      /* Prevent unused argument(s) compilation warning */
;;;370      UNUSED(hsmbus);
;;;371    
;;;372      /* NOTE : This function should not be modified, when the callback is needed,
;;;373                the HAL_SMBUS_MspInit could be implemented in the user file
;;;374       */ 
;;;375    }
;;;376    
                          ENDP


                          AREA ||i.HAL_SMBUS_SlaveRxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_SlaveRxCpltCallback PROC
;;;1343     */
;;;1344   __weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
000000  4770              BX       lr
;;;1345   {
;;;1346     /* Prevent unused argument(s) compilation warning */
;;;1347     UNUSED(hsmbus);
;;;1348   
;;;1349     /* NOTE : This function should not be modified, when the callback is needed,
;;;1350               the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
;;;1351      */
;;;1352   }
;;;1353   
                          ENDP


                          AREA ||i.HAL_SMBUS_SlaveTxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_SlaveTxCpltCallback PROC
;;;1327     */
;;;1328   __weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
000000  4770              BX       lr
;;;1329   {
;;;1330     /* Prevent unused argument(s) compilation warning */
;;;1331     UNUSED(hsmbus);
;;;1332   
;;;1333     /* NOTE : This function should not be modified, when the callback is needed,
;;;1334               the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
;;;1335      */ 
;;;1336   }
;;;1337   
                          ENDP


                          AREA ||i.HAL_SMBUS_Slave_Receive_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_Slave_Receive_IT PROC
;;;880      */
;;;881    HAL_StatusTypeDef HAL_SMBUS_Slave_Receive_IT(SMBUS_HandleTypeDef *hsmbus, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
000000  b5f8              PUSH     {r3-r7,lr}
;;;882    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;883      /* Check the parameters */
;;;884      assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));
;;;885    
;;;886      if(hsmbus->State == HAL_SMBUS_STATE_LISTEN)
00000a  6ca0              LDR      r0,[r4,#0x48]
00000c  2808              CMP      r0,#8
00000e  d160              BNE      |L26.210|
;;;887      {
;;;888        if((pData == NULL) || (Size == 0U)) 
000010  2e00              CMP      r6,#0
000012  d001              BEQ      |L26.24|
000014  2d00              CMP      r5,#0
000016  d101              BNE      |L26.28|
                  |L26.24|
;;;889        {
;;;890          return  HAL_ERROR;                                    
000018  2001              MOVS     r0,#1
                  |L26.26|
;;;891        }
;;;892        
;;;893        /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
;;;894        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR | SMBUS_IT_RX);
;;;895    
;;;896        /* Process Locked */
;;;897        __HAL_LOCK(hsmbus);
;;;898        
;;;899        hsmbus->State |= HAL_SMBUS_STATE_SLAVE_BUSY_RX;
;;;900        hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
;;;901        
;;;902        /* Set SBC bit to manage Acknowledge at each bit */
;;;903        hsmbus->Instance->CR1 |= I2C_CR1_SBC;
;;;904    
;;;905        /* Enable Address Acknowledge */
;;;906        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
;;;907    
;;;908        /* Prepare transfer parameters */
;;;909        hsmbus->pBuffPtr = pData;
;;;910        hsmbus->XferSize = Size;
;;;911        hsmbus->XferCount = Size;
;;;912        hsmbus->XferOptions = XferOptions;
;;;913    
;;;914        /* Convert OTHER_xxx XferOptions if any */
;;;915        SMBUS_ConvertOtherXferOptions(hsmbus);
;;;916    
;;;917        /* Set NBYTE to receive */
;;;918        /* If XferSize equal "1", or XferSize equal "2" with PEC requested (mean 1 data byte + 1 PEC byte */
;;;919        /* no need to set RELOAD bit mode, a ACK will be automatically generated in that case */
;;;920        /* else need to set RELOAD bit mode to generate an automatic ACK at each byte Received */
;;;921        /* This RELOAD bit will be reset for last BYTE to be receive in SMBUS_Slave_ISR */
;;;922        if((hsmbus->XferSize == 1U) || ((hsmbus->XferSize == 2U) && (SMBUS_GET_PEC_MODE(hsmbus) != RESET)))
;;;923        {
;;;924          SMBUS_TransferConfig(hsmbus, 0U, hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
;;;925        }
;;;926        else
;;;927        {
;;;928          SMBUS_TransferConfig(hsmbus, 0U, 1U, hsmbus->XferOptions | SMBUS_RELOAD_MODE, SMBUS_NO_STARTSTOP);
;;;929        }
;;;930    
;;;931        /* Clear ADDR flag after prepare the transfer parameters */
;;;932        /* This action will generate an acknowledge to the HOST */
;;;933        __HAL_SMBUS_CLEAR_FLAG(hsmbus,SMBUS_FLAG_ADDR);
;;;934    
;;;935        /* Process Unlocked */
;;;936        __HAL_UNLOCK(hsmbus); 
;;;937    
;;;938        /* Note : The SMBUS interrupts must be enabled after unlocking current process 
;;;939                  to avoid the risk of SMBUS interrupt handle execution before current
;;;940                  process unlock */
;;;941        /* REnable ADDR interrupt */
;;;942        SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_ADDR);
;;;943    
;;;944        return HAL_OK;
;;;945      }
;;;946      else
;;;947      {
;;;948        return HAL_ERROR; 
;;;949      }
;;;950    }
00001a  bdf8              POP      {r3-r7,pc}
                  |L26.28|
00001c  21fc              MOVS     r1,#0xfc              ;894
00001e  4620              MOV      r0,r4                 ;894
000020  f7fffffe          BL       SMBUS_Disable_IRQ
000024  bf00              NOP                            ;897
000026  2044              MOVS     r0,#0x44              ;897
000028  5d00              LDRB     r0,[r0,r4]            ;897
00002a  2801              CMP      r0,#1                 ;897
00002c  d101              BNE      |L26.50|
00002e  2002              MOVS     r0,#2                 ;897
000030  e7f3              B        |L26.26|
                  |L26.50|
000032  2101              MOVS     r1,#1                 ;897
000034  2044              MOVS     r0,#0x44              ;897
000036  5501              STRB     r1,[r0,r4]            ;897
000038  bf00              NOP                            ;897
00003a  6ca0              LDR      r0,[r4,#0x48]         ;899
00003c  2142              MOVS     r1,#0x42              ;899
00003e  4308              ORRS     r0,r0,r1              ;899
000040  64a0              STR      r0,[r4,#0x48]         ;899
000042  2000              MOVS     r0,#0                 ;900
000044  64e0              STR      r0,[r4,#0x4c]         ;900
000046  6820              LDR      r0,[r4,#0]            ;903
000048  6800              LDR      r0,[r0,#0]            ;903
00004a  2101              MOVS     r1,#1                 ;903
00004c  0409              LSLS     r1,r1,#16             ;903
00004e  4308              ORRS     r0,r0,r1              ;903
000050  6821              LDR      r1,[r4,#0]            ;903
000052  6008              STR      r0,[r1,#0]            ;903
000054  6820              LDR      r0,[r4,#0]            ;906
000056  6840              LDR      r0,[r0,#4]            ;906
000058  2101              MOVS     r1,#1                 ;906
00005a  03c9              LSLS     r1,r1,#15             ;906
00005c  4388              BICS     r0,r0,r1              ;906
00005e  6821              LDR      r1,[r4,#0]            ;906
000060  6048              STR      r0,[r1,#4]            ;906
000062  6366              STR      r6,[r4,#0x34]         ;909
000064  8725              STRH     r5,[r4,#0x38]         ;910
000066  8765              STRH     r5,[r4,#0x3a]         ;911
000068  63e7              STR      r7,[r4,#0x3c]         ;912
00006a  4620              MOV      r0,r4                 ;915
00006c  f7fffffe          BL       SMBUS_ConvertOtherXferOptions
000070  8f20              LDRH     r0,[r4,#0x38]         ;922
000072  2801              CMP      r0,#1                 ;922
000074  d009              BEQ      |L26.138|
000076  8f20              LDRH     r0,[r4,#0x38]         ;922
000078  2802              CMP      r0,#2                 ;922
00007a  d110              BNE      |L26.158|
00007c  6820              LDR      r0,[r4,#0]            ;922
00007e  6840              LDR      r0,[r0,#4]            ;922
000080  2101              MOVS     r1,#1                 ;922
000082  0689              LSLS     r1,r1,#26             ;922
000084  4008              ANDS     r0,r0,r1              ;922
000086  2800              CMP      r0,#0                 ;922
000088  d009              BEQ      |L26.158|
                  |L26.138|
00008a  2000              MOVS     r0,#0                 ;924
00008c  9000              STR      r0,[sp,#0]            ;924
00008e  6be3              LDR      r3,[r4,#0x3c]         ;924
000090  8f20              LDRH     r0,[r4,#0x38]         ;924
000092  b2c2              UXTB     r2,r0                 ;924
000094  2100              MOVS     r1,#0                 ;924
000096  4620              MOV      r0,r4                 ;924
000098  f7fffffe          BL       SMBUS_TransferConfig
00009c  e00b              B        |L26.182|
                  |L26.158|
00009e  2000              MOVS     r0,#0                 ;928
0000a0  9000              STR      r0,[sp,#0]            ;928
0000a2  6be0              LDR      r0,[r4,#0x3c]         ;928
0000a4  2101              MOVS     r1,#1                 ;928
0000a6  0609              LSLS     r1,r1,#24             ;928
0000a8  4308              ORRS     r0,r0,r1              ;928
0000aa  4603              MOV      r3,r0                 ;928
0000ac  2201              MOVS     r2,#1                 ;928
0000ae  2100              MOVS     r1,#0                 ;928
0000b0  4620              MOV      r0,r4                 ;928
0000b2  f7fffffe          BL       SMBUS_TransferConfig
                  |L26.182|
0000b6  2008              MOVS     r0,#8                 ;933
0000b8  6821              LDR      r1,[r4,#0]            ;933
0000ba  61c8              STR      r0,[r1,#0x1c]         ;933
0000bc  bf00              NOP                            ;936
0000be  2100              MOVS     r1,#0                 ;936
0000c0  2044              MOVS     r0,#0x44              ;936
0000c2  5501              STRB     r1,[r0,r4]            ;936
0000c4  bf00              NOP                            ;936
0000c6  21fc              MOVS     r1,#0xfc              ;942
0000c8  4620              MOV      r0,r4                 ;942
0000ca  f7fffffe          BL       SMBUS_Enable_IRQ
0000ce  2000              MOVS     r0,#0                 ;944
0000d0  e7a3              B        |L26.26|
                  |L26.210|
0000d2  2001              MOVS     r0,#1                 ;948
0000d4  e7a1              B        |L26.26|
;;;951    
                          ENDP


                          AREA ||i.HAL_SMBUS_Slave_Transmit_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMBUS_Slave_Transmit_IT PROC
;;;787      */
;;;788    HAL_StatusTypeDef HAL_SMBUS_Slave_Transmit_IT(SMBUS_HandleTypeDef *hsmbus, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
000000  b5f8              PUSH     {r3-r7,lr}
;;;789    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;790      /* Check the parameters */
;;;791      assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));
;;;792    
;;;793      if(hsmbus->State == HAL_SMBUS_STATE_LISTEN)
00000a  6ca0              LDR      r0,[r4,#0x48]
00000c  2808              CMP      r0,#8
00000e  d170              BNE      |L27.242|
;;;794      {
;;;795        if((pData == NULL) || (Size == 0U)) 
000010  2e00              CMP      r6,#0
000012  d001              BEQ      |L27.24|
000014  2d00              CMP      r5,#0
000016  d101              BNE      |L27.28|
                  |L27.24|
;;;796        {
;;;797          return  HAL_ERROR;                                    
000018  2001              MOVS     r0,#1
                  |L27.26|
;;;798        }
;;;799    
;;;800        /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
;;;801        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR | SMBUS_IT_TX);
;;;802    
;;;803        /* Process Locked */
;;;804        __HAL_LOCK(hsmbus);
;;;805        
;;;806        hsmbus->State |= HAL_SMBUS_STATE_SLAVE_BUSY_TX;
;;;807        hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
;;;808        
;;;809        /* Set SBC bit to manage Acknowledge at each bit */
;;;810        hsmbus->Instance->CR1 |= I2C_CR1_SBC;
;;;811    
;;;812        /* Enable Address Acknowledge */
;;;813        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
;;;814    
;;;815        /* Prepare transfer parameters */
;;;816        hsmbus->pBuffPtr = pData;
;;;817        hsmbus->XferCount = Size;
;;;818        hsmbus->XferOptions = XferOptions;
;;;819    
;;;820        /* Convert OTHER_xxx XferOptions if any */
;;;821        SMBUS_ConvertOtherXferOptions(hsmbus);
;;;822    
;;;823        if(Size > MAX_NBYTE_SIZE)
;;;824        {
;;;825          hsmbus->XferSize = MAX_NBYTE_SIZE;
;;;826        }
;;;827        else
;;;828        {
;;;829          hsmbus->XferSize = Size;
;;;830        }
;;;831    
;;;832        /* Set NBYTES to write and reload if size > MAX_NBYTE_SIZE and generate RESTART */
;;;833        if( (hsmbus->XferSize == MAX_NBYTE_SIZE) && (hsmbus->XferSize < hsmbus->XferCount) )
;;;834        {
;;;835          SMBUS_TransferConfig(hsmbus, 0U,hsmbus->XferSize, SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE), SMBUS_NO_STARTSTOP);
;;;836        }
;;;837        else
;;;838        {
;;;839          /* Set NBYTE to transmit */
;;;840          SMBUS_TransferConfig(hsmbus, 0U,hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
;;;841    
;;;842          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
;;;843          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
;;;844          if(SMBUS_GET_PEC_MODE(hsmbus) != RESET)
;;;845          {
;;;846            hsmbus->XferSize--;
;;;847            hsmbus->XferCount--;
;;;848          }
;;;849        }
;;;850        
;;;851        /* Clear ADDR flag after prepare the transfer parameters */
;;;852        /* This action will generate an acknowledge to the HOST */
;;;853        __HAL_SMBUS_CLEAR_FLAG(hsmbus,SMBUS_FLAG_ADDR);
;;;854    
;;;855        /* Process Unlocked */
;;;856        __HAL_UNLOCK(hsmbus); 
;;;857    
;;;858        /* Note : The SMBUS interrupts must be enabled after unlocking current process 
;;;859                  to avoid the risk of SMBUS interrupt handle execution before current
;;;860                  process unlock */
;;;861        /* REnable ADDR interrupt */
;;;862        SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_TX | SMBUS_IT_ADDR);
;;;863    
;;;864        return HAL_OK;
;;;865      }
;;;866      else
;;;867      {
;;;868        return HAL_ERROR; 
;;;869      } 
;;;870    }
00001a  bdf8              POP      {r3-r7,pc}
                  |L27.28|
00001c  21fa              MOVS     r1,#0xfa              ;801
00001e  4620              MOV      r0,r4                 ;801
000020  f7fffffe          BL       SMBUS_Disable_IRQ
000024  bf00              NOP                            ;804
000026  2044              MOVS     r0,#0x44              ;804
000028  5d00              LDRB     r0,[r0,r4]            ;804
00002a  2801              CMP      r0,#1                 ;804
00002c  d101              BNE      |L27.50|
00002e  2002              MOVS     r0,#2                 ;804
000030  e7f3              B        |L27.26|
                  |L27.50|
000032  2101              MOVS     r1,#1                 ;804
000034  2044              MOVS     r0,#0x44              ;804
000036  5501              STRB     r1,[r0,r4]            ;804
000038  bf00              NOP                            ;804
00003a  6ca0              LDR      r0,[r4,#0x48]         ;806
00003c  2132              MOVS     r1,#0x32              ;806
00003e  4308              ORRS     r0,r0,r1              ;806
000040  64a0              STR      r0,[r4,#0x48]         ;806
000042  2000              MOVS     r0,#0                 ;807
000044  64e0              STR      r0,[r4,#0x4c]         ;807
000046  6820              LDR      r0,[r4,#0]            ;810
000048  6800              LDR      r0,[r0,#0]            ;810
00004a  2101              MOVS     r1,#1                 ;810
00004c  0409              LSLS     r1,r1,#16             ;810
00004e  4308              ORRS     r0,r0,r1              ;810
000050  6821              LDR      r1,[r4,#0]            ;810
000052  6008              STR      r0,[r1,#0]            ;810
000054  6820              LDR      r0,[r4,#0]            ;813
000056  6840              LDR      r0,[r0,#4]            ;813
000058  2101              MOVS     r1,#1                 ;813
00005a  03c9              LSLS     r1,r1,#15             ;813
00005c  4388              BICS     r0,r0,r1              ;813
00005e  6821              LDR      r1,[r4,#0]            ;813
000060  6048              STR      r0,[r1,#4]            ;813
000062  6366              STR      r6,[r4,#0x34]         ;816
000064  8765              STRH     r5,[r4,#0x3a]         ;817
000066  63e7              STR      r7,[r4,#0x3c]         ;818
000068  4620              MOV      r0,r4                 ;821
00006a  f7fffffe          BL       SMBUS_ConvertOtherXferOptions
00006e  2dff              CMP      r5,#0xff              ;823
000070  d902              BLS      |L27.120|
000072  20ff              MOVS     r0,#0xff              ;825
000074  8720              STRH     r0,[r4,#0x38]         ;825
000076  e000              B        |L27.122|
                  |L27.120|
000078  8725              STRH     r5,[r4,#0x38]         ;829
                  |L27.122|
00007a  8f20              LDRH     r0,[r4,#0x38]         ;833
00007c  28ff              CMP      r0,#0xff              ;833
00007e  d113              BNE      |L27.168|
000080  8f20              LDRH     r0,[r4,#0x38]         ;833
000082  8f61              LDRH     r1,[r4,#0x3a]         ;833
000084  4288              CMP      r0,r1                 ;833
000086  da0f              BGE      |L27.168|
000088  2000              MOVS     r0,#0                 ;835
00008a  9000              STR      r0,[sp,#0]            ;835
00008c  6be0              LDR      r0,[r4,#0x3c]         ;835
00008e  2101              MOVS     r1,#1                 ;835
000090  0689              LSLS     r1,r1,#26             ;835
000092  4008              ANDS     r0,r0,r1              ;835
000094  1089              ASRS     r1,r1,#2              ;835
000096  4308              ORRS     r0,r0,r1              ;835
000098  4603              MOV      r3,r0                 ;835
00009a  8f20              LDRH     r0,[r4,#0x38]         ;835
00009c  b2c2              UXTB     r2,r0                 ;835
00009e  2100              MOVS     r1,#0                 ;835
0000a0  4620              MOV      r0,r4                 ;835
0000a2  f7fffffe          BL       SMBUS_TransferConfig
0000a6  e015              B        |L27.212|
                  |L27.168|
0000a8  2000              MOVS     r0,#0                 ;840
0000aa  9000              STR      r0,[sp,#0]            ;840
0000ac  6be3              LDR      r3,[r4,#0x3c]         ;840
0000ae  8f20              LDRH     r0,[r4,#0x38]         ;840
0000b0  b2c2              UXTB     r2,r0                 ;840
0000b2  2100              MOVS     r1,#0                 ;840
0000b4  4620              MOV      r0,r4                 ;840
0000b6  f7fffffe          BL       SMBUS_TransferConfig
0000ba  6820              LDR      r0,[r4,#0]            ;844
0000bc  6840              LDR      r0,[r0,#4]            ;844
0000be  2101              MOVS     r1,#1                 ;844
0000c0  0689              LSLS     r1,r1,#26             ;844
0000c2  4008              ANDS     r0,r0,r1              ;844
0000c4  2800              CMP      r0,#0                 ;844
0000c6  d005              BEQ      |L27.212|
0000c8  8f20              LDRH     r0,[r4,#0x38]         ;846
0000ca  1e40              SUBS     r0,r0,#1              ;846
0000cc  8720              STRH     r0,[r4,#0x38]         ;846
0000ce  8f60              LDRH     r0,[r4,#0x3a]         ;847
0000d0  1e40              SUBS     r0,r0,#1              ;847
0000d2  8760              STRH     r0,[r4,#0x3a]         ;847
                  |L27.212|
0000d4  2008              MOVS     r0,#8                 ;853
0000d6  6821              LDR      r1,[r4,#0]            ;853
0000d8  61c8              STR      r0,[r1,#0x1c]         ;853
0000da  bf00              NOP                            ;856
0000dc  2100              MOVS     r1,#0                 ;856
0000de  2044              MOVS     r0,#0x44              ;856
0000e0  5501              STRB     r1,[r0,r4]            ;856
0000e2  bf00              NOP                            ;856
0000e4  21fa              MOVS     r1,#0xfa              ;862
0000e6  4620              MOV      r0,r4                 ;862
0000e8  f7fffffe          BL       SMBUS_Enable_IRQ
0000ec  2000              MOVS     r0,#0                 ;864
0000ee  e794              B        |L27.26|
0000f0  e7ff              B        |L27.242|
                  |L27.242|
0000f2  2001              MOVS     r0,#1                 ;868
0000f4  e791              B        |L27.26|
;;;871    
                          ENDP


                          AREA ||i.SMBUS_ConvertOtherXferOptions||, CODE, READONLY, ALIGN=1

                  SMBUS_ConvertOtherXferOptions PROC
;;;2106     */
;;;2107   static void SMBUS_ConvertOtherXferOptions(SMBUS_HandleTypeDef *hsmbus)
000000  6bc1              LDR      r1,[r0,#0x3c]
;;;2108   {
;;;2109     /* if user set XferOptions to SMBUS_OTHER_FRAME_NO_PEC   */
;;;2110     /* it request implicitly to generate a restart condition */
;;;2111     /* set XferOptions to SMBUS_FIRST_FRAME                  */
;;;2112     if(hsmbus->XferOptions == SMBUS_OTHER_FRAME_NO_PEC)
000002  29aa              CMP      r1,#0xaa
000004  d102              BNE      |L28.12|
;;;2113     {
;;;2114       hsmbus->XferOptions = SMBUS_FIRST_FRAME;
000006  2100              MOVS     r1,#0
000008  63c1              STR      r1,[r0,#0x3c]
00000a  e019              B        |L28.64|
                  |L28.12|
;;;2115     }
;;;2116     /* else if user set XferOptions to SMBUS_OTHER_FRAME_WITH_PEC */
;;;2117     /* it request implicitly to generate a restart condition      */
;;;2118     /* set XferOptions to SMBUS_FIRST_FRAME | SMBUS_SENDPEC_MODE  */
;;;2119     else if(hsmbus->XferOptions == SMBUS_OTHER_FRAME_WITH_PEC)
00000c  6bc1              LDR      r1,[r0,#0x3c]
00000e  2255              MOVS     r2,#0x55
000010  0252              LSLS     r2,r2,#9
000012  4291              CMP      r1,r2
000014  d103              BNE      |L28.30|
;;;2120     {
;;;2121       hsmbus->XferOptions = SMBUS_FIRST_FRAME | SMBUS_SENDPEC_MODE;
000016  2101              MOVS     r1,#1
000018  0689              LSLS     r1,r1,#26
00001a  63c1              STR      r1,[r0,#0x3c]
00001c  e010              B        |L28.64|
                  |L28.30|
;;;2122     }
;;;2123     /* else if user set XferOptions to SMBUS_OTHER_AND_LAST_FRAME_NO_PEC */
;;;2124     /* it request implicitly to generate a restart condition             */
;;;2125     /* then generate a stop condition at the end of transfer             */
;;;2126     /* set XferOptions to SMBUS_FIRST_AND_LAST_FRAME_NO_PEC              */
;;;2127     else if(hsmbus->XferOptions == SMBUS_OTHER_AND_LAST_FRAME_NO_PEC)
00001e  6bc1              LDR      r1,[r0,#0x3c]
000020  2255              MOVS     r2,#0x55
000022  0452              LSLS     r2,r2,#17
000024  4291              CMP      r1,r2
000026  d103              BNE      |L28.48|
;;;2128     {
;;;2129       hsmbus->XferOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC;
000028  2101              MOVS     r1,#1
00002a  0649              LSLS     r1,r1,#25
00002c  63c1              STR      r1,[r0,#0x3c]
00002e  e007              B        |L28.64|
                  |L28.48|
;;;2130     }
;;;2131     /* else if user set XferOptions to SMBUS_OTHER_AND_LAST_FRAME_WITH_PEC */
;;;2132     /* it request implicitly to generate a restart condition               */
;;;2133     /* then generate a stop condition at the end of transfer               */
;;;2134     /* set XferOptions to SMBUS_FIRST_AND_LAST_FRAME_WITH_PEC              */
;;;2135     else if(hsmbus->XferOptions == SMBUS_OTHER_AND_LAST_FRAME_WITH_PEC)
000030  6bc1              LDR      r1,[r0,#0x3c]
000032  2255              MOVS     r2,#0x55
000034  0652              LSLS     r2,r2,#25
000036  4291              CMP      r1,r2
000038  d102              BNE      |L28.64|
;;;2136     {
;;;2137       hsmbus->XferOptions = SMBUS_FIRST_AND_LAST_FRAME_WITH_PEC;
00003a  2103              MOVS     r1,#3
00003c  0649              LSLS     r1,r1,#25
00003e  63c1              STR      r1,[r0,#0x3c]
                  |L28.64|
;;;2138     }
;;;2139   }
000040  4770              BX       lr
;;;2140   /**
                          ENDP


                          AREA ||i.SMBUS_Disable_IRQ||, CODE, READONLY, ALIGN=1

                  SMBUS_Disable_IRQ PROC
;;;1934     */
;;;1935   static HAL_StatusTypeDef SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint16_t InterruptRequest) 
000000  b510              PUSH     {r4,lr}
;;;1936   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1937     uint32_t tmpisr = 0U;
000006  2100              MOVS     r1,#0
;;;1938   
;;;1939     if( ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT) && (hsmbus->State == HAL_SMBUS_STATE_READY) )
000008  2080              MOVS     r0,#0x80
00000a  4018              ANDS     r0,r0,r3
00000c  2880              CMP      r0,#0x80
00000e  d104              BNE      |L29.26|
000010  6c90              LDR      r0,[r2,#0x48]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L29.26|
;;;1940     {
;;;1941       /* Disable ERR interrupt */
;;;1942       tmpisr |= SMBUS_IT_ERRI;
000016  2080              MOVS     r0,#0x80
000018  4301              ORRS     r1,r1,r0
                  |L29.26|
;;;1943     }
;;;1944     
;;;1945     if((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
00001a  20f2              MOVS     r0,#0xf2
00001c  4018              ANDS     r0,r0,r3
00001e  28f2              CMP      r0,#0xf2
000020  d116              BNE      |L29.80|
;;;1946     {
;;;1947       /* Disable TC, STOP, NACK, TXI interrupt */
;;;1948       tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
000022  2042              MOVS     r0,#0x42
000024  4301              ORRS     r1,r1,r0
;;;1949       
;;;1950       if((SMBUS_GET_ALERT_ENABLED(hsmbus) == RESET)
000026  6810              LDR      r0,[r2,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  2401              MOVS     r4,#1
00002c  05a4              LSLS     r4,r4,#22
00002e  4020              ANDS     r0,r0,r4
000030  2800              CMP      r0,#0
000032  d106              BNE      |L29.66|
;;;1951          && ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
000034  6c90              LDR      r0,[r2,#0x48]
000036  2408              MOVS     r4,#8
000038  4020              ANDS     r0,r0,r4
00003a  2808              CMP      r0,#8
00003c  d001              BEQ      |L29.66|
;;;1952       {
;;;1953         /* Disable ERR interrupt */
;;;1954         tmpisr |= SMBUS_IT_ERRI;
00003e  2080              MOVS     r0,#0x80
000040  4301              ORRS     r1,r1,r0
                  |L29.66|
;;;1955       }
;;;1956       
;;;1957       if((hsmbus->State & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
000042  6c90              LDR      r0,[r2,#0x48]
000044  2408              MOVS     r4,#8
000046  4020              ANDS     r0,r0,r4
000048  2808              CMP      r0,#8
00004a  d001              BEQ      |L29.80|
;;;1958       {
;;;1959         /* Disable STOPI, NACKI */
;;;1960         tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
00004c  2030              MOVS     r0,#0x30
00004e  4301              ORRS     r1,r1,r0
                  |L29.80|
;;;1961       }
;;;1962     }
;;;1963     
;;;1964     if((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
000050  20d4              MOVS     r0,#0xd4
000052  4018              ANDS     r0,r0,r3
000054  28d4              CMP      r0,#0xd4
000056  d116              BNE      |L29.134|
;;;1965     {
;;;1966       /* Disable TC, STOP, NACK, RXI interrupt */
;;;1967       tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
000058  2044              MOVS     r0,#0x44
00005a  4301              ORRS     r1,r1,r0
;;;1968       
;;;1969       if((SMBUS_GET_ALERT_ENABLED(hsmbus) == RESET)
00005c  6810              LDR      r0,[r2,#0]
00005e  6800              LDR      r0,[r0,#0]
000060  2401              MOVS     r4,#1
000062  05a4              LSLS     r4,r4,#22
000064  4020              ANDS     r0,r0,r4
000066  2800              CMP      r0,#0
000068  d106              BNE      |L29.120|
;;;1970          && ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
00006a  6c90              LDR      r0,[r2,#0x48]
00006c  2408              MOVS     r4,#8
00006e  4020              ANDS     r0,r0,r4
000070  2808              CMP      r0,#8
000072  d001              BEQ      |L29.120|
;;;1971       {
;;;1972         /* Disable ERR interrupt */
;;;1973         tmpisr |= SMBUS_IT_ERRI;
000074  2080              MOVS     r0,#0x80
000076  4301              ORRS     r1,r1,r0
                  |L29.120|
;;;1974       }
;;;1975   
;;;1976       if((hsmbus->State & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
000078  6c90              LDR      r0,[r2,#0x48]
00007a  2408              MOVS     r4,#8
00007c  4020              ANDS     r0,r0,r4
00007e  2808              CMP      r0,#8
000080  d001              BEQ      |L29.134|
;;;1977       {
;;;1978         /* Disable STOPI, NACKI */
;;;1979         tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
000082  2030              MOVS     r0,#0x30
000084  4301              ORRS     r1,r1,r0
                  |L29.134|
;;;1980       }
;;;1981     }
;;;1982     
;;;1983     if((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
000086  2038              MOVS     r0,#0x38
000088  4018              ANDS     r0,r0,r3
00008a  2838              CMP      r0,#0x38
00008c  d109              BNE      |L29.162|
;;;1984     {
;;;1985       /* Enable ADDR, STOP interrupt */
;;;1986       tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
00008e  4301              ORRS     r1,r1,r0
;;;1987   
;;;1988       if(SMBUS_GET_ALERT_ENABLED(hsmbus) == RESET) 
000090  6810              LDR      r0,[r2,#0]
000092  6800              LDR      r0,[r0,#0]
000094  2401              MOVS     r4,#1
000096  05a4              LSLS     r4,r4,#22
000098  4020              ANDS     r0,r0,r4
00009a  2800              CMP      r0,#0
00009c  d101              BNE      |L29.162|
;;;1989       {
;;;1990         /* Disable ERR interrupt */
;;;1991         tmpisr |= SMBUS_IT_ERRI;
00009e  2080              MOVS     r0,#0x80
0000a0  4301              ORRS     r1,r1,r0
                  |L29.162|
;;;1992       }
;;;1993     }
;;;1994   
;;;1995     /* Disable interrupts only at the end */
;;;1996     /* to avoid a breaking situation like at "t" time */
;;;1997     /* all disable interrupts request are not done */
;;;1998     __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
0000a2  6810              LDR      r0,[r2,#0]
0000a4  6800              LDR      r0,[r0,#0]
0000a6  4388              BICS     r0,r0,r1
0000a8  6814              LDR      r4,[r2,#0]
0000aa  6020              STR      r0,[r4,#0]
;;;1999     
;;;2000     return HAL_OK;
0000ac  2000              MOVS     r0,#0
;;;2001   }
0000ae  bd10              POP      {r4,pc}
;;;2002   /**
                          ENDP


                          AREA ||i.SMBUS_Enable_IRQ||, CODE, READONLY, ALIGN=1

                  SMBUS_Enable_IRQ PROC
;;;1892     */
;;;1893   static HAL_StatusTypeDef SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint16_t InterruptRequest) 
000000  b510              PUSH     {r4,lr}
;;;1894   {
000002  4603              MOV      r3,r0
;;;1895     uint32_t tmpisr = 0U;
000004  2200              MOVS     r2,#0
;;;1896   
;;;1897     if((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
000006  2080              MOVS     r0,#0x80
000008  4008              ANDS     r0,r0,r1
00000a  2880              CMP      r0,#0x80
00000c  d100              BNE      |L30.16|
;;;1898     {
;;;1899       /* Enable ERR interrupt */
;;;1900       tmpisr |= SMBUS_IT_ERRI;
00000e  4302              ORRS     r2,r2,r0
                  |L30.16|
;;;1901     }
;;;1902     
;;;1903     if((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
000010  2038              MOVS     r0,#0x38
000012  4008              ANDS     r0,r0,r1
000014  2838              CMP      r0,#0x38
000016  d101              BNE      |L30.28|
;;;1904     {
;;;1905       /* Enable ADDR, STOP interrupt */
;;;1906       tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
000018  20b8              MOVS     r0,#0xb8
00001a  4302              ORRS     r2,r2,r0
                  |L30.28|
;;;1907     }
;;;1908     
;;;1909     if((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
00001c  20f2              MOVS     r0,#0xf2
00001e  4008              ANDS     r0,r0,r1
000020  28f2              CMP      r0,#0xf2
000022  d100              BNE      |L30.38|
;;;1910     {
;;;1911       /* Enable ERR, TC, STOP, NACK, RXI interrupt */
;;;1912       tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
000024  4302              ORRS     r2,r2,r0
                  |L30.38|
;;;1913     }
;;;1914     
;;;1915     if((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
000026  20d4              MOVS     r0,#0xd4
000028  4008              ANDS     r0,r0,r1
00002a  28d4              CMP      r0,#0xd4
00002c  d101              BNE      |L30.50|
;;;1916     {
;;;1917       /* Enable ERR, TC, STOP, NACK, TXI interrupt */
;;;1918       tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
00002e  20f4              MOVS     r0,#0xf4
000030  4302              ORRS     r2,r2,r0
                  |L30.50|
;;;1919     }
;;;1920     
;;;1921     /* Enable interrupts only at the end */
;;;1922     /* to avoid the risk of SMBUS interrupt handle execution before */
;;;1923     /* all interrupts requested done */
;;;1924     __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
000032  6818              LDR      r0,[r3,#0]
000034  6800              LDR      r0,[r0,#0]
000036  4310              ORRS     r0,r0,r2
000038  681c              LDR      r4,[r3,#0]
00003a  6020              STR      r0,[r4,#0]
;;;1925   
;;;1926     return HAL_OK;     
00003c  2000              MOVS     r0,#0
;;;1927   }
00003e  bd10              POP      {r4,pc}
;;;1928   /**
                          ENDP


                          AREA ||i.SMBUS_Master_ISR||, CODE, READONLY, ALIGN=2

                  SMBUS_Master_ISR PROC
;;;1466     */
;;;1467   static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus) 
000000  b538              PUSH     {r3-r5,lr}
;;;1468   {
000002  4604              MOV      r4,r0
;;;1469     uint16_t DevAddress;
;;;1470   
;;;1471     /* Process Locked */
;;;1472     __HAL_LOCK(hsmbus);
000004  bf00              NOP      
000006  2044              MOVS     r0,#0x44
000008  5d00              LDRB     r0,[r0,r4]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L31.18|
00000e  2002              MOVS     r0,#2
                  |L31.16|
;;;1473     
;;;1474     if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF) != RESET)
;;;1475     {
;;;1476       /* Clear NACK Flag */
;;;1477       __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
;;;1478       
;;;1479       /* Set corresponding Error Code */
;;;1480       /* No need to generate STOP, it is automatically done */
;;;1481       hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
;;;1482   
;;;1483       /* Process Unlocked */
;;;1484       __HAL_UNLOCK(hsmbus);
;;;1485       
;;;1486       /* Call the Error callback to prevent upper layer */
;;;1487       HAL_SMBUS_ErrorCallback(hsmbus);
;;;1488     }
;;;1489     else if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_STOPF) != RESET)
;;;1490     {
;;;1491       /* Call the corresponding callback to inform upper layer of End of Transfer */
;;;1492       if(hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
;;;1493       {
;;;1494         /* Disable Interrupt */
;;;1495         SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
;;;1496   
;;;1497         /* Clear STOP Flag */
;;;1498         __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
;;;1499         
;;;1500         /* Clear Configuration Register 2 */
;;;1501         SMBUS_RESET_CR2(hsmbus);
;;;1502       
;;;1503         /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
;;;1504         /* Disable the selected SMBUS peripheral */
;;;1505         __HAL_SMBUS_DISABLE(hsmbus);
;;;1506   
;;;1507         hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
;;;1508         hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1509   
;;;1510         /* Process Unlocked */
;;;1511         __HAL_UNLOCK(hsmbus);
;;;1512     
;;;1513         /* REenable the selected SMBUS peripheral */
;;;1514         __HAL_SMBUS_ENABLE(hsmbus);
;;;1515   
;;;1516         HAL_SMBUS_MasterTxCpltCallback(hsmbus);
;;;1517       }
;;;1518       else if(hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
;;;1519       {
;;;1520         /* Store Last receive data if any */
;;;1521         if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
;;;1522         {
;;;1523           /* Read data from RXDR */
;;;1524           (*hsmbus->pBuffPtr++) = hsmbus->Instance->RXDR;
;;;1525   
;;;1526           if((hsmbus->XferSize > 0U))
;;;1527           {
;;;1528             hsmbus->XferSize--;
;;;1529             hsmbus->XferCount--;
;;;1530           }
;;;1531         }
;;;1532   
;;;1533         /* Disable Interrupt */
;;;1534         SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
;;;1535   
;;;1536         /* Clear STOP Flag */
;;;1537         __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
;;;1538         
;;;1539         /* Clear Configuration Register 2 */
;;;1540         SMBUS_RESET_CR2(hsmbus);
;;;1541       
;;;1542         hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
;;;1543         hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1544   
;;;1545         /* Process Unlocked */
;;;1546         __HAL_UNLOCK(hsmbus);
;;;1547     
;;;1548         HAL_SMBUS_MasterRxCpltCallback(hsmbus);
;;;1549       }
;;;1550     }
;;;1551     else if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
;;;1552     {  
;;;1553       /* Read data from RXDR */
;;;1554       (*hsmbus->pBuffPtr++) = hsmbus->Instance->RXDR;
;;;1555       hsmbus->XferSize--;
;;;1556       hsmbus->XferCount--;
;;;1557     }
;;;1558     else if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXIS) != RESET)
;;;1559     {
;;;1560       /* Write data to TXDR */
;;;1561       hsmbus->Instance->TXDR = (*hsmbus->pBuffPtr++);
;;;1562       hsmbus->XferSize--;
;;;1563       hsmbus->XferCount--;	
;;;1564     }
;;;1565     else if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TCR) != RESET)
;;;1566     {
;;;1567       if((hsmbus->XferSize == 0U)&&(hsmbus->XferCount != 0U))
;;;1568       {
;;;1569         DevAddress = (hsmbus->Instance->CR2 & I2C_CR2_SADD);
;;;1570         
;;;1571         if(hsmbus->XferCount > MAX_NBYTE_SIZE)
;;;1572         {    
;;;1573           SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE, (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)), SMBUS_NO_STARTSTOP);
;;;1574           hsmbus->XferSize = MAX_NBYTE_SIZE;
;;;1575         }
;;;1576         else
;;;1577         {
;;;1578           hsmbus->XferSize = hsmbus->XferCount;
;;;1579           SMBUS_TransferConfig(hsmbus,DevAddress,hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
;;;1580           /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
;;;1581           /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
;;;1582           if(SMBUS_GET_PEC_MODE(hsmbus) != RESET)
;;;1583           {
;;;1584             hsmbus->XferSize--;
;;;1585             hsmbus->XferCount--;
;;;1586           }
;;;1587         }
;;;1588       }
;;;1589       else if((hsmbus->XferSize == 0U)&&(hsmbus->XferCount == 0U))
;;;1590       {
;;;1591         /* Call TxCpltCallback() if no stop mode is set */
;;;1592         if(SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
;;;1593         {
;;;1594           /* Call the corresponding callback to inform upper layer of End of Transfer */
;;;1595           if(hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
;;;1596           {
;;;1597             /* Disable Interrupt */
;;;1598             SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
;;;1599             hsmbus->PreviousState = hsmbus->State;
;;;1600             hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1601   
;;;1602             /* Process Unlocked */
;;;1603             __HAL_UNLOCK(hsmbus);
;;;1604         
;;;1605             HAL_SMBUS_MasterTxCpltCallback(hsmbus);
;;;1606           }
;;;1607           else if(hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
;;;1608           {
;;;1609             SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
;;;1610             hsmbus->PreviousState = hsmbus->State;
;;;1611             hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1612   
;;;1613             /* Process Unlocked */
;;;1614             __HAL_UNLOCK(hsmbus);
;;;1615         
;;;1616             HAL_SMBUS_MasterRxCpltCallback(hsmbus);
;;;1617           }
;;;1618         }
;;;1619       }
;;;1620     }
;;;1621     else if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TC) != RESET)
;;;1622     {
;;;1623       if(hsmbus->XferCount == 0U)
;;;1624       {
;;;1625         /* Specific use case for Quick command */
;;;1626         if(hsmbus->pBuffPtr == NULL)
;;;1627         {
;;;1628           /* Generate a Stop command */
;;;1629           hsmbus->Instance->CR2 |= I2C_CR2_STOP;
;;;1630         }
;;;1631         /* Call TxCpltCallback() if no stop mode is set */
;;;1632         else if(SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
;;;1633         {
;;;1634           /* No Generate Stop, to permit restart mode */
;;;1635           /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */
;;;1636           
;;;1637           /* Call the corresponding callback to inform upper layer of End of Transfer */
;;;1638           if(hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
;;;1639           {
;;;1640             /* Disable Interrupt */
;;;1641             SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
;;;1642             hsmbus->PreviousState = hsmbus->State;
;;;1643             hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1644   
;;;1645             /* Process Unlocked */
;;;1646             __HAL_UNLOCK(hsmbus);
;;;1647         
;;;1648             HAL_SMBUS_MasterTxCpltCallback(hsmbus);
;;;1649           }
;;;1650           else if(hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
;;;1651           {
;;;1652             SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
;;;1653             hsmbus->PreviousState = hsmbus->State;
;;;1654             hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1655   
;;;1656             /* Process Unlocked */
;;;1657             __HAL_UNLOCK(hsmbus);
;;;1658         
;;;1659             HAL_SMBUS_MasterRxCpltCallback(hsmbus);
;;;1660           }
;;;1661         }
;;;1662       }
;;;1663     }
;;;1664       
;;;1665     /* Process Unlocked */
;;;1666     __HAL_UNLOCK(hsmbus); 
;;;1667     
;;;1668     return HAL_OK; 
;;;1669   }  
000010  bd38              POP      {r3-r5,pc}
                  |L31.18|
000012  2101              MOVS     r1,#1                 ;1472
000014  2044              MOVS     r0,#0x44              ;1472
000016  5501              STRB     r1,[r0,r4]            ;1472
000018  bf00              NOP                            ;1472
00001a  6820              LDR      r0,[r4,#0]            ;1474
00001c  6980              LDR      r0,[r0,#0x18]         ;1474
00001e  2110              MOVS     r1,#0x10              ;1474
000020  4008              ANDS     r0,r0,r1              ;1474
000022  0900              LSRS     r0,r0,#4              ;1474
000024  2800              CMP      r0,#0                 ;1474
000026  d00f              BEQ      |L31.72|
000028  2010              MOVS     r0,#0x10              ;1477
00002a  6821              LDR      r1,[r4,#0]            ;1477
00002c  61c8              STR      r0,[r1,#0x1c]         ;1477
00002e  6ce0              LDR      r0,[r4,#0x4c]         ;1481
000030  2104              MOVS     r1,#4                 ;1481
000032  4308              ORRS     r0,r0,r1              ;1481
000034  64e0              STR      r0,[r4,#0x4c]         ;1481
000036  bf00              NOP                            ;1484
000038  2100              MOVS     r1,#0                 ;1484
00003a  2044              MOVS     r0,#0x44              ;1484
00003c  5501              STRB     r1,[r0,r4]            ;1484
00003e  bf00              NOP                            ;1484
000040  4620              MOV      r0,r4                 ;1487
000042  f7fffffe          BL       HAL_SMBUS_ErrorCallback
                  |L31.70|
000046  e13e              B        |L31.710|
                  |L31.72|
000048  6820              LDR      r0,[r4,#0]            ;1489
00004a  6980              LDR      r0,[r0,#0x18]         ;1489
00004c  2120              MOVS     r1,#0x20              ;1489
00004e  4008              ANDS     r0,r0,r1              ;1489
000050  0940              LSRS     r0,r0,#5              ;1489
000052  2800              CMP      r0,#0                 ;1489
000054  d05a              BEQ      |L31.268|
000056  6ca0              LDR      r0,[r4,#0x48]         ;1492
000058  2812              CMP      r0,#0x12              ;1492
00005a  d124              BNE      |L31.166|
00005c  21f2              MOVS     r1,#0xf2              ;1495
00005e  4620              MOV      r0,r4                 ;1495
000060  f7fffffe          BL       SMBUS_Disable_IRQ
000064  2020              MOVS     r0,#0x20              ;1498
000066  6821              LDR      r1,[r4,#0]            ;1498
000068  61c8              STR      r0,[r1,#0x1c]         ;1498
00006a  6820              LDR      r0,[r4,#0]            ;1501
00006c  6840              LDR      r0,[r0,#4]            ;1501
00006e  4999              LDR      r1,|L31.724|
000070  4008              ANDS     r0,r0,r1              ;1501
000072  6821              LDR      r1,[r4,#0]            ;1501
000074  6048              STR      r0,[r1,#4]            ;1501
000076  6820              LDR      r0,[r4,#0]            ;1505
000078  6800              LDR      r0,[r0,#0]            ;1505
00007a  0840              LSRS     r0,r0,#1              ;1505
00007c  0040              LSLS     r0,r0,#1              ;1505
00007e  6821              LDR      r1,[r4,#0]            ;1505
000080  6008              STR      r0,[r1,#0]            ;1505
000082  2001              MOVS     r0,#1                 ;1507
000084  6420              STR      r0,[r4,#0x40]         ;1507
000086  64a0              STR      r0,[r4,#0x48]         ;1508
000088  bf00              NOP                            ;1511
00008a  2100              MOVS     r1,#0                 ;1511
00008c  2044              MOVS     r0,#0x44              ;1511
00008e  5501              STRB     r1,[r0,r4]            ;1511
000090  bf00              NOP                            ;1511
000092  6820              LDR      r0,[r4,#0]            ;1514
000094  6800              LDR      r0,[r0,#0]            ;1514
000096  2101              MOVS     r1,#1                 ;1514
000098  4308              ORRS     r0,r0,r1              ;1514
00009a  6821              LDR      r1,[r4,#0]            ;1514
00009c  6008              STR      r0,[r1,#0]            ;1514
00009e  4620              MOV      r0,r4                 ;1516
0000a0  f7fffffe          BL       HAL_SMBUS_MasterTxCpltCallback
0000a4  e10f              B        |L31.710|
                  |L31.166|
0000a6  6ca0              LDR      r0,[r4,#0x48]         ;1518
0000a8  2822              CMP      r0,#0x22              ;1518
0000aa  d1cc              BNE      |L31.70|
0000ac  6820              LDR      r0,[r4,#0]            ;1521
0000ae  6980              LDR      r0,[r0,#0x18]         ;1521
0000b0  2104              MOVS     r1,#4                 ;1521
0000b2  4008              ANDS     r0,r0,r1              ;1521
0000b4  0880              LSRS     r0,r0,#2              ;1521
0000b6  2800              CMP      r0,#0                 ;1521
0000b8  d00f              BEQ      |L31.218|
0000ba  6820              LDR      r0,[r4,#0]            ;1524
0000bc  6a40              LDR      r0,[r0,#0x24]         ;1524
0000be  b2c1              UXTB     r1,r0                 ;1524
0000c0  6b62              LDR      r2,[r4,#0x34]         ;1524
0000c2  1c50              ADDS     r0,r2,#1              ;1524
0000c4  6360              STR      r0,[r4,#0x34]         ;1524
0000c6  7011              STRB     r1,[r2,#0]            ;1524
0000c8  8f20              LDRH     r0,[r4,#0x38]         ;1526
0000ca  2800              CMP      r0,#0                 ;1526
0000cc  d005              BEQ      |L31.218|
0000ce  8f20              LDRH     r0,[r4,#0x38]         ;1528
0000d0  1e40              SUBS     r0,r0,#1              ;1528
0000d2  8720              STRH     r0,[r4,#0x38]         ;1528
0000d4  8f60              LDRH     r0,[r4,#0x3a]         ;1529
0000d6  1e40              SUBS     r0,r0,#1              ;1529
0000d8  8760              STRH     r0,[r4,#0x3a]         ;1529
                  |L31.218|
0000da  21d4              MOVS     r1,#0xd4              ;1534
0000dc  4620              MOV      r0,r4                 ;1534
0000de  f7fffffe          BL       SMBUS_Disable_IRQ
0000e2  2020              MOVS     r0,#0x20              ;1537
0000e4  6821              LDR      r1,[r4,#0]            ;1537
0000e6  61c8              STR      r0,[r1,#0x1c]         ;1537
0000e8  6820              LDR      r0,[r4,#0]            ;1540
0000ea  6840              LDR      r0,[r0,#4]            ;1540
0000ec  4979              LDR      r1,|L31.724|
0000ee  4008              ANDS     r0,r0,r1              ;1540
0000f0  6821              LDR      r1,[r4,#0]            ;1540
0000f2  6048              STR      r0,[r1,#4]            ;1540
0000f4  2001              MOVS     r0,#1                 ;1542
0000f6  6420              STR      r0,[r4,#0x40]         ;1542
0000f8  64a0              STR      r0,[r4,#0x48]         ;1543
0000fa  bf00              NOP                            ;1546
0000fc  2100              MOVS     r1,#0                 ;1546
0000fe  2044              MOVS     r0,#0x44              ;1546
000100  5501              STRB     r1,[r0,r4]            ;1546
000102  bf00              NOP                            ;1546
000104  4620              MOV      r0,r4                 ;1548
000106  f7fffffe          BL       HAL_SMBUS_MasterRxCpltCallback
00010a  e0dc              B        |L31.710|
                  |L31.268|
00010c  6820              LDR      r0,[r4,#0]            ;1551
00010e  6980              LDR      r0,[r0,#0x18]         ;1551
000110  2104              MOVS     r1,#4                 ;1551
000112  4008              ANDS     r0,r0,r1              ;1551
000114  0880              LSRS     r0,r0,#2              ;1551
000116  2800              CMP      r0,#0                 ;1551
000118  d00d              BEQ      |L31.310|
00011a  6820              LDR      r0,[r4,#0]            ;1554
00011c  6a40              LDR      r0,[r0,#0x24]         ;1554
00011e  b2c1              UXTB     r1,r0                 ;1554
000120  6b62              LDR      r2,[r4,#0x34]         ;1554
000122  1c50              ADDS     r0,r2,#1              ;1554
000124  6360              STR      r0,[r4,#0x34]         ;1554
000126  7011              STRB     r1,[r2,#0]            ;1554
000128  8f20              LDRH     r0,[r4,#0x38]         ;1555
00012a  1e40              SUBS     r0,r0,#1              ;1555
00012c  8720              STRH     r0,[r4,#0x38]         ;1555
00012e  8f60              LDRH     r0,[r4,#0x3a]         ;1556
000130  1e40              SUBS     r0,r0,#1              ;1556
000132  8760              STRH     r0,[r4,#0x3a]         ;1556
000134  e0c7              B        |L31.710|
                  |L31.310|
000136  6820              LDR      r0,[r4,#0]            ;1558
000138  6980              LDR      r0,[r0,#0x18]         ;1558
00013a  2102              MOVS     r1,#2                 ;1558
00013c  4008              ANDS     r0,r0,r1              ;1558
00013e  0840              LSRS     r0,r0,#1              ;1558
000140  2800              CMP      r0,#0                 ;1558
000142  d00c              BEQ      |L31.350|
000144  6b61              LDR      r1,[r4,#0x34]         ;1561
000146  1c48              ADDS     r0,r1,#1              ;1561
000148  6360              STR      r0,[r4,#0x34]         ;1561
00014a  7808              LDRB     r0,[r1,#0]            ;1561
00014c  6821              LDR      r1,[r4,#0]            ;1561
00014e  6288              STR      r0,[r1,#0x28]         ;1561
000150  8f20              LDRH     r0,[r4,#0x38]         ;1562
000152  1e40              SUBS     r0,r0,#1              ;1562
000154  8720              STRH     r0,[r4,#0x38]         ;1562
000156  8f60              LDRH     r0,[r4,#0x3a]         ;1563
000158  1e40              SUBS     r0,r0,#1              ;1563
00015a  8760              STRH     r0,[r4,#0x3a]         ;1563
00015c  e0b3              B        |L31.710|
                  |L31.350|
00015e  6820              LDR      r0,[r4,#0]            ;1565
000160  6980              LDR      r0,[r0,#0x18]         ;1565
000162  2180              MOVS     r1,#0x80              ;1565
000164  4008              ANDS     r0,r0,r1              ;1565
000166  09c0              LSRS     r0,r0,#7              ;1565
000168  2800              CMP      r0,#0                 ;1565
00016a  d06a              BEQ      |L31.578|
00016c  8f20              LDRH     r0,[r4,#0x38]         ;1567
00016e  2800              CMP      r0,#0                 ;1567
000170  d132              BNE      |L31.472|
000172  8f60              LDRH     r0,[r4,#0x3a]         ;1567
000174  2800              CMP      r0,#0                 ;1567
000176  d02f              BEQ      |L31.472|
000178  6820              LDR      r0,[r4,#0]            ;1569
00017a  6840              LDR      r0,[r0,#4]            ;1569
00017c  0585              LSLS     r5,r0,#22             ;1569
00017e  0dad              LSRS     r5,r5,#22             ;1569
000180  8f60              LDRH     r0,[r4,#0x3a]         ;1571
000182  28ff              CMP      r0,#0xff              ;1571
000184  d90f              BLS      |L31.422|
000186  2000              MOVS     r0,#0                 ;1573
000188  9000              STR      r0,[sp,#0]            ;1573
00018a  6be0              LDR      r0,[r4,#0x3c]         ;1573
00018c  04c9              LSLS     r1,r1,#19             ;1573
00018e  4008              ANDS     r0,r0,r1              ;1573
000190  1089              ASRS     r1,r1,#2              ;1573
000192  4308              ORRS     r0,r0,r1              ;1573
000194  4603              MOV      r3,r0                 ;1573
000196  22ff              MOVS     r2,#0xff              ;1573
000198  4629              MOV      r1,r5                 ;1573
00019a  4620              MOV      r0,r4                 ;1573
00019c  f7fffffe          BL       SMBUS_TransferConfig
0001a0  20ff              MOVS     r0,#0xff              ;1574
0001a2  8720              STRH     r0,[r4,#0x38]         ;1574
0001a4  e08f              B        |L31.710|
                  |L31.422|
0001a6  8f60              LDRH     r0,[r4,#0x3a]         ;1578
0001a8  8720              STRH     r0,[r4,#0x38]         ;1578
0001aa  2000              MOVS     r0,#0                 ;1579
0001ac  9000              STR      r0,[sp,#0]            ;1579
0001ae  6be3              LDR      r3,[r4,#0x3c]         ;1579
0001b0  8f20              LDRH     r0,[r4,#0x38]         ;1579
0001b2  b2c2              UXTB     r2,r0                 ;1579
0001b4  4629              MOV      r1,r5                 ;1579
0001b6  4620              MOV      r0,r4                 ;1579
0001b8  f7fffffe          BL       SMBUS_TransferConfig
0001bc  6820              LDR      r0,[r4,#0]            ;1582
0001be  6840              LDR      r0,[r0,#4]            ;1582
0001c0  2101              MOVS     r1,#1                 ;1582
0001c2  0689              LSLS     r1,r1,#26             ;1582
0001c4  4008              ANDS     r0,r0,r1              ;1582
0001c6  2800              CMP      r0,#0                 ;1582
0001c8  d07d              BEQ      |L31.710|
0001ca  8f20              LDRH     r0,[r4,#0x38]         ;1584
0001cc  1e40              SUBS     r0,r0,#1              ;1584
0001ce  8720              STRH     r0,[r4,#0x38]         ;1584
0001d0  8f60              LDRH     r0,[r4,#0x3a]         ;1585
0001d2  1e40              SUBS     r0,r0,#1              ;1585
0001d4  8760              STRH     r0,[r4,#0x3a]         ;1585
0001d6  e076              B        |L31.710|
                  |L31.472|
0001d8  8f20              LDRH     r0,[r4,#0x38]         ;1589
0001da  2800              CMP      r0,#0                 ;1589
0001dc  d173              BNE      |L31.710|
0001de  8f60              LDRH     r0,[r4,#0x3a]         ;1589
0001e0  2800              CMP      r0,#0                 ;1589
0001e2  d170              BNE      |L31.710|
0001e4  6820              LDR      r0,[r4,#0]            ;1592
0001e6  6840              LDR      r0,[r0,#4]            ;1592
0001e8  2101              MOVS     r1,#1                 ;1592
0001ea  0649              LSLS     r1,r1,#25             ;1592
0001ec  4008              ANDS     r0,r0,r1              ;1592
0001ee  4288              CMP      r0,r1                 ;1592
0001f0  d069              BEQ      |L31.710|
0001f2  6ca0              LDR      r0,[r4,#0x48]         ;1595
0001f4  2812              CMP      r0,#0x12              ;1595
0001f6  d110              BNE      |L31.538|
0001f8  21f2              MOVS     r1,#0xf2              ;1598
0001fa  4620              MOV      r0,r4                 ;1598
0001fc  f7fffffe          BL       SMBUS_Disable_IRQ
000200  6ca0              LDR      r0,[r4,#0x48]         ;1599
000202  6420              STR      r0,[r4,#0x40]         ;1599
000204  2001              MOVS     r0,#1                 ;1600
000206  64a0              STR      r0,[r4,#0x48]         ;1600
000208  bf00              NOP                            ;1603
00020a  2100              MOVS     r1,#0                 ;1603
00020c  2044              MOVS     r0,#0x44              ;1603
00020e  5501              STRB     r1,[r0,r4]            ;1603
000210  bf00              NOP                            ;1603
000212  4620              MOV      r0,r4                 ;1605
000214  f7fffffe          BL       HAL_SMBUS_MasterTxCpltCallback
000218  e055              B        |L31.710|
                  |L31.538|
00021a  6ca0              LDR      r0,[r4,#0x48]         ;1607
00021c  2822              CMP      r0,#0x22              ;1607
00021e  d152              BNE      |L31.710|
000220  21d4              MOVS     r1,#0xd4              ;1609
000222  4620              MOV      r0,r4                 ;1609
000224  f7fffffe          BL       SMBUS_Disable_IRQ
000228  6ca0              LDR      r0,[r4,#0x48]         ;1610
00022a  6420              STR      r0,[r4,#0x40]         ;1610
00022c  2001              MOVS     r0,#1                 ;1611
00022e  64a0              STR      r0,[r4,#0x48]         ;1611
000230  bf00              NOP                            ;1614
000232  2100              MOVS     r1,#0                 ;1614
000234  2044              MOVS     r0,#0x44              ;1614
000236  5501              STRB     r1,[r0,r4]            ;1614
000238  bf00              NOP                            ;1614
00023a  4620              MOV      r0,r4                 ;1616
00023c  f7fffffe          BL       HAL_SMBUS_MasterRxCpltCallback
000240  e041              B        |L31.710|
                  |L31.578|
000242  6820              LDR      r0,[r4,#0]            ;1621
000244  6980              LDR      r0,[r0,#0x18]         ;1621
000246  2140              MOVS     r1,#0x40              ;1621
000248  4008              ANDS     r0,r0,r1              ;1621
00024a  0980              LSRS     r0,r0,#6              ;1621
00024c  2800              CMP      r0,#0                 ;1621
00024e  d03a              BEQ      |L31.710|
000250  8f60              LDRH     r0,[r4,#0x3a]         ;1623
000252  2800              CMP      r0,#0                 ;1623
000254  d137              BNE      |L31.710|
000256  6b60              LDR      r0,[r4,#0x34]         ;1626
000258  2800              CMP      r0,#0                 ;1626
00025a  d106              BNE      |L31.618|
00025c  6820              LDR      r0,[r4,#0]            ;1629
00025e  6840              LDR      r0,[r0,#4]            ;1629
000260  0209              LSLS     r1,r1,#8              ;1629
000262  4308              ORRS     r0,r0,r1              ;1629
000264  6821              LDR      r1,[r4,#0]            ;1629
000266  6048              STR      r0,[r1,#4]            ;1629
000268  e02d              B        |L31.710|
                  |L31.618|
00026a  6820              LDR      r0,[r4,#0]            ;1632
00026c  6840              LDR      r0,[r0,#4]            ;1632
00026e  2101              MOVS     r1,#1                 ;1632
000270  0649              LSLS     r1,r1,#25             ;1632
000272  4008              ANDS     r0,r0,r1              ;1632
000274  4288              CMP      r0,r1                 ;1632
000276  d026              BEQ      |L31.710|
000278  6ca0              LDR      r0,[r4,#0x48]         ;1638
00027a  2812              CMP      r0,#0x12              ;1638
00027c  d110              BNE      |L31.672|
00027e  21f2              MOVS     r1,#0xf2              ;1641
000280  4620              MOV      r0,r4                 ;1641
000282  f7fffffe          BL       SMBUS_Disable_IRQ
000286  6ca0              LDR      r0,[r4,#0x48]         ;1642
000288  6420              STR      r0,[r4,#0x40]         ;1642
00028a  2001              MOVS     r0,#1                 ;1643
00028c  64a0              STR      r0,[r4,#0x48]         ;1643
00028e  bf00              NOP                            ;1646
000290  2100              MOVS     r1,#0                 ;1646
000292  2044              MOVS     r0,#0x44              ;1646
000294  5501              STRB     r1,[r0,r4]            ;1646
000296  bf00              NOP                            ;1646
000298  4620              MOV      r0,r4                 ;1648
00029a  f7fffffe          BL       HAL_SMBUS_MasterTxCpltCallback
00029e  e012              B        |L31.710|
                  |L31.672|
0002a0  6ca0              LDR      r0,[r4,#0x48]         ;1650
0002a2  2822              CMP      r0,#0x22              ;1650
0002a4  d10f              BNE      |L31.710|
0002a6  21d4              MOVS     r1,#0xd4              ;1652
0002a8  4620              MOV      r0,r4                 ;1652
0002aa  f7fffffe          BL       SMBUS_Disable_IRQ
0002ae  6ca0              LDR      r0,[r4,#0x48]         ;1653
0002b0  6420              STR      r0,[r4,#0x40]         ;1653
0002b2  2001              MOVS     r0,#1                 ;1654
0002b4  64a0              STR      r0,[r4,#0x48]         ;1654
0002b6  bf00              NOP                            ;1657
0002b8  2100              MOVS     r1,#0                 ;1657
0002ba  2044              MOVS     r0,#0x44              ;1657
0002bc  5501              STRB     r1,[r0,r4]            ;1657
0002be  bf00              NOP                            ;1657
0002c0  4620              MOV      r0,r4                 ;1659
0002c2  f7fffffe          BL       HAL_SMBUS_MasterRxCpltCallback
                  |L31.710|
0002c6  bf00              NOP                            ;1666
0002c8  2100              MOVS     r1,#0                 ;1666
0002ca  2044              MOVS     r0,#0x44              ;1666
0002cc  5501              STRB     r1,[r0,r4]            ;1666
0002ce  bf00              NOP                            ;1666
0002d0  2000              MOVS     r0,#0                 ;1668
0002d2  e69d              B        |L31.16|
;;;1670   /**
                          ENDP

                  |L31.724|
                          DCD      0xfe00e800

                          AREA ||i.SMBUS_Slave_ISR||, CODE, READONLY, ALIGN=2

                  SMBUS_Slave_ISR PROC
;;;1675     */
;;;1676   static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus) 
000000  b5f8              PUSH     {r3-r7,lr}
;;;1677   {
000002  4604              MOV      r4,r0
;;;1678     uint8_t TransferDirection = 0U;
000004  2500              MOVS     r5,#0
;;;1679     uint16_t SlaveAddrCode = 0U;
000006  2600              MOVS     r6,#0
;;;1680   
;;;1681     /* Process Locked */
;;;1682     __HAL_LOCK(hsmbus);
000008  bf00              NOP      
00000a  2044              MOVS     r0,#0x44
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2801              CMP      r0,#1
000010  d101              BNE      |L32.22|
000012  2002              MOVS     r0,#2
                  |L32.20|
;;;1683     
;;;1684     if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF) != RESET)
;;;1685     {
;;;1686       /* Check that SMBUS transfer finished */
;;;1687       /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
;;;1688       /* Mean XferCount == 0*/
;;;1689       /* So clear Flag NACKF only */
;;;1690       if(hsmbus->XferCount == 0U)
;;;1691       {
;;;1692         /* Clear NACK Flag */
;;;1693         __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
;;;1694   
;;;1695         /* Process Unlocked */
;;;1696         __HAL_UNLOCK(hsmbus);
;;;1697       }
;;;1698       else
;;;1699       {
;;;1700         /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
;;;1701         /* Clear NACK Flag */
;;;1702         __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
;;;1703   
;;;1704         /* Set HAL State to "Idle" State, mean to LISTEN state */
;;;1705         /* So reset Slave Busy state */
;;;1706         hsmbus->PreviousState = hsmbus->State;
;;;1707         hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
;;;1708         hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
;;;1709   
;;;1710         /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
;;;1711         SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
;;;1712         
;;;1713         /* Set ErrorCode corresponding to a Non-Acknowledge */
;;;1714         hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
;;;1715   
;;;1716         /* Process Unlocked */
;;;1717         __HAL_UNLOCK(hsmbus);
;;;1718       
;;;1719         /* Call the Error callback to prevent upper layer */
;;;1720         HAL_SMBUS_ErrorCallback(hsmbus);
;;;1721       }
;;;1722     }
;;;1723     else if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_ADDR) != RESET)
;;;1724     {
;;;1725       TransferDirection = SMBUS_GET_DIR(hsmbus);
;;;1726       SlaveAddrCode = SMBUS_GET_ADDR_MATCH(hsmbus);
;;;1727         
;;;1728       /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
;;;1729       /* Other ADDRInterrupt will be treat in next Listen usecase */
;;;1730       __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
;;;1731       
;;;1732       /* Process Unlocked */
;;;1733       __HAL_UNLOCK(hsmbus);
;;;1734   
;;;1735       /* Call Slave Addr callback */
;;;1736       HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
;;;1737     }
;;;1738     else if((__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET) || (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TCR) != RESET))
;;;1739     {
;;;1740       if( (hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
;;;1741       {
;;;1742         /* Read data from RXDR */
;;;1743         (*hsmbus->pBuffPtr++) = hsmbus->Instance->RXDR;
;;;1744         hsmbus->XferSize--;
;;;1745         hsmbus->XferCount--;
;;;1746   
;;;1747         if(hsmbus->XferCount == 1U)
;;;1748         {
;;;1749           /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
;;;1750           /* or only the last Byte of Transfer */
;;;1751           /* So reset the RELOAD bit mode */
;;;1752           hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
;;;1753           SMBUS_TransferConfig(hsmbus, 0U ,1U , hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
;;;1754         }
;;;1755         else if(hsmbus->XferCount == 0U)
;;;1756         {
;;;1757           /* Last Byte is received, disable Interrupt */
;;;1758           SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
;;;1759           
;;;1760           /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
;;;1761           hsmbus->PreviousState = hsmbus->State;
;;;1762           hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
;;;1763           
;;;1764           /* Process Unlocked */
;;;1765           __HAL_UNLOCK(hsmbus);
;;;1766   
;;;1767           /* Call the Rx complete callback to inform upper layer of the end of receive process */
;;;1768           HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
;;;1769         }
;;;1770         else
;;;1771         {
;;;1772           /* Set Reload for next Bytes */
;;;1773           SMBUS_TransferConfig(hsmbus, 0U, 1U, SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE), SMBUS_NO_STARTSTOP);
;;;1774   
;;;1775           /* Ack last Byte Read */
;;;1776           hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
;;;1777         }
;;;1778       }    
;;;1779       else if( (hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
;;;1780       {
;;;1781         if((hsmbus->XferSize == 0U)&&(hsmbus->XferCount != 0U))
;;;1782         {
;;;1783           if(hsmbus->XferCount > MAX_NBYTE_SIZE)
;;;1784           {    
;;;1785             SMBUS_TransferConfig(hsmbus, 0U, MAX_NBYTE_SIZE, (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)), SMBUS_NO_STARTSTOP);
;;;1786             hsmbus->XferSize = MAX_NBYTE_SIZE;
;;;1787           }
;;;1788           else
;;;1789           {
;;;1790             hsmbus->XferSize = hsmbus->XferCount;
;;;1791             SMBUS_TransferConfig(hsmbus, 0U, hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
;;;1792             /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
;;;1793             /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
;;;1794             if(SMBUS_GET_PEC_MODE(hsmbus) != RESET)
;;;1795             {
;;;1796               hsmbus->XferSize--;
;;;1797               hsmbus->XferCount--;
;;;1798             }
;;;1799           }
;;;1800         }
;;;1801       }
;;;1802     }
;;;1803     else if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXIS) != RESET)
;;;1804     {
;;;1805       /* Write data to TXDR only if XferCount not reach "0" */
;;;1806       /* A TXIS flag can be set, during STOP treatment      */
;;;1807       /* Check if all Data have already been sent */
;;;1808       /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
;;;1809       if(hsmbus->XferCount > 0U)
;;;1810       {
;;;1811         /* Write data to TXDR */
;;;1812         hsmbus->Instance->TXDR = (*hsmbus->pBuffPtr++);
;;;1813         hsmbus->XferCount--;
;;;1814         hsmbus->XferSize--;
;;;1815       }
;;;1816       
;;;1817       if(hsmbus->XferCount == 0U)
;;;1818       {
;;;1819         /* Last Byte is Transmitted */
;;;1820         /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
;;;1821         SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
;;;1822         hsmbus->PreviousState = hsmbus->State;
;;;1823         hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
;;;1824   
;;;1825         /* Process Unlocked */
;;;1826         __HAL_UNLOCK(hsmbus);
;;;1827   
;;;1828         /* Call the Tx complete callback to inform upper layer of the end of transmit process */
;;;1829         HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
;;;1830       }
;;;1831     }
;;;1832   
;;;1833     /* Check if STOPF is set */
;;;1834     if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_STOPF) != RESET)
;;;1835     {
;;;1836       if((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
;;;1837       {
;;;1838         /* Store Last receive data if any */
;;;1839         if(__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
;;;1840         {
;;;1841           /* Read data from RXDR */
;;;1842           (*hsmbus->pBuffPtr++) = hsmbus->Instance->RXDR;
;;;1843   
;;;1844           if((hsmbus->XferSize > 0U))
;;;1845           {
;;;1846             hsmbus->XferSize--;
;;;1847             hsmbus->XferCount--;
;;;1848           }
;;;1849         }
;;;1850   
;;;1851         /* Disable RX and TX Interrupts */
;;;1852         SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
;;;1853   
;;;1854         /* Disable ADDR Interrupt */
;;;1855         SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
;;;1856   
;;;1857         /* Disable Address Acknowledge */
;;;1858         hsmbus->Instance->CR2 |= I2C_CR2_NACK;
;;;1859   
;;;1860         /* Clear Configuration Register 2 */
;;;1861         SMBUS_RESET_CR2(hsmbus);
;;;1862       
;;;1863         /* Clear STOP Flag */
;;;1864         __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
;;;1865   
;;;1866        /* Clear ADDR flag */
;;;1867        __HAL_SMBUS_CLEAR_FLAG(hsmbus,SMBUS_FLAG_ADDR);
;;;1868   
;;;1869         hsmbus->XferOptions = 0U;
;;;1870         hsmbus->PreviousState = hsmbus->State;
;;;1871         hsmbus->State = HAL_SMBUS_STATE_READY;
;;;1872       
;;;1873         /* Process Unlocked */
;;;1874         __HAL_UNLOCK(hsmbus);
;;;1875   
;;;1876         /* Call the Listen Complete callback, to prevent upper layer of the end of Listen usecase */
;;;1877         HAL_SMBUS_ListenCpltCallback(hsmbus);
;;;1878       }
;;;1879     }
;;;1880   
;;;1881     /* Process Unlocked */
;;;1882     __HAL_UNLOCK(hsmbus);
;;;1883     
;;;1884     return HAL_OK;     
;;;1885   }  
000014  bdf8              POP      {r3-r7,pc}
                  |L32.22|
000016  2101              MOVS     r1,#1                 ;1682
000018  2044              MOVS     r0,#0x44              ;1682
00001a  5501              STRB     r1,[r0,r4]            ;1682
00001c  bf00              NOP                            ;1682
00001e  6820              LDR      r0,[r4,#0]            ;1684
000020  6980              LDR      r0,[r0,#0x18]         ;1684
000022  2110              MOVS     r1,#0x10              ;1684
000024  4008              ANDS     r0,r0,r1              ;1684
000026  0900              LSRS     r0,r0,#4              ;1684
000028  2800              CMP      r0,#0                 ;1684
00002a  d028              BEQ      |L32.126|
00002c  8f60              LDRH     r0,[r4,#0x3a]         ;1690
00002e  2800              CMP      r0,#0                 ;1690
000030  d107              BNE      |L32.66|
000032  2010              MOVS     r0,#0x10              ;1693
000034  6821              LDR      r1,[r4,#0]            ;1693
000036  61c8              STR      r0,[r1,#0x1c]         ;1693
000038  bf00              NOP                            ;1696
00003a  2100              MOVS     r1,#0                 ;1696
00003c  2044              MOVS     r0,#0x44              ;1696
00003e  5501              STRB     r1,[r0,r4]            ;1696
000040  e102              B        |L32.584|
                  |L32.66|
000042  2010              MOVS     r0,#0x10              ;1702
000044  6821              LDR      r1,[r4,#0]            ;1702
000046  61c8              STR      r0,[r1,#0x1c]         ;1702
000048  6ca0              LDR      r0,[r4,#0x48]         ;1706
00004a  6420              STR      r0,[r4,#0x40]         ;1706
00004c  6ca0              LDR      r0,[r4,#0x48]         ;1707
00004e  2132              MOVS     r1,#0x32              ;1707
000050  4388              BICS     r0,r0,r1              ;1707
000052  64a0              STR      r0,[r4,#0x48]         ;1707
000054  6ca0              LDR      r0,[r4,#0x48]         ;1708
000056  2142              MOVS     r1,#0x42              ;1708
000058  4388              BICS     r0,r0,r1              ;1708
00005a  64a0              STR      r0,[r4,#0x48]         ;1708
00005c  21f6              MOVS     r1,#0xf6              ;1711
00005e  4620              MOV      r0,r4                 ;1711
000060  f7fffffe          BL       SMBUS_Disable_IRQ
000064  6ce0              LDR      r0,[r4,#0x4c]         ;1714
000066  2104              MOVS     r1,#4                 ;1714
000068  4308              ORRS     r0,r0,r1              ;1714
00006a  64e0              STR      r0,[r4,#0x4c]         ;1714
00006c  bf00              NOP                            ;1717
00006e  2100              MOVS     r1,#0                 ;1717
000070  2044              MOVS     r0,#0x44              ;1717
000072  5501              STRB     r1,[r0,r4]            ;1717
000074  bf00              NOP                            ;1717
000076  4620              MOV      r0,r4                 ;1720
000078  f7fffffe          BL       HAL_SMBUS_ErrorCallback
00007c  e0e4              B        |L32.584|
                  |L32.126|
00007e  6820              LDR      r0,[r4,#0]            ;1723
000080  6980              LDR      r0,[r0,#0x18]         ;1723
000082  2108              MOVS     r1,#8                 ;1723
000084  4008              ANDS     r0,r0,r1              ;1723
000086  08c0              LSRS     r0,r0,#3              ;1723
000088  2800              CMP      r0,#0                 ;1723
00008a  d01b              BEQ      |L32.196|
00008c  6820              LDR      r0,[r4,#0]            ;1725
00008e  6980              LDR      r0,[r0,#0x18]         ;1725
000090  0349              LSLS     r1,r1,#13             ;1725
000092  4008              ANDS     r0,r0,r1              ;1725
000094  0c05              LSRS     r5,r0,#16             ;1725
000096  6820              LDR      r0,[r4,#0]            ;1726
000098  6980              LDR      r0,[r0,#0x18]         ;1726
00009a  217f              MOVS     r1,#0x7f              ;1726
00009c  0449              LSLS     r1,r1,#17             ;1726
00009e  4008              ANDS     r0,r0,r1              ;1726
0000a0  0c46              LSRS     r6,r0,#17             ;1726
0000a2  6820              LDR      r0,[r4,#0]            ;1730
0000a4  6800              LDR      r0,[r0,#0]            ;1730
0000a6  2108              MOVS     r1,#8                 ;1730
0000a8  4388              BICS     r0,r0,r1              ;1730
0000aa  6821              LDR      r1,[r4,#0]            ;1730
0000ac  6008              STR      r0,[r1,#0]            ;1730
0000ae  bf00              NOP                            ;1733
0000b0  2100              MOVS     r1,#0                 ;1733
0000b2  2044              MOVS     r0,#0x44              ;1733
0000b4  5501              STRB     r1,[r0,r4]            ;1733
0000b6  bf00              NOP                            ;1733
0000b8  4632              MOV      r2,r6                 ;1736
0000ba  4629              MOV      r1,r5                 ;1736
0000bc  4620              MOV      r0,r4                 ;1736
0000be  f7fffffe          BL       HAL_SMBUS_AddrCallback
0000c2  e0c1              B        |L32.584|
                  |L32.196|
0000c4  6820              LDR      r0,[r4,#0]            ;1738
0000c6  6980              LDR      r0,[r0,#0x18]         ;1738
0000c8  2104              MOVS     r1,#4                 ;1738
0000ca  4008              ANDS     r0,r0,r1              ;1738
0000cc  0880              LSRS     r0,r0,#2              ;1738
0000ce  2800              CMP      r0,#0                 ;1738
0000d0  d106              BNE      |L32.224|
0000d2  6820              LDR      r0,[r4,#0]            ;1738
0000d4  6980              LDR      r0,[r0,#0x18]         ;1738
0000d6  2180              MOVS     r1,#0x80              ;1738
0000d8  4008              ANDS     r0,r0,r1              ;1738
0000da  09c0              LSRS     r0,r0,#7              ;1738
0000dc  2800              CMP      r0,#0                 ;1738
0000de  d07d              BEQ      |L32.476|
                  |L32.224|
0000e0  6ca0              LDR      r0,[r4,#0x48]         ;1740
0000e2  2142              MOVS     r1,#0x42              ;1740
0000e4  4008              ANDS     r0,r0,r1              ;1740
0000e6  2842              CMP      r0,#0x42              ;1740
0000e8  d149              BNE      |L32.382|
0000ea  6820              LDR      r0,[r4,#0]            ;1743
0000ec  6a40              LDR      r0,[r0,#0x24]         ;1743
0000ee  b2c1              UXTB     r1,r0                 ;1743
0000f0  6b62              LDR      r2,[r4,#0x34]         ;1743
0000f2  1c50              ADDS     r0,r2,#1              ;1743
0000f4  6360              STR      r0,[r4,#0x34]         ;1743
0000f6  7011              STRB     r1,[r2,#0]            ;1743
0000f8  8f20              LDRH     r0,[r4,#0x38]         ;1744
0000fa  1e40              SUBS     r0,r0,#1              ;1744
0000fc  8720              STRH     r0,[r4,#0x38]         ;1744
0000fe  8f60              LDRH     r0,[r4,#0x3a]         ;1745
000100  1e40              SUBS     r0,r0,#1              ;1745
000102  8760              STRH     r0,[r4,#0x3a]         ;1745
000104  8f60              LDRH     r0,[r4,#0x3a]         ;1747
000106  2801              CMP      r0,#1                 ;1747
000108  d10d              BNE      |L32.294|
00010a  6be0              LDR      r0,[r4,#0x3c]         ;1752
00010c  2101              MOVS     r1,#1                 ;1752
00010e  0609              LSLS     r1,r1,#24             ;1752
000110  4388              BICS     r0,r0,r1              ;1752
000112  63e0              STR      r0,[r4,#0x3c]         ;1752
000114  2000              MOVS     r0,#0                 ;1753
000116  9000              STR      r0,[sp,#0]            ;1753
000118  6be3              LDR      r3,[r4,#0x3c]         ;1753
00011a  2201              MOVS     r2,#1                 ;1753
00011c  4601              MOV      r1,r0                 ;1753
00011e  4620              MOV      r0,r4                 ;1753
000120  f7fffffe          BL       SMBUS_TransferConfig
000124  e090              B        |L32.584|
                  |L32.294|
000126  8f60              LDRH     r0,[r4,#0x3a]         ;1755
000128  2800              CMP      r0,#0                 ;1755
00012a  d112              BNE      |L32.338|
00012c  21d4              MOVS     r1,#0xd4              ;1758
00012e  4620              MOV      r0,r4                 ;1758
000130  f7fffffe          BL       SMBUS_Disable_IRQ
000134  6ca0              LDR      r0,[r4,#0x48]         ;1761
000136  6420              STR      r0,[r4,#0x40]         ;1761
000138  6ca0              LDR      r0,[r4,#0x48]         ;1762
00013a  2142              MOVS     r1,#0x42              ;1762
00013c  4388              BICS     r0,r0,r1              ;1762
00013e  64a0              STR      r0,[r4,#0x48]         ;1762
000140  bf00              NOP                            ;1765
000142  2100              MOVS     r1,#0                 ;1765
000144  2044              MOVS     r0,#0x44              ;1765
000146  5501              STRB     r1,[r0,r4]            ;1765
000148  bf00              NOP                            ;1765
00014a  4620              MOV      r0,r4                 ;1768
00014c  f7fffffe          BL       HAL_SMBUS_SlaveRxCpltCallback
000150  e07a              B        |L32.584|
                  |L32.338|
000152  2000              MOVS     r0,#0                 ;1773
000154  9000              STR      r0,[sp,#0]            ;1773
000156  6be0              LDR      r0,[r4,#0x3c]         ;1773
000158  2101              MOVS     r1,#1                 ;1773
00015a  0689              LSLS     r1,r1,#26             ;1773
00015c  4008              ANDS     r0,r0,r1              ;1773
00015e  1089              ASRS     r1,r1,#2              ;1773
000160  4308              ORRS     r0,r0,r1              ;1773
000162  4603              MOV      r3,r0                 ;1773
000164  2201              MOVS     r2,#1                 ;1773
000166  2100              MOVS     r1,#0                 ;1773
000168  4620              MOV      r0,r4                 ;1773
00016a  f7fffffe          BL       SMBUS_TransferConfig
00016e  6820              LDR      r0,[r4,#0]            ;1776
000170  6840              LDR      r0,[r0,#4]            ;1776
000172  2101              MOVS     r1,#1                 ;1776
000174  03c9              LSLS     r1,r1,#15             ;1776
000176  4388              BICS     r0,r0,r1              ;1776
000178  6821              LDR      r1,[r4,#0]            ;1776
00017a  6048              STR      r0,[r1,#4]            ;1776
00017c  e064              B        |L32.584|
                  |L32.382|
00017e  6ca0              LDR      r0,[r4,#0x48]         ;1779
000180  2132              MOVS     r1,#0x32              ;1779
000182  4008              ANDS     r0,r0,r1              ;1779
000184  2832              CMP      r0,#0x32              ;1779
000186  d15f              BNE      |L32.584|
000188  8f20              LDRH     r0,[r4,#0x38]         ;1781
00018a  2800              CMP      r0,#0                 ;1781
00018c  d15c              BNE      |L32.584|
00018e  8f60              LDRH     r0,[r4,#0x3a]         ;1781
000190  2800              CMP      r0,#0                 ;1781
000192  d059              BEQ      |L32.584|
000194  8f60              LDRH     r0,[r4,#0x3a]         ;1783
000196  28ff              CMP      r0,#0xff              ;1783
000198  d910              BLS      |L32.444|
00019a  2000              MOVS     r0,#0                 ;1785
00019c  9000              STR      r0,[sp,#0]            ;1785
00019e  6be0              LDR      r0,[r4,#0x3c]         ;1785
0001a0  2101              MOVS     r1,#1                 ;1785
0001a2  0689              LSLS     r1,r1,#26             ;1785
0001a4  4008              ANDS     r0,r0,r1              ;1785
0001a6  1089              ASRS     r1,r1,#2              ;1785
0001a8  4308              ORRS     r0,r0,r1              ;1785
0001aa  4603              MOV      r3,r0                 ;1785
0001ac  22ff              MOVS     r2,#0xff              ;1785
0001ae  2100              MOVS     r1,#0                 ;1785
0001b0  4620              MOV      r0,r4                 ;1785
0001b2  f7fffffe          BL       SMBUS_TransferConfig
0001b6  20ff              MOVS     r0,#0xff              ;1786
0001b8  8720              STRH     r0,[r4,#0x38]         ;1786
0001ba  e045              B        |L32.584|
                  |L32.444|
0001bc  8f60              LDRH     r0,[r4,#0x3a]         ;1790
0001be  8720              STRH     r0,[r4,#0x38]         ;1790
0001c0  2000              MOVS     r0,#0                 ;1791
0001c2  9000              STR      r0,[sp,#0]            ;1791
0001c4  6be3              LDR      r3,[r4,#0x3c]         ;1791
0001c6  8f20              LDRH     r0,[r4,#0x38]         ;1791
0001c8  b2c2              UXTB     r2,r0                 ;1791
0001ca  2100              MOVS     r1,#0                 ;1791
0001cc  4620              MOV      r0,r4                 ;1791
0001ce  f7fffffe          BL       SMBUS_TransferConfig
0001d2  6820              LDR      r0,[r4,#0]            ;1794
0001d4  6840              LDR      r0,[r0,#4]            ;1794
0001d6  2101              MOVS     r1,#1                 ;1794
0001d8  0689              LSLS     r1,r1,#26             ;1794
0001da  e000              B        |L32.478|
                  |L32.476|
0001dc  e009              B        |L32.498|
                  |L32.478|
0001de  4008              ANDS     r0,r0,r1              ;1794
0001e0  2800              CMP      r0,#0                 ;1794
0001e2  d031              BEQ      |L32.584|
0001e4  8f20              LDRH     r0,[r4,#0x38]         ;1796
0001e6  1e40              SUBS     r0,r0,#1              ;1796
0001e8  8720              STRH     r0,[r4,#0x38]         ;1796
0001ea  8f60              LDRH     r0,[r4,#0x3a]         ;1797
0001ec  1e40              SUBS     r0,r0,#1              ;1797
0001ee  8760              STRH     r0,[r4,#0x3a]         ;1797
0001f0  e02a              B        |L32.584|
                  |L32.498|
0001f2  6820              LDR      r0,[r4,#0]            ;1803
0001f4  6980              LDR      r0,[r0,#0x18]         ;1803
0001f6  2102              MOVS     r1,#2                 ;1803
0001f8  4008              ANDS     r0,r0,r1              ;1803
0001fa  0840              LSRS     r0,r0,#1              ;1803
0001fc  2800              CMP      r0,#0                 ;1803
0001fe  d023              BEQ      |L32.584|
000200  8f60              LDRH     r0,[r4,#0x3a]         ;1809
000202  2800              CMP      r0,#0                 ;1809
000204  d00b              BEQ      |L32.542|
000206  6b61              LDR      r1,[r4,#0x34]         ;1812
000208  1c48              ADDS     r0,r1,#1              ;1812
00020a  6360              STR      r0,[r4,#0x34]         ;1812
00020c  7808              LDRB     r0,[r1,#0]            ;1812
00020e  6821              LDR      r1,[r4,#0]            ;1812
000210  6288              STR      r0,[r1,#0x28]         ;1812
000212  8f60              LDRH     r0,[r4,#0x3a]         ;1813
000214  1e40              SUBS     r0,r0,#1              ;1813
000216  8760              STRH     r0,[r4,#0x3a]         ;1813
000218  8f20              LDRH     r0,[r4,#0x38]         ;1814
00021a  1e40              SUBS     r0,r0,#1              ;1814
00021c  8720              STRH     r0,[r4,#0x38]         ;1814
                  |L32.542|
00021e  8f60              LDRH     r0,[r4,#0x3a]         ;1817
000220  2800              CMP      r0,#0                 ;1817
000222  d111              BNE      |L32.584|
000224  21f2              MOVS     r1,#0xf2              ;1821
000226  4620              MOV      r0,r4                 ;1821
000228  f7fffffe          BL       SMBUS_Disable_IRQ
00022c  6ca0              LDR      r0,[r4,#0x48]         ;1822
00022e  6420              STR      r0,[r4,#0x40]         ;1822
000230  6ca0              LDR      r0,[r4,#0x48]         ;1823
000232  2132              MOVS     r1,#0x32              ;1823
000234  4388              BICS     r0,r0,r1              ;1823
000236  64a0              STR      r0,[r4,#0x48]         ;1823
000238  bf00              NOP                            ;1826
00023a  2100              MOVS     r1,#0                 ;1826
00023c  2044              MOVS     r0,#0x44              ;1826
00023e  5501              STRB     r1,[r0,r4]            ;1826
000240  bf00              NOP                            ;1826
000242  4620              MOV      r0,r4                 ;1829
000244  f7fffffe          BL       HAL_SMBUS_SlaveTxCpltCallback
                  |L32.584|
000248  6820              LDR      r0,[r4,#0]            ;1834
00024a  6980              LDR      r0,[r0,#0x18]         ;1834
00024c  2120              MOVS     r1,#0x20              ;1834
00024e  4008              ANDS     r0,r0,r1              ;1834
000250  0940              LSRS     r0,r0,#5              ;1834
000252  2800              CMP      r0,#0                 ;1834
000254  d044              BEQ      |L32.736|
000256  6ca0              LDR      r0,[r4,#0x48]         ;1836
000258  2108              MOVS     r1,#8                 ;1836
00025a  4008              ANDS     r0,r0,r1              ;1836
00025c  2808              CMP      r0,#8                 ;1836
00025e  d13f              BNE      |L32.736|
000260  6820              LDR      r0,[r4,#0]            ;1839
000262  6980              LDR      r0,[r0,#0x18]         ;1839
000264  2104              MOVS     r1,#4                 ;1839
000266  4008              ANDS     r0,r0,r1              ;1839
000268  0880              LSRS     r0,r0,#2              ;1839
00026a  2800              CMP      r0,#0                 ;1839
00026c  d00f              BEQ      |L32.654|
00026e  6820              LDR      r0,[r4,#0]            ;1842
000270  6a40              LDR      r0,[r0,#0x24]         ;1842
000272  b2c1              UXTB     r1,r0                 ;1842
000274  6b62              LDR      r2,[r4,#0x34]         ;1842
000276  1c50              ADDS     r0,r2,#1              ;1842
000278  6360              STR      r0,[r4,#0x34]         ;1842
00027a  7011              STRB     r1,[r2,#0]            ;1842
00027c  8f20              LDRH     r0,[r4,#0x38]         ;1844
00027e  2800              CMP      r0,#0                 ;1844
000280  d005              BEQ      |L32.654|
000282  8f20              LDRH     r0,[r4,#0x38]         ;1846
000284  1e40              SUBS     r0,r0,#1              ;1846
000286  8720              STRH     r0,[r4,#0x38]         ;1846
000288  8f60              LDRH     r0,[r4,#0x3a]         ;1847
00028a  1e40              SUBS     r0,r0,#1              ;1847
00028c  8760              STRH     r0,[r4,#0x3a]         ;1847
                  |L32.654|
00028e  21f6              MOVS     r1,#0xf6              ;1852
000290  4620              MOV      r0,r4                 ;1852
000292  f7fffffe          BL       SMBUS_Disable_IRQ
000296  2138              MOVS     r1,#0x38              ;1855
000298  4620              MOV      r0,r4                 ;1855
00029a  f7fffffe          BL       SMBUS_Disable_IRQ
00029e  6820              LDR      r0,[r4,#0]            ;1858
0002a0  6840              LDR      r0,[r0,#4]            ;1858
0002a2  2101              MOVS     r1,#1                 ;1858
0002a4  03c9              LSLS     r1,r1,#15             ;1858
0002a6  4308              ORRS     r0,r0,r1              ;1858
0002a8  6821              LDR      r1,[r4,#0]            ;1858
0002aa  6048              STR      r0,[r1,#4]            ;1858
0002ac  6820              LDR      r0,[r4,#0]            ;1861
0002ae  6840              LDR      r0,[r0,#4]            ;1861
0002b0  490f              LDR      r1,|L32.752|
0002b2  4008              ANDS     r0,r0,r1              ;1861
0002b4  6821              LDR      r1,[r4,#0]            ;1861
0002b6  6048              STR      r0,[r1,#4]            ;1861
0002b8  2020              MOVS     r0,#0x20              ;1864
0002ba  6821              LDR      r1,[r4,#0]            ;1864
0002bc  61c8              STR      r0,[r1,#0x1c]         ;1864
0002be  2008              MOVS     r0,#8                 ;1867
0002c0  6821              LDR      r1,[r4,#0]            ;1867
0002c2  61c8              STR      r0,[r1,#0x1c]         ;1867
0002c4  2000              MOVS     r0,#0                 ;1869
0002c6  63e0              STR      r0,[r4,#0x3c]         ;1869
0002c8  6ca0              LDR      r0,[r4,#0x48]         ;1870
0002ca  6420              STR      r0,[r4,#0x40]         ;1870
0002cc  2001              MOVS     r0,#1                 ;1871
0002ce  64a0              STR      r0,[r4,#0x48]         ;1871
0002d0  bf00              NOP                            ;1874
0002d2  2100              MOVS     r1,#0                 ;1874
0002d4  2044              MOVS     r0,#0x44              ;1874
0002d6  5501              STRB     r1,[r0,r4]            ;1874
0002d8  bf00              NOP                            ;1874
0002da  4620              MOV      r0,r4                 ;1877
0002dc  f7fffffe          BL       HAL_SMBUS_ListenCpltCallback
                  |L32.736|
0002e0  bf00              NOP                            ;1882
0002e2  2100              MOVS     r1,#0                 ;1882
0002e4  2044              MOVS     r0,#0x44              ;1882
0002e6  5501              STRB     r1,[r0,r4]            ;1882
0002e8  bf00              NOP                            ;1882
0002ea  2000              MOVS     r0,#0                 ;1884
0002ec  e692              B        |L32.20|
;;;1886   /**
                          ENDP

0002ee  0000              DCW      0x0000
                  |L32.752|
                          DCD      0xfe00e800

                          AREA ||i.SMBUS_TransferConfig||, CODE, READONLY, ALIGN=2

                  SMBUS_TransferConfig PROC
;;;2078     */
;;;2079   static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2080   {
000002  460c              MOV      r4,r1
;;;2081     uint32_t tmpreg = 0U;
000004  2100              MOVS     r1,#0
;;;2082     
;;;2083     /* Check the parameters */
;;;2084     assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
;;;2085     assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
;;;2086     assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));
;;;2087       
;;;2088     /* Get the CR2 register value */
;;;2089     tmpreg = hsmbus->Instance->CR2;
000006  6805              LDR      r5,[r0,#0]
000008  6869              LDR      r1,[r5,#4]
;;;2090     
;;;2091     /* clear tmpreg specific bits */
;;;2092     tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_PECBYTE));
00000a  4d08              LDR      r5,|L33.44|
00000c  4029              ANDS     r1,r1,r5
;;;2093     
;;;2094     /* update tmpreg */
;;;2095     tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16U ) & I2C_CR2_NBYTES) | \
00000e  05a5              LSLS     r5,r4,#22
000010  0dad              LSRS     r5,r5,#22
000012  0416              LSLS     r6,r2,#16
000014  27ff              MOVS     r7,#0xff
000016  043f              LSLS     r7,r7,#16
000018  403e              ANDS     r6,r6,r7
00001a  4335              ORRS     r5,r5,r6
00001c  431d              ORRS     r5,r5,r3
00001e  9e05              LDR      r6,[sp,#0x14]
000020  4335              ORRS     r5,r5,r6
000022  4329              ORRS     r1,r1,r5
;;;2096                 (uint32_t)Mode | (uint32_t)Request);
;;;2097       
;;;2098     /* update CR2 register */
;;;2099     hsmbus->Instance->CR2 = tmpreg;  
000024  6805              LDR      r5,[r0,#0]
000026  6069              STR      r1,[r5,#4]
;;;2100   }  
000028  bdf0              POP      {r4-r7,pc}
;;;2101   
                          ENDP

00002a  0000              DCW      0x0000
                  |L33.44|
                          DCD      0xf8009800

                          AREA ||i.SMBUS_WaitOnFlagUntilTimeout||, CODE, READONLY, ALIGN=1

                  SMBUS_WaitOnFlagUntilTimeout PROC
;;;2010     */
;;;2011   static HAL_StatusTypeDef SMBUS_WaitOnFlagUntilTimeout(SMBUS_HandleTypeDef *hsmbus, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
000000  b5ff              PUSH     {r0-r7,lr}
;;;2012   {  
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  461d              MOV      r5,r3
;;;2013     uint32_t tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
00000e  4607              MOV      r7,r0
;;;2014     
;;;2015     /* Wait until flag is set */
;;;2016     if(Status == RESET)
000010  9803              LDR      r0,[sp,#0xc]
000012  2800              CMP      r0,#0
000014  d125              BNE      |L34.98|
;;;2017     {    
;;;2018       while(__HAL_SMBUS_GET_FLAG(hsmbus, Flag) == RESET)
000016  e015              B        |L34.68|
                  |L34.24|
;;;2019       {
;;;2020         /* Check for the Timeout */
;;;2021         if(Timeout != HAL_MAX_DELAY)
000018  1c68              ADDS     r0,r5,#1
00001a  2800              CMP      r0,#0
00001c  d012              BEQ      |L34.68|
;;;2022         {
;;;2023           if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
00001e  2d00              CMP      r5,#0
000020  d004              BEQ      |L34.44|
000022  f7fffffe          BL       HAL_GetTick
000026  1bc0              SUBS     r0,r0,r7
000028  42a8              CMP      r0,r5
00002a  d90b              BLS      |L34.68|
                  |L34.44|
;;;2024           {
;;;2025             hsmbus->PreviousState = hsmbus->State;
00002c  6ca0              LDR      r0,[r4,#0x48]
00002e  6420              STR      r0,[r4,#0x40]
;;;2026             hsmbus->State= HAL_SMBUS_STATE_READY;
000030  2001              MOVS     r0,#1
000032  64a0              STR      r0,[r4,#0x48]
;;;2027           
;;;2028             /* Process Unlocked */
;;;2029             __HAL_UNLOCK(hsmbus);
000034  bf00              NOP      
000036  2100              MOVS     r1,#0
000038  2044              MOVS     r0,#0x44
00003a  5501              STRB     r1,[r0,r4]
00003c  bf00              NOP      
;;;2030           
;;;2031             return HAL_TIMEOUT;
00003e  2003              MOVS     r0,#3
                  |L34.64|
;;;2032           }
;;;2033         }
;;;2034       }
;;;2035     }
;;;2036     else
;;;2037     {
;;;2038       while(__HAL_SMBUS_GET_FLAG(hsmbus, Flag) != RESET)
;;;2039       {
;;;2040         /* Check for the Timeout */
;;;2041         if(Timeout != HAL_MAX_DELAY)
;;;2042         {
;;;2043           if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;2044           {
;;;2045             hsmbus->PreviousState = hsmbus->State;
;;;2046             hsmbus->State= HAL_SMBUS_STATE_READY;
;;;2047           
;;;2048             /* Process Unlocked */
;;;2049             __HAL_UNLOCK(hsmbus);
;;;2050           
;;;2051             return HAL_TIMEOUT;
;;;2052           }
;;;2053         }
;;;2054       }
;;;2055     }
;;;2056     return HAL_OK;      
;;;2057   }
000040  b005              ADD      sp,sp,#0x14
000042  bdf0              POP      {r4-r7,pc}
                  |L34.68|
000044  6820              LDR      r0,[r4,#0]            ;2018
000046  6980              LDR      r0,[r0,#0x18]         ;2018
000048  03f1              LSLS     r1,r6,#15             ;2018
00004a  0bc9              LSRS     r1,r1,#15             ;2018
00004c  4008              ANDS     r0,r0,r1              ;2018
00004e  03f1              LSLS     r1,r6,#15             ;2018
000050  0bc9              LSRS     r1,r1,#15             ;2018
000052  4288              CMP      r0,r1                 ;2018
000054  d101              BNE      |L34.90|
000056  2001              MOVS     r0,#1                 ;2018
000058  e000              B        |L34.92|
                  |L34.90|
00005a  2000              MOVS     r0,#0                 ;2018
                  |L34.92|
00005c  2800              CMP      r0,#0                 ;2018
00005e  d0db              BEQ      |L34.24|
000060  e023              B        |L34.170|
                  |L34.98|
000062  e014              B        |L34.142|
                  |L34.100|
000064  1c68              ADDS     r0,r5,#1              ;2041
000066  2800              CMP      r0,#0                 ;2041
000068  d011              BEQ      |L34.142|
00006a  2d00              CMP      r5,#0                 ;2043
00006c  d004              BEQ      |L34.120|
00006e  f7fffffe          BL       HAL_GetTick
000072  1bc0              SUBS     r0,r0,r7              ;2043
000074  42a8              CMP      r0,r5                 ;2043
000076  d90a              BLS      |L34.142|
                  |L34.120|
000078  6ca0              LDR      r0,[r4,#0x48]         ;2045
00007a  6420              STR      r0,[r4,#0x40]         ;2045
00007c  2001              MOVS     r0,#1                 ;2046
00007e  64a0              STR      r0,[r4,#0x48]         ;2046
000080  bf00              NOP                            ;2049
000082  2100              MOVS     r1,#0                 ;2049
000084  2044              MOVS     r0,#0x44              ;2049
000086  5501              STRB     r1,[r0,r4]            ;2049
000088  bf00              NOP                            ;2049
00008a  2003              MOVS     r0,#3                 ;2051
00008c  e7d8              B        |L34.64|
                  |L34.142|
00008e  6820              LDR      r0,[r4,#0]            ;2038
000090  6980              LDR      r0,[r0,#0x18]         ;2038
000092  03f1              LSLS     r1,r6,#15             ;2038
000094  0bc9              LSRS     r1,r1,#15             ;2038
000096  4008              ANDS     r0,r0,r1              ;2038
000098  03f1              LSLS     r1,r6,#15             ;2038
00009a  0bc9              LSRS     r1,r1,#15             ;2038
00009c  4288              CMP      r0,r1                 ;2038
00009e  d101              BNE      |L34.164|
0000a0  2001              MOVS     r0,#1                 ;2038
0000a2  e000              B        |L34.166|
                  |L34.164|
0000a4  2000              MOVS     r0,#0                 ;2038
                  |L34.166|
0000a6  2800              CMP      r0,#0                 ;2038
0000a8  d1dc              BNE      |L34.100|
                  |L34.170|
0000aa  2000              MOVS     r0,#0                 ;2056
0000ac  e7c8              B        |L34.64|
;;;2058   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_smbus.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f0xx_hal_smbus_c_0d9f6733____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___21_stm32f0xx_hal_smbus_c_0d9f6733____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f0xx_hal_smbus_c_0d9f6733____REVSH|
#line 402
|__asm___21_stm32f0xx_hal_smbus_c_0d9f6733____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
