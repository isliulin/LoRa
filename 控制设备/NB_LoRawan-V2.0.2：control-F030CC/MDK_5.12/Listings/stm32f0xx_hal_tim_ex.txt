; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_tim_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_tim_ex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_tim_ex.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;1908     */
;;;1909   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1910   {
;;;1911     /* Prevent unused argument(s) compilation warning */
;;;1912     UNUSED(htim);
;;;1913   
;;;1914     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1915               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;1916      */
;;;1917   }
;;;1918   
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutationCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutationCallback PROC
;;;1893     */
;;;1894   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1895   {
;;;1896     /* Prevent unused argument(s) compilation warning */
;;;1897     UNUSED(htim);
;;;1898   
;;;1899     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1900               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;1901      */
;;;1902   }
;;;1903   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;1641     */    
;;;1642   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
000000  b510              PUSH     {r4,lr}
;;;1643                                                   TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
;;;1644   {
000002  4603              MOV      r3,r0
;;;1645     uint32_t tmpbdtr = 0;
000004  2200              MOVS     r2,#0
;;;1646      
;;;1647     /* Check the parameters */
;;;1648     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;1649     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;1650     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;1651     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;1652     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;1653     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;1654     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;1655     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;1656   
;;;1657     /* Process Locked */
;;;1658     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  203c              MOVS     r0,#0x3c
00000a  5cc0              LDRB     r0,[r0,r3]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L3.20|
000010  2002              MOVS     r0,#2
                  |L3.18|
;;;1659   
;;;1660     htim->State = HAL_TIM_STATE_BUSY;
;;;1661   
;;;1662     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;1663        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;1664     
;;;1665     /* Set the BDTR bits */
;;;1666     MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
;;;1667     MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
;;;1668     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
;;;1669     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
;;;1670     MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
;;;1671     MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
;;;1672     MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1673     MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;1674     
;;;1675     /* Set TIMx_BDTR */
;;;1676     htim->Instance->BDTR = tmpbdtr;
;;;1677     
;;;1678     htim->State = HAL_TIM_STATE_READY;
;;;1679   
;;;1680     __HAL_UNLOCK(htim);
;;;1681   
;;;1682     return HAL_OK;
;;;1683   }
000012  bd10              POP      {r4,pc}
                  |L3.20|
000014  2401              MOVS     r4,#1                 ;1658
000016  203c              MOVS     r0,#0x3c              ;1658
000018  54c4              STRB     r4,[r0,r3]            ;1658
00001a  bf00              NOP                            ;1658
00001c  2402              MOVS     r4,#2                 ;1660
00001e  203d              MOVS     r0,#0x3d              ;1660
000020  54c4              STRB     r4,[r0,r3]            ;1660
000022  0a10              LSRS     r0,r2,#8              ;1666
000024  0200              LSLS     r0,r0,#8              ;1666
000026  68cc              LDR      r4,[r1,#0xc]          ;1666
000028  4320              ORRS     r0,r0,r4              ;1666
00002a  4602              MOV      r2,r0                 ;1666
00002c  4610              MOV      r0,r2                 ;1667
00002e  2403              MOVS     r4,#3                 ;1667
000030  0224              LSLS     r4,r4,#8              ;1667
000032  43a0              BICS     r0,r0,r4              ;1667
000034  688c              LDR      r4,[r1,#8]            ;1667
000036  4320              ORRS     r0,r0,r4              ;1667
000038  4602              MOV      r2,r0                 ;1667
00003a  4610              MOV      r0,r2                 ;1668
00003c  2401              MOVS     r4,#1                 ;1668
00003e  02a4              LSLS     r4,r4,#10             ;1668
000040  43a0              BICS     r0,r0,r4              ;1668
000042  684c              LDR      r4,[r1,#4]            ;1668
000044  4320              ORRS     r0,r0,r4              ;1668
000046  4602              MOV      r2,r0                 ;1668
000048  4610              MOV      r0,r2                 ;1669
00004a  2401              MOVS     r4,#1                 ;1669
00004c  02e4              LSLS     r4,r4,#11             ;1669
00004e  43a0              BICS     r0,r0,r4              ;1669
000050  680c              LDR      r4,[r1,#0]            ;1669
000052  4320              ORRS     r0,r0,r4              ;1669
000054  4602              MOV      r2,r0                 ;1669
000056  4610              MOV      r0,r2                 ;1670
000058  2401              MOVS     r4,#1                 ;1670
00005a  0324              LSLS     r4,r4,#12             ;1670
00005c  43a0              BICS     r0,r0,r4              ;1670
00005e  690c              LDR      r4,[r1,#0x10]         ;1670
000060  4320              ORRS     r0,r0,r4              ;1670
000062  4602              MOV      r2,r0                 ;1670
000064  4610              MOV      r0,r2                 ;1671
000066  2401              MOVS     r4,#1                 ;1671
000068  0364              LSLS     r4,r4,#13             ;1671
00006a  43a0              BICS     r0,r0,r4              ;1671
00006c  694c              LDR      r4,[r1,#0x14]         ;1671
00006e  4320              ORRS     r0,r0,r4              ;1671
000070  4602              MOV      r2,r0                 ;1671
000072  4610              MOV      r0,r2                 ;1672
000074  2401              MOVS     r4,#1                 ;1672
000076  03a4              LSLS     r4,r4,#14             ;1672
000078  43a0              BICS     r0,r0,r4              ;1672
00007a  698c              LDR      r4,[r1,#0x18]         ;1672
00007c  4320              ORRS     r0,r0,r4              ;1672
00007e  4602              MOV      r2,r0                 ;1672
000080  4610              MOV      r0,r2                 ;1673
000082  2401              MOVS     r4,#1                 ;1673
000084  03e4              LSLS     r4,r4,#15             ;1673
000086  43a0              BICS     r0,r0,r4              ;1673
000088  698c              LDR      r4,[r1,#0x18]         ;1673
00008a  4320              ORRS     r0,r0,r4              ;1673
00008c  4602              MOV      r2,r0                 ;1673
00008e  6818              LDR      r0,[r3,#0]            ;1676
000090  6442              STR      r2,[r0,#0x44]         ;1676
000092  2401              MOVS     r4,#1                 ;1678
000094  203d              MOVS     r0,#0x3d              ;1678
000096  54c4              STRB     r4,[r0,r3]            ;1678
000098  bf00              NOP                            ;1680
00009a  2400              MOVS     r4,#0                 ;1680
00009c  203c              MOVS     r0,#0x3c              ;1680
00009e  54c4              STRB     r4,[r0,r3]            ;1680
0000a0  bf00              NOP                            ;1680
0000a2  2000              MOVS     r0,#0                 ;1682
0000a4  e7b5              B        |L3.18|
;;;1684   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1459     */
;;;1460   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1461   {
000002  4603              MOV      r3,r0
;;;1462     /* Check the parameters */
;;;1463     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1464     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1465   
;;;1466     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  203c              MOVS     r0,#0x3c
000008  5cc0              LDRB     r0,[r0,r3]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L4.18|
00000e  2002              MOVS     r0,#2
                  |L4.16|
;;;1467   
;;;1468     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1469         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1470     {
;;;1471       /* Select the Input trigger */
;;;1472       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1473       htim->Instance->SMCR |= InputTrigger;
;;;1474     }
;;;1475   
;;;1476     /* Select the Capture Compare preload feature */
;;;1477     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1478     /* Select the Commutation event source */
;;;1479     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1480     htim->Instance->CR2 |= CommutationSource;
;;;1481   
;;;1482     __HAL_UNLOCK(htim);
;;;1483   
;;;1484     return HAL_OK;
;;;1485   }
000010  bd10              POP      {r4,pc}
                  |L4.18|
000012  2401              MOVS     r4,#1                 ;1466
000014  203c              MOVS     r0,#0x3c              ;1466
000016  54c4              STRB     r4,[r0,r3]            ;1466
000018  bf00              NOP                            ;1466
00001a  2900              CMP      r1,#0                 ;1468
00001c  d005              BEQ      |L4.42|
00001e  2910              CMP      r1,#0x10              ;1468
000020  d003              BEQ      |L4.42|
000022  2920              CMP      r1,#0x20              ;1469
000024  d001              BEQ      |L4.42|
000026  2930              CMP      r1,#0x30              ;1469
000028  d10a              BNE      |L4.64|
                  |L4.42|
00002a  6818              LDR      r0,[r3,#0]            ;1472
00002c  6880              LDR      r0,[r0,#8]            ;1472
00002e  2470              MOVS     r4,#0x70              ;1472
000030  43a0              BICS     r0,r0,r4              ;1472
000032  681c              LDR      r4,[r3,#0]            ;1472
000034  60a0              STR      r0,[r4,#8]            ;1472
000036  6818              LDR      r0,[r3,#0]            ;1473
000038  6880              LDR      r0,[r0,#8]            ;1473
00003a  4308              ORRS     r0,r0,r1              ;1473
00003c  681c              LDR      r4,[r3,#0]            ;1473
00003e  60a0              STR      r0,[r4,#8]            ;1473
                  |L4.64|
000040  6818              LDR      r0,[r3,#0]            ;1477
000042  6840              LDR      r0,[r0,#4]            ;1477
000044  2401              MOVS     r4,#1                 ;1477
000046  4320              ORRS     r0,r0,r4              ;1477
000048  681c              LDR      r4,[r3,#0]            ;1477
00004a  6060              STR      r0,[r4,#4]            ;1477
00004c  6818              LDR      r0,[r3,#0]            ;1479
00004e  6840              LDR      r0,[r0,#4]            ;1479
000050  2404              MOVS     r4,#4                 ;1479
000052  43a0              BICS     r0,r0,r4              ;1479
000054  681c              LDR      r4,[r3,#0]            ;1479
000056  6060              STR      r0,[r4,#4]            ;1479
000058  6818              LDR      r0,[r3,#0]            ;1480
00005a  6840              LDR      r0,[r0,#4]            ;1480
00005c  4310              ORRS     r0,r0,r2              ;1480
00005e  681c              LDR      r4,[r3,#0]            ;1480
000060  6060              STR      r0,[r4,#4]            ;1480
000062  bf00              NOP                            ;1482
000064  2400              MOVS     r4,#0                 ;1482
000066  203c              MOVS     r0,#0x3c              ;1482
000068  54c4              STRB     r4,[r0,r3]            ;1482
00006a  bf00              NOP                            ;1482
00006c  2000              MOVS     r0,#0                 ;1484
00006e  e7cf              B        |L4.16|
;;;1486   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1561     */
;;;1562   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1563   {
000002  4603              MOV      r3,r0
;;;1564     /* Check the parameters */
;;;1565     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1566     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1567   
;;;1568     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  203c              MOVS     r0,#0x3c
000008  5cc0              LDRB     r0,[r0,r3]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L5.18|
00000e  2002              MOVS     r0,#2
                  |L5.16|
;;;1569   
;;;1570     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1571         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1572     {
;;;1573       /* Select the Input trigger */
;;;1574       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1575       htim->Instance->SMCR |= InputTrigger;
;;;1576     }
;;;1577   
;;;1578     /* Select the Capture Compare preload feature */
;;;1579     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1580     /* Select the Commutation event source */
;;;1581     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1582     htim->Instance->CR2 |= CommutationSource;
;;;1583   
;;;1584     /* Enable the Commutation DMA Request */
;;;1585     /* Set the DMA Commutation Callback */
;;;1586     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
;;;1587     /* Set the DMA error callback */
;;;1588     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
;;;1589   
;;;1590     /* Enable the Commutation DMA Request */
;;;1591     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1592   
;;;1593     __HAL_UNLOCK(htim);
;;;1594   
;;;1595     return HAL_OK;
;;;1596   }
000010  bd10              POP      {r4,pc}
                  |L5.18|
000012  2401              MOVS     r4,#1                 ;1568
000014  203c              MOVS     r0,#0x3c              ;1568
000016  54c4              STRB     r4,[r0,r3]            ;1568
000018  bf00              NOP                            ;1568
00001a  2900              CMP      r1,#0                 ;1570
00001c  d005              BEQ      |L5.42|
00001e  2910              CMP      r1,#0x10              ;1570
000020  d003              BEQ      |L5.42|
000022  2920              CMP      r1,#0x20              ;1571
000024  d001              BEQ      |L5.42|
000026  2930              CMP      r1,#0x30              ;1571
000028  d10a              BNE      |L5.64|
                  |L5.42|
00002a  6818              LDR      r0,[r3,#0]            ;1574
00002c  6880              LDR      r0,[r0,#8]            ;1574
00002e  2470              MOVS     r4,#0x70              ;1574
000030  43a0              BICS     r0,r0,r4              ;1574
000032  681c              LDR      r4,[r3,#0]            ;1574
000034  60a0              STR      r0,[r4,#8]            ;1574
000036  6818              LDR      r0,[r3,#0]            ;1575
000038  6880              LDR      r0,[r0,#8]            ;1575
00003a  4308              ORRS     r0,r0,r1              ;1575
00003c  681c              LDR      r4,[r3,#0]            ;1575
00003e  60a0              STR      r0,[r4,#8]            ;1575
                  |L5.64|
000040  6818              LDR      r0,[r3,#0]            ;1579
000042  6840              LDR      r0,[r0,#4]            ;1579
000044  2401              MOVS     r4,#1                 ;1579
000046  4320              ORRS     r0,r0,r4              ;1579
000048  681c              LDR      r4,[r3,#0]            ;1579
00004a  6060              STR      r0,[r4,#4]            ;1579
00004c  6818              LDR      r0,[r3,#0]            ;1581
00004e  6840              LDR      r0,[r0,#4]            ;1581
000050  2404              MOVS     r4,#4                 ;1581
000052  43a0              BICS     r0,r0,r4              ;1581
000054  681c              LDR      r4,[r3,#0]            ;1581
000056  6060              STR      r0,[r4,#4]            ;1581
000058  6818              LDR      r0,[r3,#0]            ;1582
00005a  6840              LDR      r0,[r0,#4]            ;1582
00005c  4310              ORRS     r0,r0,r2              ;1582
00005e  681c              LDR      r4,[r3,#0]            ;1582
000060  6060              STR      r0,[r4,#4]            ;1582
000062  4c0a              LDR      r4,|L5.140|
000064  6b58              LDR      r0,[r3,#0x34]         ;1586
000066  6284              STR      r4,[r0,#0x28]         ;1586
000068  4c09              LDR      r4,|L5.144|
00006a  6b58              LDR      r0,[r3,#0x34]         ;1588
00006c  6304              STR      r4,[r0,#0x30]         ;1588
00006e  6818              LDR      r0,[r3,#0]            ;1591
000070  68c0              LDR      r0,[r0,#0xc]          ;1591
000072  2401              MOVS     r4,#1                 ;1591
000074  0364              LSLS     r4,r4,#13             ;1591
000076  4320              ORRS     r0,r0,r4              ;1591
000078  681c              LDR      r4,[r3,#0]            ;1591
00007a  60e0              STR      r0,[r4,#0xc]          ;1591
00007c  bf00              NOP                            ;1593
00007e  2400              MOVS     r4,#0                 ;1593
000080  203c              MOVS     r0,#0x3c              ;1593
000082  54c4              STRB     r4,[r0,r3]            ;1593
000084  bf00              NOP                            ;1593
000086  2000              MOVS     r0,#0                 ;1595
000088  e7c2              B        |L5.16|
;;;1597   
                          ENDP

00008a  0000              DCW      0x0000
                  |L5.140|
                          DCD      TIMEx_DMACommutationCplt
                  |L5.144|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1508     */
;;;1509   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1510   {
000002  4603              MOV      r3,r0
;;;1511     /* Check the parameters */
;;;1512     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1513     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1514   
;;;1515     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  203c              MOVS     r0,#0x3c
000008  5cc0              LDRB     r0,[r0,r3]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L6.18|
00000e  2002              MOVS     r0,#2
                  |L6.16|
;;;1516   
;;;1517     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1518         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1519     {
;;;1520       /* Select the Input trigger */
;;;1521       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1522       htim->Instance->SMCR |= InputTrigger;
;;;1523     }
;;;1524   
;;;1525     /* Select the Capture Compare preload feature */
;;;1526     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1527     /* Select the Commutation event source */
;;;1528     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1529     htim->Instance->CR2 |= CommutationSource;
;;;1530   
;;;1531     /* Enable the Commutation Interrupt Request */
;;;1532     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1533   
;;;1534     __HAL_UNLOCK(htim);
;;;1535   
;;;1536     return HAL_OK;
;;;1537   }
000010  bd10              POP      {r4,pc}
                  |L6.18|
000012  2401              MOVS     r4,#1                 ;1515
000014  203c              MOVS     r0,#0x3c              ;1515
000016  54c4              STRB     r4,[r0,r3]            ;1515
000018  bf00              NOP                            ;1515
00001a  2900              CMP      r1,#0                 ;1517
00001c  d005              BEQ      |L6.42|
00001e  2910              CMP      r1,#0x10              ;1517
000020  d003              BEQ      |L6.42|
000022  2920              CMP      r1,#0x20              ;1518
000024  d001              BEQ      |L6.42|
000026  2930              CMP      r1,#0x30              ;1518
000028  d10a              BNE      |L6.64|
                  |L6.42|
00002a  6818              LDR      r0,[r3,#0]            ;1521
00002c  6880              LDR      r0,[r0,#8]            ;1521
00002e  2470              MOVS     r4,#0x70              ;1521
000030  43a0              BICS     r0,r0,r4              ;1521
000032  681c              LDR      r4,[r3,#0]            ;1521
000034  60a0              STR      r0,[r4,#8]            ;1521
000036  6818              LDR      r0,[r3,#0]            ;1522
000038  6880              LDR      r0,[r0,#8]            ;1522
00003a  4308              ORRS     r0,r0,r1              ;1522
00003c  681c              LDR      r4,[r3,#0]            ;1522
00003e  60a0              STR      r0,[r4,#8]            ;1522
                  |L6.64|
000040  6818              LDR      r0,[r3,#0]            ;1526
000042  6840              LDR      r0,[r0,#4]            ;1526
000044  2401              MOVS     r4,#1                 ;1526
000046  4320              ORRS     r0,r0,r4              ;1526
000048  681c              LDR      r4,[r3,#0]            ;1526
00004a  6060              STR      r0,[r4,#4]            ;1526
00004c  6818              LDR      r0,[r3,#0]            ;1528
00004e  6840              LDR      r0,[r0,#4]            ;1528
000050  2404              MOVS     r4,#4                 ;1528
000052  43a0              BICS     r0,r0,r4              ;1528
000054  681c              LDR      r4,[r3,#0]            ;1528
000056  6060              STR      r0,[r4,#4]            ;1528
000058  6818              LDR      r0,[r3,#0]            ;1529
00005a  6840              LDR      r0,[r0,#4]            ;1529
00005c  4310              ORRS     r0,r0,r2              ;1529
00005e  681c              LDR      r4,[r3,#0]            ;1529
000060  6060              STR      r0,[r4,#4]            ;1529
000062  6818              LDR      r0,[r3,#0]            ;1532
000064  68c0              LDR      r0,[r0,#0xc]          ;1532
000066  2420              MOVS     r4,#0x20              ;1532
000068  4320              ORRS     r0,r0,r4              ;1532
00006a  681c              LDR      r4,[r3,#0]            ;1532
00006c  60e0              STR      r0,[r4,#0xc]          ;1532
00006e  bf00              NOP                            ;1534
000070  2400              MOVS     r4,#0                 ;1534
000072  203c              MOVS     r0,#0x3c              ;1534
000074  54c4              STRB     r4,[r0,r3]            ;1534
000076  bf00              NOP                            ;1534
000078  2000              MOVS     r0,#0                 ;1536
00007a  e7c9              B        |L6.16|
;;;1538   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;236      */
;;;237    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;238    {
000002  4604              MOV      r4,r0
;;;239      /* Check the parameters */
;;;240      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;241    
;;;242      htim->State = HAL_TIM_STATE_BUSY;
000004  2102              MOVS     r1,#2
000006  203d              MOVS     r0,#0x3d
000008  5501              STRB     r1,[r0,r4]
;;;243    
;;;244      /* Disable the TIM Peripheral Clock */
;;;245      __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  490e              LDR      r1,|L7.76|
000012  4008              ANDS     r0,r0,r1
000014  2800              CMP      r0,#0
000016  d10b              BNE      |L7.48|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  2800              CMP      r0,#0
000022  d105              BNE      |L7.48|
000024  6820              LDR      r0,[r4,#0]
000026  6800              LDR      r0,[r0,#0]
000028  0840              LSRS     r0,r0,#1
00002a  0040              LSLS     r0,r0,#1
00002c  6821              LDR      r1,[r4,#0]
00002e  6008              STR      r0,[r1,#0]
                  |L7.48|
000030  bf00              NOP      
;;;246    
;;;247      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;248      HAL_TIMEx_HallSensor_MspDeInit(htim);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;249    
;;;250      /* Change TIM state */
;;;251      htim->State = HAL_TIM_STATE_RESET;
000038  2100              MOVS     r1,#0
00003a  203d              MOVS     r0,#0x3d
00003c  5501              STRB     r1,[r0,r4]
;;;252    
;;;253      /* Release Lock */
;;;254      __HAL_UNLOCK(htim);
00003e  bf00              NOP      
000040  203c              MOVS     r0,#0x3c
000042  5501              STRB     r1,[r0,r4]
000044  bf00              NOP      
;;;255    
;;;256      return HAL_OK;
000046  2000              MOVS     r0,#0
;;;257    }
000048  bd10              POP      {r4,pc}
;;;258    
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;1956     */
;;;1957   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;1958   {
;;;1959     return htim->State;
000002  203d              MOVS     r0,#0x3d
000004  5c40              LDRB     r0,[r0,r1]
;;;1960   }
000006  4770              BX       lr
;;;1961   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Init PROC
;;;157      */
;;;158    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;159    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;160      TIM_OC_InitTypeDef OC_Config;
;;;161    
;;;162      /* Check the TIM handle allocation */
;;;163      if(htim == NULL)
000008  2c00              CMP      r4,#0
00000a  d102              BNE      |L9.18|
;;;164      {
;;;165        return HAL_ERROR;
00000c  2001              MOVS     r0,#1
                  |L9.14|
;;;166      }
;;;167    
;;;168      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;169      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;170      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;171      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;172      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;173      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;174      assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;175    
;;;176      if(htim->State == HAL_TIM_STATE_RESET)
;;;177      {
;;;178        /* Allocate lock resource and initialize it */
;;;179        htim->Lock = HAL_UNLOCKED;
;;;180    
;;;181        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;182        HAL_TIMEx_HallSensor_MspInit(htim);
;;;183      }
;;;184    
;;;185      /* Set the TIM state */
;;;186      htim->State= HAL_TIM_STATE_BUSY;
;;;187    
;;;188      /* Configure the Time base in the Encoder Mode */
;;;189      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;190    
;;;191      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;192      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;193    
;;;194      /* Reset the IC1PSC Bits */
;;;195      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;196      /* Set the IC1PSC value */
;;;197      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;198    
;;;199      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;200      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;201    
;;;202      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;203      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;204      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;205    
;;;206      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
;;;207      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;208      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;209    
;;;210      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;211      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;212      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;213      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;214      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;215      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;216      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;217      OC_Config.Pulse = sConfig->Commutation_Delay;
;;;218    
;;;219      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;220    
;;;221      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;222        register to 101 */
;;;223      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;224      htim->Instance->CR2 |= TIM_TRGO_OC2REF;
;;;225    
;;;226      /* Initialize the TIM state*/
;;;227      htim->State= HAL_TIM_STATE_READY;
;;;228    
;;;229      return HAL_OK;
;;;230    }
00000e  b007              ADD      sp,sp,#0x1c
000010  bd30              POP      {r4,r5,pc}
                  |L9.18|
000012  203d              MOVS     r0,#0x3d              ;176
000014  5d00              LDRB     r0,[r0,r4]            ;176
000016  2800              CMP      r0,#0                 ;176
000018  d105              BNE      |L9.38|
00001a  2100              MOVS     r1,#0                 ;179
00001c  203c              MOVS     r0,#0x3c              ;179
00001e  5501              STRB     r1,[r0,r4]            ;179
000020  4620              MOV      r0,r4                 ;182
000022  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
                  |L9.38|
000026  2102              MOVS     r1,#2                 ;186
000028  203d              MOVS     r0,#0x3d              ;186
00002a  5501              STRB     r1,[r0,r4]            ;186
00002c  1d21              ADDS     r1,r4,#4              ;189
00002e  6820              LDR      r0,[r4,#0]            ;189
000030  f7fffffe          BL       TIM_Base_SetConfig
000034  68ab              LDR      r3,[r5,#8]            ;192
000036  6829              LDR      r1,[r5,#0]            ;192
000038  2203              MOVS     r2,#3                 ;192
00003a  6820              LDR      r0,[r4,#0]            ;192
00003c  f7fffffe          BL       TIM_TI1_SetConfig
000040  6820              LDR      r0,[r4,#0]            ;195
000042  6980              LDR      r0,[r0,#0x18]         ;195
000044  210c              MOVS     r1,#0xc               ;195
000046  4388              BICS     r0,r0,r1              ;195
000048  6821              LDR      r1,[r4,#0]            ;195
00004a  6188              STR      r0,[r1,#0x18]         ;195
00004c  6820              LDR      r0,[r4,#0]            ;197
00004e  6980              LDR      r0,[r0,#0x18]         ;197
000050  6869              LDR      r1,[r5,#4]            ;197
000052  4308              ORRS     r0,r0,r1              ;197
000054  6821              LDR      r1,[r4,#0]            ;197
000056  6188              STR      r0,[r1,#0x18]         ;197
000058  6820              LDR      r0,[r4,#0]            ;200
00005a  6840              LDR      r0,[r0,#4]            ;200
00005c  2180              MOVS     r1,#0x80              ;200
00005e  4308              ORRS     r0,r0,r1              ;200
000060  6821              LDR      r1,[r4,#0]            ;200
000062  6048              STR      r0,[r1,#4]            ;200
000064  6820              LDR      r0,[r4,#0]            ;203
000066  6880              LDR      r0,[r0,#8]            ;203
000068  2170              MOVS     r1,#0x70              ;203
00006a  4388              BICS     r0,r0,r1              ;203
00006c  6821              LDR      r1,[r4,#0]            ;203
00006e  6088              STR      r0,[r1,#8]            ;203
000070  6820              LDR      r0,[r4,#0]            ;204
000072  6880              LDR      r0,[r0,#8]            ;204
000074  2140              MOVS     r1,#0x40              ;204
000076  4308              ORRS     r0,r0,r1              ;204
000078  6821              LDR      r1,[r4,#0]            ;204
00007a  6088              STR      r0,[r1,#8]            ;204
00007c  6820              LDR      r0,[r4,#0]            ;207
00007e  6880              LDR      r0,[r0,#8]            ;207
000080  08c0              LSRS     r0,r0,#3              ;207
000082  00c0              LSLS     r0,r0,#3              ;207
000084  6821              LDR      r1,[r4,#0]            ;207
000086  6088              STR      r0,[r1,#8]            ;207
000088  6820              LDR      r0,[r4,#0]            ;208
00008a  6880              LDR      r0,[r0,#8]            ;208
00008c  2104              MOVS     r1,#4                 ;208
00008e  4308              ORRS     r0,r0,r1              ;208
000090  6821              LDR      r1,[r4,#0]            ;208
000092  6088              STR      r0,[r1,#8]            ;208
000094  2000              MOVS     r0,#0                 ;211
000096  9004              STR      r0,[sp,#0x10]         ;211
000098  9005              STR      r0,[sp,#0x14]         ;212
00009a  2070              MOVS     r0,#0x70              ;213
00009c  9000              STR      r0,[sp,#0]            ;213
00009e  2000              MOVS     r0,#0                 ;214
0000a0  9006              STR      r0,[sp,#0x18]         ;214
0000a2  9003              STR      r0,[sp,#0xc]          ;215
0000a4  9002              STR      r0,[sp,#8]            ;216
0000a6  68e8              LDR      r0,[r5,#0xc]          ;217
0000a8  9001              STR      r0,[sp,#4]            ;217
0000aa  4669              MOV      r1,sp                 ;219
0000ac  6820              LDR      r0,[r4,#0]            ;219
0000ae  f7fffffe          BL       TIM_OC2_SetConfig
0000b2  6820              LDR      r0,[r4,#0]            ;223
0000b4  6840              LDR      r0,[r0,#4]            ;223
0000b6  2170              MOVS     r1,#0x70              ;223
0000b8  4388              BICS     r0,r0,r1              ;223
0000ba  6821              LDR      r1,[r4,#0]            ;223
0000bc  6048              STR      r0,[r1,#4]            ;223
0000be  6820              LDR      r0,[r4,#0]            ;224
0000c0  6840              LDR      r0,[r0,#4]            ;224
0000c2  2150              MOVS     r1,#0x50              ;224
0000c4  4308              ORRS     r0,r0,r1              ;224
0000c6  6821              LDR      r1,[r4,#0]            ;224
0000c8  6048              STR      r0,[r1,#4]            ;224
0000ca  2101              MOVS     r1,#1                 ;227
0000cc  203d              MOVS     r0,#0x3d              ;227
0000ce  5501              STRB     r1,[r0,r4]            ;227
0000d0  2000              MOVS     r0,#0                 ;229
0000d2  e79c              B        |L9.14|
;;;231    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;278      */
;;;279    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;280    {
;;;281      /* Prevent unused argument(s) compilation warning */
;;;282      UNUSED(htim);
;;;283    
;;;284      /* NOTE : This function Should not be modified, when the callback is needed,
;;;285                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;286       */
;;;287    }
;;;288    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;263      */
;;;264    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;265    {
;;;266      /* Prevent unused argument(s) compilation warning */
;;;267      UNUSED(htim);
;;;268    
;;;269      /* NOTE : This function Should not be modified, when the callback is needed,
;;;270                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;271       */
;;;272    }
;;;273    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start PROC
;;;293      */
;;;294    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;295    {
000002  4604              MOV      r4,r0
;;;296      /* Check the parameters */
;;;297      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;298    
;;;299      /* Enable the Input Capture channel 1
;;;300        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;301      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
000004  2201              MOVS     r2,#1
000006  2100              MOVS     r1,#0
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;302    
;;;303      /* Enable the Peripheral */
;;;304      __HAL_TIM_ENABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6800              LDR      r0,[r0,#0]
000012  2101              MOVS     r1,#1
000014  4308              ORRS     r0,r0,r1
000016  6821              LDR      r1,[r4,#0]
000018  6008              STR      r0,[r1,#0]
;;;305    
;;;306      /* Return function status */
;;;307      return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;308    }
00001c  bd10              POP      {r4,pc}
;;;309    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;385      */
;;;386    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;387    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;388      /* Check the parameters */
;;;389      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;390    
;;;391       if((htim->State == HAL_TIM_STATE_BUSY))
000008  203d              MOVS     r0,#0x3d
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2802              CMP      r0,#2
00000e  d100              BNE      |L13.18|
                  |L13.16|
;;;392      {
;;;393         return HAL_BUSY;
;;;394      }
;;;395      else if((htim->State == HAL_TIM_STATE_READY))
;;;396      {
;;;397        if(((uint32_t)pData == 0U ) && (Length > 0U))
;;;398        {
;;;399          return HAL_ERROR;
;;;400        }
;;;401        else
;;;402        {
;;;403          htim->State = HAL_TIM_STATE_BUSY;
;;;404        }
;;;405      }
;;;406      /* Enable the Input Capture channel 1
;;;407        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;408      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;409    
;;;410      /* Set the DMA Input Capture 1 Callback */
;;;411      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;412      /* Set the DMA error callback */
;;;413      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;414    
;;;415      /* Enable the DMA channel for Capture 1*/
;;;416      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
;;;417    
;;;418      /* Enable the capture compare 1 Interrupt */
;;;419      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;420    
;;;421      /* Enable the Peripheral */
;;;422      __HAL_TIM_ENABLE(htim);
;;;423    
;;;424      /* Return function status */
;;;425      return HAL_OK;
;;;426    }
000010  bd70              POP      {r4-r6,pc}
                  |L13.18|
000012  203d              MOVS     r0,#0x3d              ;395
000014  5d00              LDRB     r0,[r0,r4]            ;395
000016  2801              CMP      r0,#1                 ;395
000018  d107              BNE      |L13.42|
00001a  2d00              CMP      r5,#0                 ;397
00001c  d102              BNE      |L13.36|
00001e  2e00              CMP      r6,#0                 ;397
000020  d000              BEQ      |L13.36|
000022  e7f5              B        |L13.16|
                  |L13.36|
000024  2102              MOVS     r1,#2                 ;403
000026  203d              MOVS     r0,#0x3d              ;403
000028  5501              STRB     r1,[r0,r4]            ;403
                  |L13.42|
00002a  2201              MOVS     r2,#1                 ;408
00002c  2100              MOVS     r1,#0                 ;408
00002e  6820              LDR      r0,[r4,#0]            ;408
000030  f7fffffe          BL       TIM_CCxChannelCmd
000034  490e              LDR      r1,|L13.112|
000036  6a60              LDR      r0,[r4,#0x24]         ;411
000038  6281              STR      r1,[r0,#0x28]         ;411
00003a  490e              LDR      r1,|L13.116|
00003c  6a60              LDR      r0,[r4,#0x24]         ;413
00003e  6301              STR      r1,[r0,#0x30]         ;413
000040  6822              LDR      r2,[r4,#0]            ;416
000042  4611              MOV      r1,r2                 ;416
000044  3134              ADDS     r1,r1,#0x34           ;416
000046  4633              MOV      r3,r6                 ;416
000048  462a              MOV      r2,r5                 ;416
00004a  6a60              LDR      r0,[r4,#0x24]         ;416
00004c  f7fffffe          BL       HAL_DMA_Start_IT
000050  6820              LDR      r0,[r4,#0]            ;419
000052  68c0              LDR      r0,[r0,#0xc]          ;419
000054  2101              MOVS     r1,#1                 ;419
000056  0249              LSLS     r1,r1,#9              ;419
000058  4308              ORRS     r0,r0,r1              ;419
00005a  6821              LDR      r1,[r4,#0]            ;419
00005c  60c8              STR      r0,[r1,#0xc]          ;419
00005e  6820              LDR      r0,[r4,#0]            ;422
000060  6800              LDR      r0,[r0,#0]            ;422
000062  2101              MOVS     r1,#1                 ;422
000064  4308              ORRS     r0,r0,r1              ;422
000066  6821              LDR      r1,[r4,#0]            ;422
000068  6008              STR      r0,[r1,#0]            ;422
00006a  2000              MOVS     r0,#0                 ;425
00006c  e7d0              B        |L13.16|
;;;427    
                          ENDP

00006e  0000              DCW      0x0000
                  |L13.112|
                          DCD      TIM_DMACaptureCplt
                  |L13.116|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;335      */
;;;336    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;337    {
000002  4604              MOV      r4,r0
;;;338      /* Check the parameters */
;;;339      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;340    
;;;341      /* Enable the capture compare Interrupts 1 event */
;;;342      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  2102              MOVS     r1,#2
00000a  4308              ORRS     r0,r0,r1
00000c  6821              LDR      r1,[r4,#0]
00000e  60c8              STR      r0,[r1,#0xc]
;;;343    
;;;344      /* Enable the Input Capture channel 1
;;;345        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;346      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
000010  2201              MOVS     r2,#1
000012  2100              MOVS     r1,#0
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       TIM_CCxChannelCmd
;;;347    
;;;348      /* Enable the Peripheral */
;;;349      __HAL_TIM_ENABLE(htim);
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  2101              MOVS     r1,#1
000020  4308              ORRS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  6008              STR      r0,[r1,#0]
;;;350    
;;;351      /* Return function status */
;;;352      return HAL_OK;
000026  2000              MOVS     r0,#0
;;;353    }
000028  bd10              POP      {r4,pc}
;;;354    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Stop PROC
;;;314      */
;;;315    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;316    {
000002  4604              MOV      r4,r0
;;;317      /* Check the parameters */
;;;318      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;319    
;;;320      /* Disable the Input Capture channels 1, 2 and 3
;;;321        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;322      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;323    
;;;324      /* Disable the Peripheral */
;;;325      __HAL_TIM_DISABLE(htim);
00000e  bf00              NOP      
000010  6820              LDR      r0,[r4,#0]
000012  6a00              LDR      r0,[r0,#0x20]
000014  4909              LDR      r1,|L15.60|
000016  4008              ANDS     r0,r0,r1
000018  2800              CMP      r0,#0
00001a  d10b              BNE      |L15.52|
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  1089              ASRS     r1,r1,#2
000022  4008              ANDS     r0,r0,r1
000024  2800              CMP      r0,#0
000026  d105              BNE      |L15.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6800              LDR      r0,[r0,#0]
00002c  0840              LSRS     r0,r0,#1
00002e  0040              LSLS     r0,r0,#1
000030  6821              LDR      r1,[r4,#0]
000032  6008              STR      r0,[r1,#0]
                  |L15.52|
000034  bf00              NOP      
;;;326    
;;;327      /* Return function status */
;;;328      return HAL_OK;
000036  2000              MOVS     r0,#0
;;;329    }
000038  bd10              POP      {r4,pc}
;;;330    
                          ENDP

00003a  0000              DCW      0x0000
                  |L15.60|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;432      */
;;;433    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;434    {
000002  4604              MOV      r4,r0
;;;435      /* Check the parameters */
;;;436      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;437    
;;;438      /* Disable the Input Capture channel 1
;;;439        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;440      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;441    
;;;442    
;;;443      /* Disable the capture compare Interrupts 1 event */
;;;444      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  2101              MOVS     r1,#1
000014  0249              LSLS     r1,r1,#9
000016  4388              BICS     r0,r0,r1
000018  6821              LDR      r1,[r4,#0]
00001a  60c8              STR      r0,[r1,#0xc]
;;;445    
;;;446      /* Disable the Peripheral */
;;;447      __HAL_TIM_DISABLE(htim);
00001c  bf00              NOP      
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  4909              LDR      r1,|L16.72|
000024  4008              ANDS     r0,r0,r1
000026  2800              CMP      r0,#0
000028  d10b              BNE      |L16.66|
00002a  6820              LDR      r0,[r4,#0]
00002c  6a00              LDR      r0,[r0,#0x20]
00002e  1089              ASRS     r1,r1,#2
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d105              BNE      |L16.66|
000036  6820              LDR      r0,[r4,#0]
000038  6800              LDR      r0,[r0,#0]
00003a  0840              LSRS     r0,r0,#1
00003c  0040              LSLS     r0,r0,#1
00003e  6821              LDR      r1,[r4,#0]
000040  6008              STR      r0,[r1,#0]
                  |L16.66|
000042  bf00              NOP      
;;;448    
;;;449      /* Return function status */
;;;450      return HAL_OK;
000044  2000              MOVS     r0,#0
;;;451    }
000046  bd10              POP      {r4,pc}
;;;452    
                          ENDP

                  |L16.72|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;359      */
;;;360    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;361    {
000002  4604              MOV      r4,r0
;;;362      /* Check the parameters */
;;;363      assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));
;;;364    
;;;365      /* Disable the Input Capture channel 1
;;;366        (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;367      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;368    
;;;369      /* Disable the capture compare Interrupts event */
;;;370      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  2102              MOVS     r1,#2
000014  4388              BICS     r0,r0,r1
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;371    
;;;372      /* Disable the Peripheral */
;;;373      __HAL_TIM_DISABLE(htim);
00001a  bf00              NOP      
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  4909              LDR      r1,|L17.72|
000022  4008              ANDS     r0,r0,r1
000024  2800              CMP      r0,#0
000026  d10b              BNE      |L17.64|
000028  6820              LDR      r0,[r4,#0]
00002a  6a00              LDR      r0,[r0,#0x20]
00002c  1089              ASRS     r1,r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  2800              CMP      r0,#0
000032  d105              BNE      |L17.64|
000034  6820              LDR      r0,[r4,#0]
000036  6800              LDR      r0,[r0,#0]
000038  0840              LSRS     r0,r0,#1
00003a  0040              LSLS     r0,r0,#1
00003c  6821              LDR      r1,[r4,#0]
00003e  6008              STR      r0,[r1,#0]
                  |L17.64|
000040  bf00              NOP      
;;;374    
;;;375      /* Return function status */
;;;376      return HAL_OK;
000042  2000              MOVS     r0,#0
;;;377    }
000044  bd10              POP      {r4,pc}
;;;378    
                          ENDP

000046  0000              DCW      0x0000
                  |L17.72|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1605     */
;;;1606   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000000  4602              MOV      r2,r0
;;;1607   {
;;;1608     /* Check the parameters */
;;;1609     assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
;;;1610     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1611     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1612   
;;;1613     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  203c              MOVS     r0,#0x3c
000006  5c80              LDRB     r0,[r0,r2]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L18.16|
00000c  2002              MOVS     r0,#2
                  |L18.14|
;;;1614   
;;;1615     htim->State = HAL_TIM_STATE_BUSY;
;;;1616   
;;;1617     /* Reset the MMS Bits */
;;;1618     htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;1619     /* Select the TRGO source */
;;;1620     htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
;;;1621   
;;;1622     /* Reset the MSM Bit */
;;;1623     htim->Instance->SMCR &= ~TIM_SMCR_MSM;
;;;1624     /* Set or Reset the MSM Bit */
;;;1625     htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
;;;1626   
;;;1627     htim->State = HAL_TIM_STATE_READY;
;;;1628   
;;;1629     __HAL_UNLOCK(htim);
;;;1630   
;;;1631     return HAL_OK;
;;;1632   }
00000e  4770              BX       lr
                  |L18.16|
000010  2301              MOVS     r3,#1                 ;1613
000012  203c              MOVS     r0,#0x3c              ;1613
000014  5483              STRB     r3,[r0,r2]            ;1613
000016  bf00              NOP                            ;1613
000018  2302              MOVS     r3,#2                 ;1615
00001a  203d              MOVS     r0,#0x3d              ;1615
00001c  5483              STRB     r3,[r0,r2]            ;1615
00001e  6810              LDR      r0,[r2,#0]            ;1618
000020  6840              LDR      r0,[r0,#4]            ;1618
000022  2370              MOVS     r3,#0x70              ;1618
000024  4398              BICS     r0,r0,r3              ;1618
000026  6813              LDR      r3,[r2,#0]            ;1618
000028  6058              STR      r0,[r3,#4]            ;1618
00002a  6810              LDR      r0,[r2,#0]            ;1620
00002c  6840              LDR      r0,[r0,#4]            ;1620
00002e  680b              LDR      r3,[r1,#0]            ;1620
000030  4318              ORRS     r0,r0,r3              ;1620
000032  6813              LDR      r3,[r2,#0]            ;1620
000034  6058              STR      r0,[r3,#4]            ;1620
000036  6810              LDR      r0,[r2,#0]            ;1623
000038  6880              LDR      r0,[r0,#8]            ;1623
00003a  2380              MOVS     r3,#0x80              ;1623
00003c  4398              BICS     r0,r0,r3              ;1623
00003e  6813              LDR      r3,[r2,#0]            ;1623
000040  6098              STR      r0,[r3,#8]            ;1623
000042  6810              LDR      r0,[r2,#0]            ;1625
000044  6880              LDR      r0,[r0,#8]            ;1625
000046  684b              LDR      r3,[r1,#4]            ;1625
000048  4318              ORRS     r0,r0,r3              ;1625
00004a  6813              LDR      r3,[r2,#0]            ;1625
00004c  6098              STR      r0,[r3,#8]            ;1625
00004e  2301              MOVS     r3,#1                 ;1627
000050  203d              MOVS     r0,#0x3d              ;1627
000052  5483              STRB     r3,[r0,r2]            ;1627
000054  bf00              NOP                            ;1629
000056  2300              MOVS     r3,#0                 ;1629
000058  203c              MOVS     r0,#0x3c              ;1629
00005a  5483              STRB     r3,[r0,r2]            ;1629
00005c  bf00              NOP                            ;1629
00005e  2000              MOVS     r0,#0                 ;1631
000060  e7d5              B        |L18.14|
;;;1633   
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start PROC
;;;488      */
;;;489    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;490    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;491      /* Check the parameters */
;;;492      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;493    
;;;494         /* Enable the Capture compare channel N */
;;;495         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;496    
;;;497      /* Enable the Main Ouput */
;;;498        __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  2101              MOVS     r1,#1
000016  03c9              LSLS     r1,r1,#15
000018  4308              ORRS     r0,r0,r1
00001a  6821              LDR      r1,[r4,#0]
00001c  6448              STR      r0,[r1,#0x44]
;;;499    
;;;500      /* Enable the Peripheral */
;;;501      __HAL_TIM_ENABLE(htim);
00001e  6820              LDR      r0,[r4,#0]
000020  6800              LDR      r0,[r0,#0]
000022  2101              MOVS     r1,#1
000024  4308              ORRS     r0,r0,r1
000026  6821              LDR      r1,[r4,#0]
000028  6008              STR      r0,[r1,#0]
;;;502    
;;;503      /* Return function status */
;;;504      return HAL_OK;
00002a  2000              MOVS     r0,#0
;;;505    }
00002c  bd70              POP      {r4-r6,pc}
;;;506    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;690      */
;;;691    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;692    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;693      /* Check the parameters */
;;;694      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;695    
;;;696      if((htim->State == HAL_TIM_STATE_BUSY))
00000a  203d              MOVS     r0,#0x3d
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2802              CMP      r0,#2
000010  d100              BNE      |L20.20|
                  |L20.18|
;;;697      {
;;;698         return HAL_BUSY;
;;;699      }
;;;700      else if((htim->State == HAL_TIM_STATE_READY))
;;;701      {
;;;702        if(((uint32_t)pData == 0U ) && (Length > 0U))
;;;703        {
;;;704          return HAL_ERROR;
;;;705        }
;;;706        else
;;;707        {
;;;708          htim->State = HAL_TIM_STATE_BUSY;
;;;709        }
;;;710      }
;;;711      switch (Channel)
;;;712      {
;;;713        case TIM_CHANNEL_1:
;;;714        {
;;;715          /* Set the DMA Period elapsed callback */
;;;716          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;717    
;;;718          /* Set the DMA error callback */
;;;719          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;720    
;;;721          /* Enable the DMA channel */
;;;722          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;723    
;;;724          /* Enable the TIM Output Compare DMA request */
;;;725          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;726        }
;;;727        break;
;;;728    
;;;729        case TIM_CHANNEL_2:
;;;730        {
;;;731          /* Set the DMA Period elapsed callback */
;;;732          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;733    
;;;734          /* Set the DMA error callback */
;;;735          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;736    
;;;737          /* Enable the DMA channel */
;;;738          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;739    
;;;740          /* Enable the TIM Output Compare DMA request */
;;;741          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;742        }
;;;743        break;
;;;744    
;;;745        case TIM_CHANNEL_3:
;;;746    {
;;;747          /* Set the DMA Period elapsed callback */
;;;748          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;749    
;;;750          /* Set the DMA error callback */
;;;751          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;752    
;;;753          /* Enable the DMA channel */
;;;754          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;755    
;;;756          /* Enable the TIM Output Compare DMA request */
;;;757          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;758        }
;;;759        break;
;;;760    
;;;761        case TIM_CHANNEL_4:
;;;762        {
;;;763         /* Set the DMA Period elapsed callback */
;;;764          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;765    
;;;766          /* Set the DMA error callback */
;;;767          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;768    
;;;769          /* Enable the DMA channel */
;;;770          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;771    
;;;772          /* Enable the TIM Output Compare DMA request */
;;;773          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;774        }
;;;775        break;
;;;776    
;;;777        default:
;;;778        break;
;;;779      }
;;;780    
;;;781      /* Enable the Capture compare channel N */
;;;782      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;783    
;;;784      /* Enable the Main Ouput */
;;;785      __HAL_TIM_MOE_ENABLE(htim);
;;;786    
;;;787      /* Enable the Peripheral */
;;;788      __HAL_TIM_ENABLE(htim);
;;;789    
;;;790      /* Return function status */
;;;791      return HAL_OK;
;;;792    }
000012  bdf8              POP      {r3-r7,pc}
                  |L20.20|
000014  203d              MOVS     r0,#0x3d              ;700
000016  5d00              LDRB     r0,[r0,r4]            ;700
000018  2801              CMP      r0,#1                 ;700
00001a  d107              BNE      |L20.44|
00001c  2d00              CMP      r5,#0                 ;702
00001e  d102              BNE      |L20.38|
000020  2f00              CMP      r7,#0                 ;702
000022  d000              BEQ      |L20.38|
000024  e7f5              B        |L20.18|
                  |L20.38|
000026  2102              MOVS     r1,#2                 ;708
000028  203d              MOVS     r0,#0x3d              ;708
00002a  5501              STRB     r1,[r0,r4]            ;708
                  |L20.44|
00002c  2e00              CMP      r6,#0                 ;711
00002e  d006              BEQ      |L20.62|
000030  2e04              CMP      r6,#4                 ;711
000032  d01a              BEQ      |L20.106|
000034  2e08              CMP      r6,#8                 ;711
000036  d02e              BEQ      |L20.150|
000038  2e0c              CMP      r6,#0xc               ;711
00003a  d158              BNE      |L20.238|
00003c  e041              B        |L20.194|
                  |L20.62|
00003e  4937              LDR      r1,|L20.284|
000040  6a60              LDR      r0,[r4,#0x24]         ;716
000042  6281              STR      r1,[r0,#0x28]         ;716
000044  4936              LDR      r1,|L20.288|
000046  6a60              LDR      r0,[r4,#0x24]         ;719
000048  6301              STR      r1,[r0,#0x30]         ;719
00004a  6821              LDR      r1,[r4,#0]            ;722
00004c  460a              MOV      r2,r1                 ;722
00004e  3234              ADDS     r2,r2,#0x34           ;722
000050  463b              MOV      r3,r7                 ;722
000052  4629              MOV      r1,r5                 ;722
000054  6a60              LDR      r0,[r4,#0x24]         ;722
000056  f7fffffe          BL       HAL_DMA_Start_IT
00005a  6820              LDR      r0,[r4,#0]            ;725
00005c  68c0              LDR      r0,[r0,#0xc]          ;725
00005e  2101              MOVS     r1,#1                 ;725
000060  0249              LSLS     r1,r1,#9              ;725
000062  4308              ORRS     r0,r0,r1              ;725
000064  6821              LDR      r1,[r4,#0]            ;725
000066  60c8              STR      r0,[r1,#0xc]          ;725
000068  e042              B        |L20.240|
                  |L20.106|
00006a  492c              LDR      r1,|L20.284|
00006c  6aa0              LDR      r0,[r4,#0x28]         ;732
00006e  6281              STR      r1,[r0,#0x28]         ;732
000070  492b              LDR      r1,|L20.288|
000072  6aa0              LDR      r0,[r4,#0x28]         ;735
000074  6301              STR      r1,[r0,#0x30]         ;735
000076  6821              LDR      r1,[r4,#0]            ;738
000078  460a              MOV      r2,r1                 ;738
00007a  3238              ADDS     r2,r2,#0x38           ;738
00007c  463b              MOV      r3,r7                 ;738
00007e  4629              MOV      r1,r5                 ;738
000080  6aa0              LDR      r0,[r4,#0x28]         ;738
000082  f7fffffe          BL       HAL_DMA_Start_IT
000086  6820              LDR      r0,[r4,#0]            ;741
000088  68c0              LDR      r0,[r0,#0xc]          ;741
00008a  2101              MOVS     r1,#1                 ;741
00008c  0289              LSLS     r1,r1,#10             ;741
00008e  4308              ORRS     r0,r0,r1              ;741
000090  6821              LDR      r1,[r4,#0]            ;741
000092  60c8              STR      r0,[r1,#0xc]          ;741
000094  e02c              B        |L20.240|
                  |L20.150|
000096  4921              LDR      r1,|L20.284|
000098  6ae0              LDR      r0,[r4,#0x2c]         ;748
00009a  6281              STR      r1,[r0,#0x28]         ;748
00009c  4920              LDR      r1,|L20.288|
00009e  6ae0              LDR      r0,[r4,#0x2c]         ;751
0000a0  6301              STR      r1,[r0,#0x30]         ;751
0000a2  6821              LDR      r1,[r4,#0]            ;754
0000a4  460a              MOV      r2,r1                 ;754
0000a6  323c              ADDS     r2,r2,#0x3c           ;754
0000a8  463b              MOV      r3,r7                 ;754
0000aa  4629              MOV      r1,r5                 ;754
0000ac  6ae0              LDR      r0,[r4,#0x2c]         ;754
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;757
0000b4  68c0              LDR      r0,[r0,#0xc]          ;757
0000b6  2101              MOVS     r1,#1                 ;757
0000b8  02c9              LSLS     r1,r1,#11             ;757
0000ba  4308              ORRS     r0,r0,r1              ;757
0000bc  6821              LDR      r1,[r4,#0]            ;757
0000be  60c8              STR      r0,[r1,#0xc]          ;757
0000c0  e016              B        |L20.240|
                  |L20.194|
0000c2  4916              LDR      r1,|L20.284|
0000c4  6b20              LDR      r0,[r4,#0x30]         ;764
0000c6  6281              STR      r1,[r0,#0x28]         ;764
0000c8  4915              LDR      r1,|L20.288|
0000ca  6b20              LDR      r0,[r4,#0x30]         ;767
0000cc  6301              STR      r1,[r0,#0x30]         ;767
0000ce  6821              LDR      r1,[r4,#0]            ;770
0000d0  460a              MOV      r2,r1                 ;770
0000d2  3240              ADDS     r2,r2,#0x40           ;770
0000d4  463b              MOV      r3,r7                 ;770
0000d6  4629              MOV      r1,r5                 ;770
0000d8  6b20              LDR      r0,[r4,#0x30]         ;770
0000da  f7fffffe          BL       HAL_DMA_Start_IT
0000de  6820              LDR      r0,[r4,#0]            ;773
0000e0  68c0              LDR      r0,[r0,#0xc]          ;773
0000e2  2101              MOVS     r1,#1                 ;773
0000e4  0309              LSLS     r1,r1,#12             ;773
0000e6  4308              ORRS     r0,r0,r1              ;773
0000e8  6821              LDR      r1,[r4,#0]            ;773
0000ea  60c8              STR      r0,[r1,#0xc]          ;773
0000ec  e000              B        |L20.240|
                  |L20.238|
0000ee  bf00              NOP                            ;778
                  |L20.240|
0000f0  bf00              NOP                            ;727
0000f2  2204              MOVS     r2,#4                 ;782
0000f4  4631              MOV      r1,r6                 ;782
0000f6  6820              LDR      r0,[r4,#0]            ;782
0000f8  f7fffffe          BL       TIM_CCxNChannelCmd
0000fc  6820              LDR      r0,[r4,#0]            ;785
0000fe  6c40              LDR      r0,[r0,#0x44]         ;785
000100  2101              MOVS     r1,#1                 ;785
000102  03c9              LSLS     r1,r1,#15             ;785
000104  4308              ORRS     r0,r0,r1              ;785
000106  6821              LDR      r1,[r4,#0]            ;785
000108  6448              STR      r0,[r1,#0x44]         ;785
00010a  6820              LDR      r0,[r4,#0]            ;788
00010c  6800              LDR      r0,[r0,#0]            ;788
00010e  2101              MOVS     r1,#1                 ;788
000110  4308              ORRS     r0,r0,r1              ;788
000112  6821              LDR      r1,[r4,#0]            ;788
000114  6008              STR      r0,[r1,#0]            ;788
000116  2000              MOVS     r0,#0                 ;791
000118  e77b              B        |L20.18|
;;;793    
                          ENDP

00011a  0000              DCW      0x0000
                  |L20.284|
                          DCD      TIM_DMADelayPulseCplt
                  |L20.288|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start_IT PROC
;;;548      */
;;;549    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;550    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;551      /* Check the parameters */
;;;552      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;553    
;;;554      switch (Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L21.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L21.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L21.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L21.80|
000016  e014              B        |L21.66|
                  |L21.24|
;;;555      {
;;;556        case TIM_CHANNEL_1:
;;;557        {
;;;558          /* Enable the TIM Output Compare interrupt */
;;;559          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  2102              MOVS     r1,#2
00001e  4308              ORRS     r0,r0,r1
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;560        }
;;;561        break;
000024  e015              B        |L21.82|
                  |L21.38|
;;;562    
;;;563        case TIM_CHANNEL_2:
;;;564        {
;;;565          /* Enable the TIM Output Compare interrupt */
;;;566          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  2104              MOVS     r1,#4
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;567        }
;;;568        break;
000032  e00e              B        |L21.82|
                  |L21.52|
;;;569    
;;;570        case TIM_CHANNEL_3:
;;;571        {
;;;572          /* Enable the TIM Output Compare interrupt */
;;;573          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  2108              MOVS     r1,#8
00003a  4308              ORRS     r0,r0,r1
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;574        }
;;;575        break;
000040  e007              B        |L21.82|
                  |L21.66|
;;;576    
;;;577        case TIM_CHANNEL_4:
;;;578        {
;;;579          /* Enable the TIM Output Compare interrupt */
;;;580          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  2110              MOVS     r1,#0x10
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;581        }
;;;582        break;
00004e  e000              B        |L21.82|
                  |L21.80|
;;;583    
;;;584        default:
;;;585        break;
000050  bf00              NOP      
                  |L21.82|
000052  bf00              NOP                            ;561
;;;586      }
;;;587    
;;;588      /* Enable the TIM Break interrupt */
;;;589      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000054  6820              LDR      r0,[r4,#0]
000056  68c0              LDR      r0,[r0,#0xc]
000058  2180              MOVS     r1,#0x80
00005a  4308              ORRS     r0,r0,r1
00005c  6821              LDR      r1,[r4,#0]
00005e  60c8              STR      r0,[r1,#0xc]
;;;590    
;;;591         /* Enable the Capture compare channel N */
;;;592         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000060  2204              MOVS     r2,#4
000062  4629              MOV      r1,r5
000064  6820              LDR      r0,[r4,#0]
000066  f7fffffe          BL       TIM_CCxNChannelCmd
;;;593    
;;;594      /* Enable the Main Ouput */
;;;595        __HAL_TIM_MOE_ENABLE(htim);
00006a  6820              LDR      r0,[r4,#0]
00006c  6c40              LDR      r0,[r0,#0x44]
00006e  2101              MOVS     r1,#1
000070  03c9              LSLS     r1,r1,#15
000072  4308              ORRS     r0,r0,r1
000074  6821              LDR      r1,[r4,#0]
000076  6448              STR      r0,[r1,#0x44]
;;;596    
;;;597      /* Enable the Peripheral */
;;;598      __HAL_TIM_ENABLE(htim);
000078  6820              LDR      r0,[r4,#0]
00007a  6800              LDR      r0,[r0,#0]
00007c  2101              MOVS     r1,#1
00007e  4308              ORRS     r0,r0,r1
000080  6821              LDR      r1,[r4,#0]
000082  6008              STR      r0,[r1,#0]
;;;599    
;;;600      /* Return function status */
;;;601      return HAL_OK;
000084  2000              MOVS     r0,#0
;;;602    }
000086  bd70              POP      {r4-r6,pc}
;;;603    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Stop PROC
;;;518      */
;;;519    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;521      /* Check the parameters */
;;;522      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;523    
;;;524        /* Disable the Capture compare channel N */
;;;525      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;526    
;;;527      /* Disable the Main Ouput */
;;;528        __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  4914              LDR      r1,|L22.104|
000018  4008              ANDS     r0,r0,r1
00001a  2800              CMP      r0,#0
00001c  d10c              BNE      |L22.56|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  2800              CMP      r0,#0
000028  d106              BNE      |L22.56|
00002a  6820              LDR      r0,[r4,#0]
00002c  6c40              LDR      r0,[r0,#0x44]
00002e  2101              MOVS     r1,#1
000030  03c9              LSLS     r1,r1,#15
000032  4388              BICS     r0,r0,r1
000034  6821              LDR      r1,[r4,#0]
000036  6448              STR      r0,[r1,#0x44]
                  |L22.56|
000038  bf00              NOP      
;;;529    
;;;530      /* Disable the Peripheral */
;;;531      __HAL_TIM_DISABLE(htim);
00003a  bf00              NOP      
00003c  6820              LDR      r0,[r4,#0]
00003e  6a00              LDR      r0,[r0,#0x20]
000040  4909              LDR      r1,|L22.104|
000042  4008              ANDS     r0,r0,r1
000044  2800              CMP      r0,#0
000046  d10b              BNE      |L22.96|
000048  6820              LDR      r0,[r4,#0]
00004a  6a00              LDR      r0,[r0,#0x20]
00004c  1089              ASRS     r1,r1,#2
00004e  4008              ANDS     r0,r0,r1
000050  2800              CMP      r0,#0
000052  d105              BNE      |L22.96|
000054  6820              LDR      r0,[r4,#0]
000056  6800              LDR      r0,[r0,#0]
000058  0840              LSRS     r0,r0,#1
00005a  0040              LSLS     r0,r0,#1
00005c  6821              LDR      r1,[r4,#0]
00005e  6008              STR      r0,[r1,#0]
                  |L22.96|
000060  bf00              NOP      
;;;532    
;;;533      /* Return function status */
;;;534      return HAL_OK;
000062  2000              MOVS     r0,#0
;;;535    }
000064  bd70              POP      {r4-r6,pc}
;;;536    
                          ENDP

000066  0000              DCW      0x0000
                  |L22.104|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;805      */
;;;806    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;807    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;808      /* Check the parameters */
;;;809      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;810    
;;;811      switch (Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L23.24|
00000a  2d04              CMP      r5,#4
00000c  d00c              BEQ      |L23.40|
00000e  2d08              CMP      r5,#8
000010  d012              BEQ      |L23.56|
000012  2d0c              CMP      r5,#0xc
000014  d120              BNE      |L23.88|
000016  e017              B        |L23.72|
                  |L23.24|
;;;812      {
;;;813        case TIM_CHANNEL_1:
;;;814        {
;;;815          /* Disable the TIM Output Compare DMA request */
;;;816          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  2101              MOVS     r1,#1
00001e  0249              LSLS     r1,r1,#9
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  60c8              STR      r0,[r1,#0xc]
;;;817        }
;;;818        break;
000026  e018              B        |L23.90|
                  |L23.40|
;;;819    
;;;820        case TIM_CHANNEL_2:
;;;821        {
;;;822          /* Disable the TIM Output Compare DMA request */
;;;823          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  2101              MOVS     r1,#1
00002e  0289              LSLS     r1,r1,#10
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  60c8              STR      r0,[r1,#0xc]
;;;824        }
;;;825        break;
000036  e010              B        |L23.90|
                  |L23.56|
;;;826    
;;;827        case TIM_CHANNEL_3:
;;;828        {
;;;829          /* Disable the TIM Output Compare DMA request */
;;;830          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000038  6820              LDR      r0,[r4,#0]
00003a  68c0              LDR      r0,[r0,#0xc]
00003c  2101              MOVS     r1,#1
00003e  02c9              LSLS     r1,r1,#11
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  60c8              STR      r0,[r1,#0xc]
;;;831        }
;;;832        break;
000046  e008              B        |L23.90|
                  |L23.72|
;;;833    
;;;834        case TIM_CHANNEL_4:
;;;835        {
;;;836          /* Disable the TIM Output Compare interrupt */
;;;837          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000048  6820              LDR      r0,[r4,#0]
00004a  68c0              LDR      r0,[r0,#0xc]
00004c  2101              MOVS     r1,#1
00004e  0309              LSLS     r1,r1,#12
000050  4388              BICS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  60c8              STR      r0,[r1,#0xc]
;;;838        }
;;;839        break;
000056  e000              B        |L23.90|
                  |L23.88|
;;;840    
;;;841        default:
;;;842        break;
000058  bf00              NOP      
                  |L23.90|
00005a  bf00              NOP                            ;818
;;;843      }
;;;844    
;;;845      /* Disable the Capture compare channel N */
;;;846      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00005c  2200              MOVS     r2,#0
00005e  4629              MOV      r1,r5
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       TIM_CCxNChannelCmd
;;;847    
;;;848      /* Disable the Main Ouput */
;;;849      __HAL_TIM_MOE_DISABLE(htim);
000066  bf00              NOP      
000068  6820              LDR      r0,[r4,#0]
00006a  6a00              LDR      r0,[r0,#0x20]
00006c  4915              LDR      r1,|L23.196|
00006e  4008              ANDS     r0,r0,r1
000070  2800              CMP      r0,#0
000072  d10c              BNE      |L23.142|
000074  6820              LDR      r0,[r4,#0]
000076  6a00              LDR      r0,[r0,#0x20]
000078  1089              ASRS     r1,r1,#2
00007a  4008              ANDS     r0,r0,r1
00007c  2800              CMP      r0,#0
00007e  d106              BNE      |L23.142|
000080  6820              LDR      r0,[r4,#0]
000082  6c40              LDR      r0,[r0,#0x44]
000084  2101              MOVS     r1,#1
000086  03c9              LSLS     r1,r1,#15
000088  4388              BICS     r0,r0,r1
00008a  6821              LDR      r1,[r4,#0]
00008c  6448              STR      r0,[r1,#0x44]
                  |L23.142|
00008e  bf00              NOP      
;;;850    
;;;851      /* Disable the Peripheral */
;;;852      __HAL_TIM_DISABLE(htim);
000090  bf00              NOP      
000092  6820              LDR      r0,[r4,#0]
000094  6a00              LDR      r0,[r0,#0x20]
000096  490b              LDR      r1,|L23.196|
000098  4008              ANDS     r0,r0,r1
00009a  2800              CMP      r0,#0
00009c  d10b              BNE      |L23.182|
00009e  6820              LDR      r0,[r4,#0]
0000a0  6a00              LDR      r0,[r0,#0x20]
0000a2  1089              ASRS     r1,r1,#2
0000a4  4008              ANDS     r0,r0,r1
0000a6  2800              CMP      r0,#0
0000a8  d105              BNE      |L23.182|
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6800              LDR      r0,[r0,#0]
0000ae  0840              LSRS     r0,r0,#1
0000b0  0040              LSLS     r0,r0,#1
0000b2  6821              LDR      r1,[r4,#0]
0000b4  6008              STR      r0,[r1,#0]
                  |L23.182|
0000b6  bf00              NOP      
;;;853    
;;;854      /* Change the htim state */
;;;855      htim->State = HAL_TIM_STATE_READY;
0000b8  2101              MOVS     r1,#1
0000ba  203d              MOVS     r0,#0x3d
0000bc  5501              STRB     r1,[r0,r4]
;;;856    
;;;857      /* Return function status */
;;;858      return HAL_OK;
0000be  2000              MOVS     r0,#0
;;;859    }
0000c0  bd70              POP      {r4-r6,pc}
;;;860    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L23.196|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;615      */
;;;616    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;617    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;618      uint32_t tmpccer = 0U;
000006  2600              MOVS     r6,#0
;;;619    
;;;620      /* Check the parameters */
;;;621      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;622    
;;;623      switch (Channel)
000008  2d00              CMP      r5,#0
00000a  d006              BEQ      |L24.26|
00000c  2d04              CMP      r5,#4
00000e  d00b              BEQ      |L24.40|
000010  2d08              CMP      r5,#8
000012  d010              BEQ      |L24.54|
000014  2d0c              CMP      r5,#0xc
000016  d11c              BNE      |L24.82|
000018  e014              B        |L24.68|
                  |L24.26|
;;;624      {
;;;625        case TIM_CHANNEL_1:
;;;626        {
;;;627          /* Disable the TIM Output Compare interrupt */
;;;628          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00001a  6820              LDR      r0,[r4,#0]
00001c  68c0              LDR      r0,[r0,#0xc]
00001e  2102              MOVS     r1,#2
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  60c8              STR      r0,[r1,#0xc]
;;;629        }
;;;630        break;
000026  e015              B        |L24.84|
                  |L24.40|
;;;631    
;;;632        case TIM_CHANNEL_2:
;;;633        {
;;;634          /* Disable the TIM Output Compare interrupt */
;;;635          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  2104              MOVS     r1,#4
00002e  4388              BICS     r0,r0,r1
000030  6821              LDR      r1,[r4,#0]
000032  60c8              STR      r0,[r1,#0xc]
;;;636        }
;;;637        break;
000034  e00e              B        |L24.84|
                  |L24.54|
;;;638    
;;;639        case TIM_CHANNEL_3:
;;;640        {
;;;641          /* Disable the TIM Output Compare interrupt */
;;;642          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000036  6820              LDR      r0,[r4,#0]
000038  68c0              LDR      r0,[r0,#0xc]
00003a  2108              MOVS     r1,#8
00003c  4388              BICS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  60c8              STR      r0,[r1,#0xc]
;;;643        }
;;;644        break;
000042  e007              B        |L24.84|
                  |L24.68|
;;;645    
;;;646        case TIM_CHANNEL_4:
;;;647        {
;;;648          /* Disable the TIM Output Compare interrupt */
;;;649          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000044  6820              LDR      r0,[r4,#0]
000046  68c0              LDR      r0,[r0,#0xc]
000048  2110              MOVS     r1,#0x10
00004a  4388              BICS     r0,r0,r1
00004c  6821              LDR      r1,[r4,#0]
00004e  60c8              STR      r0,[r1,#0xc]
;;;650        }
;;;651        break;
000050  e000              B        |L24.84|
                  |L24.82|
;;;652    
;;;653        default:
;;;654        break;
000052  bf00              NOP      
                  |L24.84|
000054  bf00              NOP                            ;630
;;;655      }
;;;656    
;;;657         /* Disable the Capture compare channel N */
;;;658         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000056  2200              MOVS     r2,#0
000058  4629              MOV      r1,r5
00005a  6820              LDR      r0,[r4,#0]
00005c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;659    
;;;660      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;661      tmpccer = htim->Instance->CCER;
000060  6820              LDR      r0,[r4,#0]
000062  6a06              LDR      r6,[r0,#0x20]
;;;662      if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000064  481a              LDR      r0,|L24.208|
000066  4030              ANDS     r0,r0,r6
000068  2800              CMP      r0,#0
00006a  d105              BNE      |L24.120|
;;;663      {
;;;664        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
00006c  6820              LDR      r0,[r4,#0]
00006e  68c0              LDR      r0,[r0,#0xc]
000070  2180              MOVS     r1,#0x80
000072  4388              BICS     r0,r0,r1
000074  6821              LDR      r1,[r4,#0]
000076  60c8              STR      r0,[r1,#0xc]
                  |L24.120|
;;;665      }
;;;666    
;;;667      /* Disable the Main Ouput */
;;;668        __HAL_TIM_MOE_DISABLE(htim);
000078  bf00              NOP      
00007a  6820              LDR      r0,[r4,#0]
00007c  6a00              LDR      r0,[r0,#0x20]
00007e  4915              LDR      r1,|L24.212|
000080  4008              ANDS     r0,r0,r1
000082  2800              CMP      r0,#0
000084  d10c              BNE      |L24.160|
000086  6820              LDR      r0,[r4,#0]
000088  6a00              LDR      r0,[r0,#0x20]
00008a  1089              ASRS     r1,r1,#2
00008c  4008              ANDS     r0,r0,r1
00008e  2800              CMP      r0,#0
000090  d106              BNE      |L24.160|
000092  6820              LDR      r0,[r4,#0]
000094  6c40              LDR      r0,[r0,#0x44]
000096  2101              MOVS     r1,#1
000098  03c9              LSLS     r1,r1,#15
00009a  4388              BICS     r0,r0,r1
00009c  6821              LDR      r1,[r4,#0]
00009e  6448              STR      r0,[r1,#0x44]
                  |L24.160|
0000a0  bf00              NOP      
;;;669    
;;;670      /* Disable the Peripheral */
;;;671      __HAL_TIM_DISABLE(htim);
0000a2  bf00              NOP      
0000a4  6820              LDR      r0,[r4,#0]
0000a6  6a00              LDR      r0,[r0,#0x20]
0000a8  490a              LDR      r1,|L24.212|
0000aa  4008              ANDS     r0,r0,r1
0000ac  2800              CMP      r0,#0
0000ae  d10b              BNE      |L24.200|
0000b0  6820              LDR      r0,[r4,#0]
0000b2  6a00              LDR      r0,[r0,#0x20]
0000b4  1089              ASRS     r1,r1,#2
0000b6  4008              ANDS     r0,r0,r1
0000b8  2800              CMP      r0,#0
0000ba  d105              BNE      |L24.200|
0000bc  6820              LDR      r0,[r4,#0]
0000be  6800              LDR      r0,[r0,#0]
0000c0  0840              LSRS     r0,r0,#1
0000c2  0040              LSLS     r0,r0,#1
0000c4  6821              LDR      r1,[r4,#0]
0000c6  6008              STR      r0,[r1,#0]
                  |L24.200|
0000c8  bf00              NOP      
;;;672    
;;;673      /* Return function status */
;;;674      return HAL_OK;
0000ca  2000              MOVS     r0,#0
;;;675    }
0000cc  bd70              POP      {r4-r6,pc}
;;;676    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L24.208|
                          DCD      0x00000444
                  |L24.212|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1308     */
;;;1309   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1310     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1311     /* Check the parameters */
;;;1312     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1313   
;;;1314     /* Enable the complementary One Pulse output */
;;;1315     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1316   
;;;1317     /* Enable the Main Ouput */
;;;1318     __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  2101              MOVS     r1,#1
000016  03c9              LSLS     r1,r1,#15
000018  4308              ORRS     r0,r0,r1
00001a  6821              LDR      r1,[r4,#0]
00001c  6448              STR      r0,[r1,#0x44]
;;;1319   
;;;1320     /* Return function status */
;;;1321     return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;1322   }
000020  bd70              POP      {r4-r6,pc}
;;;1323   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1362     */
;;;1363   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1364   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1365     /* Check the parameters */
;;;1366     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1367   
;;;1368     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1369     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  2102              MOVS     r1,#2
00000c  4308              ORRS     r0,r0,r1
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1370   
;;;1371     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1372     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  2104              MOVS     r1,#4
000018  4308              ORRS     r0,r0,r1
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1373   
;;;1374     /* Enable the complementary One Pulse output */
;;;1375     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
00001e  2204              MOVS     r2,#4
000020  4629              MOV      r1,r5
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1376   
;;;1377     /* Enable the Main Ouput */
;;;1378     __HAL_TIM_MOE_ENABLE(htim);
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  2101              MOVS     r1,#1
00002e  03c9              LSLS     r1,r1,#15
000030  4308              ORRS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6448              STR      r0,[r1,#0x44]
;;;1379   
;;;1380     /* Return function status */
;;;1381     return HAL_OK;
000036  2000              MOVS     r0,#0
;;;1382     }
000038  bd70              POP      {r4-r6,pc}
;;;1383   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1333     */
;;;1334   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1335   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1336   
;;;1337     /* Check the parameters */
;;;1338     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1339   
;;;1340     /* Disable the complementary One Pulse output */
;;;1341       TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1342   
;;;1343     /* Disable the Main Ouput */
;;;1344       __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  4914              LDR      r1,|L27.104|
000018  4008              ANDS     r0,r0,r1
00001a  2800              CMP      r0,#0
00001c  d10c              BNE      |L27.56|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  2800              CMP      r0,#0
000028  d106              BNE      |L27.56|
00002a  6820              LDR      r0,[r4,#0]
00002c  6c40              LDR      r0,[r0,#0x44]
00002e  2101              MOVS     r1,#1
000030  03c9              LSLS     r1,r1,#15
000032  4388              BICS     r0,r0,r1
000034  6821              LDR      r1,[r4,#0]
000036  6448              STR      r0,[r1,#0x44]
                  |L27.56|
000038  bf00              NOP      
;;;1345   
;;;1346     /* Disable the Peripheral */
;;;1347     __HAL_TIM_DISABLE(htim);
00003a  bf00              NOP      
00003c  6820              LDR      r0,[r4,#0]
00003e  6a00              LDR      r0,[r0,#0x20]
000040  4909              LDR      r1,|L27.104|
000042  4008              ANDS     r0,r0,r1
000044  2800              CMP      r0,#0
000046  d10b              BNE      |L27.96|
000048  6820              LDR      r0,[r4,#0]
00004a  6a00              LDR      r0,[r0,#0x20]
00004c  1089              ASRS     r1,r1,#2
00004e  4008              ANDS     r0,r0,r1
000050  2800              CMP      r0,#0
000052  d105              BNE      |L27.96|
000054  6820              LDR      r0,[r4,#0]
000056  6800              LDR      r0,[r0,#0]
000058  0840              LSRS     r0,r0,#1
00005a  0040              LSLS     r0,r0,#1
00005c  6821              LDR      r1,[r4,#0]
00005e  6008              STR      r0,[r1,#0]
                  |L27.96|
000060  bf00              NOP      
;;;1348   
;;;1349     /* Return function status */
;;;1350     return HAL_OK;
000062  2000              MOVS     r0,#0
;;;1351   }
000064  bd70              POP      {r4-r6,pc}
;;;1352   
                          ENDP

000066  0000              DCW      0x0000
                  |L27.104|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1393     */
;;;1394   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1395   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1396     /* Check the parameters */
;;;1397     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1398   
;;;1399     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1400     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  2102              MOVS     r1,#2
00000c  4388              BICS     r0,r0,r1
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1401   
;;;1402     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1403     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  2104              MOVS     r1,#4
000018  4388              BICS     r0,r0,r1
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1404   
;;;1405     /* Disable the complementary One Pulse output */
;;;1406     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
00001e  2200              MOVS     r2,#0
000020  4629              MOV      r1,r5
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1407   
;;;1408     /* Disable the Main Ouput */
;;;1409     __HAL_TIM_MOE_DISABLE(htim);
000028  bf00              NOP      
00002a  6820              LDR      r0,[r4,#0]
00002c  6a00              LDR      r0,[r0,#0x20]
00002e  4914              LDR      r1,|L28.128|
000030  4008              ANDS     r0,r0,r1
000032  2800              CMP      r0,#0
000034  d10c              BNE      |L28.80|
000036  6820              LDR      r0,[r4,#0]
000038  6a00              LDR      r0,[r0,#0x20]
00003a  1089              ASRS     r1,r1,#2
00003c  4008              ANDS     r0,r0,r1
00003e  2800              CMP      r0,#0
000040  d106              BNE      |L28.80|
000042  6820              LDR      r0,[r4,#0]
000044  6c40              LDR      r0,[r0,#0x44]
000046  2101              MOVS     r1,#1
000048  03c9              LSLS     r1,r1,#15
00004a  4388              BICS     r0,r0,r1
00004c  6821              LDR      r1,[r4,#0]
00004e  6448              STR      r0,[r1,#0x44]
                  |L28.80|
000050  bf00              NOP      
;;;1410   
;;;1411     /* Disable the Peripheral */
;;;1412      __HAL_TIM_DISABLE(htim);
000052  bf00              NOP      
000054  6820              LDR      r0,[r4,#0]
000056  6a00              LDR      r0,[r0,#0x20]
000058  4909              LDR      r1,|L28.128|
00005a  4008              ANDS     r0,r0,r1
00005c  2800              CMP      r0,#0
00005e  d10b              BNE      |L28.120|
000060  6820              LDR      r0,[r4,#0]
000062  6a00              LDR      r0,[r0,#0x20]
000064  1089              ASRS     r1,r1,#2
000066  4008              ANDS     r0,r0,r1
000068  2800              CMP      r0,#0
00006a  d105              BNE      |L28.120|
00006c  6820              LDR      r0,[r4,#0]
00006e  6800              LDR      r0,[r0,#0]
000070  0840              LSRS     r0,r0,#1
000072  0040              LSLS     r0,r0,#1
000074  6821              LDR      r1,[r4,#0]
000076  6008              STR      r0,[r1,#0]
                  |L28.120|
000078  bf00              NOP      
;;;1413   
;;;1414     /* Return function status */
;;;1415     return HAL_OK;
00007a  2000              MOVS     r0,#0
;;;1416   }
00007c  bd70              POP      {r4-r6,pc}
;;;1417   
                          ENDP

00007e  0000              DCW      0x0000
                  |L28.128|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start PROC
;;;905      */
;;;906    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;907    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;908      /* Check the parameters */
;;;909      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;910    
;;;911      /* Enable the complementary PWM output  */
;;;912      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;913    
;;;914      /* Enable the Main Ouput */
;;;915      __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  2101              MOVS     r1,#1
000016  03c9              LSLS     r1,r1,#15
000018  4308              ORRS     r0,r0,r1
00001a  6821              LDR      r1,[r4,#0]
00001c  6448              STR      r0,[r1,#0x44]
;;;916    
;;;917      /* Enable the Peripheral */
;;;918      __HAL_TIM_ENABLE(htim);
00001e  6820              LDR      r0,[r4,#0]
000020  6800              LDR      r0,[r0,#0]
000022  2101              MOVS     r1,#1
000024  4308              ORRS     r0,r0,r1
000026  6821              LDR      r1,[r4,#0]
000028  6008              STR      r0,[r1,#0]
;;;919    
;;;920      /* Return function status */
;;;921      return HAL_OK;
00002a  2000              MOVS     r0,#0
;;;922    }
00002c  bd70              POP      {r4-r6,pc}
;;;923    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1106     */
;;;1107   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1108   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;1109     /* Check the parameters */
;;;1110     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1111   
;;;1112     if((htim->State == HAL_TIM_STATE_BUSY))
00000a  203d              MOVS     r0,#0x3d
00000c  5d00              LDRB     r0,[r0,r4]
00000e  2802              CMP      r0,#2
000010  d100              BNE      |L30.20|
                  |L30.18|
;;;1113     {
;;;1114        return HAL_BUSY;
;;;1115     }
;;;1116     else if((htim->State == HAL_TIM_STATE_READY))
;;;1117     {
;;;1118       if(((uint32_t)pData == 0U ) && (Length > 0U))
;;;1119       {
;;;1120         return HAL_ERROR;
;;;1121       }
;;;1122       else
;;;1123       {
;;;1124         htim->State = HAL_TIM_STATE_BUSY;
;;;1125       }
;;;1126     }
;;;1127     switch (Channel)
;;;1128     {
;;;1129       case TIM_CHANNEL_1:
;;;1130       {
;;;1131         /* Set the DMA Period elapsed callback */
;;;1132         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1133   
;;;1134         /* Set the DMA error callback */
;;;1135         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1136   
;;;1137         /* Enable the DMA channel */
;;;1138         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1139   
;;;1140         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1141         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1142       }
;;;1143       break;
;;;1144   
;;;1145       case TIM_CHANNEL_2:
;;;1146       {
;;;1147         /* Set the DMA Period elapsed callback */
;;;1148         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1149   
;;;1150         /* Set the DMA error callback */
;;;1151         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1152   
;;;1153         /* Enable the DMA channel */
;;;1154         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1155   
;;;1156         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1157         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1158       }
;;;1159       break;
;;;1160   
;;;1161       case TIM_CHANNEL_3:
;;;1162       {
;;;1163         /* Set the DMA Period elapsed callback */
;;;1164         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1165   
;;;1166         /* Set the DMA error callback */
;;;1167         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1168   
;;;1169         /* Enable the DMA channel */
;;;1170         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1171   
;;;1172         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1173         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1174       }
;;;1175       break;
;;;1176   
;;;1177       case TIM_CHANNEL_4:
;;;1178       {
;;;1179        /* Set the DMA Period elapsed callback */
;;;1180         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1181   
;;;1182         /* Set the DMA error callback */
;;;1183         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1184   
;;;1185         /* Enable the DMA channel */
;;;1186         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1187   
;;;1188         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1189         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1190       }
;;;1191       break;
;;;1192   
;;;1193       default:
;;;1194       break;
;;;1195     }
;;;1196   
;;;1197     /* Enable the complementary PWM output  */
;;;1198        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1199   
;;;1200     /* Enable the Main Ouput */
;;;1201       __HAL_TIM_MOE_ENABLE(htim);
;;;1202   
;;;1203     /* Enable the Peripheral */
;;;1204     __HAL_TIM_ENABLE(htim);
;;;1205   
;;;1206     /* Return function status */
;;;1207     return HAL_OK;
;;;1208   }
000012  bdf8              POP      {r3-r7,pc}
                  |L30.20|
000014  203d              MOVS     r0,#0x3d              ;1116
000016  5d00              LDRB     r0,[r0,r4]            ;1116
000018  2801              CMP      r0,#1                 ;1116
00001a  d107              BNE      |L30.44|
00001c  2d00              CMP      r5,#0                 ;1118
00001e  d102              BNE      |L30.38|
000020  2f00              CMP      r7,#0                 ;1118
000022  d000              BEQ      |L30.38|
000024  e7f5              B        |L30.18|
                  |L30.38|
000026  2102              MOVS     r1,#2                 ;1124
000028  203d              MOVS     r0,#0x3d              ;1124
00002a  5501              STRB     r1,[r0,r4]            ;1124
                  |L30.44|
00002c  2e00              CMP      r6,#0                 ;1127
00002e  d006              BEQ      |L30.62|
000030  2e04              CMP      r6,#4                 ;1127
000032  d01a              BEQ      |L30.106|
000034  2e08              CMP      r6,#8                 ;1127
000036  d02e              BEQ      |L30.150|
000038  2e0c              CMP      r6,#0xc               ;1127
00003a  d158              BNE      |L30.238|
00003c  e041              B        |L30.194|
                  |L30.62|
00003e  4937              LDR      r1,|L30.284|
000040  6a60              LDR      r0,[r4,#0x24]         ;1132
000042  6281              STR      r1,[r0,#0x28]         ;1132
000044  4936              LDR      r1,|L30.288|
000046  6a60              LDR      r0,[r4,#0x24]         ;1135
000048  6301              STR      r1,[r0,#0x30]         ;1135
00004a  6821              LDR      r1,[r4,#0]            ;1138
00004c  460a              MOV      r2,r1                 ;1138
00004e  3234              ADDS     r2,r2,#0x34           ;1138
000050  463b              MOV      r3,r7                 ;1138
000052  4629              MOV      r1,r5                 ;1138
000054  6a60              LDR      r0,[r4,#0x24]         ;1138
000056  f7fffffe          BL       HAL_DMA_Start_IT
00005a  6820              LDR      r0,[r4,#0]            ;1141
00005c  68c0              LDR      r0,[r0,#0xc]          ;1141
00005e  2101              MOVS     r1,#1                 ;1141
000060  0249              LSLS     r1,r1,#9              ;1141
000062  4308              ORRS     r0,r0,r1              ;1141
000064  6821              LDR      r1,[r4,#0]            ;1141
000066  60c8              STR      r0,[r1,#0xc]          ;1141
000068  e042              B        |L30.240|
                  |L30.106|
00006a  492c              LDR      r1,|L30.284|
00006c  6aa0              LDR      r0,[r4,#0x28]         ;1148
00006e  6281              STR      r1,[r0,#0x28]         ;1148
000070  492b              LDR      r1,|L30.288|
000072  6aa0              LDR      r0,[r4,#0x28]         ;1151
000074  6301              STR      r1,[r0,#0x30]         ;1151
000076  6821              LDR      r1,[r4,#0]            ;1154
000078  460a              MOV      r2,r1                 ;1154
00007a  3238              ADDS     r2,r2,#0x38           ;1154
00007c  463b              MOV      r3,r7                 ;1154
00007e  4629              MOV      r1,r5                 ;1154
000080  6aa0              LDR      r0,[r4,#0x28]         ;1154
000082  f7fffffe          BL       HAL_DMA_Start_IT
000086  6820              LDR      r0,[r4,#0]            ;1157
000088  68c0              LDR      r0,[r0,#0xc]          ;1157
00008a  2101              MOVS     r1,#1                 ;1157
00008c  0289              LSLS     r1,r1,#10             ;1157
00008e  4308              ORRS     r0,r0,r1              ;1157
000090  6821              LDR      r1,[r4,#0]            ;1157
000092  60c8              STR      r0,[r1,#0xc]          ;1157
000094  e02c              B        |L30.240|
                  |L30.150|
000096  4921              LDR      r1,|L30.284|
000098  6ae0              LDR      r0,[r4,#0x2c]         ;1164
00009a  6281              STR      r1,[r0,#0x28]         ;1164
00009c  4920              LDR      r1,|L30.288|
00009e  6ae0              LDR      r0,[r4,#0x2c]         ;1167
0000a0  6301              STR      r1,[r0,#0x30]         ;1167
0000a2  6821              LDR      r1,[r4,#0]            ;1170
0000a4  460a              MOV      r2,r1                 ;1170
0000a6  323c              ADDS     r2,r2,#0x3c           ;1170
0000a8  463b              MOV      r3,r7                 ;1170
0000aa  4629              MOV      r1,r5                 ;1170
0000ac  6ae0              LDR      r0,[r4,#0x2c]         ;1170
0000ae  f7fffffe          BL       HAL_DMA_Start_IT
0000b2  6820              LDR      r0,[r4,#0]            ;1173
0000b4  68c0              LDR      r0,[r0,#0xc]          ;1173
0000b6  2101              MOVS     r1,#1                 ;1173
0000b8  02c9              LSLS     r1,r1,#11             ;1173
0000ba  4308              ORRS     r0,r0,r1              ;1173
0000bc  6821              LDR      r1,[r4,#0]            ;1173
0000be  60c8              STR      r0,[r1,#0xc]          ;1173
0000c0  e016              B        |L30.240|
                  |L30.194|
0000c2  4916              LDR      r1,|L30.284|
0000c4  6b20              LDR      r0,[r4,#0x30]         ;1180
0000c6  6281              STR      r1,[r0,#0x28]         ;1180
0000c8  4915              LDR      r1,|L30.288|
0000ca  6b20              LDR      r0,[r4,#0x30]         ;1183
0000cc  6301              STR      r1,[r0,#0x30]         ;1183
0000ce  6821              LDR      r1,[r4,#0]            ;1186
0000d0  460a              MOV      r2,r1                 ;1186
0000d2  3240              ADDS     r2,r2,#0x40           ;1186
0000d4  463b              MOV      r3,r7                 ;1186
0000d6  4629              MOV      r1,r5                 ;1186
0000d8  6b20              LDR      r0,[r4,#0x30]         ;1186
0000da  f7fffffe          BL       HAL_DMA_Start_IT
0000de  6820              LDR      r0,[r4,#0]            ;1189
0000e0  68c0              LDR      r0,[r0,#0xc]          ;1189
0000e2  2101              MOVS     r1,#1                 ;1189
0000e4  0309              LSLS     r1,r1,#12             ;1189
0000e6  4308              ORRS     r0,r0,r1              ;1189
0000e8  6821              LDR      r1,[r4,#0]            ;1189
0000ea  60c8              STR      r0,[r1,#0xc]          ;1189
0000ec  e000              B        |L30.240|
                  |L30.238|
0000ee  bf00              NOP                            ;1194
                  |L30.240|
0000f0  bf00              NOP                            ;1143
0000f2  2204              MOVS     r2,#4                 ;1198
0000f4  4631              MOV      r1,r6                 ;1198
0000f6  6820              LDR      r0,[r4,#0]            ;1198
0000f8  f7fffffe          BL       TIM_CCxNChannelCmd
0000fc  6820              LDR      r0,[r4,#0]            ;1201
0000fe  6c40              LDR      r0,[r0,#0x44]         ;1201
000100  2101              MOVS     r1,#1                 ;1201
000102  03c9              LSLS     r1,r1,#15             ;1201
000104  4308              ORRS     r0,r0,r1              ;1201
000106  6821              LDR      r1,[r4,#0]            ;1201
000108  6448              STR      r0,[r1,#0x44]         ;1201
00010a  6820              LDR      r0,[r4,#0]            ;1204
00010c  6800              LDR      r0,[r0,#0]            ;1204
00010e  2101              MOVS     r1,#1                 ;1204
000110  4308              ORRS     r0,r0,r1              ;1204
000112  6821              LDR      r1,[r4,#0]            ;1204
000114  6008              STR      r0,[r1,#0]            ;1204
000116  2000              MOVS     r0,#0                 ;1207
000118  e77b              B        |L30.18|
;;;1209   
                          ENDP

00011a  0000              DCW      0x0000
                  |L30.284|
                          DCD      TIM_DMADelayPulseCplt
                  |L30.288|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;964      */
;;;965    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;966    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;967      /* Check the parameters */
;;;968      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;969    
;;;970      switch (Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L31.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L31.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L31.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L31.80|
000016  e014              B        |L31.66|
                  |L31.24|
;;;971      {
;;;972        case TIM_CHANNEL_1:
;;;973        {
;;;974          /* Enable the TIM Capture/Compare 1 interrupt */
;;;975          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  2102              MOVS     r1,#2
00001e  4308              ORRS     r0,r0,r1
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;976        }
;;;977        break;
000024  e015              B        |L31.82|
                  |L31.38|
;;;978    
;;;979        case TIM_CHANNEL_2:
;;;980        {
;;;981          /* Enable the TIM Capture/Compare 2 interrupt */
;;;982          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  2104              MOVS     r1,#4
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;983        }
;;;984        break;
000032  e00e              B        |L31.82|
                  |L31.52|
;;;985    
;;;986        case TIM_CHANNEL_3:
;;;987        {
;;;988          /* Enable the TIM Capture/Compare 3 interrupt */
;;;989          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  2108              MOVS     r1,#8
00003a  4308              ORRS     r0,r0,r1
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;990        }
;;;991        break;
000040  e007              B        |L31.82|
                  |L31.66|
;;;992    
;;;993        case TIM_CHANNEL_4:
;;;994        {
;;;995          /* Enable the TIM Capture/Compare 4 interrupt */
;;;996          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  2110              MOVS     r1,#0x10
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;997        }
;;;998        break;
00004e  e000              B        |L31.82|
                  |L31.80|
;;;999    
;;;1000       default:
;;;1001       break;
000050  bf00              NOP      
                  |L31.82|
000052  bf00              NOP                            ;977
;;;1002     }
;;;1003   
;;;1004     /* Enable the TIM Break interrupt */
;;;1005     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000054  6820              LDR      r0,[r4,#0]
000056  68c0              LDR      r0,[r0,#0xc]
000058  2180              MOVS     r1,#0x80
00005a  4308              ORRS     r0,r0,r1
00005c  6821              LDR      r1,[r4,#0]
00005e  60c8              STR      r0,[r1,#0xc]
;;;1006   
;;;1007     /* Enable the complementary PWM output  */
;;;1008     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000060  2204              MOVS     r2,#4
000062  4629              MOV      r1,r5
000064  6820              LDR      r0,[r4,#0]
000066  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1009   
;;;1010     /* Enable the Main Ouput */
;;;1011     __HAL_TIM_MOE_ENABLE(htim);
00006a  6820              LDR      r0,[r4,#0]
00006c  6c40              LDR      r0,[r0,#0x44]
00006e  2101              MOVS     r1,#1
000070  03c9              LSLS     r1,r1,#15
000072  4308              ORRS     r0,r0,r1
000074  6821              LDR      r1,[r4,#0]
000076  6448              STR      r0,[r1,#0x44]
;;;1012   
;;;1013     /* Enable the Peripheral */
;;;1014     __HAL_TIM_ENABLE(htim);
000078  6820              LDR      r0,[r4,#0]
00007a  6800              LDR      r0,[r0,#0]
00007c  2101              MOVS     r1,#1
00007e  4308              ORRS     r0,r0,r1
000080  6821              LDR      r1,[r4,#0]
000082  6008              STR      r0,[r1,#0]
;;;1015   
;;;1016     /* Return function status */
;;;1017     return HAL_OK;
000084  2000              MOVS     r0,#0
;;;1018   }
000086  bd70              POP      {r4-r6,pc}
;;;1019   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Stop PROC
;;;934      */
;;;935    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;936    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;937      /* Check the parameters */
;;;938      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;939    
;;;940      /* Disable the complementary PWM output  */
;;;941      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;942    
;;;943      /* Disable the Main Ouput */
;;;944      __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  4914              LDR      r1,|L32.104|
000018  4008              ANDS     r0,r0,r1
00001a  2800              CMP      r0,#0
00001c  d10c              BNE      |L32.56|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  2800              CMP      r0,#0
000028  d106              BNE      |L32.56|
00002a  6820              LDR      r0,[r4,#0]
00002c  6c40              LDR      r0,[r0,#0x44]
00002e  2101              MOVS     r1,#1
000030  03c9              LSLS     r1,r1,#15
000032  4388              BICS     r0,r0,r1
000034  6821              LDR      r1,[r4,#0]
000036  6448              STR      r0,[r1,#0x44]
                  |L32.56|
000038  bf00              NOP      
;;;945    
;;;946      /* Disable the Peripheral */
;;;947      __HAL_TIM_DISABLE(htim);
00003a  bf00              NOP      
00003c  6820              LDR      r0,[r4,#0]
00003e  6a00              LDR      r0,[r0,#0x20]
000040  4909              LDR      r1,|L32.104|
000042  4008              ANDS     r0,r0,r1
000044  2800              CMP      r0,#0
000046  d10b              BNE      |L32.96|
000048  6820              LDR      r0,[r4,#0]
00004a  6a00              LDR      r0,[r0,#0x20]
00004c  1089              ASRS     r1,r1,#2
00004e  4008              ANDS     r0,r0,r1
000050  2800              CMP      r0,#0
000052  d105              BNE      |L32.96|
000054  6820              LDR      r0,[r4,#0]
000056  6800              LDR      r0,[r0,#0]
000058  0840              LSRS     r0,r0,#1
00005a  0040              LSLS     r0,r0,#1
00005c  6821              LDR      r1,[r4,#0]
00005e  6008              STR      r0,[r1,#0]
                  |L32.96|
000060  bf00              NOP      
;;;948    
;;;949      /* Return function status */
;;;950      return HAL_OK;
000062  2000              MOVS     r0,#0
;;;951    }
000064  bd70              POP      {r4-r6,pc}
;;;952    
                          ENDP

000066  0000              DCW      0x0000
                  |L32.104|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1221     */
;;;1222   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1223   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1224     /* Check the parameters */
;;;1225     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1226   
;;;1227     switch (Channel)
000006  2d00              CMP      r5,#0
000008  d006              BEQ      |L33.24|
00000a  2d04              CMP      r5,#4
00000c  d00c              BEQ      |L33.40|
00000e  2d08              CMP      r5,#8
000010  d012              BEQ      |L33.56|
000012  2d0c              CMP      r5,#0xc
000014  d120              BNE      |L33.88|
000016  e017              B        |L33.72|
                  |L33.24|
;;;1228     {
;;;1229       case TIM_CHANNEL_1:
;;;1230       {
;;;1231         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1232         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  2101              MOVS     r1,#1
00001e  0249              LSLS     r1,r1,#9
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  60c8              STR      r0,[r1,#0xc]
;;;1233       }
;;;1234       break;
000026  e018              B        |L33.90|
                  |L33.40|
;;;1235   
;;;1236       case TIM_CHANNEL_2:
;;;1237       {
;;;1238         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1239         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  2101              MOVS     r1,#1
00002e  0289              LSLS     r1,r1,#10
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  60c8              STR      r0,[r1,#0xc]
;;;1240       }
;;;1241       break;
000036  e010              B        |L33.90|
                  |L33.56|
;;;1242   
;;;1243       case TIM_CHANNEL_3:
;;;1244       {
;;;1245         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1246         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000038  6820              LDR      r0,[r4,#0]
00003a  68c0              LDR      r0,[r0,#0xc]
00003c  2101              MOVS     r1,#1
00003e  02c9              LSLS     r1,r1,#11
000040  4388              BICS     r0,r0,r1
000042  6821              LDR      r1,[r4,#0]
000044  60c8              STR      r0,[r1,#0xc]
;;;1247       }
;;;1248       break;
000046  e008              B        |L33.90|
                  |L33.72|
;;;1249   
;;;1250       case TIM_CHANNEL_4:
;;;1251       {
;;;1252         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1253         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000048  6820              LDR      r0,[r4,#0]
00004a  68c0              LDR      r0,[r0,#0xc]
00004c  2101              MOVS     r1,#1
00004e  0309              LSLS     r1,r1,#12
000050  4388              BICS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  60c8              STR      r0,[r1,#0xc]
;;;1254       }
;;;1255       break;
000056  e000              B        |L33.90|
                  |L33.88|
;;;1256   
;;;1257       default:
;;;1258       break;
000058  bf00              NOP      
                  |L33.90|
00005a  bf00              NOP                            ;1234
;;;1259     }
;;;1260   
;;;1261     /* Disable the complementary PWM output */
;;;1262       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00005c  2200              MOVS     r2,#0
00005e  4629              MOV      r1,r5
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1263   
;;;1264     /* Disable the Main Ouput */
;;;1265       __HAL_TIM_MOE_DISABLE(htim);
000066  bf00              NOP      
000068  6820              LDR      r0,[r4,#0]
00006a  6a00              LDR      r0,[r0,#0x20]
00006c  4915              LDR      r1,|L33.196|
00006e  4008              ANDS     r0,r0,r1
000070  2800              CMP      r0,#0
000072  d10c              BNE      |L33.142|
000074  6820              LDR      r0,[r4,#0]
000076  6a00              LDR      r0,[r0,#0x20]
000078  1089              ASRS     r1,r1,#2
00007a  4008              ANDS     r0,r0,r1
00007c  2800              CMP      r0,#0
00007e  d106              BNE      |L33.142|
000080  6820              LDR      r0,[r4,#0]
000082  6c40              LDR      r0,[r0,#0x44]
000084  2101              MOVS     r1,#1
000086  03c9              LSLS     r1,r1,#15
000088  4388              BICS     r0,r0,r1
00008a  6821              LDR      r1,[r4,#0]
00008c  6448              STR      r0,[r1,#0x44]
                  |L33.142|
00008e  bf00              NOP      
;;;1266   
;;;1267     /* Disable the Peripheral */
;;;1268     __HAL_TIM_DISABLE(htim);
000090  bf00              NOP      
000092  6820              LDR      r0,[r4,#0]
000094  6a00              LDR      r0,[r0,#0x20]
000096  490b              LDR      r1,|L33.196|
000098  4008              ANDS     r0,r0,r1
00009a  2800              CMP      r0,#0
00009c  d10b              BNE      |L33.182|
00009e  6820              LDR      r0,[r4,#0]
0000a0  6a00              LDR      r0,[r0,#0x20]
0000a2  1089              ASRS     r1,r1,#2
0000a4  4008              ANDS     r0,r0,r1
0000a6  2800              CMP      r0,#0
0000a8  d105              BNE      |L33.182|
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6800              LDR      r0,[r0,#0]
0000ae  0840              LSRS     r0,r0,#1
0000b0  0040              LSLS     r0,r0,#1
0000b2  6821              LDR      r1,[r4,#0]
0000b4  6008              STR      r0,[r1,#0]
                  |L33.182|
0000b6  bf00              NOP      
;;;1269   
;;;1270     /* Change the htim state */
;;;1271     htim->State = HAL_TIM_STATE_READY;
0000b8  2101              MOVS     r1,#1
0000ba  203d              MOVS     r0,#0x3d
0000bc  5501              STRB     r1,[r0,r4]
;;;1272   
;;;1273     /* Return function status */
;;;1274     return HAL_OK;
0000be  2000              MOVS     r0,#0
;;;1275   }
0000c0  bd70              POP      {r4-r6,pc}
;;;1276   
                          ENDP

0000c2  0000              DCW      0x0000
                  |L33.196|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1031     */
;;;1032   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1033   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1034     uint32_t tmpccer = 0U;
000006  2600              MOVS     r6,#0
;;;1035   
;;;1036     /* Check the parameters */
;;;1037     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1038   
;;;1039     switch (Channel)
000008  2d00              CMP      r5,#0
00000a  d006              BEQ      |L34.26|
00000c  2d04              CMP      r5,#4
00000e  d00b              BEQ      |L34.40|
000010  2d08              CMP      r5,#8
000012  d010              BEQ      |L34.54|
000014  2d0c              CMP      r5,#0xc
000016  d11c              BNE      |L34.82|
000018  e014              B        |L34.68|
                  |L34.26|
;;;1040     {
;;;1041       case TIM_CHANNEL_1:
;;;1042       {
;;;1043         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1044         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00001a  6820              LDR      r0,[r4,#0]
00001c  68c0              LDR      r0,[r0,#0xc]
00001e  2102              MOVS     r1,#2
000020  4388              BICS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  60c8              STR      r0,[r1,#0xc]
;;;1045       }
;;;1046       break;
000026  e015              B        |L34.84|
                  |L34.40|
;;;1047   
;;;1048       case TIM_CHANNEL_2:
;;;1049       {
;;;1050         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1051         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  2104              MOVS     r1,#4
00002e  4388              BICS     r0,r0,r1
000030  6821              LDR      r1,[r4,#0]
000032  60c8              STR      r0,[r1,#0xc]
;;;1052       }
;;;1053       break;
000034  e00e              B        |L34.84|
                  |L34.54|
;;;1054   
;;;1055       case TIM_CHANNEL_3:
;;;1056       {
;;;1057         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1058         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000036  6820              LDR      r0,[r4,#0]
000038  68c0              LDR      r0,[r0,#0xc]
00003a  2108              MOVS     r1,#8
00003c  4388              BICS     r0,r0,r1
00003e  6821              LDR      r1,[r4,#0]
000040  60c8              STR      r0,[r1,#0xc]
;;;1059       }
;;;1060       break;
000042  e007              B        |L34.84|
                  |L34.68|
;;;1061   
;;;1062       case TIM_CHANNEL_4:
;;;1063       {
;;;1064         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1065         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000044  6820              LDR      r0,[r4,#0]
000046  68c0              LDR      r0,[r0,#0xc]
000048  2110              MOVS     r1,#0x10
00004a  4388              BICS     r0,r0,r1
00004c  6821              LDR      r1,[r4,#0]
00004e  60c8              STR      r0,[r1,#0xc]
;;;1066       }
;;;1067       break;
000050  e000              B        |L34.84|
                  |L34.82|
;;;1068   
;;;1069       default:
;;;1070       break;
000052  bf00              NOP      
                  |L34.84|
000054  bf00              NOP                            ;1046
;;;1071     }
;;;1072   
;;;1073     /* Disable the complementary PWM output  */
;;;1074     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000056  2200              MOVS     r2,#0
000058  4629              MOV      r1,r5
00005a  6820              LDR      r0,[r4,#0]
00005c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1075   
;;;1076     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1077     tmpccer = htim->Instance->CCER;
000060  6820              LDR      r0,[r4,#0]
000062  6a06              LDR      r6,[r0,#0x20]
;;;1078     if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
000064  481a              LDR      r0,|L34.208|
000066  4030              ANDS     r0,r0,r6
000068  2800              CMP      r0,#0
00006a  d105              BNE      |L34.120|
;;;1079     {
;;;1080       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
00006c  6820              LDR      r0,[r4,#0]
00006e  68c0              LDR      r0,[r0,#0xc]
000070  2180              MOVS     r1,#0x80
000072  4388              BICS     r0,r0,r1
000074  6821              LDR      r1,[r4,#0]
000076  60c8              STR      r0,[r1,#0xc]
                  |L34.120|
;;;1081     }
;;;1082   
;;;1083     /* Disable the Main Ouput */
;;;1084     __HAL_TIM_MOE_DISABLE(htim);
000078  bf00              NOP      
00007a  6820              LDR      r0,[r4,#0]
00007c  6a00              LDR      r0,[r0,#0x20]
00007e  4915              LDR      r1,|L34.212|
000080  4008              ANDS     r0,r0,r1
000082  2800              CMP      r0,#0
000084  d10c              BNE      |L34.160|
000086  6820              LDR      r0,[r4,#0]
000088  6a00              LDR      r0,[r0,#0x20]
00008a  1089              ASRS     r1,r1,#2
00008c  4008              ANDS     r0,r0,r1
00008e  2800              CMP      r0,#0
000090  d106              BNE      |L34.160|
000092  6820              LDR      r0,[r4,#0]
000094  6c40              LDR      r0,[r0,#0x44]
000096  2101              MOVS     r1,#1
000098  03c9              LSLS     r1,r1,#15
00009a  4388              BICS     r0,r0,r1
00009c  6821              LDR      r1,[r4,#0]
00009e  6448              STR      r0,[r1,#0x44]
                  |L34.160|
0000a0  bf00              NOP      
;;;1085   
;;;1086     /* Disable the Peripheral */
;;;1087     __HAL_TIM_DISABLE(htim);
0000a2  bf00              NOP      
0000a4  6820              LDR      r0,[r4,#0]
0000a6  6a00              LDR      r0,[r0,#0x20]
0000a8  490a              LDR      r1,|L34.212|
0000aa  4008              ANDS     r0,r0,r1
0000ac  2800              CMP      r0,#0
0000ae  d10b              BNE      |L34.200|
0000b0  6820              LDR      r0,[r4,#0]
0000b2  6a00              LDR      r0,[r0,#0x20]
0000b4  1089              ASRS     r1,r1,#2
0000b6  4008              ANDS     r0,r0,r1
0000b8  2800              CMP      r0,#0
0000ba  d105              BNE      |L34.200|
0000bc  6820              LDR      r0,[r4,#0]
0000be  6800              LDR      r0,[r0,#0]
0000c0  0840              LSRS     r0,r0,#1
0000c2  0040              LSLS     r0,r0,#1
0000c4  6821              LDR      r1,[r4,#0]
0000c6  6008              STR      r0,[r1,#0]
                  |L34.200|
0000c8  bf00              NOP      
;;;1088   
;;;1089     /* Return function status */
;;;1090     return HAL_OK;
0000ca  2000              MOVS     r0,#0
;;;1091   }
0000cc  bd70              POP      {r4-r6,pc}
;;;1092   
                          ENDP

0000ce  0000              DCW      0x0000
                  |L34.208|
                          DCD      0x00000444
                  |L34.212|
                          DCD      0x00001111

                          AREA ||i.HAL_TIMEx_RemapConfig||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_RemapConfig PROC
;;;1695     */
;;;1696   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000000  4602              MOV      r2,r0
;;;1697   {
;;;1698     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  203c              MOVS     r0,#0x3c
000006  5c80              LDRB     r0,[r0,r2]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L35.16|
00000c  2002              MOVS     r0,#2
                  |L35.14|
;;;1699   
;;;1700     /* Check parameters */
;;;1701     assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
;;;1702     assert_param(IS_TIM_REMAP(Remap));
;;;1703   
;;;1704     /* Set the Timer remapping configuration */
;;;1705     htim->Instance->OR = Remap;
;;;1706   
;;;1707     htim->State = HAL_TIM_STATE_READY;
;;;1708   
;;;1709     __HAL_UNLOCK(htim);
;;;1710   
;;;1711     return HAL_OK;
;;;1712   }
00000e  4770              BX       lr
                  |L35.16|
000010  2301              MOVS     r3,#1                 ;1698
000012  203c              MOVS     r0,#0x3c              ;1698
000014  5483              STRB     r3,[r0,r2]            ;1698
000016  bf00              NOP                            ;1698
000018  6810              LDR      r0,[r2,#0]            ;1705
00001a  6501              STR      r1,[r0,#0x50]         ;1705
00001c  203d              MOVS     r0,#0x3d              ;1707
00001e  5483              STRB     r3,[r0,r2]            ;1707
000020  bf00              NOP                            ;1709
000022  2300              MOVS     r3,#0                 ;1709
000024  203c              MOVS     r0,#0x3c              ;1709
000026  5483              STRB     r3,[r0,r2]            ;1709
000028  bf00              NOP                            ;1709
00002a  2000              MOVS     r0,#0                 ;1711
00002c  e7ef              B        |L35.14|
;;;1713   
                          ENDP


                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;1923     */
;;;1924   void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;1925   {
000002  4604              MOV      r4,r0
;;;1926     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6a65              LDR      r5,[r4,#0x24]
;;;1927   
;;;1928     htim->State= HAL_TIM_STATE_READY;
000006  2101              MOVS     r1,#1
000008  203d              MOVS     r0,#0x3d
00000a  5541              STRB     r1,[r0,r5]
;;;1929   
;;;1930     HAL_TIMEx_CommutationCallback(htim);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;1931   }
000012  bd70              POP      {r4-r6,pc}
;;;1932   
                          ENDP


                          AREA ||i.TIM_CCxNChannelCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxNChannelCmd PROC
;;;1985     */
;;;1986   static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
000000  b530              PUSH     {r4,r5,lr}
;;;1987   {
;;;1988     uint32_t tmp = 0U;
000002  2300              MOVS     r3,#0
;;;1989   
;;;1990     tmp = TIM_CCER_CC1NE << Channel;
000004  2404              MOVS     r4,#4
000006  408c              LSLS     r4,r4,r1
000008  4623              MOV      r3,r4
;;;1991   
;;;1992     /* Reset the CCxNE Bit */
;;;1993     TIMx->CCER &=  ~tmp;
00000a  6a04              LDR      r4,[r0,#0x20]
00000c  439c              BICS     r4,r4,r3
00000e  6204              STR      r4,[r0,#0x20]
;;;1994   
;;;1995     /* Set or reset the CCxNE Bit */
;;;1996     TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
000010  6a04              LDR      r4,[r0,#0x20]
000012  4615              MOV      r5,r2
000014  408d              LSLS     r5,r5,r1
000016  432c              ORRS     r4,r4,r5
000018  6204              STR      r4,[r0,#0x20]
;;;1997   }
00001a  bd30              POP      {r4,r5,pc}
;;;1998   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_tim_ex_c_e8ef3920____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f0xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f0xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 402
|__asm___22_stm32f0xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
