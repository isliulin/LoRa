; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\cmac.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\cmac.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\cmac.crf ..\Lib\LoRawan-node\crypto\cmac.c]
                          THUMB

                          AREA ||i.AES_CMAC_Final||, CODE, READONLY, ALIGN=1

                  AES_CMAC_Final PROC
;;;104       
;;;105    void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
000000  b530              PUSH     {r4,r5,lr}
;;;106    {
000002  b089              SUB      sp,sp,#0x24
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;107                uint8_t K[16];
;;;108            uint8_t in[16];
;;;109                /* generate subkey K1 */
;;;110                memset1(K, '\0', 16);
000008  2210              MOVS     r2,#0x10
00000a  2100              MOVS     r1,#0
00000c  a805              ADD      r0,sp,#0x14
00000e  f7fffffe          BL       memset1
;;;111    
;;;112                //rijndael_encrypt(&ctx->rijndael, K, K);
;;;113    
;;;114                aes_encrypt( K, K, &ctx->rijndael);
000012  4622              MOV      r2,r4
000014  3224              ADDS     r2,r2,#0x24
000016  a905              ADD      r1,sp,#0x14
000018  a805              ADD      r0,sp,#0x14
00001a  f7fffffe          BL       aes_encrypt
;;;115    
;;;116                if (K[0] & 0x80) {
00001e  4668              MOV      r0,sp
000020  7d00              LDRB     r0,[r0,#0x14]
000022  2180              MOVS     r1,#0x80
000024  4008              ANDS     r0,r0,r1
000026  2800              CMP      r0,#0
000028  d01c              BEQ      |L1.100|
;;;117                        LSHIFT(K, K);
00002a  bf00              NOP      
00002c  2000              MOVS     r0,#0
00002e  e00a              B        |L1.70|
                  |L1.48|
000030  a905              ADD      r1,sp,#0x14
000032  5c09              LDRB     r1,[r1,r0]
000034  0049              LSLS     r1,r1,#1
000036  ab05              ADD      r3,sp,#0x14
000038  1c42              ADDS     r2,r0,#1
00003a  5c9a              LDRB     r2,[r3,r2]
00003c  11d2              ASRS     r2,r2,#7
00003e  4311              ORRS     r1,r1,r2
000040  aa05              ADD      r2,sp,#0x14
000042  5411              STRB     r1,[r2,r0]
000044  1c40              ADDS     r0,r0,#1
                  |L1.70|
000046  280f              CMP      r0,#0xf
000048  dbf2              BLT      |L1.48|
00004a  a908              ADD      r1,sp,#0x20
00004c  78c9              LDRB     r1,[r1,#3]
00004e  0649              LSLS     r1,r1,#25
000050  0e0a              LSRS     r2,r1,#24
000052  a908              ADD      r1,sp,#0x20
000054  70ca              STRB     r2,[r1,#3]
000056  bf00              NOP      
;;;118                       K[15] ^= 0x87;
000058  78c8              LDRB     r0,[r1,#3]
00005a  2187              MOVS     r1,#0x87
00005c  4048              EORS     r0,r0,r1
00005e  a908              ADD      r1,sp,#0x20
000060  70c8              STRB     r0,[r1,#3]
000062  e016              B        |L1.146|
                  |L1.100|
;;;119                } else
;;;120                        LSHIFT(K, K);
000064  bf00              NOP      
000066  2000              MOVS     r0,#0
000068  e00a              B        |L1.128|
                  |L1.106|
00006a  a905              ADD      r1,sp,#0x14
00006c  5c09              LDRB     r1,[r1,r0]
00006e  0049              LSLS     r1,r1,#1
000070  ab05              ADD      r3,sp,#0x14
000072  1c42              ADDS     r2,r0,#1
000074  5c9a              LDRB     r2,[r3,r2]
000076  11d2              ASRS     r2,r2,#7
000078  4311              ORRS     r1,r1,r2
00007a  aa05              ADD      r2,sp,#0x14
00007c  5411              STRB     r1,[r2,r0]
00007e  1c40              ADDS     r0,r0,#1
                  |L1.128|
000080  280f              CMP      r0,#0xf
000082  dbf2              BLT      |L1.106|
000084  a908              ADD      r1,sp,#0x20
000086  78c9              LDRB     r1,[r1,#3]
000088  0649              LSLS     r1,r1,#25
00008a  0e0a              LSRS     r2,r1,#24
00008c  a908              ADD      r1,sp,#0x20
00008e  70ca              STRB     r2,[r1,#3]
000090  bf00              NOP      
                  |L1.146|
;;;121    
;;;122    
;;;123                if (ctx->M_n == 16) {
000092  6a20              LDR      r0,[r4,#0x20]
000094  2810              CMP      r0,#0x10
000096  d10f              BNE      |L1.184|
;;;124                        /* last block was a complete block */
;;;125                        XOR(K, ctx->M_last);
000098  bf00              NOP      
00009a  2000              MOVS     r0,#0
00009c  e009              B        |L1.178|
                  |L1.158|
00009e  4621              MOV      r1,r4
0000a0  3110              ADDS     r1,r1,#0x10
0000a2  5c09              LDRB     r1,[r1,r0]
0000a4  aa05              ADD      r2,sp,#0x14
0000a6  5c12              LDRB     r2,[r2,r0]
0000a8  4051              EORS     r1,r1,r2
0000aa  4622              MOV      r2,r4
0000ac  3210              ADDS     r2,r2,#0x10
0000ae  5411              STRB     r1,[r2,r0]
0000b0  1c40              ADDS     r0,r0,#1
                  |L1.178|
0000b2  2810              CMP      r0,#0x10
0000b4  dbf3              BLT      |L1.158|
0000b6  e059              B        |L1.364|
                  |L1.184|
;;;126    
;;;127               } else {
;;;128                       /* generate subkey K2 */
;;;129                      if (K[0] & 0x80) {
0000b8  4668              MOV      r0,sp
0000ba  7d00              LDRB     r0,[r0,#0x14]
0000bc  2180              MOVS     r1,#0x80
0000be  4008              ANDS     r0,r0,r1
0000c0  2800              CMP      r0,#0
0000c2  d01c              BEQ      |L1.254|
;;;130                              LSHIFT(K, K);
0000c4  bf00              NOP      
0000c6  2000              MOVS     r0,#0
0000c8  e00a              B        |L1.224|
                  |L1.202|
0000ca  a905              ADD      r1,sp,#0x14
0000cc  5c09              LDRB     r1,[r1,r0]
0000ce  0049              LSLS     r1,r1,#1
0000d0  ab05              ADD      r3,sp,#0x14
0000d2  1c42              ADDS     r2,r0,#1
0000d4  5c9a              LDRB     r2,[r3,r2]
0000d6  11d2              ASRS     r2,r2,#7
0000d8  4311              ORRS     r1,r1,r2
0000da  aa05              ADD      r2,sp,#0x14
0000dc  5411              STRB     r1,[r2,r0]
0000de  1c40              ADDS     r0,r0,#1
                  |L1.224|
0000e0  280f              CMP      r0,#0xf
0000e2  dbf2              BLT      |L1.202|
0000e4  a908              ADD      r1,sp,#0x20
0000e6  78c9              LDRB     r1,[r1,#3]
0000e8  0649              LSLS     r1,r1,#25
0000ea  0e0a              LSRS     r2,r1,#24
0000ec  a908              ADD      r1,sp,#0x20
0000ee  70ca              STRB     r2,[r1,#3]
0000f0  bf00              NOP      
;;;131                              K[15] ^= 0x87;
0000f2  78c8              LDRB     r0,[r1,#3]
0000f4  2187              MOVS     r1,#0x87
0000f6  4048              EORS     r0,r0,r1
0000f8  a908              ADD      r1,sp,#0x20
0000fa  70c8              STRB     r0,[r1,#3]
0000fc  e016              B        |L1.300|
                  |L1.254|
;;;132                      } else
;;;133                               LSHIFT(K, K);
0000fe  bf00              NOP      
000100  2000              MOVS     r0,#0
000102  e00a              B        |L1.282|
                  |L1.260|
000104  a905              ADD      r1,sp,#0x14
000106  5c09              LDRB     r1,[r1,r0]
000108  0049              LSLS     r1,r1,#1
00010a  ab05              ADD      r3,sp,#0x14
00010c  1c42              ADDS     r2,r0,#1
00010e  5c9a              LDRB     r2,[r3,r2]
000110  11d2              ASRS     r2,r2,#7
000112  4311              ORRS     r1,r1,r2
000114  aa05              ADD      r2,sp,#0x14
000116  5411              STRB     r1,[r2,r0]
000118  1c40              ADDS     r0,r0,#1
                  |L1.282|
00011a  280f              CMP      r0,#0xf
00011c  dbf2              BLT      |L1.260|
00011e  a908              ADD      r1,sp,#0x20
000120  78c9              LDRB     r1,[r1,#3]
000122  0649              LSLS     r1,r1,#25
000124  0e0a              LSRS     r2,r1,#24
000126  a908              ADD      r1,sp,#0x20
000128  70ca              STRB     r2,[r1,#3]
00012a  bf00              NOP      
                  |L1.300|
;;;134    
;;;135                       /* padding(M_last) */
;;;136                       ctx->M_last[ctx->M_n] = 0x80;
00012c  2180              MOVS     r1,#0x80
00012e  4620              MOV      r0,r4
000130  3010              ADDS     r0,r0,#0x10
000132  6a22              LDR      r2,[r4,#0x20]
000134  5481              STRB     r1,[r0,r2]
;;;137                       while (++ctx->M_n < 16)
000136  e004              B        |L1.322|
                  |L1.312|
;;;138                             ctx->M_last[ctx->M_n] = 0;
000138  2100              MOVS     r1,#0
00013a  4620              MOV      r0,r4
00013c  3010              ADDS     r0,r0,#0x10
00013e  6a22              LDR      r2,[r4,#0x20]
000140  5481              STRB     r1,[r0,r2]
                  |L1.322|
000142  6a20              LDR      r0,[r4,#0x20]         ;137
000144  1c40              ADDS     r0,r0,#1              ;137
000146  6220              STR      r0,[r4,#0x20]         ;137
000148  2810              CMP      r0,#0x10              ;137
00014a  d3f5              BCC      |L1.312|
;;;139       
;;;140                      XOR(K, ctx->M_last);
00014c  bf00              NOP      
00014e  2000              MOVS     r0,#0
000150  e009              B        |L1.358|
                  |L1.338|
000152  4621              MOV      r1,r4
000154  3110              ADDS     r1,r1,#0x10
000156  5c09              LDRB     r1,[r1,r0]
000158  aa05              ADD      r2,sp,#0x14
00015a  5c12              LDRB     r2,[r2,r0]
00015c  4051              EORS     r1,r1,r2
00015e  4622              MOV      r2,r4
000160  3210              ADDS     r2,r2,#0x10
000162  5411              STRB     r1,[r2,r0]
000164  1c40              ADDS     r0,r0,#1
                  |L1.358|
000166  2810              CMP      r0,#0x10
000168  dbf3              BLT      |L1.338|
00016a  bf00              NOP      
                  |L1.364|
;;;141    
;;;142    
;;;143               }
;;;144               XOR(ctx->M_last, ctx->X);
00016c  bf00              NOP      
00016e  2000              MOVS     r0,#0
000170  e006              B        |L1.384|
                  |L1.370|
000172  5c21              LDRB     r1,[r4,r0]
000174  4622              MOV      r2,r4
000176  3210              ADDS     r2,r2,#0x10
000178  5c12              LDRB     r2,[r2,r0]
00017a  4051              EORS     r1,r1,r2
00017c  5421              STRB     r1,[r4,r0]
00017e  1c40              ADDS     r0,r0,#1
                  |L1.384|
000180  2810              CMP      r0,#0x10
000182  dbf6              BLT      |L1.370|
000184  bf00              NOP      
;;;145    
;;;146               //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);
;;;147    
;;;148           memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
000186  2210              MOVS     r2,#0x10
000188  4621              MOV      r1,r4
00018a  a801              ADD      r0,sp,#4
00018c  f7fffffe          BL       memcpy1
;;;149           aes_encrypt(in, digest, &ctx->rijndael);
000190  4622              MOV      r2,r4
000192  3224              ADDS     r2,r2,#0x24
000194  4629              MOV      r1,r5
000196  a801              ADD      r0,sp,#4
000198  f7fffffe          BL       aes_encrypt
;;;150               memset1(K, 0, sizeof K);
00019c  2210              MOVS     r2,#0x10
00019e  2100              MOVS     r1,#0
0001a0  a805              ADD      r0,sp,#0x14
0001a2  f7fffffe          BL       memset1
;;;151    
;;;152    }
0001a6  b009              ADD      sp,sp,#0x24
0001a8  bd30              POP      {r4,r5,pc}
;;;153    
                          ENDP


                          AREA ||i.AES_CMAC_Init||, CODE, READONLY, ALIGN=1

                  AES_CMAC_Init PROC
;;;57     
;;;58     void AES_CMAC_Init(AES_CMAC_CTX *ctx)
000000  b510              PUSH     {r4,lr}
;;;59     {
000002  4604              MOV      r4,r0
;;;60                 memset1(ctx->X, 0, sizeof ctx->X);
000004  2210              MOVS     r2,#0x10
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       memset1
;;;61                 ctx->M_n = 0;
00000e  2000              MOVS     r0,#0
000010  6220              STR      r0,[r4,#0x20]
;;;62             memset1(ctx->rijndael.ksch, '\0', 240);
000012  22f0              MOVS     r2,#0xf0
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  3024              ADDS     r0,r0,#0x24
00001a  f7fffffe          BL       memset1
;;;63     }
00001e  bd10              POP      {r4,pc}
;;;64         
                          ENDP


                          AREA ||i.AES_CMAC_SetKey||, CODE, READONLY, ALIGN=1

                  AES_CMAC_SetKey PROC
;;;64         
;;;65     void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
000000  b570              PUSH     {r4-r6,lr}
;;;66     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;67                //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
;;;68            aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
000006  462a              MOV      r2,r5
000008  3224              ADDS     r2,r2,#0x24
00000a  2110              MOVS     r1,#0x10
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       aes_set_key
;;;69     }
000012  bd70              POP      {r4-r6,pc}
;;;70         
                          ENDP


                          AREA ||i.AES_CMAC_Update||, CODE, READONLY, ALIGN=1

                  AES_CMAC_Update PROC
;;;70         
;;;71     void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;72     {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;73                 uint32_t mlen;
;;;74             uint8_t in[16];
;;;75         
;;;76                 if (ctx->M_n > 0) {
00000a  6a20              LDR      r0,[r4,#0x20]
00000c  2800              CMP      r0,#0
00000e  d030              BEQ      |L4.114|
;;;77                       mlen = MIN(16 - ctx->M_n, len);
000010  2110              MOVS     r1,#0x10
000012  6a20              LDR      r0,[r4,#0x20]
000014  1a08              SUBS     r0,r1,r0
000016  42a8              CMP      r0,r5
000018  d202              BCS      |L4.32|
00001a  6a20              LDR      r0,[r4,#0x20]
00001c  1a08              SUBS     r0,r1,r0
00001e  e000              B        |L4.34|
                  |L4.32|
000020  4628              MOV      r0,r5
                  |L4.34|
000022  4606              MOV      r6,r0
;;;78                         memcpy1(ctx->M_last + ctx->M_n, data, mlen);
000024  b2b2              UXTH     r2,r6
000026  4623              MOV      r3,r4
000028  3310              ADDS     r3,r3,#0x10
00002a  6a21              LDR      r1,[r4,#0x20]
00002c  18c8              ADDS     r0,r1,r3
00002e  4639              MOV      r1,r7
000030  f7fffffe          BL       memcpy1
;;;79                         ctx->M_n += mlen;
000034  6a20              LDR      r0,[r4,#0x20]
000036  1980              ADDS     r0,r0,r6
000038  6220              STR      r0,[r4,#0x20]
;;;80                         if (ctx->M_n < 16 || len == mlen)
00003a  6a20              LDR      r0,[r4,#0x20]
00003c  2810              CMP      r0,#0x10
00003e  d301              BCC      |L4.68|
000040  42b5              CMP      r5,r6
000042  d101              BNE      |L4.72|
                  |L4.68|
;;;81                                 return;
;;;82                        XOR(ctx->M_last, ctx->X);
;;;83                         //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
;;;84                 aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
;;;85                         data += mlen;
;;;86                         len -= mlen;
;;;87                 }
;;;88                 while (len > 16) {      /* not last block */
;;;89     
;;;90                         XOR(data, ctx->X);
;;;91                         //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
;;;92     
;;;93                         memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
;;;94                 aes_encrypt( in, in, &ctx->rijndael);
;;;95                         memcpy1(&ctx->X[0], in, 16);
;;;96     
;;;97                         data += 16;
;;;98                         len -= 16;
;;;99                 }
;;;100                /* potential last block, save it */
;;;101                memcpy1(ctx->M_last, data, len);
;;;102                ctx->M_n = len;
;;;103    }
000044  b005              ADD      sp,sp,#0x14
000046  bdf0              POP      {r4-r7,pc}
                  |L4.72|
000048  bf00              NOP                            ;82
00004a  2000              MOVS     r0,#0                 ;82
00004c  e006              B        |L4.92|
                  |L4.78|
00004e  5c21              LDRB     r1,[r4,r0]            ;82
000050  4622              MOV      r2,r4                 ;82
000052  3210              ADDS     r2,r2,#0x10           ;82
000054  5c12              LDRB     r2,[r2,r0]            ;82
000056  4051              EORS     r1,r1,r2              ;82
000058  5421              STRB     r1,[r4,r0]            ;82
00005a  1c40              ADDS     r0,r0,#1              ;82
                  |L4.92|
00005c  2810              CMP      r0,#0x10              ;82
00005e  dbf6              BLT      |L4.78|
000060  bf00              NOP                            ;82
000062  4622              MOV      r2,r4                 ;84
000064  3224              ADDS     r2,r2,#0x24           ;84
000066  4621              MOV      r1,r4                 ;84
000068  4620              MOV      r0,r4                 ;84
00006a  f7fffffe          BL       aes_encrypt
00006e  19bf              ADDS     r7,r7,r6              ;85
000070  1bad              SUBS     r5,r5,r6              ;86
                  |L4.114|
000072  e01c              B        |L4.174|
                  |L4.116|
000074  bf00              NOP                            ;90
000076  2000              MOVS     r0,#0                 ;90
000078  e004              B        |L4.132|
                  |L4.122|
00007a  5c21              LDRB     r1,[r4,r0]            ;90
00007c  5c3a              LDRB     r2,[r7,r0]            ;90
00007e  4051              EORS     r1,r1,r2              ;90
000080  5421              STRB     r1,[r4,r0]            ;90
000082  1c40              ADDS     r0,r0,#1              ;90
                  |L4.132|
000084  2810              CMP      r0,#0x10              ;90
000086  dbf8              BLT      |L4.122|
000088  bf00              NOP                            ;90
00008a  2210              MOVS     r2,#0x10              ;93
00008c  4621              MOV      r1,r4                 ;93
00008e  4668              MOV      r0,sp                 ;93
000090  f7fffffe          BL       memcpy1
000094  4622              MOV      r2,r4                 ;94
000096  3224              ADDS     r2,r2,#0x24           ;94
000098  4669              MOV      r1,sp                 ;94
00009a  4668              MOV      r0,sp                 ;94
00009c  f7fffffe          BL       aes_encrypt
0000a0  2210              MOVS     r2,#0x10              ;95
0000a2  4669              MOV      r1,sp                 ;95
0000a4  4620              MOV      r0,r4                 ;95
0000a6  f7fffffe          BL       memcpy1
0000aa  3710              ADDS     r7,r7,#0x10           ;97
0000ac  3d10              SUBS     r5,r5,#0x10           ;98
                  |L4.174|
0000ae  2d10              CMP      r5,#0x10              ;88
0000b0  d8e0              BHI      |L4.116|
0000b2  b2aa              UXTH     r2,r5                 ;101
0000b4  4639              MOV      r1,r7                 ;101
0000b6  4620              MOV      r0,r4                 ;101
0000b8  3010              ADDS     r0,r0,#0x10           ;101
0000ba  f7fffffe          BL       memcpy1
0000be  6225              STR      r5,[r4,#0x20]         ;102
0000c0  bf00              NOP      
0000c2  e7bf              B        |L4.68|
;;;104       
                          ENDP

