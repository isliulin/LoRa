; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_it.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_it.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_it.crf ..\USER\stm32f0xx_it.c]
                          THUMB

                          AREA ||i.HAL_RTC_AlarmAEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTC_AlarmAEventCallback PROC
;;;139    
;;;140    void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
000000  b510              PUSH     {r4,lr}
;;;141    {
000002  4604              MOV      r4,r0
;;;142    	/** disable irq */
;;;143    	__disable_irq( );
000004  b672              CPSID    i
;;;144    	
;;;145    	DEBUG(4,"%s\r\n",__func__);
;;;146    	
;;;147    	// check the clk source and set to full speed if we are coming from sleep mode
;;;148    
;;;149    	TimerIrqHandler( ); ///链表清零，重新计数	
000006  f7fffffe          BL       TimerIrqHandler
;;;150     /** enable irq */
;;;151    	__enable_irq( );
00000a  b662              CPSIE    i
;;;152    }
00000c  bd10              POP      {r4,pc}
;;;153    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;64     */
;;;65     void HardFault_Handler(void)
000000  bf00              NOP      
                  |L2.2|
;;;66     {
;;;67       /* USER CODE BEGIN HardFault_IRQn 0 */
;;;68     
;;;69       /* USER CODE END HardFault_IRQn 0 */
;;;70       while (1)
000002  e7fe              B        |L2.2|
;;;71       {
;;;72       }
;;;73       /* USER CODE BEGIN HardFault_IRQn 1 */
;;;74     
;;;75       /* USER CODE END HardFault_IRQn 1 */
;;;76     }
;;;77     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;51     */
;;;52     void NMI_Handler(void)
000000  4770              BX       lr
;;;53     {
;;;54       /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
;;;55     
;;;56       /* USER CODE END NonMaskableInt_IRQn 0 */
;;;57       /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
;;;58     
;;;59       /* USER CODE END NonMaskableInt_IRQn 1 */
;;;60     }
;;;61     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;93     */
;;;94     void PendSV_Handler(void)
000000  4770              BX       lr
;;;95     {
;;;96       /* USER CODE BEGIN PendSV_IRQn 0 */
;;;97     
;;;98       /* USER CODE END PendSV_IRQn 0 */
;;;99       /* USER CODE BEGIN PendSV_IRQn 1 */
;;;100    
;;;101      /* USER CODE END PendSV_IRQn 1 */
;;;102    }
;;;103    
                          ENDP


                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_IRQHandler PROC
;;;125    */
;;;126    void RTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;127    {
;;;128      /* USER CODE BEGIN RTC_IRQn 0 */
;;;129    
;;;130      /* USER CODE END RTC_IRQn 0 */
;;;131    	
;;;132      HAL_RTC_AlarmIRQHandler(&RtcHandle);
000002  4803              LDR      r0,|L5.16|
000004  f7fffffe          BL       HAL_RTC_AlarmIRQHandler
;;;133    	test_rtc = false;
000008  2000              MOVS     r0,#0
00000a  4902              LDR      r1,|L5.20|
00000c  7008              STRB     r0,[r1,#0]
;;;134    	
;;;135      /* USER CODE BEGIN RTC_IRQn 1 */
;;;136    	
;;;137      /* USER CODE END RTC_IRQn 1 */
;;;138    }
00000e  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L5.16|
                          DCD      RtcHandle
                  |L5.20|
                          DCD      test_rtc

                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;80     */
;;;81     void SVC_Handler(void)
000000  4770              BX       lr
;;;82     {
;;;83       /* USER CODE BEGIN SVC_IRQn 0 */
;;;84     
;;;85       /* USER CODE END SVC_IRQn 0 */
;;;86       /* USER CODE BEGIN SVC_IRQn 1 */
;;;87     
;;;88       /* USER CODE END SVC_IRQn 1 */
;;;89     }
;;;90     
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;108    */
;;;109    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;110    {
;;;111      /* USER CODE BEGIN SysTick_IRQn 0 */
;;;112    
;;;113      /* USER CODE END SysTick_IRQn 0 */
;;;114      HAL_IncTick();
000002  f7fffffe          BL       HAL_IncTick
;;;115      HAL_SYSTICK_IRQHandler();
000006  f7fffffe          BL       HAL_SYSTICK_IRQHandler
;;;116      /* USER CODE BEGIN SysTick_IRQn 1 */
;;;117      TimerOverTime++;
00000a  4805              LDR      r0,|L7.32|
00000c  6800              LDR      r0,[r0,#0]  ; TimerOverTime
00000e  1c40              ADDS     r0,r0,#1
000010  4903              LDR      r1,|L7.32|
000012  6008              STR      r0,[r1,#0]  ; TimerOverTime
;;;118    	Send_time++;
000014  4803              LDR      r0,|L7.36|
000016  6800              LDR      r0,[r0,#0]  ; Send_time
000018  1c40              ADDS     r0,r0,#1
00001a  4902              LDR      r1,|L7.36|
00001c  6008              STR      r0,[r1,#0]  ; Send_time
;;;119      /* USER CODE END SysTick_IRQn 1 */
;;;120    }
00001e  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  |L7.32|
                          DCD      TimerOverTime
                  |L7.36|
                          DCD      Send_time

                          AREA ||i.USART3_6_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_6_IRQHandler PROC
;;;157    */
;;;158    void USART3_6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;159    {
;;;160      /* USER CODE BEGIN USART3_6_IRQn 0 */
;;;161    
;;;162      /* USER CODE END USART3_6_IRQn 0 */
;;;163      HAL_UART_IRQHandler(&huart5);
000002  4812              LDR      r0,|L8.76|
000004  f7fffffe          BL       HAL_UART_IRQHandler
;;;164      /* USER CODE BEGIN USART3_6_IRQn 1 */
;;;165    	uint32_t timeout = 0;
000008  2400              MOVS     r4,#0
;;;166    
;;;167    	timeout = Send_time;
00000a  4811              LDR      r0,|L8.80|
00000c  6804              LDR      r4,[r0,#0]  ; Send_time
;;;168    	while (HAL_UART_GetState(&huart5)!=HAL_UART_STATE_READY)//等待就绪
00000e  e005              B        |L8.28|
                  |L8.16|
;;;169    	{
;;;170        if(Send_time - timeout> 20) break;		///20ms超时处理
000010  480f              LDR      r0,|L8.80|
000012  6800              LDR      r0,[r0,#0]  ; Send_time
000014  1b00              SUBS     r0,r0,r4
000016  2814              CMP      r0,#0x14
000018  d900              BLS      |L8.28|
00001a  e004              B        |L8.38|
                  |L8.28|
00001c  480b              LDR      r0,|L8.76|
00001e  f7fffffe          BL       HAL_UART_GetState
000022  2820              CMP      r0,#0x20              ;168
000024  d1f4              BNE      |L8.16|
                  |L8.38|
000026  bf00              NOP      
;;;171    	}
;;;172         
;;;173    	timeout = Send_time;
000028  4809              LDR      r0,|L8.80|
00002a  6804              LDR      r4,[r0,#0]  ; Send_time
;;;174    	while(HAL_UART_Receive_IT(&huart5,(uint8_t *)UART_RX_DATA.aRxBuffer, RXBUFFERSIZE)!=HAL_OK)//一次处理完成之后，重新开启中断并设置RxXferCount为1
00002c  e005              B        |L8.58|
                  |L8.46|
;;;175    	{
;;;176        if(Send_time - timeout> 20) break;	 	///20ms超时处理	
00002e  4808              LDR      r0,|L8.80|
000030  6800              LDR      r0,[r0,#0]  ; Send_time
000032  1b00              SUBS     r0,r0,r4
000034  2814              CMP      r0,#0x14
000036  d900              BLS      |L8.58|
000038  e006              B        |L8.72|
                  |L8.58|
00003a  2201              MOVS     r2,#1                 ;174
00003c  4905              LDR      r1,|L8.84|
00003e  4803              LDR      r0,|L8.76|
000040  f7fffffe          BL       HAL_UART_Receive_IT
000044  2800              CMP      r0,#0                 ;174
000046  d1f2              BNE      |L8.46|
                  |L8.72|
000048  bf00              NOP      
;;;177    	}
;;;178      /* USER CODE END USART3_6_IRQn 1 */
;;;179    }
00004a  bd10              POP      {r4,pc}
;;;180    
                          ENDP

                  |L8.76|
                          DCD      huart5
                  |L8.80|
                          DCD      Send_time
                  |L8.84|
                          DCD      UART_RX_DATA+0x406

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  48414c5f          DCB      0x48,0x41,0x4c,0x5f
000004  5254435f          DCB      0x52,0x54,0x43,0x5f
000008  416c6172          DCB      0x41,0x6c,0x61,0x72
00000c  6d414576          DCB      0x6d,0x41,0x45,0x76
000010  656e7443          DCB      0x65,0x6e,0x74,0x43
000014  616c6c62          DCB      0x61,0x6c,0x6c,0x62
000018  61636b00          DCB      0x61,0x63,0x6b,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  TimerOverTime
                          DCD      0x00000000
                  Send_time
                          DCD      0x00000000
                  test_rtc
000008  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\USER\\stm32f0xx_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f0xx_it_c_bb8ca80c____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_stm32f0xx_it_c_bb8ca80c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f0xx_it_c_bb8ca80c____REVSH|
#line 402
|__asm___14_stm32f0xx_it_c_bb8ca80c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
