; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\spi.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\spi.crf ..\HAL\src\spi.c]
                          THUMB

                          AREA ||i.HAL_SPI_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_SPI_MspDeInit PROC
;;;104    
;;;105    void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
000000  b510              PUSH     {r4,lr}
;;;106    {
000002  4604              MOV      r4,r0
;;;107    
;;;108      if(spiHandle->Instance==SPI1)
000004  4907              LDR      r1,|L1.36|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d10a              BNE      |L1.34|
;;;109      {
;;;110      /* USER CODE BEGIN SPI1_MspDeInit 0 */
;;;111    
;;;112      /* USER CODE END SPI1_MspDeInit 0 */
;;;113        /* Peripheral clock disable */
;;;114        __HAL_RCC_SPI1_CLK_DISABLE();
00000c  4806              LDR      r0,|L1.40|
00000e  6980              LDR      r0,[r0,#0x18]
000010  1489              ASRS     r1,r1,#18
000012  4388              BICS     r0,r0,r1
000014  4904              LDR      r1,|L1.40|
000016  6188              STR      r0,[r1,#0x18]
;;;115      
;;;116        /**SPI1 GPIO Configuration    
;;;117        PA5     ------> SPI1_SCK
;;;118        PA6     ------> SPI1_MISO
;;;119        PA7     ------> SPI1_MOSI 
;;;120        */
;;;121        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
000018  21e0              MOVS     r1,#0xe0
00001a  2009              MOVS     r0,#9
00001c  06c0              LSLS     r0,r0,#27
00001e  f7fffffe          BL       HAL_GPIO_DeInit
                  |L1.34|
;;;122    
;;;123      }
;;;124      /* USER CODE BEGIN SPI1_MspDeInit 1 */
;;;125    
;;;126      /* USER CODE END SPI1_MspDeInit 1 */
;;;127    } 
000022  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  |L1.36|
                          DCD      0x40013000
                  |L1.40|
                          DCD      0x40021000

                          AREA ||i.HAL_SPI_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_SPI_MspInit PROC
;;;72       */
;;;73     void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
000000  b510              PUSH     {r4,lr}
;;;74     {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;75     
;;;76       GPIO_InitTypeDef GPIO_InitStruct;
;;;77       if(spiHandle->Instance==SPI1)
000006  4919              LDR      r1,|L2.108|
000008  6820              LDR      r0,[r4,#0]
00000a  4288              CMP      r0,r1
00000c  d12c              BNE      |L2.104|
;;;78       {
;;;79       /* USER CODE BEGIN SPI1_MspInit 0 */
;;;80     
;;;81       /* USER CODE END SPI1_MspInit 0 */
;;;82         /* Peripheral clock enable */
;;;83     	  __HAL_RCC_GPIOA_CLK_ENABLE();       //使能GPIOA时钟
00000e  bf00              NOP      
000010  4817              LDR      r0,|L2.112|
000012  6940              LDR      r0,[r0,#0x14]
000014  2101              MOVS     r1,#1
000016  0449              LSLS     r1,r1,#17
000018  4308              ORRS     r0,r0,r1
00001a  4915              LDR      r1,|L2.112|
00001c  6148              STR      r0,[r1,#0x14]
00001e  4608              MOV      r0,r1
000020  6940              LDR      r0,[r0,#0x14]
000022  2101              MOVS     r1,#1
000024  0449              LSLS     r1,r1,#17
000026  4008              ANDS     r0,r0,r1
000028  9000              STR      r0,[sp,#0]
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;84     
;;;85         __HAL_RCC_SPI1_CLK_ENABLE();
00002e  bf00              NOP      
000030  480f              LDR      r0,|L2.112|
000032  6980              LDR      r0,[r0,#0x18]
000034  1149              ASRS     r1,r1,#5
000036  4308              ORRS     r0,r0,r1
000038  490d              LDR      r1,|L2.112|
00003a  6188              STR      r0,[r1,#0x18]
00003c  4608              MOV      r0,r1
00003e  6980              LDR      r0,[r0,#0x18]
000040  1489              ASRS     r1,r1,#18
000042  4008              ANDS     r0,r0,r1
000044  9000              STR      r0,[sp,#0]
000046  bf00              NOP      
000048  bf00              NOP      
;;;86       
;;;87         /**SPI1 GPIO Configuration    
;;;88         PA5     ------> SPI1_SCK
;;;89         PA6     ------> SPI1_MISO
;;;90         PA7     ------> SPI1_MOSI 
;;;91         */
;;;92         GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
00004a  20e0              MOVS     r0,#0xe0
00004c  9001              STR      r0,[sp,#4]
;;;93         GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
00004e  2002              MOVS     r0,#2
000050  9002              STR      r0,[sp,#8]
;;;94         GPIO_InitStruct.Pull = GPIO_NOPULL;
000052  2000              MOVS     r0,#0
000054  9003              STR      r0,[sp,#0xc]
;;;95         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
000056  2003              MOVS     r0,#3
000058  9004              STR      r0,[sp,#0x10]
;;;96         GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
00005a  2000              MOVS     r0,#0
00005c  9005              STR      r0,[sp,#0x14]
;;;97         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
00005e  a901              ADD      r1,sp,#4
000060  2009              MOVS     r0,#9
000062  06c0              LSLS     r0,r0,#27
000064  f7fffffe          BL       HAL_GPIO_Init
                  |L2.104|
;;;98     
;;;99       /* USER CODE BEGIN SPI1_MspInit 1 */
;;;100    
;;;101      /* USER CODE END SPI1_MspInit 1 */
;;;102      }
;;;103    }
000068  b006              ADD      sp,sp,#0x18
00006a  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  |L2.108|
                          DCD      0x40013000
                  |L2.112|
                          DCD      0x40021000

                          AREA ||i.SPI1_Init||, CODE, READONLY, ALIGN=2

                  SPI1_Init PROC
;;;24       */
;;;25     void SPI1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     
;;;28       hspi1.Instance = SPI1;
000002  4812              LDR      r0,|L3.76|
000004  4912              LDR      r1,|L3.80|
000006  6008              STR      r0,[r1,#0]  ; hspi1
;;;29       hspi1.Init.Mode = SPI_MODE_MASTER;
000008  20ff              MOVS     r0,#0xff
00000a  3005              ADDS     r0,#5
00000c  6048              STR      r0,[r1,#4]  ; hspi1
;;;30       hspi1.Init.Direction = SPI_DIRECTION_2LINES;
00000e  2100              MOVS     r1,#0
000010  480f              LDR      r0,|L3.80|
000012  6081              STR      r1,[r0,#8]
;;;31       hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
000014  2107              MOVS     r1,#7
000016  0209              LSLS     r1,r1,#8
000018  60c1              STR      r1,[r0,#0xc]
;;;32       hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
00001a  2100              MOVS     r1,#0
00001c  6101              STR      r1,[r0,#0x10]
;;;33       hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
00001e  6141              STR      r1,[r0,#0x14]
;;;34       hspi1.Init.NSS = SPI_NSS_SOFT;
000020  2101              MOVS     r1,#1
000022  0249              LSLS     r1,r1,#9
000024  6181              STR      r1,[r0,#0x18]
;;;35       hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
000026  2118              MOVS     r1,#0x18
000028  61c1              STR      r1,[r0,#0x1c]
;;;36       hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
00002a  2100              MOVS     r1,#0
00002c  6201              STR      r1,[r0,#0x20]
;;;37       hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
00002e  6241              STR      r1,[r0,#0x24]
;;;38       hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
000030  6281              STR      r1,[r0,#0x28]
;;;39       hspi1.Init.CRCPolynomial = 7;
000032  2107              MOVS     r1,#7
000034  62c1              STR      r1,[r0,#0x2c]
;;;40       if (HAL_SPI_Init(&hspi1) != HAL_OK)
000036  f7fffffe          BL       HAL_SPI_Init
00003a  2800              CMP      r0,#0
00003c  d004              BEQ      |L3.72|
;;;41       {
;;;42     		DEBUG(2, "HAL_SPI_Init \r\n");
00003e  a005              ADR      r0,|L3.84|
000040  f7fffffe          BL       __2printf
;;;43         Error_Handler();
000044  f7fffffe          BL       Error_Handler
                  |L3.72|
;;;44       }
;;;45     
;;;46     }
000048  bd10              POP      {r4,pc}
;;;47     
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0x40013000
                  |L3.80|
                          DCD      hspi1
                  |L3.84|
000054  48414c5f          DCB      "HAL_SPI_Init \r\n",0
000058  5350495f
00005c  496e6974
000060  200d0a00

                          AREA ||i.SPI1_NSS||, CODE, READONLY, ALIGN=2

                  SPI1_NSS PROC
;;;52       */
;;;53     void SPI1_NSS(void)
000000  b500              PUSH     {lr}
;;;54     {
000002  b087              SUB      sp,sp,#0x1c
;;;55     	GPIO_InitTypeDef GPIO_Initure;
;;;56     //	__HAL_RCC_GPIOD_CLK_ENABLE();			 ///开启外部时钟，RCC_OSC_IN RCC_OSC_OUT 否则SPI不工作
;;;57       __HAL_RCC_GPIOA_CLK_ENABLE();            ///开启GPIOB时钟
000004  bf00              NOP      
000006  4811              LDR      r0,|L4.76|
000008  6940              LDR      r0,[r0,#0x14]
00000a  2101              MOVS     r1,#1
00000c  0449              LSLS     r1,r1,#17
00000e  4308              ORRS     r0,r0,r1
000010  490e              LDR      r1,|L4.76|
000012  6148              STR      r0,[r1,#0x14]
000014  4608              MOV      r0,r1
000016  6940              LDR      r0,[r0,#0x14]
000018  2101              MOVS     r1,#1
00001a  0449              LSLS     r1,r1,#17
00001c  4008              ANDS     r0,r0,r1
00001e  9001              STR      r0,[sp,#4]
000020  bf00              NOP      
000022  bf00              NOP      
;;;58     	
;;;59       GPIO_Initure.Pin=GPIO_PIN_4|GPIO_PIN_15; //PA4
000024  480a              LDR      r0,|L4.80|
000026  9002              STR      r0,[sp,#8]
;;;60       GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
000028  2001              MOVS     r0,#1
00002a  9003              STR      r0,[sp,#0xc]
;;;61       GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
00002c  9004              STR      r0,[sp,#0x10]
;;;62       GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;     //高速
00002e  2003              MOVS     r0,#3
000030  9005              STR      r0,[sp,#0x14]
;;;63       HAL_GPIO_Init(GPIOA,&GPIO_Initure);
000032  a902              ADD      r1,sp,#8
000034  2009              MOVS     r0,#9
000036  06c0              LSLS     r0,r0,#27
000038  f7fffffe          BL       HAL_GPIO_Init
;;;64     	
;;;65       HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4|GPIO_PIN_15,GPIO_PIN_SET);	//PB4置1 
00003c  2201              MOVS     r2,#1
00003e  4904              LDR      r1,|L4.80|
000040  2009              MOVS     r0,#9
000042  06c0              LSLS     r0,r0,#27
000044  f7fffffe          BL       HAL_GPIO_WritePin
;;;66     }
000048  b007              ADD      sp,sp,#0x1c
00004a  bd00              POP      {pc}
;;;67     
                          ENDP

                  |L4.76|
                          DCD      0x40021000
                  |L4.80|
                          DCD      0x00008010

                          AREA ||i.SPI1_Read||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  SPI1_Read PROC
;;;135      */
;;;136    uint32_t SPI1_Read(void)
000000  b538              PUSH     {r3-r5,lr}
;;;137    {
;;;138      HAL_StatusTypeDef status = HAL_OK;
000002  2400              MOVS     r4,#0
;;;139      uint32_t readvalue = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;140    
;;;141      status = HAL_SPI_Receive(&hspi1, (uint8_t*) &readvalue, 1, 0xFFFFFFFF);
000008  1e43              SUBS     r3,r0,#1
00000a  2201              MOVS     r2,#1
00000c  4669              MOV      r1,sp
00000e  4807              LDR      r0,|L5.44|
000010  f7fffffe          BL       HAL_SPI_Receive
000014  4604              MOV      r4,r0
;;;142    
;;;143      /* Check the communication status */
;;;144      if(status != HAL_OK)
000016  2c00              CMP      r4,#0
000018  d005              BEQ      |L5.38|
;;;145      {
;;;146        /* Re-Initiaize the BUS */
;;;147        Error_Handler();
00001a  f7fffffe          BL       Error_Handler
;;;148    		DEBUG(2,"SPI1_Read_error = %d\r\n",status);
00001e  4621              MOV      r1,r4
000020  a003              ADR      r0,|L5.48|
000022  f7fffffe          BL       __2printf
                  |L5.38|
;;;149    	}
;;;150    
;;;151      return readvalue;
000026  9800              LDR      r0,[sp,#0]
;;;152    }
000028  bd38              POP      {r3-r5,pc}
;;;153    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      hspi1
                  |L5.48|
000030  53504931          DCB      "SPI1_Read_error = %d\r\n",0
000034  5f526561
000038  645f6572
00003c  726f7220
000040  3d202564
000044  0d0a00  
000047  00                DCB      0

                          AREA ||i.SPI1_Write||, CODE, READONLY, ALIGN=2

                  SPI1_Write PROC
;;;159      */
;;;160    void SPI1_Write(uint8_t Value)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;161    {
;;;162    	HAL_StatusTypeDef status = HAL_OK;
000002  2400              MOVS     r4,#0
;;;163    
;;;164    	status = HAL_SPI_Transmit(&hspi1, (uint8_t*) &Value, 1, 0xFFFFFFFF);
000004  1e63              SUBS     r3,r4,#1
000006  2201              MOVS     r2,#1
000008  4669              MOV      r1,sp
00000a  4806              LDR      r0,|L6.36|
00000c  f7fffffe          BL       HAL_SPI_Transmit
000010  4604              MOV      r4,r0
;;;165    	
;;;166    	/* Check the communication status */
;;;167    	if(status != HAL_OK)
000012  2c00              CMP      r4,#0
000014  d004              BEQ      |L6.32|
;;;168    	{
;;;169    	/* Re-Initiaize the BUS */
;;;170    		 Error_Handler();
000016  f7fffffe          BL       Error_Handler
;;;171    		 DEBUG(2,"SPI1_Write_error\r\n");
00001a  a003              ADR      r0,|L6.40|
00001c  f7fffffe          BL       __2printf
                  |L6.32|
;;;172    	}
;;;173    }
000020  bd38              POP      {r3-r5,pc}
;;;174    
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      hspi1
                  |L6.40|
000028  53504931          DCB      "SPI1_Write_error\r\n",0
00002c  5f577269
000030  74655f65
000034  72726f72
000038  0d0a00  
00003b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hspi1
                          %        100

;*** Start embedded assembler ***

#line 1 "..\\HAL\\src\\spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_1b04b235____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_spi_c_1b04b235____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_1b04b235____REVSH|
#line 402
|__asm___5_spi_c_1b04b235____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
