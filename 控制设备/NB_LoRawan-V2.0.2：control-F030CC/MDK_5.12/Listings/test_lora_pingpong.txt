; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\test_lora_pingpong.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\test_lora_pingpong.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\test_lora_pingpong.crf ..\TEST\test_lora_pingpong.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=2

                  Error_Handler PROC
;;;379      */
;;;380    void Error_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;381    { 
;;;382    	DEBUG(2,"error\r\n");
000002  a002              ADR      r0,|L1.12|
000004  f7fffffe          BL       __2printf
;;;383    }
000008  bd10              POP      {r4,pc}
;;;384    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
00000c  6572726f          DCB      "error\r\n",0
000010  720d0a00

                          AREA ||i.OnReportTimerEvent||, CODE, READONLY, ALIGN=2

                  OnReportTimerEvent PROC
;;;130    
;;;131    void OnReportTimerEvent( void )
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133       DEBUG(2,"OnReportTimerEvent\r\n");
000002  a008              ADR      r0,|L2.36|
000004  f7fffffe          BL       __2printf
;;;134    	 ReportTimerEvent = true;
000008  2001              MOVS     r0,#1
00000a  490c              LDR      r1,|L2.60|
00000c  7008              STRB     r0,[r1,#0]
;;;135    	 TimerStop( &ReportTimer );
00000e  480c              LDR      r0,|L2.64|
000010  f7fffffe          BL       TimerStop
;;;136    	 TimerSetValue( &ReportTimer, 1000000 ); ///1s
000014  490b              LDR      r1,|L2.68|
000016  480a              LDR      r0,|L2.64|
000018  f7fffffe          BL       TimerSetValue
;;;137    	 TimerStart( &ReportTimer );		
00001c  4808              LDR      r0,|L2.64|
00001e  f7fffffe          BL       TimerStart
;;;138    }
000022  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L2.36|
000024  4f6e5265          DCB      "OnReportTimerEvent\r\n",0
000028  706f7274
00002c  54696d65
000030  72457665
000034  6e740d0a
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L2.60|
                          DCD      ReportTimerEvent
                  |L2.64|
                          DCD      ReportTimer
                  |L2.68|
                          DCD      0x000f4240

                          AREA ||i.OnRxDone||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  OnRxDone PROC
;;;341    
;;;342    void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;343    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;344        Radio.Sleep( );
00000a  490b              LDR      r1,|L3.56|
00000c  6ac8              LDR      r0,[r1,#0x2c]  ; Radio
00000e  4780              BLX      r0
;;;345        BufferSize = size;
000010  480a              LDR      r0,|L3.60|
000012  8005              STRH     r5,[r0,#0]
;;;346        memcpy( Buffer, payload, BufferSize );
000014  8802              LDRH     r2,[r0,#0]  ; BufferSize
000016  4621              MOV      r1,r4
000018  4809              LDR      r0,|L3.64|
00001a  f7fffffe          BL       __aeabi_memcpy
;;;347    	DEBUG(2,"Buffer = %s\r\n",Buffer);
00001e  4908              LDR      r1,|L3.64|
000020  a008              ADR      r0,|L3.68|
000022  f7fffffe          BL       __2printf
;;;348        RssiValue = rssi;
000026  b270              SXTB     r0,r6
000028  490a              LDR      r1,|L3.84|
00002a  7008              STRB     r0,[r1,#0]
;;;349        SnrValue = snr;
00002c  480a              LDR      r0,|L3.88|
00002e  7007              STRB     r7,[r0,#0]
;;;350        State = RX;
000030  2001              MOVS     r0,#1
000032  490a              LDR      r1,|L3.92|
000034  7008              STRB     r0,[r1,#0]
;;;351    }
000036  bdf8              POP      {r3-r7,pc}
;;;352    
                          ENDP

                  |L3.56|
                          DCD      Radio
                  |L3.60|
                          DCD      BufferSize
                  |L3.64|
                          DCD      Buffer
                  |L3.68|
000044  42756666          DCB      "Buffer = %s\r\n",0
000048  6572203d
00004c  2025730d
000050  0a00    
000052  00                DCB      0
000053  00                DCB      0
                  |L3.84|
                          DCD      RssiValue
                  |L3.88|
                          DCD      SnrValue
                  |L3.92|
                          DCD      State

                          AREA ||i.OnRxError||, CODE, READONLY, ALIGN=2

                  OnRxError PROC
;;;366    
;;;367    void OnRxError( void )
000000  b510              PUSH     {r4,lr}
;;;368    {
;;;369        Radio.Sleep( );
000002  4905              LDR      r1,|L4.24|
000004  6ac8              LDR      r0,[r1,#0x2c]  ; Radio
000006  4780              BLX      r0
;;;370        State = RX_ERROR;
000008  2003              MOVS     r0,#3
00000a  4904              LDR      r1,|L4.28|
00000c  7008              STRB     r0,[r1,#0]
;;;371    	DEBUG(2,"OnRxError\r\n");
00000e  a004              ADR      r0,|L4.32|
000010  f7fffffe          BL       __2printf
;;;372    }
000014  bd10              POP      {r4,pc}
;;;373    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      Radio
                  |L4.28|
                          DCD      State
                  |L4.32|
000020  4f6e5278          DCB      "OnRxError\r\n",0
000024  4572726f
000028  720d0a00

                          AREA ||i.OnRxTimeout||, CODE, READONLY, ALIGN=2

                  OnRxTimeout PROC
;;;359    
;;;360    void OnRxTimeout( void )
000000  b510              PUSH     {r4,lr}
;;;361    {
;;;362        Radio.Sleep( );
000002  4905              LDR      r1,|L5.24|
000004  6ac8              LDR      r0,[r1,#0x2c]  ; Radio
000006  4780              BLX      r0
;;;363        State = RX_TIMEOUT;
000008  2002              MOVS     r0,#2
00000a  4904              LDR      r1,|L5.28|
00000c  7008              STRB     r0,[r1,#0]
;;;364    	DEBUG(2,"RX_TIMEOUT\r\n");
00000e  a004              ADR      r0,|L5.32|
000010  f7fffffe          BL       __2printf
;;;365    }
000014  bd10              POP      {r4,pc}
;;;366    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      Radio
                  |L5.28|
                          DCD      State
                  |L5.32|
000020  52585f54          DCB      "RX_TIMEOUT\r\n",0
000024  494d454f
000028  55540d0a
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.OnTxDone||, CODE, READONLY, ALIGN=2

                  OnTxDone PROC
;;;334    
;;;335    void OnTxDone( void )
000000  b510              PUSH     {r4,lr}
;;;336    {
;;;337        Radio.Sleep( );
000002  4905              LDR      r1,|L6.24|
000004  6ac8              LDR      r0,[r1,#0x2c]  ; Radio
000006  4780              BLX      r0
;;;338        State = TX;
000008  2004              MOVS     r0,#4
00000a  4904              LDR      r1,|L6.28|
00000c  7008              STRB     r0,[r1,#0]
;;;339    	DEBUG(2,"OnTxDone\r\n");
00000e  a004              ADR      r0,|L6.32|
000010  f7fffffe          BL       __2printf
;;;340    }
000014  bd10              POP      {r4,pc}
;;;341    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      Radio
                  |L6.28|
                          DCD      State
                  |L6.32|
000020  4f6e5478          DCB      "OnTxDone\r\n",0
000024  446f6e65
000028  0d0a00  
00002b  00                DCB      0

                          AREA ||i.OnTxTimeout||, CODE, READONLY, ALIGN=2

                  OnTxTimeout PROC
;;;352    
;;;353    void OnTxTimeout( void )
000000  b510              PUSH     {r4,lr}
;;;354    {
;;;355        Radio.Sleep( );
000002  4905              LDR      r1,|L7.24|
000004  6ac8              LDR      r0,[r1,#0x2c]  ; Radio
000006  4780              BLX      r0
;;;356        State = TX_TIMEOUT;
000008  2005              MOVS     r0,#5
00000a  4904              LDR      r1,|L7.28|
00000c  7008              STRB     r0,[r1,#0]
;;;357    	DEBUG(2,"TX_TIMEOUT\r\n");
00000e  a004              ADR      r0,|L7.32|
000010  f7fffffe          BL       __2printf
;;;358    }
000014  bd10              POP      {r4,pc}
;;;359    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      Radio
                  |L7.28|
                          DCD      State
                  |L7.32|
000020  54585f54          DCB      "TX_TIMEOUT\r\n",0
000024  494d454f
000028  55540d0a
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;147    
;;;148    int main(void)
000000  b08c              SUB      sp,sp,#0x30
;;;149    {
;;;150        bool isMaster = true;
000002  2501              MOVS     r5,#1
;;;151        uint8_t i;
;;;152    	
;;;153        BoardInitMcu();	
000004  f7fffffe          BL       BoardInitMcu
;;;154    
;;;155    #if 1
;;;156    	// Radio initialization
;;;157        RadioEvents.TxDone = OnTxDone;
000008  488d              LDR      r0,|L8.576|
00000a  498e              LDR      r1,|L8.580|
00000c  6008              STR      r0,[r1,#0]  ; RadioEvents
;;;158        RadioEvents.RxDone = OnRxDone;
00000e  488e              LDR      r0,|L8.584|
000010  6088              STR      r0,[r1,#8]  ; RadioEvents
;;;159        RadioEvents.TxTimeout = OnTxTimeout;
000012  488e              LDR      r0,|L8.588|
000014  6048              STR      r0,[r1,#4]  ; RadioEvents
;;;160        RadioEvents.RxTimeout = OnRxTimeout;
000016  488e              LDR      r0,|L8.592|
000018  60c8              STR      r0,[r1,#0xc]  ; RadioEvents
;;;161        RadioEvents.RxError = OnRxError;
00001a  488e              LDR      r0,|L8.596|
00001c  6108              STR      r0,[r1,#0x10]  ; RadioEvents
;;;162    
;;;163        Radio.Init( &RadioEvents );
00001e  488e              LDR      r0,|L8.600|
000020  6801              LDR      r1,[r0,#0]  ; Radio
000022  4888              LDR      r0,|L8.580|
000024  4788              BLX      r1
;;;164    
;;;165    	  
;;;166        Radio.SetChannel( RF_FREQUENCY );
000026  488c              LDR      r0,|L8.600|
000028  68c1              LDR      r1,[r0,#0xc]  ; Radio
00002a  488c              LDR      r0,|L8.604|
00002c  4788              BLX      r1
;;;167    	
;;;168    #if defined( USE_MODEM_LORA )
;;;169    
;;;170        Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
00002e  488c              LDR      r0,|L8.608|
000030  2100              MOVS     r1,#0
000032  9105              STR      r1,[sp,#0x14]
000034  9106              STR      r1,[sp,#0x18]
000036  9107              STR      r1,[sp,#0x1c]
000038  9008              STR      r0,[sp,#0x20]
00003a  2001              MOVS     r0,#1
00003c  2208              MOVS     r2,#8
00003e  9001              STR      r0,[sp,#4]
000040  9202              STR      r2,[sp,#8]
000042  9103              STR      r1,[sp,#0xc]
000044  9004              STR      r0,[sp,#0x10]
000046  2007              MOVS     r0,#7
000048  9000              STR      r0,[sp,#0]
00004a  4883              LDR      r0,|L8.600|
00004c  460b              MOV      r3,r1
00004e  2200              MOVS     r2,#0
000050  2114              MOVS     r1,#0x14
000052  69c7              LDR      r7,[r0,#0x1c]  ; Radio
000054  2001              MOVS     r0,#1
000056  47b8              BLX      r7
;;;171                                       LORA_SPREADING_FACTOR, LORA_CODINGRATE,
;;;172                                       LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
;;;173                                       true, 0, 0, LORA_IQ_INVERSION_ON, 3000000 );
;;;174        
;;;175        Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
000058  2001              MOVS     r0,#1
00005a  2100              MOVS     r1,#0
00005c  9106              STR      r1,[sp,#0x18]
00005e  9107              STR      r1,[sp,#0x1c]
000060  2305              MOVS     r3,#5
000062  9108              STR      r1,[sp,#0x20]
000064  9103              STR      r1,[sp,#0xc]
000066  9009              STR      r0,[sp,#0x24]
000068  9302              STR      r3,[sp,#8]
00006a  9104              STR      r1,[sp,#0x10]
00006c  9005              STR      r0,[sp,#0x14]
00006e  2008              MOVS     r0,#8
000070  9100              STR      r1,[sp,#0]
000072  9001              STR      r0,[sp,#4]
000074  4878              LDR      r0,|L8.600|
000076  2301              MOVS     r3,#1
000078  2207              MOVS     r2,#7
00007a  6987              LDR      r7,[r0,#0x18]  ; Radio
00007c  4618              MOV      r0,r3
00007e  47b8              BLX      r7
;;;176                                       LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
;;;177                                       LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
;;;178                                       0, true, 0, 0, LORA_IQ_INVERSION_ON, true );
;;;179    
;;;180    #elif defined( USE_MODEM_FSK )
;;;181    
;;;182        Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
;;;183                                      FSK_DATARATE, 0,
;;;184                                      FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
;;;185                                      true, 0, 0, 0, 3000000 );
;;;186        
;;;187        Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
;;;188                                      0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
;;;189                                      0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, true,
;;;190                                      0, 0,false, true );
;;;191    
;;;192    #else
;;;193        #error "Please define a frequency band in the compiler options."
;;;194    #endif
;;;195    
;;;196    #endif
;;;197    																	
;;;198    	DEBUG(2,"hello world\r\n");
000080  a078              ADR      r0,|L8.612|
000082  f7fffffe          BL       __2printf
;;;199    																	
;;;200    	uint8_t TxData = 0X42;
000086  2642              MOVS     r6,#0x42
;;;201      uint8_t pRxData = SX1276Read( TxData );
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       SX1276Read
00008e  900b              STR      r0,[sp,#0x2c]
;;;202    
;;;203    	DEBUG(2, "SX1276 ID = 0x%x\r\n",pRxData);  ///读取到0x12则正确，否则错误
000090  a078              ADR      r0,|L8.628|
000092  990b              LDR      r1,[sp,#0x2c]
000094  f7fffffe          BL       __2printf
;;;204    																
;;;205    																	
;;;206    //  TimerInit( &ReportTimer, OnReportTimerEvent );
;;;207    //	TimerSetValue( &ReportTimer, 1000000 ); ///1s
;;;208    //	TimerStart( &ReportTimer );			
;;;209     
;;;210      Radio.Rx( RX_TIMEOUT_VALUE );
000098  486f              LDR      r0,|L8.600|
00009a  6b41              LDR      r1,[r0,#0x34]  ; Radio
00009c  487a              LDR      r0,|L8.648|
00009e  4788              BLX      r1
;;;211      while (1)
0000a0  e0cd              B        |L8.574|
                  |L8.162|
;;;212      {
;;;213    #if 	1
;;;214            switch( State )
0000a2  487a              LDR      r0,|L8.652|
0000a4  7800              LDRB     r0,[r0,#0]  ; State
0000a6  0003              MOVS     r3,r0
0000a8  f7fffffe          BL       __ARM_common_switch8
0000ac  06c7048e          DCB      0x06,0xc7,0x04,0x8e
0000b0  8f83bbc6          DCB      0x8f,0x83,0xbb,0xc6
;;;215            {
;;;216            case RX:
;;;217                DEBUG(2," The state is RX\r\n ");
0000b4  a076              ADR      r0,|L8.656|
0000b6  f7fffffe          BL       __2printf
;;;218                if( isMaster == true )
0000ba  2d01              CMP      r5,#1
0000bc  d13c              BNE      |L8.312|
;;;219                {
;;;220                    if( BufferSize > 0 )
0000be  4879              LDR      r0,|L8.676|
0000c0  8800              LDRH     r0,[r0,#0]  ; BufferSize
0000c2  2800              CMP      r0,#0
0000c4  dd71              BLE      |L8.426|
;;;221                    {
;;;222                        if( strncmp( ( const char* )Buffer, ( const char* )PongMsg, 4 ) == 0 )
0000c6  2204              MOVS     r2,#4
0000c8  4977              LDR      r1,|L8.680|
0000ca  4878              LDR      r0,|L8.684|
0000cc  f7fffffe          BL       strncmp
0000d0  2800              CMP      r0,#0
0000d2  d11e              BNE      |L8.274|
;;;223                        {                   
;;;224                            // Send the next PING frame            
;;;225                            Buffer[0] = 'P';
0000d4  2050              MOVS     r0,#0x50
0000d6  4975              LDR      r1,|L8.684|
0000d8  7008              STRB     r0,[r1,#0]
;;;226                            Buffer[1] = 'I';
0000da  2049              MOVS     r0,#0x49
0000dc  7048              STRB     r0,[r1,#1]
;;;227                            Buffer[2] = 'N';
0000de  204e              MOVS     r0,#0x4e
0000e0  7088              STRB     r0,[r1,#2]
;;;228                            Buffer[3] = 'G';
0000e2  2047              MOVS     r0,#0x47
0000e4  70c8              STRB     r0,[r1,#3]
;;;229                            // We fill the buffer with numbers for the payload 
;;;230                            for( i = 4; i < BufferSize; i++ )
0000e6  2404              MOVS     r4,#4
0000e8  e004              B        |L8.244|
                  |L8.234|
;;;231                            {
;;;232                                Buffer[i] = i - 4;
0000ea  1f20              SUBS     r0,r4,#4
0000ec  496f              LDR      r1,|L8.684|
0000ee  5508              STRB     r0,[r1,r4]
0000f0  1c60              ADDS     r0,r4,#1              ;230
0000f2  b2c4              UXTB     r4,r0                 ;230
                  |L8.244|
0000f4  486b              LDR      r0,|L8.676|
0000f6  8800              LDRH     r0,[r0,#0]            ;230  ; BufferSize
0000f8  4284              CMP      r4,r0                 ;230
0000fa  dbf6              BLT      |L8.234|
;;;233                            }
;;;234                            Delay( 1 ); 
0000fc  207f              MOVS     r0,#0x7f
0000fe  05c0              LSLS     r0,r0,#23
000100  f7fffffe          BL       Delay
;;;235                            Radio.Send( Buffer, BufferSize );
000104  4867              LDR      r0,|L8.676|
000106  7801              LDRB     r1,[r0,#0]  ; BufferSize
000108  4853              LDR      r0,|L8.600|
00010a  6a82              LDR      r2,[r0,#0x28]  ; Radio
00010c  4867              LDR      r0,|L8.684|
00010e  4790              BLX      r2
000110  e04b              B        |L8.426|
                  |L8.274|
;;;236                           
;;;237                        }
;;;238                        else if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
000112  2204              MOVS     r2,#4
000114  4966              LDR      r1,|L8.688|
000116  4865              LDR      r0,|L8.684|
000118  f7fffffe          BL       strncmp
00011c  2800              CMP      r0,#0
00011e  d105              BNE      |L8.300|
;;;239                        { // A master already exists then become a slave
;;;240                            isMaster = false;                 
000120  2500              MOVS     r5,#0
;;;241                            Radio.Rx( RX_TIMEOUT_VALUE );
000122  484d              LDR      r0,|L8.600|
000124  6b41              LDR      r1,[r0,#0x34]  ; Radio
000126  4858              LDR      r0,|L8.648|
000128  4788              BLX      r1
00012a  e03e              B        |L8.426|
                  |L8.300|
;;;242                        }
;;;243                        else // valid reception but neither a PING or a PONG message
;;;244                        {    // Set device as master ans start again
;;;245                            isMaster = true;
00012c  2501              MOVS     r5,#1
;;;246                            Radio.Rx( RX_TIMEOUT_VALUE );
00012e  484a              LDR      r0,|L8.600|
000130  6b41              LDR      r1,[r0,#0x34]  ; Radio
000132  4855              LDR      r0,|L8.648|
000134  4788              BLX      r1
000136  e038              B        |L8.426|
                  |L8.312|
;;;247                        }
;;;248                    }
;;;249                }
;;;250                else
;;;251                {
;;;252                    if( BufferSize > 0 )
000138  485a              LDR      r0,|L8.676|
00013a  8800              LDRH     r0,[r0,#0]  ; BufferSize
00013c  2800              CMP      r0,#0
00013e  dd34              BLE      |L8.426|
;;;253                    {
;;;254                        if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
000140  2204              MOVS     r2,#4
000142  495b              LDR      r1,|L8.688|
000144  4859              LDR      r0,|L8.684|
000146  f7fffffe          BL       strncmp
00014a  2800              CMP      r0,#0
00014c  d128              BNE      |L8.416|
;;;255                        {
;;;256                            // Send the reply to the PONG string
;;;257                            Buffer[0] = 'P';
00014e  2050              MOVS     r0,#0x50
000150  4956              LDR      r1,|L8.684|
000152  7008              STRB     r0,[r1,#0]
;;;258                            Buffer[1] = 'O';
000154  204f              MOVS     r0,#0x4f
000156  7048              STRB     r0,[r1,#1]
;;;259                            Buffer[2] = 'N';
000158  204e              MOVS     r0,#0x4e
00015a  7088              STRB     r0,[r1,#2]
;;;260                            Buffer[3] = 'G';
00015c  2047              MOVS     r0,#0x47
00015e  70c8              STRB     r0,[r1,#3]
;;;261                            // We fill the buffer with numbers for the payload 
;;;262                            for( i = 4; i < BufferSize; i++ )
000160  2404              MOVS     r4,#4
000162  e004              B        |L8.366|
                  |L8.356|
;;;263                            {
;;;264                                Buffer[i] = i - 4;
000164  1f20              SUBS     r0,r4,#4
000166  4951              LDR      r1,|L8.684|
000168  5508              STRB     r0,[r1,r4]
00016a  1c60              ADDS     r0,r4,#1              ;262
00016c  b2c4              UXTB     r4,r0                 ;262
                  |L8.366|
00016e  484d              LDR      r0,|L8.676|
000170  8800              LDRH     r0,[r0,#0]            ;262  ; BufferSize
000172  4284              CMP      r4,r0                 ;262
000174  dbf6              BLT      |L8.356|
;;;265                            }
;;;266                            DEBUG(2,"line = %d\r\n", __LINE__);
000176  21ff              MOVS     r1,#0xff
000178  310b              ADDS     r1,r1,#0xb
00017a  a04e              ADR      r0,|L8.692|
00017c  f7fffffe          BL       __2printf
;;;267                            Delay( 1 );
000180  207f              MOVS     r0,#0x7f
000182  05c0              LSLS     r0,r0,#23
000184  f7fffffe          BL       Delay
;;;268                            DEBUG(2,"line = %d\r\n", __LINE__);
000188  21ff              MOVS     r1,#0xff
00018a  310d              ADDS     r1,r1,#0xd
00018c  a049              ADR      r0,|L8.692|
00018e  f7fffffe          BL       __2printf
;;;269                            Radio.Send( Buffer, BufferSize );
000192  4844              LDR      r0,|L8.676|
000194  7801              LDRB     r1,[r0,#0]  ; BufferSize
000196  4830              LDR      r0,|L8.600|
000198  6a82              LDR      r2,[r0,#0x28]  ; Radio
00019a  4844              LDR      r0,|L8.684|
00019c  4790              BLX      r2
00019e  e004              B        |L8.426|
                  |L8.416|
;;;270                        }
;;;271                        else // valid reception but not a PING as expected
;;;272                        {    // Set device as master and start again
;;;273                            isMaster = true;
0001a0  2501              MOVS     r5,#1
;;;274                            Radio.Rx( RX_TIMEOUT_VALUE );
0001a2  482d              LDR      r0,|L8.600|
0001a4  6b41              LDR      r1,[r0,#0x34]  ; Radio
0001a6  4838              LDR      r0,|L8.648|
0001a8  4788              BLX      r1
                  |L8.426|
;;;275                        }   
;;;276                    }
;;;277                }
;;;278                State = LOWPOWER;
0001aa  2000              MOVS     r0,#0
0001ac  4937              LDR      r1,|L8.652|
0001ae  7008              STRB     r0,[r1,#0]
;;;279                break;
0001b0  e044              B        |L8.572|
;;;280            case TX:
;;;281                DEBUG(2," The state is TX\r\n");
0001b2  a043              ADR      r0,|L8.704|
0001b4  f7fffffe          BL       __2printf
;;;282                Radio.Rx( RX_TIMEOUT_VALUE );
0001b8  4827              LDR      r0,|L8.600|
0001ba  6b41              LDR      r1,[r0,#0x34]  ; Radio
0001bc  4832              LDR      r0,|L8.648|
0001be  4788              BLX      r1
;;;283                
;;;284                State = LOWPOWER;
0001c0  2000              MOVS     r0,#0
0001c2  4932              LDR      r1,|L8.652|
0001c4  7008              STRB     r0,[r1,#0]
;;;285                break;
0001c6  e039              B        |L8.572|
;;;286            case RX_TIMEOUT:
;;;287            case RX_ERROR:
0001c8  bf00              NOP      
;;;288               
;;;289                if( isMaster == true )
0001ca  2d01              CMP      r5,#1
0001cc  d121              BNE      |L8.530|
;;;290                {
;;;291                    // Send the next PING frame
;;;292                    Buffer[0] = 'P';
0001ce  2050              MOVS     r0,#0x50
0001d0  4936              LDR      r1,|L8.684|
0001d2  7008              STRB     r0,[r1,#0]
;;;293                    Buffer[1] = 'I';
0001d4  2049              MOVS     r0,#0x49
0001d6  7048              STRB     r0,[r1,#1]
;;;294                    Buffer[2] = 'N';
0001d8  204e              MOVS     r0,#0x4e
0001da  7088              STRB     r0,[r1,#2]
;;;295                    Buffer[3] = 'G';
0001dc  2047              MOVS     r0,#0x47
0001de  70c8              STRB     r0,[r1,#3]
;;;296                    for( i = 4; i < BufferSize; i++ )
0001e0  2404              MOVS     r4,#4
0001e2  e004              B        |L8.494|
                  |L8.484|
;;;297                    {
;;;298                        Buffer[i] = i - 4;
0001e4  1f20              SUBS     r0,r4,#4
0001e6  4931              LDR      r1,|L8.684|
0001e8  5508              STRB     r0,[r1,r4]
0001ea  1c60              ADDS     r0,r4,#1              ;296
0001ec  b2c4              UXTB     r4,r0                 ;296
                  |L8.494|
0001ee  482d              LDR      r0,|L8.676|
0001f0  8800              LDRH     r0,[r0,#0]            ;296  ; BufferSize
0001f2  4284              CMP      r4,r0                 ;296
0001f4  dbf6              BLT      |L8.484|
;;;299                    }
;;;300                    Delay( 1 ); 
0001f6  207f              MOVS     r0,#0x7f
0001f8  05c0              LSLS     r0,r0,#23
0001fa  f7fffffe          BL       Delay
;;;301                    Radio.Send( Buffer, BufferSize );
0001fe  4829              LDR      r0,|L8.676|
000200  7801              LDRB     r1,[r0,#0]  ; BufferSize
000202  4815              LDR      r0,|L8.600|
000204  6a82              LDR      r2,[r0,#0x28]  ; Radio
000206  4829              LDR      r0,|L8.684|
000208  4790              BLX      r2
;;;302    								DEBUG(2," Radio.Send\r\n");
00020a  a032              ADR      r0,|L8.724|
00020c  f7fffffe          BL       __2printf
000210  e003              B        |L8.538|
                  |L8.530|
;;;303                }
;;;304                else
;;;305                {
;;;306                    Radio.Rx( RX_TIMEOUT_VALUE );
000212  4811              LDR      r0,|L8.600|
000214  6b41              LDR      r1,[r0,#0x34]  ; Radio
000216  481c              LDR      r0,|L8.648|
000218  4788              BLX      r1
                  |L8.538|
;;;307                }
;;;308                State = LOWPOWER;
00021a  2000              MOVS     r0,#0
00021c  491b              LDR      r1,|L8.652|
00021e  7008              STRB     r0,[r1,#0]
;;;309                break;
000220  e00c              B        |L8.572|
;;;310            case TX_TIMEOUT:
;;;311                DEBUG(2," The state is TX_TIMEOUT\r\n");
000222  a030              ADR      r0,|L8.740|
000224  f7fffffe          BL       __2printf
;;;312                Radio.Rx( RX_TIMEOUT_VALUE );
000228  480b              LDR      r0,|L8.600|
00022a  6b41              LDR      r1,[r0,#0x34]  ; Radio
00022c  4816              LDR      r0,|L8.648|
00022e  4788              BLX      r1
;;;313                State = LOWPOWER;
000230  2000              MOVS     r0,#0
000232  4916              LDR      r1,|L8.652|
000234  7008              STRB     r0,[r1,#0]
;;;314                break;
000236  e001              B        |L8.572|
;;;315            case LOWPOWER:
000238  bf00              NOP      
;;;316            default:
;;;317                // Set low power
;;;318                break;
00023a  bf00              NOP      
                  |L8.572|
00023c  bf00              NOP                            ;279
                  |L8.574|
00023e  e730              B        |L8.162|
;;;319            }
;;;320    #else
;;;321    		DEBUG(2, "buffer\r\n");  ///读取到0x12则正确，否则错误																
;;;322    		Radio.Send( buffer, BufferSize );  
;;;323    		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_15);
;;;324    		delay_ms( 100 ); 	
;;;325    		Radio.Rx( RX_TIMEOUT_VALUE );		
;;;326    		delay_ms( 500 ); 	
;;;327    		
;;;328    #endif		
;;;329      }
;;;330     
;;;331    
;;;332    }
;;;333    
                          ENDP

                  |L8.576|
                          DCD      OnTxDone
                  |L8.580|
                          DCD      RadioEvents
                  |L8.584|
                          DCD      OnRxDone
                  |L8.588|
                          DCD      OnTxTimeout
                  |L8.592|
                          DCD      OnRxTimeout
                  |L8.596|
                          DCD      OnRxError
                  |L8.600|
                          DCD      Radio
                  |L8.604|
                          DCD      0x19cf0e40
                  |L8.608|
                          DCD      0x002dc6c0
                  |L8.612|
000264  68656c6c          DCB      "hello world\r\n",0
000268  6f20776f
00026c  726c640d
000270  0a00    
000272  00                DCB      0
000273  00                DCB      0
                  |L8.628|
000274  53583132          DCB      "SX1276 ID = 0x%x\r\n",0
000278  37362049
00027c  44203d20
000280  30782578
000284  0d0a00  
000287  00                DCB      0
                  |L8.648|
                          DCD      0x000f4240
                  |L8.652|
                          DCD      State
                  |L8.656|
000290  20546865          DCB      " The state is RX\r\n ",0
000294  20737461
000298  74652069
00029c  73205258
0002a0  0d0a2000
                  |L8.676|
                          DCD      BufferSize
                  |L8.680|
                          DCD      PongMsg
                  |L8.684|
                          DCD      Buffer
                  |L8.688|
                          DCD      PingMsg
                  |L8.692|
0002b4  6c696e65          DCB      "line = %d\r\n",0
0002b8  203d2025
0002bc  640d0a00
                  |L8.704|
0002c0  20546865          DCB      " The state is TX\r\n",0
0002c4  20737461
0002c8  74652069
0002cc  73205458
0002d0  0d0a00  
0002d3  00                DCB      0
                  |L8.724|
0002d4  20526164          DCB      " Radio.Send\r\n",0
0002d8  696f2e53
0002dc  656e640d
0002e0  0a00    
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L8.740|
0002e4  20546865          DCB      " The state is TX_TIMEOUT\r\n",0
0002e8  20737461
0002ec  74652069
0002f0  73205458
0002f4  5f54494d
0002f8  454f5554
0002fc  0d0a00  
0002ff  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Buffer
                          %        64
                  RadioEvents
                          %        28
                  ReportTimer
                          %        20
                  stimestructureget
                          %        20
                  sAlarmtructureget
                          %        40

                          AREA ||.data||, DATA, ALIGN=1

                  PingMsg
000000  50494e47          DCB      0x50,0x49,0x4e,0x47
000004  00                DCB      0x00
                  PongMsg
000005  504f4e            DCB      0x50,0x4f,0x4e
000008  4700              DCB      0x47,0x00
                  BufferSize
00000a  0040              DCW      0x0040
                  buffer
00000c  68656c6c          DCB      0x68,0x65,0x6c,0x6c
000010  6f20776f          DCB      0x6f,0x20,0x77,0x6f
000014  726c6420          DCB      0x72,0x6c,0x64,0x20
000018  4c6f5261          DCB      0x4c,0x6f,0x52,0x61
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        44
                  State
00004c  00                DCB      0x00
                  RssiValue
00004d  00                DCB      0x00
                  SnrValue
00004e  00                DCB      0x00
                  ReportTimerEvent
00004f  00                DCB      0x00
                  sdatestructureget
                          DCDU     0x00000000
                  test_rtc_state
000054  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L59.24|
                  |L59.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L59.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L59.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\TEST\\test_lora_pingpong.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_test_lora_pingpong_c_PingMsg____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_test_lora_pingpong_c_PingMsg____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_test_lora_pingpong_c_PingMsg____REVSH|
#line 402
|__asm___20_test_lora_pingpong_c_PingMsg____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
