; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_timebase_rtc_alarm_template.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_timebase_rtc_alarm_template.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -IC:\Users\NBI_Ysheng\Desktop\stm32¹¤³ÌÄ£°å\stm32f03_mode_test\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC --omf_browse=.\objects\stm32f0xx_hal_timebase_rtc_alarm_template.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_timebase_rtc_alarm_template.c]
                          THUMB

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;111      */
;;;112    HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
000000  b530              PUSH     {r4,r5,lr}
;;;113    {
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
;;;114      __IO uint32_t counter = 0U;
000006  2000              MOVS     r0,#0
000008  9010              STR      r0,[sp,#0x40]
;;;115    
;;;116      RCC_OscInitTypeDef        RCC_OscInitStruct;
;;;117      RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
;;;118    
;;;119    #ifdef RTC_CLOCK_SOURCE_LSE
;;;120      /* Configue LSE as RTC clock soucre */
;;;121      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
;;;122      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
;;;123      RCC_OscInitStruct.LSEState = RCC_LSE_ON;
;;;124      PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
;;;125    #elif defined (RTC_CLOCK_SOURCE_LSI)
;;;126      /* Configue LSI as RTC clock soucre */
;;;127      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
;;;128      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
;;;129      RCC_OscInitStruct.LSIState = RCC_LSI_ON;
;;;130      PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
;;;131    #elif defined (RTC_CLOCK_SOURCE_HSE)
;;;132      /* Configue HSE as RTC clock soucre */
;;;133      RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
00000a  2001              MOVS     r0,#1
00000c  9004              STR      r0,[sp,#0x10]
;;;134      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
00000e  2000              MOVS     r0,#0
000010  900c              STR      r0,[sp,#0x30]
;;;135      RCC_OscInitStruct.HSEState = RCC_HSE_ON;
000012  2001              MOVS     r0,#1
000014  9005              STR      r0,[sp,#0x14]
;;;136      PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
000016  2003              MOVS     r0,#3
000018  0200              LSLS     r0,r0,#8
00001a  9001              STR      r0,[sp,#4]
;;;137    #else
;;;138    #error Please select the RTC Clock source
;;;139    #endif /* RTC_CLOCK_SOURCE_LSE */
;;;140    
;;;141      if(HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
00001c  a804              ADD      r0,sp,#0x10
00001e  f7fffffe          BL       HAL_RCC_OscConfig
000022  2800              CMP      r0,#0
                  |L1.36|
000024  d17e              BNE      |L1.292|
;;;142      {
;;;143        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
000026  2001              MOVS     r0,#1
000028  0400              LSLS     r0,r0,#16
00002a  9000              STR      r0,[sp,#0]
;;;144        if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) == HAL_OK)
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       HAL_RCCEx_PeriphCLKConfig
000032  2800              CMP      r0,#0
000034  d1f6              BNE      |L1.36|
;;;145        {
;;;146          /* Enable RTC Clock */
;;;147          __HAL_RCC_RTC_ENABLE();
000036  4859              LDR      r0,|L1.412|
000038  6a00              LDR      r0,[r0,#0x20]
00003a  2101              MOVS     r1,#1
00003c  03c9              LSLS     r1,r1,#15
00003e  4308              ORRS     r0,r0,r1
000040  4956              LDR      r1,|L1.412|
000042  6208              STR      r0,[r1,#0x20]
;;;148          /* The time base should be 1ms
;;;149             Time base = ((RTC_ASYNCH_PREDIV + 1) * (RTC_SYNCH_PREDIV + 1)) / RTC_CLOCK 
;;;150             HSE/32 as RTC clock and HSE 8MHz
;;;151               Time base = ((49 + 1) * (4 + 1)) / 250kHz
;;;152                         = 1ms
;;;153             LSE as RTC clock 
;;;154               Time base = ((31 + 1) * (0 + 1)) / 32.768KHz
;;;155                         = ~1ms
;;;156             LSI as RTC clock 
;;;157               Time base = ((39 + 1) * (0 + 1)) / 40KHz
;;;158                         = 1ms
;;;159          */
;;;160          hRTC_Handle.Instance = RTC;
000044  4856              LDR      r0,|L1.416|
000046  4957              LDR      r1,|L1.420|
000048  6008              STR      r0,[r1,#0]  ; hRTC_Handle
;;;161          hRTC_Handle.Init.HourFormat = RTC_HOURFORMAT_24;
00004a  2000              MOVS     r0,#0
00004c  6048              STR      r0,[r1,#4]  ; hRTC_Handle
;;;162          hRTC_Handle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
00004e  2131              MOVS     r1,#0x31
000050  4854              LDR      r0,|L1.420|
000052  6081              STR      r1,[r0,#8]
;;;163          hRTC_Handle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
000054  2104              MOVS     r1,#4
000056  60c1              STR      r1,[r0,#0xc]
;;;164          hRTC_Handle.Init.OutPut = RTC_OUTPUT_DISABLE;
000058  2100              MOVS     r1,#0
00005a  6101              STR      r1,[r0,#0x10]
;;;165          hRTC_Handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
00005c  6141              STR      r1,[r0,#0x14]
;;;166          hRTC_Handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
00005e  6181              STR      r1,[r0,#0x18]
;;;167          HAL_RTC_Init(&hRTC_Handle);
000060  f7fffffe          BL       HAL_RTC_Init
;;;168    
;;;169          /* Disable the write protection for RTC registers */
;;;170          __HAL_RTC_WRITEPROTECTION_DISABLE(&hRTC_Handle);
000064  bf00              NOP      
000066  20ca              MOVS     r0,#0xca
000068  494e              LDR      r1,|L1.420|
00006a  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
00006c  6248              STR      r0,[r1,#0x24]
00006e  2053              MOVS     r0,#0x53
000070  494c              LDR      r1,|L1.420|
000072  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
000074  6248              STR      r0,[r1,#0x24]
000076  bf00              NOP      
;;;171    
;;;172          /* Disable the Alarm A interrupt */
;;;173          __HAL_RTC_ALARMA_DISABLE(&hRTC_Handle);
000078  484a              LDR      r0,|L1.420|
00007a  6800              LDR      r0,[r0,#0]  ; hRTC_Handle
00007c  6880              LDR      r0,[r0,#8]
00007e  21ff              MOVS     r1,#0xff
000080  3101              ADDS     r1,#1
000082  4388              BICS     r0,r0,r1
000084  4947              LDR      r1,|L1.420|
000086  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
000088  6088              STR      r0,[r1,#8]
;;;174    
;;;175          /* Clear flag alarm A */
;;;176          __HAL_RTC_ALARM_CLEAR_FLAG(&hRTC_Handle, RTC_FLAG_ALRAF);
00008a  4846              LDR      r0,|L1.420|
00008c  6800              LDR      r0,[r0,#0]  ; hRTC_Handle
00008e  68c0              LDR      r0,[r0,#0xc]
000090  2180              MOVS     r1,#0x80
000092  4008              ANDS     r0,r0,r1
000094  4944              LDR      r1,|L1.424|
000096  4308              ORRS     r0,r0,r1
000098  4942              LDR      r1,|L1.420|
00009a  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
00009c  60c8              STR      r0,[r1,#0xc]
;;;177    
;;;178          counter = 0U;
00009e  2000              MOVS     r0,#0
0000a0  9010              STR      r0,[sp,#0x40]
;;;179          /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
;;;180          while(__HAL_RTC_ALARM_GET_FLAG(&hRTC_Handle, RTC_FLAG_ALRAWF) == RESET)
0000a2  e00c              B        |L1.190|
                  |L1.164|
;;;181          {
;;;182            if(counter++ == (SystemCoreClock /48U)) /* Timeout = ~ 1s */
0000a4  2130              MOVS     r1,#0x30
0000a6  4841              LDR      r0,|L1.428|
0000a8  9d10              LDR      r5,[sp,#0x40]
0000aa  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
0000ac  f7fffffe          BL       __aeabi_uidivmod
0000b0  1c69              ADDS     r1,r5,#1
0000b2  9110              STR      r1,[sp,#0x40]
0000b4  42a8              CMP      r0,r5
0000b6  d102              BNE      |L1.190|
;;;183            {
;;;184              return HAL_ERROR;
0000b8  2001              MOVS     r0,#1
                  |L1.186|
;;;185            }
;;;186          }
;;;187    
;;;188          hRTC_Handle.Instance->ALRMAR = 0x01U;
;;;189    
;;;190          /* Configure the Alarm state: Enable Alarm */
;;;191          __HAL_RTC_ALARMA_ENABLE(&hRTC_Handle);
;;;192          /* Configure the Alarm interrupt */
;;;193          __HAL_RTC_ALARM_ENABLE_IT(&hRTC_Handle, RTC_IT_ALRA);
;;;194    
;;;195          /* RTC Alarm Interrupt Configuration: EXTI configuration */
;;;196          __HAL_RTC_ALARM_EXTI_ENABLE_IT();
;;;197          __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
;;;198    
;;;199          /* Check if the Initialization mode is set */
;;;200          if((hRTC_Handle.Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
;;;201          {
;;;202            /* Set the Initialization mode */
;;;203            hRTC_Handle.Instance->ISR = (uint32_t)RTC_INIT_MASK;
;;;204            counter = 0U;
;;;205            while((hRTC_Handle.Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
;;;206            {
;;;207              if(counter++ == (SystemCoreClock /48U)) /* Timeout = ~ 1s */
;;;208              {
;;;209                return HAL_ERROR;
;;;210              }
;;;211            }
;;;212          }
;;;213          hRTC_Handle.Instance->DR = 0U;
;;;214          hRTC_Handle.Instance->TR = 0U;
;;;215    
;;;216          hRTC_Handle.Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
;;;217    
;;;218          /* Enable the write protection for RTC registers */
;;;219          __HAL_RTC_WRITEPROTECTION_ENABLE(&hRTC_Handle);
;;;220    
;;;221          HAL_NVIC_SetPriority(RTC_IRQn, TickPriority, 0U);
;;;222          HAL_NVIC_EnableIRQ(RTC_IRQn);
;;;223          return HAL_OK;
;;;224        }
;;;225      }
;;;226      return HAL_ERROR;
;;;227    }
0000ba  b011              ADD      sp,sp,#0x44
0000bc  bd30              POP      {r4,r5,pc}
                  |L1.190|
0000be  4839              LDR      r0,|L1.420|
0000c0  6800              LDR      r0,[r0,#0]            ;180  ; hRTC_Handle
0000c2  68c0              LDR      r0,[r0,#0xc]          ;180
0000c4  07c0              LSLS     r0,r0,#31             ;180
0000c6  0fc0              LSRS     r0,r0,#31             ;180
0000c8  2800              CMP      r0,#0                 ;180
0000ca  d0eb              BEQ      |L1.164|
0000cc  2001              MOVS     r0,#1                 ;188
0000ce  4935              LDR      r1,|L1.420|
0000d0  6809              LDR      r1,[r1,#0]            ;188  ; hRTC_Handle
0000d2  61c8              STR      r0,[r1,#0x1c]         ;188
0000d4  4833              LDR      r0,|L1.420|
0000d6  6800              LDR      r0,[r0,#0]            ;191  ; hRTC_Handle
0000d8  6880              LDR      r0,[r0,#8]            ;191
0000da  21ff              MOVS     r1,#0xff              ;191
0000dc  3101              ADDS     r1,#1                 ;191
0000de  4308              ORRS     r0,r0,r1              ;191
0000e0  4930              LDR      r1,|L1.420|
0000e2  6809              LDR      r1,[r1,#0]            ;191  ; hRTC_Handle
0000e4  6088              STR      r0,[r1,#8]            ;191
0000e6  482f              LDR      r0,|L1.420|
0000e8  6800              LDR      r0,[r0,#0]            ;193  ; hRTC_Handle
0000ea  6880              LDR      r0,[r0,#8]            ;193
0000ec  2101              MOVS     r1,#1                 ;193
0000ee  0309              LSLS     r1,r1,#12             ;193
0000f0  4308              ORRS     r0,r0,r1              ;193
0000f2  492c              LDR      r1,|L1.420|
0000f4  6809              LDR      r1,[r1,#0]            ;193  ; hRTC_Handle
0000f6  6088              STR      r0,[r1,#8]            ;193
0000f8  482d              LDR      r0,|L1.432|
0000fa  6800              LDR      r0,[r0,#0]            ;196
0000fc  2101              MOVS     r1,#1                 ;196
0000fe  0449              LSLS     r1,r1,#17             ;196
000100  4308              ORRS     r0,r0,r1              ;196
000102  492b              LDR      r1,|L1.432|
000104  6008              STR      r0,[r1,#0]            ;196
000106  4608              MOV      r0,r1                 ;197
000108  6880              LDR      r0,[r0,#8]            ;197
00010a  2101              MOVS     r1,#1                 ;197
00010c  0449              LSLS     r1,r1,#17             ;197
00010e  4308              ORRS     r0,r0,r1              ;197
000110  4927              LDR      r1,|L1.432|
000112  6088              STR      r0,[r1,#8]            ;197
000114  4823              LDR      r0,|L1.420|
000116  6800              LDR      r0,[r0,#0]            ;200  ; hRTC_Handle
000118  68c0              LDR      r0,[r0,#0xc]          ;200
00011a  2140              MOVS     r1,#0x40              ;200
00011c  4008              ANDS     r0,r0,r1              ;200
00011e  2800              CMP      r0,#0                 ;200
000120  d11b              BNE      |L1.346|
000122  e000              B        |L1.294|
                  |L1.292|
000124  e038              B        |L1.408|
                  |L1.294|
000126  1e40              SUBS     r0,r0,#1              ;203
000128  491e              LDR      r1,|L1.420|
00012a  6809              LDR      r1,[r1,#0]            ;203  ; hRTC_Handle
00012c  60c8              STR      r0,[r1,#0xc]          ;203
00012e  2000              MOVS     r0,#0                 ;204
000130  9010              STR      r0,[sp,#0x40]         ;204
000132  e00b              B        |L1.332|
                  |L1.308|
000134  2130              MOVS     r1,#0x30              ;207
000136  481d              LDR      r0,|L1.428|
000138  9d10              LDR      r5,[sp,#0x40]         ;207
00013a  6800              LDR      r0,[r0,#0]            ;207  ; SystemCoreClock
00013c  f7fffffe          BL       __aeabi_uidivmod
000140  1c69              ADDS     r1,r5,#1              ;207
000142  9110              STR      r1,[sp,#0x40]         ;207
000144  42a8              CMP      r0,r5                 ;207
000146  d101              BNE      |L1.332|
000148  2001              MOVS     r0,#1                 ;209
00014a  e7b6              B        |L1.186|
                  |L1.332|
00014c  4815              LDR      r0,|L1.420|
00014e  6800              LDR      r0,[r0,#0]            ;205  ; hRTC_Handle
000150  68c0              LDR      r0,[r0,#0xc]          ;205
000152  2140              MOVS     r1,#0x40              ;205
000154  4008              ANDS     r0,r0,r1              ;205
000156  2800              CMP      r0,#0                 ;205
000158  d0ec              BEQ      |L1.308|
                  |L1.346|
00015a  2000              MOVS     r0,#0                 ;213
00015c  4911              LDR      r1,|L1.420|
00015e  6809              LDR      r1,[r1,#0]            ;213  ; hRTC_Handle
000160  6048              STR      r0,[r1,#4]            ;213
000162  4910              LDR      r1,|L1.420|
000164  6809              LDR      r1,[r1,#0]            ;214  ; hRTC_Handle
000166  6008              STR      r0,[r1,#0]            ;214
000168  480e              LDR      r0,|L1.420|
00016a  6800              LDR      r0,[r0,#0]            ;216  ; hRTC_Handle
00016c  68c0              LDR      r0,[r0,#0xc]          ;216
00016e  2180              MOVS     r1,#0x80              ;216
000170  4388              BICS     r0,r0,r1              ;216
000172  490c              LDR      r1,|L1.420|
000174  6809              LDR      r1,[r1,#0]            ;216  ; hRTC_Handle
000176  60c8              STR      r0,[r1,#0xc]          ;216
000178  bf00              NOP                            ;219
00017a  20ff              MOVS     r0,#0xff              ;219
00017c  4909              LDR      r1,|L1.420|
00017e  6809              LDR      r1,[r1,#0]            ;219  ; hRTC_Handle
000180  6248              STR      r0,[r1,#0x24]         ;219
000182  bf00              NOP                            ;219
000184  2200              MOVS     r2,#0                 ;221
000186  4621              MOV      r1,r4                 ;221
000188  2002              MOVS     r0,#2                 ;221
00018a  f7fffffe          BL       HAL_NVIC_SetPriority
00018e  2002              MOVS     r0,#2                 ;222
000190  f7fffffe          BL       HAL_NVIC_EnableIRQ
000194  2000              MOVS     r0,#0                 ;223
000196  e790              B        |L1.186|
                  |L1.408|
000198  2001              MOVS     r0,#1                 ;226
00019a  e78e              B        |L1.186|
;;;228    
                          ENDP

                  |L1.412|
                          DCD      0x40021000
                  |L1.416|
                          DCD      0x40002800
                  |L1.420|
                          DCD      hRTC_Handle
                  |L1.424|
                          DCD      0xfffffe7f
                  |L1.428|
                          DCD      SystemCoreClock
                  |L1.432|
                          DCD      0x40010400

                          AREA ||i.HAL_RTC_AlarmAEventCallback||, CODE, READONLY, ALIGN=2

                  HAL_RTC_AlarmAEventCallback PROC
;;;268      */
;;;269    void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
000000  b538              PUSH     {r3-r5,lr}
;;;270    {
000002  4604              MOV      r4,r0
;;;271      __IO uint32_t counter = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;272    
;;;273      HAL_IncTick();
000008  f7fffffe          BL       HAL_IncTick
;;;274    
;;;275      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
00000c  bf00              NOP      
00000e  20ca              MOVS     r0,#0xca
000010  6821              LDR      r1,[r4,#0]
000012  6248              STR      r0,[r1,#0x24]
000014  2053              MOVS     r0,#0x53
000016  6821              LDR      r1,[r4,#0]
000018  6248              STR      r0,[r1,#0x24]
00001a  bf00              NOP      
;;;276    
;;;277      /* Set the Initialization mode */
;;;278      hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
00001c  2000              MOVS     r0,#0
00001e  43c0              MVNS     r0,r0
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;279    
;;;280      while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
000024  e00a              B        |L2.60|
                  |L2.38|
;;;281      {
;;;282        if(counter++ == (SystemCoreClock /48U)) /* Timeout = ~ 1s */
000026  2130              MOVS     r1,#0x30
000028  4810              LDR      r0,|L2.108|
00002a  9d00              LDR      r5,[sp,#0]
00002c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  1c69              ADDS     r1,r5,#1
000034  9100              STR      r1,[sp,#0]
000036  42a8              CMP      r0,r5
000038  d100              BNE      |L2.60|
;;;283        {
;;;284          break;
00003a  e005              B        |L2.72|
                  |L2.60|
00003c  6820              LDR      r0,[r4,#0]            ;280
00003e  68c0              LDR      r0,[r0,#0xc]          ;280
000040  2140              MOVS     r1,#0x40              ;280
000042  4008              ANDS     r0,r0,r1              ;280
000044  2800              CMP      r0,#0                 ;280
000046  d0ee              BEQ      |L2.38|
                  |L2.72|
000048  bf00              NOP      
;;;285        }
;;;286      }
;;;287    
;;;288      hrtc->Instance->DR = 0U;
00004a  2000              MOVS     r0,#0
00004c  6821              LDR      r1,[r4,#0]
00004e  6048              STR      r0,[r1,#4]
;;;289      hrtc->Instance->TR = 0U;
000050  6821              LDR      r1,[r4,#0]
000052  6008              STR      r0,[r1,#0]
;;;290    
;;;291      hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
000054  6820              LDR      r0,[r4,#0]
000056  68c0              LDR      r0,[r0,#0xc]
000058  2180              MOVS     r1,#0x80
00005a  4388              BICS     r0,r0,r1
00005c  6821              LDR      r1,[r4,#0]
00005e  60c8              STR      r0,[r1,#0xc]
;;;292    
;;;293      /* Enable the write protection for RTC registers */
;;;294      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
000060  bf00              NOP      
000062  20ff              MOVS     r0,#0xff
000064  6821              LDR      r1,[r4,#0]
000066  6248              STR      r0,[r1,#0x24]
000068  bf00              NOP      
;;;295    }
00006a  bd38              POP      {r3-r5,pc}
;;;296    
                          ENDP

                  |L2.108|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=2

                  HAL_ResumeTick PROC
;;;250      */
;;;251    void HAL_ResumeTick(void)
000000  bf00              NOP      
;;;252    {
;;;253      /* Disable the write protection for RTC registers */
;;;254      __HAL_RTC_WRITEPROTECTION_DISABLE(&hRTC_Handle);
000002  20ca              MOVS     r0,#0xca
000004  490b              LDR      r1,|L3.52|
000006  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
000008  6248              STR      r0,[r1,#0x24]
00000a  2053              MOVS     r0,#0x53
00000c  4909              LDR      r1,|L3.52|
00000e  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
000010  6248              STR      r0,[r1,#0x24]
000012  bf00              NOP      
;;;255      /* Enable RTC ALARM Update interrupt */
;;;256      __HAL_RTC_ALARM_ENABLE_IT(&hRTC_Handle, RTC_IT_ALRA);
000014  4807              LDR      r0,|L3.52|
000016  6800              LDR      r0,[r0,#0]  ; hRTC_Handle
000018  6880              LDR      r0,[r0,#8]
00001a  2101              MOVS     r1,#1
00001c  0309              LSLS     r1,r1,#12
00001e  4308              ORRS     r0,r0,r1
000020  4904              LDR      r1,|L3.52|
000022  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
000024  6088              STR      r0,[r1,#8]
;;;257      /* Enable the write protection for RTC registers */
;;;258      __HAL_RTC_WRITEPROTECTION_ENABLE(&hRTC_Handle);
000026  bf00              NOP      
000028  20ff              MOVS     r0,#0xff
00002a  4902              LDR      r1,|L3.52|
00002c  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
00002e  6248              STR      r0,[r1,#0x24]
000030  bf00              NOP      
;;;259    }
000032  4770              BX       lr
;;;260    
                          ENDP

                  |L3.52|
                          DCD      hRTC_Handle

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=2

                  HAL_SuspendTick PROC
;;;234      */
;;;235    void HAL_SuspendTick(void)
000000  bf00              NOP      
;;;236    {
;;;237      /* Disable the write protection for RTC registers */
;;;238      __HAL_RTC_WRITEPROTECTION_DISABLE(&hRTC_Handle);
000002  20ca              MOVS     r0,#0xca
000004  490b              LDR      r1,|L4.52|
000006  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
000008  6248              STR      r0,[r1,#0x24]
00000a  2053              MOVS     r0,#0x53
00000c  4909              LDR      r1,|L4.52|
00000e  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
000010  6248              STR      r0,[r1,#0x24]
000012  bf00              NOP      
;;;239      /* Disable RTC ALARM update Interrupt */
;;;240      __HAL_RTC_ALARM_DISABLE_IT(&hRTC_Handle, RTC_IT_ALRA);
000014  4807              LDR      r0,|L4.52|
000016  6800              LDR      r0,[r0,#0]  ; hRTC_Handle
000018  6880              LDR      r0,[r0,#8]
00001a  2101              MOVS     r1,#1
00001c  0309              LSLS     r1,r1,#12
00001e  4388              BICS     r0,r0,r1
000020  4904              LDR      r1,|L4.52|
000022  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
000024  6088              STR      r0,[r1,#8]
;;;241      /* Enable the write protection for RTC registers */
;;;242      __HAL_RTC_WRITEPROTECTION_ENABLE(&hRTC_Handle);
000026  bf00              NOP      
000028  20ff              MOVS     r0,#0xff
00002a  4902              LDR      r1,|L4.52|
00002c  6809              LDR      r1,[r1,#0]  ; hRTC_Handle
00002e  6248              STR      r0,[r1,#0x24]
000030  bf00              NOP      
;;;243    }
000032  4770              BX       lr
;;;244    
                          ENDP

                  |L4.52|
                          DCD      hRTC_Handle

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_IRQHandler PROC
;;;301      */
;;;302    void RTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;303    {
;;;304      HAL_RTC_AlarmIRQHandler(&hRTC_Handle);
000002  4802              LDR      r0,|L5.12|
000004  f7fffffe          BL       HAL_RTC_AlarmIRQHandler
;;;305    }
000008  bd10              POP      {r4,pc}
;;;306    
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      hRTC_Handle

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hRTC_Handle
                          %        32

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_timebase_rtc_alarm_template.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___43_stm32f0xx_hal_timebase_rtc_alarm_template_c_2a3ab6ca____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___43_stm32f0xx_hal_timebase_rtc_alarm_template_c_2a3ab6ca____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___43_stm32f0xx_hal_timebase_rtc_alarm_template_c_2a3ab6ca____REVSH|
#line 402
|__asm___43_stm32f0xx_hal_timebase_rtc_alarm_template_c_2a3ab6ca____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
