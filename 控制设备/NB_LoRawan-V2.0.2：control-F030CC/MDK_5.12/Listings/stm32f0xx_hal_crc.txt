; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_crc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_crc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_crc.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_crc.c]
                          THUMB

                          AREA ||i.CRC_Handle_16||, CODE, READONLY, ALIGN=1

                  CRC_Handle_16 PROC
;;;497      */  
;;;498    static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
000000  b530              PUSH     {r4,r5,lr}
;;;499    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;500      uint32_t i = 0U;  /* input data buffer index */
000006  2100              MOVS     r1,#0
;;;501      
;;;502      /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
;;;503       * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
;;;504       * a correct type handling by the IP */
;;;505      for(i = 0U; i < (BufferLength/2U); i++)
000008  bf00              NOP      
00000a  e00a              B        |L1.34|
                  |L1.12|
;;;506      {
;;;507        hcrc->Instance->DR = ((uint32_t)pBuffer[2U*i]<<16U) | (uint32_t)pBuffer[2U*i+1];     
00000c  0088              LSLS     r0,r1,#2
00000e  5a20              LDRH     r0,[r4,r0]
000010  0400              LSLS     r0,r0,#16
000012  004d              LSLS     r5,r1,#1
000014  1c6d              ADDS     r5,r5,#1
000016  006d              LSLS     r5,r5,#1
000018  5b65              LDRH     r5,[r4,r5]
00001a  4328              ORRS     r0,r0,r5
00001c  681d              LDR      r5,[r3,#0]
00001e  6028              STR      r0,[r5,#0]
000020  1c49              ADDS     r1,r1,#1              ;505
                  |L1.34|
000022  0850              LSRS     r0,r2,#1              ;505
000024  4288              CMP      r0,r1                 ;505
000026  d8f1              BHI      |L1.12|
;;;508      }
;;;509      if ((BufferLength%2U) != 0U)
000028  07d0              LSLS     r0,r2,#31
00002a  0fc0              LSRS     r0,r0,#31
00002c  2800              CMP      r0,#0
00002e  d003              BEQ      |L1.56|
;;;510      {
;;;511           *(uint16_t volatile*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
000030  0088              LSLS     r0,r1,#2
000032  5a20              LDRH     r0,[r4,r0]
000034  681d              LDR      r5,[r3,#0]
000036  8028              STRH     r0,[r5,#0]
                  |L1.56|
;;;512      }
;;;513       
;;;514      /* Return the CRC computed value */ 
;;;515      return hcrc->Instance->DR;
000038  6818              LDR      r0,[r3,#0]
00003a  6800              LDR      r0,[r0,#0]
;;;516    }
00003c  bd30              POP      {r4,r5,pc}
;;;517    
                          ENDP


                          AREA ||i.CRC_Handle_8||, CODE, READONLY, ALIGN=1

                  CRC_Handle_8 PROC
;;;454      */
;;;455    static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
000000  b530              PUSH     {r4,r5,lr}
;;;456    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;457      uint32_t i = 0U; /* input data buffer index */
000006  2100              MOVS     r1,#0
;;;458      
;;;459       /* Processing time optimization: 4 bytes are entered in a row with a single word write,
;;;460        * last bytes must be carefully fed to the CRC calculator to ensure a correct type
;;;461        * handling by the IP */
;;;462       for(i = 0U; i < (BufferLength/4U); i++)
000008  bf00              NOP      
00000a  e013              B        |L2.52|
                  |L2.12|
;;;463       {
;;;464          hcrc->Instance->DR = ((uint32_t)pBuffer[4U*i]<<24U) | ((uint32_t)pBuffer[4U*i+1]<<16U) | ((uint32_t)pBuffer[4U*i+2]<<8U) | (uint32_t)pBuffer[4U*i+3];      
00000c  0088              LSLS     r0,r1,#2
00000e  5c18              LDRB     r0,[r3,r0]
000010  0600              LSLS     r0,r0,#24
000012  008d              LSLS     r5,r1,#2
000014  1c6d              ADDS     r5,r5,#1
000016  5d5d              LDRB     r5,[r3,r5]
000018  042d              LSLS     r5,r5,#16
00001a  4328              ORRS     r0,r0,r5
00001c  008d              LSLS     r5,r1,#2
00001e  1cad              ADDS     r5,r5,#2
000020  5d5d              LDRB     r5,[r3,r5]
000022  022d              LSLS     r5,r5,#8
000024  4328              ORRS     r0,r0,r5
000026  008d              LSLS     r5,r1,#2
000028  1ced              ADDS     r5,r5,#3
00002a  5d5d              LDRB     r5,[r3,r5]
00002c  4328              ORRS     r0,r0,r5
00002e  6825              LDR      r5,[r4,#0]
000030  6028              STR      r0,[r5,#0]
000032  1c49              ADDS     r1,r1,#1              ;462
                  |L2.52|
000034  0890              LSRS     r0,r2,#2              ;462
000036  4288              CMP      r0,r1                 ;462
000038  d8e8              BHI      |L2.12|
;;;465       }
;;;466       /* last bytes specific handling */
;;;467       if ((BufferLength%4U) != 0U)
00003a  0790              LSLS     r0,r2,#30
00003c  0f80              LSRS     r0,r0,#30
00003e  2800              CMP      r0,#0
000040  d026              BEQ      |L2.144|
;;;468       {
;;;469         if  (BufferLength%4U == 1U)
000042  0790              LSLS     r0,r2,#30
000044  0f80              LSRS     r0,r0,#30
000046  2801              CMP      r0,#1
000048  d103              BNE      |L2.82|
;;;470         {
;;;471           *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i];
00004a  0088              LSLS     r0,r1,#2
00004c  5c18              LDRB     r0,[r3,r0]
00004e  6825              LDR      r5,[r4,#0]
000050  7028              STRB     r0,[r5,#0]
                  |L2.82|
;;;472         }
;;;473         if  (BufferLength%4U == 2U)
000052  0790              LSLS     r0,r2,#30
000054  0f80              LSRS     r0,r0,#30
000056  2802              CMP      r0,#2
000058  d108              BNE      |L2.108|
;;;474         {
;;;475           *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
00005a  0088              LSLS     r0,r1,#2
00005c  5c18              LDRB     r0,[r3,r0]
00005e  0200              LSLS     r0,r0,#8
000060  008d              LSLS     r5,r1,#2
000062  1c6d              ADDS     r5,r5,#1
000064  5d5d              LDRB     r5,[r3,r5]
000066  4328              ORRS     r0,r0,r5
000068  6825              LDR      r5,[r4,#0]
00006a  8028              STRH     r0,[r5,#0]
                  |L2.108|
;;;476         }
;;;477         if  (BufferLength%4U == 3U)
00006c  0790              LSLS     r0,r2,#30
00006e  0f80              LSRS     r0,r0,#30
000070  2803              CMP      r0,#3
000072  d10d              BNE      |L2.144|
;;;478         {
;;;479           *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
000074  0088              LSLS     r0,r1,#2
000076  5c18              LDRB     r0,[r3,r0]
000078  0200              LSLS     r0,r0,#8
00007a  008d              LSLS     r5,r1,#2
00007c  1c6d              ADDS     r5,r5,#1
00007e  5d5d              LDRB     r5,[r3,r5]
000080  4328              ORRS     r0,r0,r5
000082  6825              LDR      r5,[r4,#0]
000084  8028              STRH     r0,[r5,#0]
;;;480           *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
000086  0088              LSLS     r0,r1,#2
000088  1c80              ADDS     r0,r0,#2
00008a  5c18              LDRB     r0,[r3,r0]
00008c  6825              LDR      r5,[r4,#0]
00008e  7028              STRB     r0,[r5,#0]
                  |L2.144|
;;;481         }
;;;482       }
;;;483      
;;;484      /* Return the CRC computed value */ 
;;;485      return hcrc->Instance->DR;
000090  6820              LDR      r0,[r4,#0]
000092  6800              LDR      r0,[r0,#0]
;;;486    }
000094  bd30              POP      {r4,r5,pc}
;;;487    
                          ENDP


                          AREA ||i.HAL_CRC_Accumulate||, CODE, READONLY, ALIGN=1

                  HAL_CRC_Accumulate PROC
;;;295      */
;;;296    uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;297    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;298      uint32_t index = 0U; /* CRC input data buffer index */
000008  2500              MOVS     r5,#0
;;;299      uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;300      
;;;301      /* Process locked */
;;;302      __HAL_LOCK(hcrc); 
00000e  bf00              NOP      
000010  7f20              LDRB     r0,[r4,#0x1c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L3.26|
000016  2002              MOVS     r0,#2
                  |L3.24|
;;;303        
;;;304      /* Change CRC peripheral state */  
;;;305      hcrc->State = HAL_CRC_STATE_BUSY;
;;;306      
;;;307      switch (hcrc->InputDataFormat)
;;;308      {
;;;309        case CRC_INPUTDATA_FORMAT_WORDS:  
;;;310          /* Enter Data to the CRC calculator */
;;;311          for(index = 0U; index < BufferLength; index++)
;;;312          {
;;;313            hcrc->Instance->DR = pBuffer[index];
;;;314          }
;;;315          temp = hcrc->Instance->DR;
;;;316          break;
;;;317          
;;;318        case CRC_INPUTDATA_FORMAT_BYTES: 
;;;319          temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
;;;320          break;
;;;321          
;;;322        case CRC_INPUTDATA_FORMAT_HALFWORDS: 
;;;323          temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
;;;324          break;
;;;325          
;;;326        default:
;;;327          break;          
;;;328      }
;;;329      
;;;330      /* Change CRC peripheral state */    
;;;331      hcrc->State = HAL_CRC_STATE_READY; 
;;;332      
;;;333      /* Process unlocked */
;;;334      __HAL_UNLOCK(hcrc);
;;;335      
;;;336      /* Return the CRC computed value */ 
;;;337      return temp;
;;;338    }
000018  bdf8              POP      {r3-r7,pc}
                  |L3.26|
00001a  2001              MOVS     r0,#1                 ;302
00001c  7720              STRB     r0,[r4,#0x1c]         ;302
00001e  bf00              NOP                            ;302
000020  2002              MOVS     r0,#2                 ;305
000022  7760              STRB     r0,[r4,#0x1d]         ;305
000024  6a20              LDR      r0,[r4,#0x20]         ;307
000026  2801              CMP      r0,#1                 ;307
000028  d010              BEQ      |L3.76|
00002a  2802              CMP      r0,#2                 ;307
00002c  d015              BEQ      |L3.90|
00002e  2803              CMP      r0,#3                 ;307
000030  d11a              BNE      |L3.104|
000032  2500              MOVS     r5,#0                 ;311
000034  e004              B        |L3.64|
                  |L3.54|
000036  00a8              LSLS     r0,r5,#2              ;313
000038  5830              LDR      r0,[r6,r0]            ;313
00003a  6821              LDR      r1,[r4,#0]            ;313
00003c  6008              STR      r0,[r1,#0]            ;313
00003e  1c6d              ADDS     r5,r5,#1              ;311
                  |L3.64|
000040  42bd              CMP      r5,r7                 ;311
000042  d3f8              BCC      |L3.54|
000044  6820              LDR      r0,[r4,#0]            ;315
000046  6800              LDR      r0,[r0,#0]            ;315
000048  9000              STR      r0,[sp,#0]            ;315
00004a  e00e              B        |L3.106|
                  |L3.76|
00004c  463a              MOV      r2,r7                 ;319
00004e  4631              MOV      r1,r6                 ;319
000050  4620              MOV      r0,r4                 ;319
000052  f7fffffe          BL       CRC_Handle_8
000056  9000              STR      r0,[sp,#0]            ;319
000058  e007              B        |L3.106|
                  |L3.90|
00005a  463a              MOV      r2,r7                 ;323
00005c  4631              MOV      r1,r6                 ;323
00005e  4620              MOV      r0,r4                 ;323
000060  f7fffffe          BL       CRC_Handle_16
000064  9000              STR      r0,[sp,#0]            ;323
000066  e000              B        |L3.106|
                  |L3.104|
000068  bf00              NOP                            ;327
                  |L3.106|
00006a  bf00              NOP                            ;316
00006c  2001              MOVS     r0,#1                 ;331
00006e  7760              STRB     r0,[r4,#0x1d]         ;331
000070  bf00              NOP                            ;334
000072  2000              MOVS     r0,#0                 ;334
000074  7720              STRB     r0,[r4,#0x1c]         ;334
000076  bf00              NOP                            ;334
000078  9800              LDR      r0,[sp,#0]            ;337
00007a  e7cd              B        |L3.24|
;;;339    
                          ENDP


                          AREA ||i.HAL_CRC_Calculate||, CODE, READONLY, ALIGN=1

                  HAL_CRC_Calculate PROC
;;;355      */  
;;;356    uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;357    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;358      uint32_t index = 0U; /* CRC input data buffer index */
000008  2500              MOVS     r5,#0
;;;359      uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;360        
;;;361      /* Process locked */
;;;362      __HAL_LOCK(hcrc); 
00000e  bf00              NOP      
000010  7f20              LDRB     r0,[r4,#0x1c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L4.26|
000016  2002              MOVS     r0,#2
                  |L4.24|
;;;363      
;;;364      /* Change CRC peripheral state */  
;;;365      hcrc->State = HAL_CRC_STATE_BUSY;
;;;366      
;;;367      /* Reset CRC Calculation Unit (hcrc->Instance->INIT is 
;;;368      *  written in hcrc->Instance->DR) */
;;;369      __HAL_CRC_DR_RESET(hcrc);
;;;370      
;;;371      switch (hcrc->InputDataFormat)
;;;372      {
;;;373        case CRC_INPUTDATA_FORMAT_WORDS:  
;;;374          /* Enter 32-bit input data to the CRC calculator */
;;;375          for(index = 0U; index < BufferLength; index++)
;;;376          {
;;;377            hcrc->Instance->DR = pBuffer[index];
;;;378          }
;;;379          temp = hcrc->Instance->DR;
;;;380          break;
;;;381          
;;;382        case CRC_INPUTDATA_FORMAT_BYTES: 
;;;383          /* Specific 8-bit input data handling  */
;;;384          temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
;;;385          break;
;;;386          
;;;387        case CRC_INPUTDATA_FORMAT_HALFWORDS: 
;;;388          /* Specific 16-bit input data handling  */
;;;389          temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
;;;390          break;
;;;391          
;;;392        default:
;;;393          break;         
;;;394      }
;;;395    
;;;396      /* Change CRC peripheral state */    
;;;397      hcrc->State = HAL_CRC_STATE_READY; 
;;;398      
;;;399      /* Process unlocked */
;;;400      __HAL_UNLOCK(hcrc);
;;;401      
;;;402      /* Return the CRC computed value */ 
;;;403      return temp;
;;;404    }
000018  bdf8              POP      {r3-r7,pc}
                  |L4.26|
00001a  2001              MOVS     r0,#1                 ;362
00001c  7720              STRB     r0,[r4,#0x1c]         ;362
00001e  bf00              NOP                            ;362
000020  2002              MOVS     r0,#2                 ;365
000022  7760              STRB     r0,[r4,#0x1d]         ;365
000024  6820              LDR      r0,[r4,#0]            ;369
000026  6880              LDR      r0,[r0,#8]            ;369
000028  2101              MOVS     r1,#1                 ;369
00002a  4308              ORRS     r0,r0,r1              ;369
00002c  6821              LDR      r1,[r4,#0]            ;369
00002e  6088              STR      r0,[r1,#8]            ;369
000030  6a20              LDR      r0,[r4,#0x20]         ;371
000032  2801              CMP      r0,#1                 ;371
000034  d010              BEQ      |L4.88|
000036  2802              CMP      r0,#2                 ;371
000038  d015              BEQ      |L4.102|
00003a  2803              CMP      r0,#3                 ;371
00003c  d11a              BNE      |L4.116|
00003e  2500              MOVS     r5,#0                 ;375
000040  e004              B        |L4.76|
                  |L4.66|
000042  00a8              LSLS     r0,r5,#2              ;377
000044  5830              LDR      r0,[r6,r0]            ;377
000046  6821              LDR      r1,[r4,#0]            ;377
000048  6008              STR      r0,[r1,#0]            ;377
00004a  1c6d              ADDS     r5,r5,#1              ;375
                  |L4.76|
00004c  42bd              CMP      r5,r7                 ;375
00004e  d3f8              BCC      |L4.66|
000050  6820              LDR      r0,[r4,#0]            ;379
000052  6800              LDR      r0,[r0,#0]            ;379
000054  9000              STR      r0,[sp,#0]            ;379
000056  e00e              B        |L4.118|
                  |L4.88|
000058  463a              MOV      r2,r7                 ;384
00005a  4631              MOV      r1,r6                 ;384
00005c  4620              MOV      r0,r4                 ;384
00005e  f7fffffe          BL       CRC_Handle_8
000062  9000              STR      r0,[sp,#0]            ;384
000064  e007              B        |L4.118|
                  |L4.102|
000066  463a              MOV      r2,r7                 ;389
000068  4631              MOV      r1,r6                 ;389
00006a  4620              MOV      r0,r4                 ;389
00006c  f7fffffe          BL       CRC_Handle_16
000070  9000              STR      r0,[sp,#0]            ;389
000072  e000              B        |L4.118|
                  |L4.116|
000074  bf00              NOP                            ;393
                  |L4.118|
000076  bf00              NOP                            ;380
000078  2001              MOVS     r0,#1                 ;397
00007a  7760              STRB     r0,[r4,#0x1d]         ;397
00007c  bf00              NOP                            ;400
00007e  2000              MOVS     r0,#0                 ;400
000080  7720              STRB     r0,[r4,#0x1c]         ;400
000082  bf00              NOP                            ;400
000084  9800              LDR      r0,[sp,#0]            ;403
000086  e7c7              B        |L4.24|
;;;405      
                          ENDP


                          AREA ||i.HAL_CRC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_CRC_DeInit PROC
;;;187      */
;;;188    HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
000000  b510              PUSH     {r4,lr}
;;;189    { 
000002  4604              MOV      r4,r0
;;;190      /* Check the CRC handle allocation */
;;;191      if(hcrc == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L5.12|
;;;192      {
;;;193        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L5.10|
;;;194      }
;;;195      
;;;196      /* Check the parameters */
;;;197      assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
;;;198      
;;;199      /* Check the CRC peripheral state */
;;;200      if(hcrc->State == HAL_CRC_STATE_BUSY)
;;;201      {
;;;202        return HAL_BUSY;
;;;203      }
;;;204      
;;;205      /* Change CRC peripheral state */
;;;206      hcrc->State = HAL_CRC_STATE_BUSY;
;;;207      
;;;208      /* Reset CRC calculation unit */
;;;209      __HAL_CRC_DR_RESET(hcrc);
;;;210      
;;;211      /* Reset IDR register content */
;;;212      CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR) ;
;;;213    
;;;214      /* DeInit the low level hardware */
;;;215      HAL_CRC_MspDeInit(hcrc);
;;;216    
;;;217      /* Change CRC peripheral state */
;;;218      hcrc->State = HAL_CRC_STATE_RESET;
;;;219    
;;;220      /* Process unlocked */
;;;221      __HAL_UNLOCK(hcrc);
;;;222    
;;;223      /* Return function status */
;;;224      return HAL_OK;
;;;225    }
00000a  bd10              POP      {r4,pc}
                  |L5.12|
00000c  7f60              LDRB     r0,[r4,#0x1d]         ;200
00000e  2802              CMP      r0,#2                 ;200
000010  d100              BNE      |L5.20|
000012  e7fa              B        |L5.10|
                  |L5.20|
000014  2002              MOVS     r0,#2                 ;206
000016  7760              STRB     r0,[r4,#0x1d]         ;206
000018  6820              LDR      r0,[r4,#0]            ;209
00001a  6880              LDR      r0,[r0,#8]            ;209
00001c  2101              MOVS     r1,#1                 ;209
00001e  4308              ORRS     r0,r0,r1              ;209
000020  6821              LDR      r1,[r4,#0]            ;209
000022  6088              STR      r0,[r1,#8]            ;209
000024  6820              LDR      r0,[r4,#0]            ;212
000026  7900              LDRB     r0,[r0,#4]            ;212
000028  2000              MOVS     r0,#0                 ;212
00002a  6821              LDR      r1,[r4,#0]            ;212
00002c  7108              STRB     r0,[r1,#4]            ;212
00002e  4620              MOV      r0,r4                 ;215
000030  f7fffffe          BL       HAL_CRC_MspDeInit
000034  2000              MOVS     r0,#0                 ;218
000036  7760              STRB     r0,[r4,#0x1d]         ;218
000038  bf00              NOP                            ;221
00003a  7720              STRB     r0,[r4,#0x1c]         ;221
00003c  bf00              NOP                            ;221
00003e  bf00              NOP                            ;224
000040  e7e3              B        |L5.10|
;;;226    
                          ENDP


                          AREA ||i.HAL_CRC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_CRC_GetState PROC
;;;428      */
;;;429    HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
000000  4601              MOV      r1,r0
;;;430    {
;;;431      /* Return CRC handle state */
;;;432      return hcrc->State;
000002  7f48              LDRB     r0,[r1,#0x1d]
;;;433    }
000004  4770              BX       lr
;;;434    
                          ENDP


                          AREA ||i.HAL_CRC_Init||, CODE, READONLY, ALIGN=1

                  HAL_CRC_Init PROC
;;;118      */
;;;119    HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
000000  b510              PUSH     {r4,lr}
;;;120    {
000002  4604              MOV      r4,r0
;;;121      /* Check the CRC handle allocation */
;;;122      if(hcrc == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L7.12|
;;;123      {
;;;124        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L7.10|
;;;125      }
;;;126      
;;;127      /* Check the parameters */
;;;128      assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
;;;129    
;;;130      if(hcrc->State == HAL_CRC_STATE_RESET)
;;;131      {   
;;;132        /* Allocate lock resource and initialize it */
;;;133        hcrc->Lock = HAL_UNLOCKED;
;;;134    
;;;135        /* Init the low level hardware */
;;;136        HAL_CRC_MspInit(hcrc);
;;;137      }
;;;138      
;;;139      hcrc->State = HAL_CRC_STATE_BUSY; 
;;;140      
;;;141      /* Extended initialization: if programmable polynomial feature is 
;;;142         applicable to device, set default or non-default generating 
;;;143         polynomial according to hcrc->Init parameters.
;;;144         If feature is non-applicable to device in use, HAL_CRCEx_Init straight 
;;;145         away reports HAL_OK. */
;;;146      if (HAL_CRCEx_Init(hcrc) != HAL_OK)
;;;147      {
;;;148        return HAL_ERROR;
;;;149      }
;;;150      
;;;151      /* check whether or not non-default CRC initial value has been 
;;;152       * picked up by user */
;;;153      assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
;;;154      if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
;;;155      {
;;;156        WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
;;;157      }
;;;158      else
;;;159      {
;;;160        WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
;;;161      }
;;;162      
;;;163    
;;;164      /* set input data inversion mode */
;;;165      assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
;;;166      MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
;;;167      
;;;168      /* set output data inversion mode */
;;;169      assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
;;;170      MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
;;;171      
;;;172      /* makes sure the input data format (bytes, halfwords or words stream)
;;;173       * is properly specified by user */
;;;174      assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
;;;175    
;;;176      /* Change CRC peripheral state */
;;;177      hcrc->State = HAL_CRC_STATE_READY;
;;;178      
;;;179      /* Return function status */
;;;180      return HAL_OK;
;;;181    }
00000a  bd10              POP      {r4,pc}
                  |L7.12|
00000c  7f60              LDRB     r0,[r4,#0x1d]         ;130
00000e  2800              CMP      r0,#0                 ;130
000010  d103              BNE      |L7.26|
000012  7720              STRB     r0,[r4,#0x1c]         ;133
000014  4620              MOV      r0,r4                 ;136
000016  f7fffffe          BL       HAL_CRC_MspInit
                  |L7.26|
00001a  2002              MOVS     r0,#2                 ;139
00001c  7760              STRB     r0,[r4,#0x1d]         ;139
00001e  4620              MOV      r0,r4                 ;146
000020  f7fffffe          BL       HAL_CRCEx_Init
000024  2800              CMP      r0,#0                 ;146
000026  d001              BEQ      |L7.44|
000028  2001              MOVS     r0,#1                 ;148
00002a  e7ee              B        |L7.10|
                  |L7.44|
00002c  7960              LDRB     r0,[r4,#5]            ;154
00002e  2800              CMP      r0,#0                 ;154
000030  d103              BNE      |L7.58|
000032  1e40              SUBS     r0,r0,#1              ;156
000034  6821              LDR      r1,[r4,#0]            ;156
000036  6108              STR      r0,[r1,#0x10]         ;156
000038  e002              B        |L7.64|
                  |L7.58|
00003a  6821              LDR      r1,[r4,#0]            ;160
00003c  6920              LDR      r0,[r4,#0x10]         ;160
00003e  6108              STR      r0,[r1,#0x10]         ;160
                  |L7.64|
000040  6820              LDR      r0,[r4,#0]            ;166
000042  6880              LDR      r0,[r0,#8]            ;166
000044  2160              MOVS     r1,#0x60              ;166
000046  4388              BICS     r0,r0,r1              ;166
000048  6961              LDR      r1,[r4,#0x14]         ;166
00004a  4308              ORRS     r0,r0,r1              ;166
00004c  6821              LDR      r1,[r4,#0]            ;166
00004e  6088              STR      r0,[r1,#8]            ;166
000050  6820              LDR      r0,[r4,#0]            ;170
000052  6880              LDR      r0,[r0,#8]            ;170
000054  2180              MOVS     r1,#0x80              ;170
000056  4388              BICS     r0,r0,r1              ;170
000058  69a1              LDR      r1,[r4,#0x18]         ;170
00005a  4308              ORRS     r0,r0,r1              ;170
00005c  6821              LDR      r1,[r4,#0]            ;170
00005e  6088              STR      r0,[r1,#8]            ;170
000060  2001              MOVS     r0,#1                 ;177
000062  7760              STRB     r0,[r4,#0x1d]         ;177
000064  2000              MOVS     r0,#0                 ;180
000066  e7d0              B        |L7.10|
;;;182    
                          ENDP


                          AREA ||i.HAL_CRC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_CRC_MspDeInit PROC
;;;246      */
;;;247    __weak void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
000000  4770              BX       lr
;;;248    {
;;;249      /* Prevent unused argument(s) compilation warning */
;;;250      UNUSED(hcrc);
;;;251    
;;;252      /* NOTE : This function should not be modified, when the callback is needed,
;;;253                the HAL_CRC_MspDeInit can be implemented in the user file
;;;254       */
;;;255    }
;;;256    
                          ENDP


                          AREA ||i.HAL_CRC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_CRC_MspInit PROC
;;;231      */
;;;232    __weak void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
000000  4770              BX       lr
;;;233    {
;;;234      /* Prevent unused argument(s) compilation warning */
;;;235      UNUSED(hcrc);
;;;236    
;;;237      /* NOTE : This function should not be modified, when the callback is needed,
;;;238                the HAL_CRC_MspInit can be implemented in the user file
;;;239       */
;;;240    }
;;;241    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_crc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_crc_c_14c421d9____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f0xx_hal_crc_c_14c421d9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_crc_c_14c421d9____REVSH|
#line 402
|__asm___19_stm32f0xx_hal_crc_c_14c421d9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
