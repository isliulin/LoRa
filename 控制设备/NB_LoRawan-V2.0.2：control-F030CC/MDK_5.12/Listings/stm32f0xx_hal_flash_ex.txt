; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_flash_ex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_flash_ex.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_flash_ex.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;515      */
;;;516    static void FLASH_MassErase(void)
000000  2000              MOVS     r0,#0
;;;517    {
;;;518      /* Clean the error context */
;;;519      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4907              LDR      r1,|L1.32|
000004  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;520    
;;;521        /* Only bank1 will be erased*/
;;;522        SET_BIT(FLASH->CR, FLASH_CR_MER);
000006  4807              LDR      r0,|L1.36|
000008  6900              LDR      r0,[r0,#0x10]
00000a  2104              MOVS     r1,#4
00000c  4308              ORRS     r0,r0,r1
00000e  4905              LDR      r1,|L1.36|
000010  6108              STR      r0,[r1,#0x10]
;;;523        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000012  4608              MOV      r0,r1
000014  6900              LDR      r0,[r0,#0x10]
000016  2140              MOVS     r1,#0x40
000018  4308              ORRS     r0,r0,r1
00001a  4902              LDR      r1,|L1.36|
00001c  6108              STR      r0,[r1,#0x10]
;;;524    }
00001e  4770              BX       lr
;;;525    
                          ENDP

                  |L1.32|
                          DCD      pFlash
                  |L1.36|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_DisableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_DisableWRP PROC
;;;652      */
;;;653    static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
000000  b5fe              PUSH     {r1-r7,lr}
;;;654    {
000002  4604              MOV      r4,r0
;;;655      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;656      uint16_t WRP0_Data = 0xFFFFU;
000006  4e32              LDR      r6,|L2.208|
;;;657    #if defined(OB_WRP1_WRP1)
;;;658      uint16_t WRP1_Data = 0xFFFFU;
000008  4637              MOV      r7,r6
;;;659    #endif /* OB_WRP1_WRP1 */
;;;660    #if defined(OB_WRP2_WRP2)
;;;661      uint16_t WRP2_Data = 0xFFFFU;
00000a  4630              MOV      r0,r6
00000c  9001              STR      r0,[sp,#4]
;;;662    #endif /* OB_WRP2_WRP2 */
;;;663    #if defined(OB_WRP3_WRP3)
;;;664      uint16_t WRP3_Data = 0xFFFFU;
00000e  9000              STR      r0,[sp,#0]
;;;665    #endif /* OB_WRP3_WRP3 */
;;;666      
;;;667      /* Check the parameters */
;;;668      assert_param(IS_OB_WRP(WriteProtectPage));
;;;669    
;;;670      /* Get current write protected pages and the new pages to be unprotected ******/
;;;671      WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
000010  f7fffffe          BL       FLASH_OB_GetWRP
000014  4304              ORRS     r4,r4,r0
;;;672    
;;;673    #if defined(OB_WRP_PAGES0TO15MASK)
;;;674      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
000016  b2e6              UXTB     r6,r4
;;;675    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;676      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
;;;677    #endif /* OB_WRP_PAGES0TO31MASK */
;;;678      
;;;679    #if defined(OB_WRP_PAGES16TO31MASK)
;;;680      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
000018  20ff              MOVS     r0,#0xff
00001a  0200              LSLS     r0,r0,#8
00001c  4020              ANDS     r0,r0,r4
00001e  0a07              LSRS     r7,r0,#8
;;;681    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;682      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
;;;683    #endif /* OB_WRP_PAGES32TO63MASK */
;;;684     
;;;685    #if defined(OB_WRP_PAGES32TO47MASK)
;;;686      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
000020  20ff              MOVS     r0,#0xff
000022  0400              LSLS     r0,r0,#16
000024  4020              ANDS     r0,r0,r4
000026  0c00              LSRS     r0,r0,#16
000028  9001              STR      r0,[sp,#4]
;;;687    #endif /* OB_WRP_PAGES32TO47MASK */
;;;688    
;;;689    #if defined(OB_WRP_PAGES48TO63MASK)
;;;690      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO63MASK) >> 24U); 
;;;691    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;692      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
00002a  0e20              LSRS     r0,r4,#24
00002c  9000              STR      r0,[sp,#0]
;;;693    #endif /* OB_WRP_PAGES48TO63MASK */
;;;694    
;;;695        
;;;696      /* Wait for last operation to be completed */
;;;697      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002e  4829              LDR      r0,|L2.212|
000030  f7fffffe          BL       FLASH_WaitForLastOperation
000034  4605              MOV      r5,r0
;;;698    
;;;699      if(status == HAL_OK)
000036  2d00              CMP      r5,#0
000038  d148              BNE      |L2.204|
;;;700      { 
;;;701        /* Clean the error context */
;;;702        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
00003a  4927              LDR      r1,|L2.216|
00003c  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;703    
;;;704        /* To be able to write again option byte, need to perform a option byte erase */
;;;705        status = HAL_FLASHEx_OBErase();
00003e  f7fffffe          BL       HAL_FLASHEx_OBErase
000042  4605              MOV      r5,r0
;;;706        if (status == HAL_OK)  
000044  2d00              CMP      r5,#0
000046  d141              BNE      |L2.204|
;;;707        {
;;;708          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000048  4824              LDR      r0,|L2.220|
00004a  6900              LDR      r0,[r0,#0x10]
00004c  2110              MOVS     r1,#0x10
00004e  4308              ORRS     r0,r0,r1
000050  4922              LDR      r1,|L2.220|
000052  6108              STR      r0,[r1,#0x10]
;;;709    
;;;710    #if defined(OB_WRP0_WRP0)
;;;711          if(WRP0_Data != 0xFFU)
000054  2eff              CMP      r6,#0xff
000056  d008              BEQ      |L2.106|
;;;712          {
;;;713            OB->WRP0 |= WRP0_Data;
000058  4821              LDR      r0,|L2.224|
00005a  8900              LDRH     r0,[r0,#8]
00005c  4330              ORRS     r0,r0,r6
00005e  4920              LDR      r1,|L2.224|
000060  8108              STRH     r0,[r1,#8]
;;;714            
;;;715            /* Wait for last operation to be completed */
;;;716            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000062  481c              LDR      r0,|L2.212|
000064  f7fffffe          BL       FLASH_WaitForLastOperation
000068  4605              MOV      r5,r0
                  |L2.106|
;;;717          }
;;;718    #endif /* OB_WRP0_WRP0 */
;;;719    
;;;720    #if defined(OB_WRP1_WRP1)
;;;721          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
00006a  2d00              CMP      r5,#0
00006c  d10a              BNE      |L2.132|
00006e  2fff              CMP      r7,#0xff
000070  d008              BEQ      |L2.132|
;;;722          {
;;;723            OB->WRP1 |= WRP1_Data;
000072  481b              LDR      r0,|L2.224|
000074  8940              LDRH     r0,[r0,#0xa]
000076  4338              ORRS     r0,r0,r7
000078  4919              LDR      r1,|L2.224|
00007a  8148              STRH     r0,[r1,#0xa]
;;;724            
;;;725            /* Wait for last operation to be completed */
;;;726            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00007c  4815              LDR      r0,|L2.212|
00007e  f7fffffe          BL       FLASH_WaitForLastOperation
000082  4605              MOV      r5,r0
                  |L2.132|
;;;727          }
;;;728    #endif /* OB_WRP1_WRP1 */
;;;729    
;;;730    #if defined(OB_WRP2_WRP2)
;;;731          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
000084  2d00              CMP      r5,#0
000086  d10c              BNE      |L2.162|
000088  9801              LDR      r0,[sp,#4]
00008a  28ff              CMP      r0,#0xff
00008c  d009              BEQ      |L2.162|
;;;732          {
;;;733            OB->WRP2 |= WRP2_Data;
00008e  4814              LDR      r0,|L2.224|
000090  8980              LDRH     r0,[r0,#0xc]
000092  9901              LDR      r1,[sp,#4]
000094  4308              ORRS     r0,r0,r1
000096  4912              LDR      r1,|L2.224|
000098  8188              STRH     r0,[r1,#0xc]
;;;734            
;;;735            /* Wait for last operation to be completed */
;;;736            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00009a  480e              LDR      r0,|L2.212|
00009c  f7fffffe          BL       FLASH_WaitForLastOperation
0000a0  4605              MOV      r5,r0
                  |L2.162|
;;;737          }
;;;738    #endif /* OB_WRP2_WRP2 */
;;;739    
;;;740    #if defined(OB_WRP3_WRP3)
;;;741          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
0000a2  2d00              CMP      r5,#0
0000a4  d10c              BNE      |L2.192|
0000a6  9800              LDR      r0,[sp,#0]
0000a8  28ff              CMP      r0,#0xff
0000aa  d009              BEQ      |L2.192|
;;;742          {
;;;743            OB->WRP3 |= WRP3_Data;
0000ac  480c              LDR      r0,|L2.224|
0000ae  89c0              LDRH     r0,[r0,#0xe]
0000b0  9900              LDR      r1,[sp,#0]
0000b2  4308              ORRS     r0,r0,r1
0000b4  490a              LDR      r1,|L2.224|
0000b6  81c8              STRH     r0,[r1,#0xe]
;;;744            
;;;745            /* Wait for last operation to be completed */
;;;746            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000b8  4806              LDR      r0,|L2.212|
0000ba  f7fffffe          BL       FLASH_WaitForLastOperation
0000be  4605              MOV      r5,r0
                  |L2.192|
;;;747          }
;;;748    #endif /* OB_WRP3_WRP3 */
;;;749    
;;;750          /* if the program operation is completed, disable the OPTPG Bit */
;;;751          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
0000c0  4806              LDR      r0,|L2.220|
0000c2  6900              LDR      r0,[r0,#0x10]
0000c4  2110              MOVS     r1,#0x10
0000c6  4388              BICS     r0,r0,r1
0000c8  4904              LDR      r1,|L2.220|
0000ca  6108              STR      r0,[r1,#0x10]
                  |L2.204|
;;;752        }
;;;753      }
;;;754      return status;
0000cc  4628              MOV      r0,r5
;;;755    }
0000ce  bdfe              POP      {r1-r7,pc}
;;;756    
                          ENDP

                  |L2.208|
                          DCD      0x0000ffff
                  |L2.212|
                          DCD      0x0000c350
                  |L2.216|
                          DCD      pFlash
                  |L2.220|
                          DCD      0x40022000
                  |L2.224|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;536      */
;;;537    static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
000000  b5fe              PUSH     {r1-r7,lr}
;;;538    {
000002  4604              MOV      r4,r0
;;;539      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;540      uint16_t WRP0_Data = 0xFFFFU;
000006  4e33              LDR      r6,|L3.212|
;;;541    #if defined(OB_WRP1_WRP1)
;;;542      uint16_t WRP1_Data = 0xFFFFU;
000008  4637              MOV      r7,r6
;;;543    #endif /* OB_WRP1_WRP1 */
;;;544    #if defined(OB_WRP2_WRP2)
;;;545      uint16_t WRP2_Data = 0xFFFFU;
00000a  4630              MOV      r0,r6
00000c  9001              STR      r0,[sp,#4]
;;;546    #endif /* OB_WRP2_WRP2 */
;;;547    #if defined(OB_WRP3_WRP3)
;;;548      uint16_t WRP3_Data = 0xFFFFU;
00000e  9000              STR      r0,[sp,#0]
;;;549    #endif /* OB_WRP3_WRP3 */
;;;550      
;;;551      /* Check the parameters */
;;;552      assert_param(IS_OB_WRP(WriteProtectPage));
;;;553        
;;;554      /* Get current write protected pages and the new pages to be protected ******/
;;;555      WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
000010  f7fffffe          BL       FLASH_OB_GetWRP
000014  43c0              MVNS     r0,r0
000016  4320              ORRS     r0,r0,r4
000018  43c4              MVNS     r4,r0
;;;556      
;;;557    #if defined(OB_WRP_PAGES0TO15MASK)
;;;558      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
00001a  b2e6              UXTB     r6,r4
;;;559    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;560      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
;;;561    #endif /* OB_WRP_PAGES0TO31MASK */
;;;562      
;;;563    #if defined(OB_WRP_PAGES16TO31MASK)
;;;564      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
00001c  20ff              MOVS     r0,#0xff
00001e  0200              LSLS     r0,r0,#8
000020  4020              ANDS     r0,r0,r4
000022  0a07              LSRS     r7,r0,#8
;;;565    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;566      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
;;;567    #endif /* OB_WRP_PAGES32TO63MASK */
;;;568     
;;;569    #if defined(OB_WRP_PAGES32TO47MASK)
;;;570      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
000024  20ff              MOVS     r0,#0xff
000026  0400              LSLS     r0,r0,#16
000028  4020              ANDS     r0,r0,r4
00002a  0c00              LSRS     r0,r0,#16
00002c  9001              STR      r0,[sp,#4]
;;;571    #endif /* OB_WRP_PAGES32TO47MASK */
;;;572    
;;;573    #if defined(OB_WRP_PAGES48TO63MASK)
;;;574      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO63MASK) >> 24U); 
;;;575    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;576      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
00002e  0e20              LSRS     r0,r4,#24
000030  9000              STR      r0,[sp,#0]
;;;577    #endif /* OB_WRP_PAGES48TO63MASK */
;;;578      
;;;579      /* Wait for last operation to be completed */
;;;580      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000032  4829              LDR      r0,|L3.216|
000034  f7fffffe          BL       FLASH_WaitForLastOperation
000038  4605              MOV      r5,r0
;;;581    
;;;582      if(status == HAL_OK)
00003a  2d00              CMP      r5,#0
00003c  d148              BNE      |L3.208|
;;;583      { 
;;;584        /* Clean the error context */
;;;585        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
00003e  4927              LDR      r1,|L3.220|
000040  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;586    
;;;587        /* To be able to write again option byte, need to perform a option byte erase */
;;;588        status = HAL_FLASHEx_OBErase();
000042  f7fffffe          BL       HAL_FLASHEx_OBErase
000046  4605              MOV      r5,r0
;;;589        if (status == HAL_OK)  
000048  2d00              CMP      r5,#0
00004a  d141              BNE      |L3.208|
;;;590        {
;;;591          /* Enable write protection */
;;;592          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
00004c  4824              LDR      r0,|L3.224|
00004e  6900              LDR      r0,[r0,#0x10]
000050  2110              MOVS     r1,#0x10
000052  4308              ORRS     r0,r0,r1
000054  4922              LDR      r1,|L3.224|
000056  6108              STR      r0,[r1,#0x10]
;;;593    
;;;594    #if defined(OB_WRP0_WRP0)
;;;595          if(WRP0_Data != 0xFFU)
000058  2eff              CMP      r6,#0xff
00005a  d008              BEQ      |L3.110|
;;;596          {
;;;597            OB->WRP0 &= WRP0_Data;
00005c  4821              LDR      r0,|L3.228|
00005e  8900              LDRH     r0,[r0,#8]
000060  4030              ANDS     r0,r0,r6
000062  4920              LDR      r1,|L3.228|
000064  8108              STRH     r0,[r1,#8]
;;;598            
;;;599            /* Wait for last operation to be completed */
;;;600            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000066  481c              LDR      r0,|L3.216|
000068  f7fffffe          BL       FLASH_WaitForLastOperation
00006c  4605              MOV      r5,r0
                  |L3.110|
;;;601          }
;;;602    #endif /* OB_WRP0_WRP0 */
;;;603    
;;;604    #if defined(OB_WRP1_WRP1)
;;;605          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
00006e  2d00              CMP      r5,#0
000070  d10a              BNE      |L3.136|
000072  2fff              CMP      r7,#0xff
000074  d008              BEQ      |L3.136|
;;;606          {
;;;607            OB->WRP1 &= WRP1_Data;
000076  481b              LDR      r0,|L3.228|
000078  8940              LDRH     r0,[r0,#0xa]
00007a  4038              ANDS     r0,r0,r7
00007c  4919              LDR      r1,|L3.228|
00007e  8148              STRH     r0,[r1,#0xa]
;;;608            
;;;609            /* Wait for last operation to be completed */
;;;610            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000080  4815              LDR      r0,|L3.216|
000082  f7fffffe          BL       FLASH_WaitForLastOperation
000086  4605              MOV      r5,r0
                  |L3.136|
;;;611          }
;;;612    #endif /* OB_WRP1_WRP1 */
;;;613    
;;;614    #if defined(OB_WRP2_WRP2)
;;;615          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
000088  2d00              CMP      r5,#0
00008a  d10c              BNE      |L3.166|
00008c  9801              LDR      r0,[sp,#4]
00008e  28ff              CMP      r0,#0xff
000090  d009              BEQ      |L3.166|
;;;616          {
;;;617            OB->WRP2 &= WRP2_Data;
000092  4814              LDR      r0,|L3.228|
000094  8980              LDRH     r0,[r0,#0xc]
000096  9901              LDR      r1,[sp,#4]
000098  4008              ANDS     r0,r0,r1
00009a  4912              LDR      r1,|L3.228|
00009c  8188              STRH     r0,[r1,#0xc]
;;;618            
;;;619            /* Wait for last operation to be completed */
;;;620            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00009e  480e              LDR      r0,|L3.216|
0000a0  f7fffffe          BL       FLASH_WaitForLastOperation
0000a4  4605              MOV      r5,r0
                  |L3.166|
;;;621          }
;;;622    #endif /* OB_WRP2_WRP2 */
;;;623    
;;;624    #if defined(OB_WRP3_WRP3)
;;;625          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
0000a6  2d00              CMP      r5,#0
0000a8  d10c              BNE      |L3.196|
0000aa  9800              LDR      r0,[sp,#0]
0000ac  28ff              CMP      r0,#0xff
0000ae  d009              BEQ      |L3.196|
;;;626          {
;;;627            OB->WRP3 &= WRP3_Data;
0000b0  480c              LDR      r0,|L3.228|
0000b2  89c0              LDRH     r0,[r0,#0xe]
0000b4  9900              LDR      r1,[sp,#0]
0000b6  4008              ANDS     r0,r0,r1
0000b8  490a              LDR      r1,|L3.228|
0000ba  81c8              STRH     r0,[r1,#0xe]
;;;628            
;;;629            /* Wait for last operation to be completed */
;;;630            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000bc  4806              LDR      r0,|L3.216|
0000be  f7fffffe          BL       FLASH_WaitForLastOperation
0000c2  4605              MOV      r5,r0
                  |L3.196|
;;;631          }
;;;632    #endif /* OB_WRP3_WRP3 */
;;;633    
;;;634          /* if the program operation is completed, disable the OPTPG Bit */
;;;635          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
0000c4  4806              LDR      r0,|L3.224|
0000c6  6900              LDR      r0,[r0,#0x10]
0000c8  2110              MOVS     r1,#0x10
0000ca  4388              BICS     r0,r0,r1
0000cc  4904              LDR      r1,|L3.224|
0000ce  6108              STR      r0,[r1,#0x10]
                  |L3.208|
;;;636        }
;;;637      }
;;;638      
;;;639      return status;
0000d0  4628              MOV      r0,r5
;;;640    }
0000d2  bdfe              POP      {r1-r7,pc}
;;;641    
                          ENDP

                  |L3.212|
                          DCD      0x0000ffff
                  |L3.216|
                          DCD      0x0000c350
                  |L3.220|
                          DCD      pFlash
                  |L3.224|
                          DCD      0x40022000
                  |L3.228|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;919      */
;;;920    static uint32_t FLASH_OB_GetRDP(void)
000000  2100              MOVS     r1,#0
;;;921    {
;;;922      uint32_t tmp_reg = 0U;
;;;923      
;;;924      /* Read RDP level bits */
;;;925      tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
000002  4807              LDR      r0,|L4.32|
000004  69c0              LDR      r0,[r0,#0x1c]
000006  2206              MOVS     r2,#6
000008  4010              ANDS     r0,r0,r2
00000a  4601              MOV      r1,r0
;;;926    
;;;927      if (tmp_reg == FLASH_OBR_RDPRT1)
00000c  2902              CMP      r1,#2
00000e  d101              BNE      |L4.20|
;;;928      {
;;;929        return OB_RDP_LEVEL_1;
000010  20bb              MOVS     r0,#0xbb
                  |L4.18|
;;;930      }
;;;931      else if (tmp_reg == FLASH_OBR_RDPRT2)
;;;932      {
;;;933        return OB_RDP_LEVEL_2;
;;;934      }
;;;935      else 
;;;936      {
;;;937        return OB_RDP_LEVEL_0;
;;;938      }
;;;939    }
000012  4770              BX       lr
                  |L4.20|
000014  2904              CMP      r1,#4                 ;931
000016  d101              BNE      |L4.28|
000018  20cc              MOVS     r0,#0xcc              ;933
00001a  e7fa              B        |L4.18|
                  |L4.28|
00001c  20aa              MOVS     r0,#0xaa              ;937
00001e  e7f8              B        |L4.18|
;;;940    
                          ENDP

                  |L4.32|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;946      */
;;;947    static uint8_t FLASH_OB_GetUser(void)
000000  4803              LDR      r0,|L5.16|
;;;948    {
;;;949      /* Return the User Option Byte */
;;;950      return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
000002  69c0              LDR      r0,[r0,#0x1c]
000004  2177              MOVS     r1,#0x77
000006  0209              LSLS     r1,r1,#8
000008  4008              ANDS     r0,r0,r1
00000a  0a00              LSRS     r0,r0,#8
;;;951    }
00000c  4770              BX       lr
;;;952    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;905      */
;;;906    static uint32_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L6.8|
;;;907    {
;;;908      /* Return the FLASH write protection Register value */
;;;909      return (uint32_t)(READ_REG(FLASH->WRPR));
000002  6a00              LDR      r0,[r0,#0x20]
;;;910    }
000004  4770              BX       lr
;;;911    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_ProgramData||, CODE, READONLY, ALIGN=2

                  FLASH_OB_ProgramData PROC
;;;872      */
;;;873    static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;874    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;875      HAL_StatusTypeDef status = HAL_ERROR;
000006  2601              MOVS     r6,#1
;;;876      
;;;877      /* Check the parameters */
;;;878      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;879      
;;;880      /* Wait for last operation to be completed */
;;;881      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000008  480d              LDR      r0,|L7.64|
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
00000e  4606              MOV      r6,r0
;;;882      
;;;883      if(status == HAL_OK)
000010  2e00              CMP      r6,#0
000012  d112              BNE      |L7.58|
;;;884      {
;;;885        /* Clean the error context */
;;;886        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000014  490b              LDR      r1,|L7.68|
000016  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;887    
;;;888        /* Enables the Option Bytes Programming operation */
;;;889        SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
000018  480b              LDR      r0,|L7.72|
00001a  6900              LDR      r0,[r0,#0x10]
00001c  2110              MOVS     r1,#0x10
00001e  4308              ORRS     r0,r0,r1
000020  4909              LDR      r1,|L7.72|
000022  6108              STR      r0,[r1,#0x10]
;;;890        *(__IO uint16_t*)Address = Data;
000024  8025              STRH     r5,[r4,#0]
;;;891        
;;;892        /* Wait for last operation to be completed */
;;;893        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000026  4806              LDR      r0,|L7.64|
000028  f7fffffe          BL       FLASH_WaitForLastOperation
00002c  4606              MOV      r6,r0
;;;894        
;;;895        /* If the program operation is completed, disable the OPTPG Bit */
;;;896        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00002e  4806              LDR      r0,|L7.72|
000030  6900              LDR      r0,[r0,#0x10]
000032  2110              MOVS     r1,#0x10
000034  4388              BICS     r0,r0,r1
000036  4904              LDR      r1,|L7.72|
000038  6108              STR      r0,[r1,#0x10]
                  |L7.58|
;;;897      }
;;;898      /* Return the Option Byte Data Program Status */
;;;899      return status;
00003a  4630              MOV      r0,r6
;;;900    }
00003c  bd70              POP      {r4-r6,pc}
;;;901    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      0x0000c350
                  |L7.68|
                          DCD      pFlash
                  |L7.72|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDP_LevelConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDP_LevelConfig PROC
;;;766      */
;;;767    static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;768    {
000002  4605              MOV      r5,r0
;;;769      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;770      
;;;771      /* Check the parameters */
;;;772      assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
;;;773      
;;;774      /* Wait for last operation to be completed */
;;;775      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000006  481a              LDR      r0,|L8.112|
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4604              MOV      r4,r0
;;;776      
;;;777      if(status == HAL_OK)
00000e  2c00              CMP      r4,#0
000010  d12b              BNE      |L8.106|
;;;778      { 
;;;779        /* Clean the error context */
;;;780        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  4918              LDR      r1,|L8.116|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;781        
;;;782        /* If the previous operation is completed, proceed to erase the option bytes */
;;;783        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
000016  4818              LDR      r0,|L8.120|
000018  6900              LDR      r0,[r0,#0x10]
00001a  2120              MOVS     r1,#0x20
00001c  4308              ORRS     r0,r0,r1
00001e  4916              LDR      r1,|L8.120|
000020  6108              STR      r0,[r1,#0x10]
;;;784        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000022  4608              MOV      r0,r1
000024  6900              LDR      r0,[r0,#0x10]
000026  2140              MOVS     r1,#0x40
000028  4308              ORRS     r0,r0,r1
00002a  4913              LDR      r1,|L8.120|
00002c  6108              STR      r0,[r1,#0x10]
;;;785    
;;;786        /* Wait for last operation to be completed */
;;;787        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002e  4810              LDR      r0,|L8.112|
000030  f7fffffe          BL       FLASH_WaitForLastOperation
000034  4604              MOV      r4,r0
;;;788    
;;;789        /* If the erase operation is completed, disable the OPTER Bit */
;;;790        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
000036  4810              LDR      r0,|L8.120|
000038  6900              LDR      r0,[r0,#0x10]
00003a  2120              MOVS     r1,#0x20
00003c  4388              BICS     r0,r0,r1
00003e  490e              LDR      r1,|L8.120|
000040  6108              STR      r0,[r1,#0x10]
;;;791    
;;;792        if(status == HAL_OK)
000042  2c00              CMP      r4,#0
000044  d111              BNE      |L8.106|
;;;793        {
;;;794          /* Enable the Option Bytes Programming operation */
;;;795          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000046  4608              MOV      r0,r1
000048  6900              LDR      r0,[r0,#0x10]
00004a  2110              MOVS     r1,#0x10
00004c  4308              ORRS     r0,r0,r1
00004e  490a              LDR      r1,|L8.120|
000050  6108              STR      r0,[r1,#0x10]
;;;796          
;;;797          WRITE_REG(OB->RDP, ReadProtectLevel);
000052  480a              LDR      r0,|L8.124|
000054  8005              STRH     r5,[r0,#0]
;;;798          
;;;799          /* Wait for last operation to be completed */
;;;800          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
000056  4806              LDR      r0,|L8.112|
000058  f7fffffe          BL       FLASH_WaitForLastOperation
00005c  4604              MOV      r4,r0
;;;801          
;;;802          /* if the program operation is completed, disable the OPTPG Bit */
;;;803          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00005e  4806              LDR      r0,|L8.120|
000060  6900              LDR      r0,[r0,#0x10]
000062  2110              MOVS     r1,#0x10
000064  4388              BICS     r0,r0,r1
000066  4904              LDR      r1,|L8.120|
000068  6108              STR      r0,[r1,#0x10]
                  |L8.106|
;;;804        }
;;;805      }
;;;806      
;;;807      return status;
00006a  4620              MOV      r0,r4
;;;808    }
00006c  bd70              POP      {r4-r6,pc}
;;;809    
                          ENDP

00006e  0000              DCW      0x0000
                  |L8.112|
                          DCD      0x0000c350
                  |L8.116|
                          DCD      pFlash
                  |L8.120|
                          DCD      0x40022000
                  |L8.124|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;817      */
;;;818    static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;819    {
000002  4605              MOV      r5,r0
;;;820      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;821    
;;;822      /* Check the parameters */
;;;823      assert_param(IS_OB_IWDG_SOURCE((UserConfig&OB_IWDG_SW)));
;;;824      assert_param(IS_OB_STOP_SOURCE((UserConfig&OB_STOP_NO_RST)));
;;;825      assert_param(IS_OB_STDBY_SOURCE((UserConfig&OB_STDBY_NO_RST)));
;;;826      assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
;;;827      assert_param(IS_OB_VDDA_ANALOG((UserConfig&OB_VDDA_ANALOG_ON)));
;;;828      assert_param(IS_OB_SRAM_PARITY((UserConfig&OB_SRAM_PARITY_RESET)));
;;;829    #if defined(FLASH_OBR_BOOT_SEL)
;;;830      assert_param(IS_OB_BOOT_SEL((UserConfig&OB_BOOT_SEL_SET)));
;;;831      assert_param(IS_OB_BOOT0((UserConfig&OB_BOOT0_SET)));
;;;832    #endif /* FLASH_OBR_BOOT_SEL */
;;;833    
;;;834      /* Wait for last operation to be completed */
;;;835      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000006  480f              LDR      r0,|L9.68|
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4604              MOV      r4,r0
;;;836      
;;;837      if(status == HAL_OK)
00000e  2c00              CMP      r4,#0
000010  d115              BNE      |L9.62|
;;;838      {     
;;;839        /* Clean the error context */
;;;840        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  490d              LDR      r1,|L9.72|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;841    
;;;842        /* Enable the Option Bytes Programming operation */
;;;843        SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
000016  480d              LDR      r0,|L9.76|
000018  6900              LDR      r0,[r0,#0x10]
00001a  2110              MOVS     r1,#0x10
00001c  4308              ORRS     r0,r0,r1
00001e  490b              LDR      r1,|L9.76|
000020  6108              STR      r0,[r1,#0x10]
;;;844     
;;;845    #if defined(FLASH_OBR_BOOT_SEL)
;;;846        OB->USER = UserConfig;
;;;847    #else
;;;848        OB->USER = (UserConfig | 0x88U);
000022  2088              MOVS     r0,#0x88
000024  4328              ORRS     r0,r0,r5
000026  490a              LDR      r1,|L9.80|
000028  8048              STRH     r0,[r1,#2]
;;;849    #endif
;;;850    
;;;851        /* Wait for last operation to be completed */
;;;852        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00002a  4806              LDR      r0,|L9.68|
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  4604              MOV      r4,r0
;;;853    
;;;854        /* if the program operation is completed, disable the OPTPG Bit */
;;;855        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000032  4806              LDR      r0,|L9.76|
000034  6900              LDR      r0,[r0,#0x10]
000036  2110              MOVS     r1,#0x10
000038  4388              BICS     r0,r0,r1
00003a  4904              LDR      r1,|L9.76|
00003c  6108              STR      r0,[r1,#0x10]
                  |L9.62|
;;;856      }
;;;857      
;;;858      return status; 
00003e  4620              MOV      r0,r4
;;;859    }
000040  bd70              POP      {r4-r6,pc}
;;;860    
                          ENDP

000042  0000              DCW      0x0000
                  |L9.68|
                          DCD      0x0000c350
                  |L9.72|
                          DCD      pFlash
                  |L9.76|
                          DCD      0x40022000
                  |L9.80|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_PageErase||, CODE, READONLY, ALIGN=2

                  FLASH_PageErase PROC
;;;975      */
;;;976    void FLASH_PageErase(uint32_t PageAddress)
000000  2100              MOVS     r1,#0
;;;977    {
;;;978      /* Clean the error context */
;;;979      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4a08              LDR      r2,|L10.36|
000004  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;980    
;;;981        /* Proceed to erase the page */
;;;982        SET_BIT(FLASH->CR, FLASH_CR_PER);
000006  4908              LDR      r1,|L10.40|
000008  6909              LDR      r1,[r1,#0x10]
00000a  2202              MOVS     r2,#2
00000c  4311              ORRS     r1,r1,r2
00000e  4a06              LDR      r2,|L10.40|
000010  6111              STR      r1,[r2,#0x10]
;;;983        WRITE_REG(FLASH->AR, PageAddress);
000012  4611              MOV      r1,r2
000014  6148              STR      r0,[r1,#0x14]
;;;984        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000016  6909              LDR      r1,[r1,#0x10]
000018  2240              MOVS     r2,#0x40
00001a  4311              ORRS     r1,r1,r2
00001c  4a02              LDR      r2,|L10.40|
00001e  6111              STR      r1,[r2,#0x10]
;;;985    }
000020  4770              BX       lr
;;;986    
                          ENDP

000022  0000              DCW      0x0000
                  |L10.36|
                          DCD      pFlash
                  |L10.40|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
000000  b5f8              PUSH     {r3-r7,lr}
;;;176    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;177      HAL_StatusTypeDef status = HAL_ERROR;
000006  2701              MOVS     r7,#1
;;;178      uint32_t address = 0U;
000008  2500              MOVS     r5,#0
;;;179    
;;;180      /* Process Locked */
;;;181      __HAL_LOCK(&pFlash);
00000a  bf00              NOP      
00000c  4824              LDR      r0,|L11.160|
00000e  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000010  2801              CMP      r0,#1
000012  d101              BNE      |L11.24|
000014  2002              MOVS     r0,#2
                  |L11.22|
;;;182    
;;;183      /* Check the parameters */
;;;184      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;185    
;;;186      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;187      {
;;;188          /* Mass Erase requested for Bank1 */
;;;189          /* Wait for last operation to be completed */
;;;190          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;191          {
;;;192            /*Mass erase to be done*/
;;;193            FLASH_MassErase();
;;;194            
;;;195            /* Wait for last operation to be completed */
;;;196            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;197            
;;;198            /* If the erase operation is completed, disable the MER Bit */
;;;199            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;200          }
;;;201      }
;;;202      else
;;;203      {
;;;204        /* Page Erase is requested */
;;;205        /* Check the parameters */
;;;206        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;207        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;208        
;;;209          /* Page Erase requested on address located on bank1 */
;;;210          /* Wait for last operation to be completed */
;;;211          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;212          {
;;;213            /*Initialization of PageError variable*/
;;;214            *PageError = 0xFFFFFFFFU;
;;;215            
;;;216            /* Erase page by page to be done*/
;;;217            for(address = pEraseInit->PageAddress;
;;;218                address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
;;;219                address += FLASH_PAGE_SIZE)
;;;220            {
;;;221              FLASH_PageErase(address);
;;;222              
;;;223              /* Wait for last operation to be completed */
;;;224              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;225              
;;;226              /* If the erase operation is completed, disable the PER Bit */
;;;227              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;228              
;;;229              if (status != HAL_OK)
;;;230              {
;;;231                /* In case of error, stop erase procedure and return the faulty address */
;;;232                *PageError = address;
;;;233                break;
;;;234              }
;;;235            }
;;;236          }
;;;237      }
;;;238    
;;;239      /* Process Unlocked */
;;;240      __HAL_UNLOCK(&pFlash);
;;;241    
;;;242      return status;
;;;243    }
000016  bdf8              POP      {r3-r7,pc}
                  |L11.24|
000018  2001              MOVS     r0,#1                 ;181
00001a  4921              LDR      r1,|L11.160|
00001c  7608              STRB     r0,[r1,#0x18]         ;181
00001e  bf00              NOP                            ;181
000020  6820              LDR      r0,[r4,#0]            ;186
000022  2801              CMP      r0,#1                 ;186
000024  d111              BNE      |L11.74|
000026  481f              LDR      r0,|L11.164|
000028  f7fffffe          BL       FLASH_WaitForLastOperation
00002c  2800              CMP      r0,#0                 ;190
00002e  d130              BNE      |L11.146|
000030  f7fffffe          BL       FLASH_MassErase
000034  481b              LDR      r0,|L11.164|
000036  f7fffffe          BL       FLASH_WaitForLastOperation
00003a  4607              MOV      r7,r0                 ;196
00003c  481a              LDR      r0,|L11.168|
00003e  6900              LDR      r0,[r0,#0x10]         ;199
000040  2104              MOVS     r1,#4                 ;199
000042  4388              BICS     r0,r0,r1              ;199
000044  4918              LDR      r1,|L11.168|
000046  6108              STR      r0,[r1,#0x10]         ;199
000048  e023              B        |L11.146|
                  |L11.74|
00004a  4816              LDR      r0,|L11.164|
00004c  f7fffffe          BL       FLASH_WaitForLastOperation
000050  2800              CMP      r0,#0                 ;211
000052  d11e              BNE      |L11.146|
000054  1e40              SUBS     r0,r0,#1              ;214
000056  6030              STR      r0,[r6,#0]            ;214
000058  6865              LDR      r5,[r4,#4]            ;217
00005a  e013              B        |L11.132|
                  |L11.92|
00005c  4628              MOV      r0,r5                 ;221
00005e  f7fffffe          BL       FLASH_PageErase
000062  4810              LDR      r0,|L11.164|
000064  f7fffffe          BL       FLASH_WaitForLastOperation
000068  4607              MOV      r7,r0                 ;224
00006a  480f              LDR      r0,|L11.168|
00006c  6900              LDR      r0,[r0,#0x10]         ;227
00006e  2102              MOVS     r1,#2                 ;227
000070  4388              BICS     r0,r0,r1              ;227
000072  490d              LDR      r1,|L11.168|
000074  6108              STR      r0,[r1,#0x10]         ;227
000076  2f00              CMP      r7,#0                 ;229
000078  d001              BEQ      |L11.126|
00007a  6035              STR      r5,[r6,#0]            ;232
00007c  e008              B        |L11.144|
                  |L11.126|
00007e  2001              MOVS     r0,#1                 ;219
000080  02c0              LSLS     r0,r0,#11             ;219
000082  182d              ADDS     r5,r5,r0              ;219
                  |L11.132|
000084  68a0              LDR      r0,[r4,#8]            ;218
000086  02c0              LSLS     r0,r0,#11             ;218
000088  6861              LDR      r1,[r4,#4]            ;218
00008a  1840              ADDS     r0,r0,r1              ;218
00008c  42a8              CMP      r0,r5                 ;218
00008e  d8e5              BHI      |L11.92|
                  |L11.144|
000090  bf00              NOP                            ;233
                  |L11.146|
000092  bf00              NOP                            ;240
000094  2000              MOVS     r0,#0                 ;240
000096  4902              LDR      r1,|L11.160|
000098  7608              STRB     r0,[r1,#0x18]         ;240
00009a  bf00              NOP                            ;240
00009c  4638              MOV      r0,r7                 ;242
00009e  e7ba              B        |L11.22|
;;;244    
                          ENDP

                  |L11.160|
                          DCD      pFlash
                  |L11.164|
                          DCD      0x0000c350
                  |L11.168|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;255      */
;;;256    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  b570              PUSH     {r4-r6,lr}
;;;257    {
000002  4604              MOV      r4,r0
;;;258      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;259    
;;;260      /* Process Locked */
;;;261      __HAL_LOCK(&pFlash);
000006  bf00              NOP      
000008  4815              LDR      r0,|L12.96|
00000a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L12.20|
000010  2002              MOVS     r0,#2
                  |L12.18|
;;;262    
;;;263      /* If procedure already ongoing, reject the next one */
;;;264      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;265      {
;;;266        return HAL_ERROR;
;;;267      }
;;;268      
;;;269      /* Check the parameters */
;;;270      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;271    
;;;272      /* Enable End of FLASH Operation and Error source interrupts */
;;;273      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;274    
;;;275      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;276      {
;;;277        /*Mass erase to be done*/
;;;278        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;279            FLASH_MassErase();
;;;280      }
;;;281      else
;;;282      {
;;;283        /* Erase by page to be done*/
;;;284    
;;;285        /* Check the parameters */
;;;286        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;287        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;288    
;;;289        pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
;;;290        pFlash.DataRemaining = pEraseInit->NbPages;
;;;291        pFlash.Address = pEraseInit->PageAddress;
;;;292    
;;;293        /*Erase 1st page and wait for IT*/
;;;294        FLASH_PageErase(pEraseInit->PageAddress);
;;;295      }
;;;296    
;;;297      return status;
;;;298    }
000012  bd70              POP      {r4-r6,pc}
                  |L12.20|
000014  2001              MOVS     r0,#1                 ;261
000016  4912              LDR      r1,|L12.96|
000018  7608              STRB     r0,[r1,#0x18]         ;261
00001a  bf00              NOP                            ;261
00001c  4608              MOV      r0,r1                 ;264
00001e  7800              LDRB     r0,[r0,#0]            ;264  ; pFlash
000020  2800              CMP      r0,#0                 ;264
000022  d001              BEQ      |L12.40|
000024  2001              MOVS     r0,#1                 ;266
000026  e7f4              B        |L12.18|
                  |L12.40|
000028  480e              LDR      r0,|L12.100|
00002a  6900              LDR      r0,[r0,#0x10]         ;273
00002c  2105              MOVS     r1,#5                 ;273
00002e  0289              LSLS     r1,r1,#10             ;273
000030  4308              ORRS     r0,r0,r1              ;273
000032  490c              LDR      r1,|L12.100|
000034  6108              STR      r0,[r1,#0x10]         ;273
000036  6820              LDR      r0,[r4,#0]            ;275
000038  2801              CMP      r0,#1                 ;275
00003a  d105              BNE      |L12.72|
00003c  2002              MOVS     r0,#2                 ;278
00003e  4908              LDR      r1,|L12.96|
000040  7008              STRB     r0,[r1,#0]            ;278
000042  f7fffffe          BL       FLASH_MassErase
000046  e009              B        |L12.92|
                  |L12.72|
000048  2001              MOVS     r0,#1                 ;289
00004a  4905              LDR      r1,|L12.96|
00004c  7008              STRB     r0,[r1,#0]            ;289
00004e  68a0              LDR      r0,[r4,#8]            ;290
000050  6048              STR      r0,[r1,#4]            ;290  ; pFlash
000052  6860              LDR      r0,[r4,#4]            ;291
000054  6088              STR      r0,[r1,#8]            ;291  ; pFlash
000056  6860              LDR      r0,[r4,#4]            ;294
000058  f7fffffe          BL       FLASH_PageErase
                  |L12.92|
00005c  4628              MOV      r0,r5                 ;297
00005e  e7d8              B        |L12.18|
;;;299    
                          ENDP

                  |L12.96|
                          DCD      pFlash
                  |L12.100|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBErase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBErase PROC
;;;328    
;;;329    HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;330    {
;;;331      uint8_t rdptmp = OB_RDP_LEVEL_0;
000002  25aa              MOVS     r5,#0xaa
;;;332      HAL_StatusTypeDef status = HAL_ERROR;
000004  2401              MOVS     r4,#1
;;;333    
;;;334      /* Get the actual read protection Option Byte value */
;;;335      rdptmp = FLASH_OB_GetRDP();
000006  f7fffffe          BL       FLASH_OB_GetRDP
00000a  b2c5              UXTB     r5,r0
;;;336    
;;;337      /* Wait for last operation to be completed */
;;;338      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000c  4812              LDR      r0,|L13.88|
00000e  f7fffffe          BL       FLASH_WaitForLastOperation
000012  4604              MOV      r4,r0
;;;339    
;;;340      if(status == HAL_OK)
000014  2c00              CMP      r4,#0
000016  d11d              BNE      |L13.84|
;;;341      {
;;;342        /* Clean the error context */
;;;343        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000018  4910              LDR      r1,|L13.92|
00001a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;344    
;;;345        /* If the previous operation is completed, proceed to erase the option bytes */
;;;346        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
00001c  4810              LDR      r0,|L13.96|
00001e  6900              LDR      r0,[r0,#0x10]
000020  2120              MOVS     r1,#0x20
000022  4308              ORRS     r0,r0,r1
000024  490e              LDR      r1,|L13.96|
000026  6108              STR      r0,[r1,#0x10]
;;;347        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000028  4608              MOV      r0,r1
00002a  6900              LDR      r0,[r0,#0x10]
00002c  2140              MOVS     r1,#0x40
00002e  4308              ORRS     r0,r0,r1
000030  490b              LDR      r1,|L13.96|
000032  6108              STR      r0,[r1,#0x10]
;;;348    
;;;349        /* Wait for last operation to be completed */
;;;350        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000034  4808              LDR      r0,|L13.88|
000036  f7fffffe          BL       FLASH_WaitForLastOperation
00003a  4604              MOV      r4,r0
;;;351    
;;;352        /* If the erase operation is completed, disable the OPTER Bit */
;;;353        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
00003c  4808              LDR      r0,|L13.96|
00003e  6900              LDR      r0,[r0,#0x10]
000040  2120              MOVS     r1,#0x20
000042  4388              BICS     r0,r0,r1
000044  4906              LDR      r1,|L13.96|
000046  6108              STR      r0,[r1,#0x10]
;;;354    
;;;355        if(status == HAL_OK)
000048  2c00              CMP      r4,#0
00004a  d103              BNE      |L13.84|
;;;356        {
;;;357          /* Restore the last read protection Option Byte value */
;;;358          status = FLASH_OB_RDP_LevelConfig(rdptmp);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000052  4604              MOV      r4,r0
                  |L13.84|
;;;359        }
;;;360      }
;;;361    
;;;362      /* Return the erase status */
;;;363      return status;
000054  4620              MOV      r0,r4
;;;364    }
000056  bd70              POP      {r4-r6,pc}
;;;365    
                          ENDP

                  |L13.88|
                          DCD      0x0000c350
                  |L13.92|
                          DCD      pFlash
                  |L13.96|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=1

                  HAL_FLASHEx_OBGetConfig PROC
;;;458      */
;;;459    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b510              PUSH     {r4,lr}
;;;460    {
000002  4604              MOV      r4,r0
;;;461      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
000004  2007              MOVS     r0,#7
000006  6020              STR      r0,[r4,#0]
;;;462    
;;;463      /*Get WRP*/
;;;464      pOBInit->WRPPage = FLASH_OB_GetWRP();
000008  f7fffffe          BL       FLASH_OB_GetWRP
00000c  60a0              STR      r0,[r4,#8]
;;;465    
;;;466      /*Get RDP Level*/
;;;467      pOBInit->RDPLevel = FLASH_OB_GetRDP();
00000e  f7fffffe          BL       FLASH_OB_GetRDP
000012  7320              STRB     r0,[r4,#0xc]
;;;468    
;;;469      /*Get USER*/
;;;470      pOBInit->USERConfig = FLASH_OB_GetUser();
000014  f7fffffe          BL       FLASH_OB_GetUser
000018  7360              STRB     r0,[r4,#0xd]
;;;471    }
00001a  bd10              POP      {r4,pc}
;;;472    
                          ENDP


                          AREA ||i.HAL_FLASHEx_OBGetUserData||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetUserData PROC
;;;480      */
;;;481    uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
000000  4601              MOV      r1,r0
;;;482    {
;;;483      uint32_t value = 0U;
000002  2000              MOVS     r0,#0
;;;484      
;;;485      if (DATAAdress == OB_DATA_ADDRESS_DATA0)
000004  4a06              LDR      r2,|L15.32|
000006  4291              CMP      r1,r2
000008  d106              BNE      |L15.24|
;;;486      {
;;;487        /* Get value programmed in OB USER Data0 */
;;;488        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
00000a  4a06              LDR      r2,|L15.36|
00000c  69d2              LDR      r2,[r2,#0x1c]
00000e  23ff              MOVS     r3,#0xff
000010  041b              LSLS     r3,r3,#16
000012  401a              ANDS     r2,r2,r3
000014  0c10              LSRS     r0,r2,#16
000016  e002              B        |L15.30|
                  |L15.24|
;;;489      }
;;;490      else
;;;491      {
;;;492        /* Get value programmed in OB USER Data1 */
;;;493        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
000018  4a02              LDR      r2,|L15.36|
00001a  69d2              LDR      r2,[r2,#0x1c]
00001c  0e10              LSRS     r0,r2,#24
                  |L15.30|
;;;494      }
;;;495      
;;;496      return value;
;;;497    }
00001e  4770              BX       lr
;;;498    
                          ENDP

                  |L15.32|
                          DCD      0x1ffff804
                  |L15.36|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;377      */
;;;378    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b570              PUSH     {r4-r6,lr}
;;;379    {
000002  4604              MOV      r4,r0
;;;380      HAL_StatusTypeDef status = HAL_ERROR;
000004  2501              MOVS     r5,#1
;;;381    
;;;382      /* Process Locked */
;;;383      __HAL_LOCK(&pFlash);
000006  bf00              NOP      
000008  4830              LDR      r0,|L16.204|
00000a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L16.20|
000010  2002              MOVS     r0,#2
                  |L16.18|
;;;384    
;;;385      /* Check the parameters */
;;;386      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;387    
;;;388      /* Write protection configuration */
;;;389      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
;;;390      {
;;;391        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;392        if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
;;;393        {
;;;394          /* Enable of Write protection on the selected page */
;;;395          status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
;;;396        }
;;;397        else
;;;398        {
;;;399          /* Disable of Write protection on the selected page */
;;;400          status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
;;;401        }
;;;402        if (status != HAL_OK)
;;;403        {
;;;404          /* Process Unlocked */
;;;405          __HAL_UNLOCK(&pFlash);
;;;406          return status;
;;;407        }
;;;408      }
;;;409    
;;;410      /* Read protection configuration */
;;;411      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;412      {
;;;413        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;414        if (status != HAL_OK)
;;;415        {
;;;416          /* Process Unlocked */
;;;417          __HAL_UNLOCK(&pFlash);
;;;418          return status;
;;;419        }
;;;420      }
;;;421    
;;;422      /* USER configuration */
;;;423      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;424      {
;;;425        status = FLASH_OB_UserConfig(pOBInit->USERConfig);
;;;426        if (status != HAL_OK)
;;;427        {
;;;428          /* Process Unlocked */
;;;429          __HAL_UNLOCK(&pFlash);
;;;430          return status;
;;;431        }
;;;432      }
;;;433    
;;;434      /* DATA configuration*/
;;;435      if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
;;;436      {
;;;437        status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
;;;438        if (status != HAL_OK)
;;;439        {
;;;440          /* Process Unlocked */
;;;441          __HAL_UNLOCK(&pFlash);
;;;442          return status;
;;;443        }
;;;444      }
;;;445    
;;;446      /* Process Unlocked */
;;;447      __HAL_UNLOCK(&pFlash);
;;;448    
;;;449      return status;
;;;450    }
000012  bd70              POP      {r4-r6,pc}
                  |L16.20|
000014  2001              MOVS     r0,#1                 ;383
000016  492d              LDR      r1,|L16.204|
000018  7608              STRB     r0,[r1,#0x18]         ;383
00001a  bf00              NOP                            ;383
00001c  7820              LDRB     r0,[r4,#0]            ;389
00001e  07c0              LSLS     r0,r0,#31             ;389
000020  0fc0              LSRS     r0,r0,#31             ;389
000022  2800              CMP      r0,#0                 ;389
000024  d014              BEQ      |L16.80|
000026  6860              LDR      r0,[r4,#4]            ;392
000028  2801              CMP      r0,#1                 ;392
00002a  d104              BNE      |L16.54|
00002c  68a0              LDR      r0,[r4,#8]            ;395
00002e  f7fffffe          BL       FLASH_OB_EnableWRP
000032  4605              MOV      r5,r0                 ;395
000034  e003              B        |L16.62|
                  |L16.54|
000036  68a0              LDR      r0,[r4,#8]            ;400
000038  f7fffffe          BL       FLASH_OB_DisableWRP
00003c  4605              MOV      r5,r0                 ;400
                  |L16.62|
00003e  2d00              CMP      r5,#0                 ;402
000040  d006              BEQ      |L16.80|
000042  bf00              NOP                            ;405
000044  2000              MOVS     r0,#0                 ;405
000046  4921              LDR      r1,|L16.204|
000048  7608              STRB     r0,[r1,#0x18]         ;405
00004a  bf00              NOP                            ;405
00004c  4628              MOV      r0,r5                 ;406
00004e  e7e0              B        |L16.18|
                  |L16.80|
000050  2102              MOVS     r1,#2                 ;411
000052  6820              LDR      r0,[r4,#0]            ;411
000054  4008              ANDS     r0,r0,r1              ;411
000056  2802              CMP      r0,#2                 ;411
000058  d10c              BNE      |L16.116|
00005a  7b20              LDRB     r0,[r4,#0xc]          ;413
00005c  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000060  4605              MOV      r5,r0                 ;413
000062  2d00              CMP      r5,#0                 ;414
000064  d006              BEQ      |L16.116|
000066  bf00              NOP                            ;417
000068  2000              MOVS     r0,#0                 ;417
00006a  4918              LDR      r1,|L16.204|
00006c  7608              STRB     r0,[r1,#0x18]         ;417
00006e  bf00              NOP                            ;417
000070  4628              MOV      r0,r5                 ;418
000072  e7ce              B        |L16.18|
                  |L16.116|
000074  2104              MOVS     r1,#4                 ;423
000076  6820              LDR      r0,[r4,#0]            ;423
000078  4008              ANDS     r0,r0,r1              ;423
00007a  2804              CMP      r0,#4                 ;423
00007c  d10c              BNE      |L16.152|
00007e  7b60              LDRB     r0,[r4,#0xd]          ;425
000080  f7fffffe          BL       FLASH_OB_UserConfig
000084  4605              MOV      r5,r0                 ;425
000086  2d00              CMP      r5,#0                 ;426
000088  d006              BEQ      |L16.152|
00008a  bf00              NOP                            ;429
00008c  2000              MOVS     r0,#0                 ;429
00008e  490f              LDR      r1,|L16.204|
000090  7608              STRB     r0,[r1,#0x18]         ;429
000092  bf00              NOP                            ;429
000094  4628              MOV      r0,r5                 ;430
000096  e7bc              B        |L16.18|
                  |L16.152|
000098  2108              MOVS     r1,#8                 ;435
00009a  6820              LDR      r0,[r4,#0]            ;435
00009c  4008              ANDS     r0,r0,r1              ;435
00009e  2808              CMP      r0,#8                 ;435
0000a0  d10d              BNE      |L16.190|
0000a2  7d21              LDRB     r1,[r4,#0x14]         ;437
0000a4  6920              LDR      r0,[r4,#0x10]         ;437
0000a6  f7fffffe          BL       FLASH_OB_ProgramData
0000aa  4605              MOV      r5,r0                 ;437
0000ac  2d00              CMP      r5,#0                 ;438
0000ae  d006              BEQ      |L16.190|
0000b0  bf00              NOP                            ;441
0000b2  2000              MOVS     r0,#0                 ;441
0000b4  4905              LDR      r1,|L16.204|
0000b6  7608              STRB     r0,[r1,#0x18]         ;441
0000b8  bf00              NOP                            ;441
0000ba  4628              MOV      r0,r5                 ;442
0000bc  e7a9              B        |L16.18|
                  |L16.190|
0000be  bf00              NOP                            ;447
0000c0  2000              MOVS     r0,#0                 ;447
0000c2  4902              LDR      r1,|L16.204|
0000c4  7608              STRB     r0,[r1,#0x18]         ;447
0000c6  bf00              NOP                            ;447
0000c8  4628              MOV      r0,r5                 ;449
0000ca  e7a2              B        |L16.18|
;;;451    
                          ENDP

                  |L16.204|
                          DCD      pFlash

;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f0xx_hal_flash_ex_c_6648b60e____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___24_stm32f0xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f0xx_hal_flash_ex_c_6648b60e____REVSH|
#line 402
|__asm___24_stm32f0xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
