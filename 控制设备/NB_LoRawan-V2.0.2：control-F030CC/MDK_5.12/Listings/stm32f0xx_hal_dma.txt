; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_dma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_dma.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_dma.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_CalcBaseAndBitshift||, CODE, READONLY, ALIGN=2

                  DMA_CalcBaseAndBitshift PROC
;;;863      */
;;;864    static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;865    {
000002  4604              MOV      r4,r0
;;;866    #if defined (DMA2)
;;;867      /* calculation of the channel index */
;;;868      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;869      {
;;;870        /* DMA1 */
;;;871        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
;;;872        hdma->DmaBaseAddress = DMA1;
;;;873      }
;;;874      else 
;;;875      {
;;;876        /* DMA2 */
;;;877        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
;;;878        hdma->DmaBaseAddress = DMA2;
;;;879      }
;;;880    #else
;;;881      /* calculation of the channel index */
;;;882      /* DMA1 */
;;;883      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
000004  4a05              LDR      r2,|L1.28|
000006  6821              LDR      r1,[r4,#0]
000008  1a88              SUBS     r0,r1,r2
00000a  2114              MOVS     r1,#0x14
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  0080              LSLS     r0,r0,#2
000012  6420              STR      r0,[r4,#0x40]
;;;884      hdma->DmaBaseAddress = DMA1;
000014  4801              LDR      r0,|L1.28|
000016  3808              SUBS     r0,r0,#8
000018  63e0              STR      r0,[r4,#0x3c]
;;;885    #endif
;;;886    }
00001a  bd10              POP      {r4,pc}
;;;887    
                          ENDP

                  |L1.28|
                          DCD      0x40020008

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;829      */
;;;830    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;831    {
;;;832    	/* Clear all flags */
;;;833      hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
000002  2401              MOVS     r4,#1
000004  6c05              LDR      r5,[r0,#0x40]
000006  40ac              LSLS     r4,r4,r5
000008  6bc5              LDR      r5,[r0,#0x3c]
00000a  606c              STR      r4,[r5,#4]
;;;834      
;;;835      /* Configure DMA Channel data length */
;;;836      hdma->Instance->CNDTR = DataLength;
00000c  6804              LDR      r4,[r0,#0]
00000e  6063              STR      r3,[r4,#4]
;;;837      
;;;838      /* Peripheral to Memory */
;;;839      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000010  6844              LDR      r4,[r0,#4]
000012  2c10              CMP      r4,#0x10
000014  d104              BNE      |L2.32|
;;;840      {   
;;;841        /* Configure DMA Channel destination address */
;;;842        hdma->Instance->CPAR = DstAddress;
000016  6804              LDR      r4,[r0,#0]
000018  60a2              STR      r2,[r4,#8]
;;;843        
;;;844        /* Configure DMA Channel source address */
;;;845        hdma->Instance->CMAR = SrcAddress;
00001a  6804              LDR      r4,[r0,#0]
00001c  60e1              STR      r1,[r4,#0xc]
00001e  e003              B        |L2.40|
                  |L2.32|
;;;846      }
;;;847      /* Memory to Peripheral */
;;;848      else
;;;849      {
;;;850        /* Configure DMA Channel source address */
;;;851        hdma->Instance->CPAR = SrcAddress;
000020  6804              LDR      r4,[r0,#0]
000022  60a1              STR      r1,[r4,#8]
;;;852        
;;;853        /* Configure DMA Channel destination address */
;;;854        hdma->Instance->CMAR = DstAddress;
000024  6804              LDR      r4,[r0,#0]
000026  60e2              STR      r2,[r4,#0xc]
                  |L2.40|
;;;855      }
;;;856    }
000028  bd30              POP      {r4,r5,pc}
;;;857    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;400      */
;;;401    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;402    {
;;;403    	/* Disable DMA IT */
;;;404    	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
000002  6808              LDR      r0,[r1,#0]
000004  6800              LDR      r0,[r0,#0]
000006  220e              MOVS     r2,#0xe
000008  4390              BICS     r0,r0,r2
00000a  680a              LDR      r2,[r1,#0]
00000c  6010              STR      r0,[r2,#0]
;;;405    	
;;;406    	/* Disable the channel */
;;;407    	hdma->Instance->CCR &= ~DMA_CCR_EN;
00000e  6808              LDR      r0,[r1,#0]
000010  6800              LDR      r0,[r0,#0]
000012  0840              LSRS     r0,r0,#1
000014  0040              LSLS     r0,r0,#1
000016  680a              LDR      r2,[r1,#0]
000018  6010              STR      r0,[r2,#0]
;;;408    	
;;;409    	/* Clear all flags */
;;;410    	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
00001a  2001              MOVS     r0,#1
00001c  6c0a              LDR      r2,[r1,#0x40]
00001e  4090              LSLS     r0,r0,r2
000020  6bca              LDR      r2,[r1,#0x3c]
000022  6050              STR      r0,[r2,#4]
;;;411    	
;;;412    	/* Change the DMA state*/
;;;413    	hdma->State = HAL_DMA_STATE_READY; 
000024  2201              MOVS     r2,#1
000026  2021              MOVS     r0,#0x21
000028  5442              STRB     r2,[r0,r1]
;;;414    	
;;;415    	/* Process Unlocked */
;;;416    	__HAL_UNLOCK(hdma);
00002a  bf00              NOP      
00002c  2200              MOVS     r2,#0
00002e  2020              MOVS     r0,#0x20
000030  5442              STRB     r2,[r0,r1]
000032  bf00              NOP      
;;;417    	
;;;418    	return HAL_OK; 
000034  2000              MOVS     r0,#0
;;;419    }
000036  4770              BX       lr
;;;420    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort_IT PROC
;;;426      */
;;;427    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;428    {  
000002  4604              MOV      r4,r0
;;;429      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;430      
;;;431      if(HAL_DMA_STATE_BUSY != hdma->State)
000006  2021              MOVS     r0,#0x21
000008  5d00              LDRB     r0,[r0,r4]
00000a  2802              CMP      r0,#2
00000c  d003              BEQ      |L4.22|
;;;432      {
;;;433        /* no transfer ongoing */
;;;434        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000e  2004              MOVS     r0,#4
000010  63a0              STR      r0,[r4,#0x38]
;;;435            
;;;436        status = HAL_ERROR;
000012  2501              MOVS     r5,#1
000014  e01e              B        |L4.84|
                  |L4.22|
;;;437      }
;;;438      else
;;;439      { 
;;;440      
;;;441        /* Disable DMA IT */
;;;442        hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
000016  6820              LDR      r0,[r4,#0]
000018  6800              LDR      r0,[r0,#0]
00001a  210e              MOVS     r1,#0xe
00001c  4388              BICS     r0,r0,r1
00001e  6821              LDR      r1,[r4,#0]
000020  6008              STR      r0,[r1,#0]
;;;443        
;;;444        /* Disable the channel */
;;;445        hdma->Instance->CCR &= ~DMA_CCR_EN;
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  0840              LSRS     r0,r0,#1
000028  0040              LSLS     r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
;;;446        
;;;447        /* Clear all flags */
;;;448        hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
00002e  2001              MOVS     r0,#1
000030  6c21              LDR      r1,[r4,#0x40]
000032  4088              LSLS     r0,r0,r1
000034  6be1              LDR      r1,[r4,#0x3c]
000036  6048              STR      r0,[r1,#4]
;;;449        
;;;450        /* Change the DMA state */
;;;451        hdma->State = HAL_DMA_STATE_READY;
000038  2101              MOVS     r1,#1
00003a  2021              MOVS     r0,#0x21
00003c  5501              STRB     r1,[r0,r4]
;;;452        
;;;453        /* Process Unlocked */
;;;454        __HAL_UNLOCK(hdma);
00003e  bf00              NOP      
000040  2100              MOVS     r1,#0
000042  2020              MOVS     r0,#0x20
000044  5501              STRB     r1,[r0,r4]
000046  bf00              NOP      
;;;455        
;;;456        /* Call User Abort callback */ 
;;;457        if(hdma->XferAbortCallback != NULL)
000048  6b60              LDR      r0,[r4,#0x34]
00004a  2800              CMP      r0,#0
00004c  d002              BEQ      |L4.84|
;;;458        {
;;;459          hdma->XferAbortCallback(hdma);
00004e  4620              MOV      r0,r4
000050  6b61              LDR      r1,[r4,#0x34]
000052  4788              BLX      r1
                  |L4.84|
;;;460        } 
;;;461      }
;;;462      return status;
000054  4628              MOV      r0,r5
;;;463    }
000056  bd70              POP      {r4-r6,pc}
;;;464    
                          ENDP


                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_DMA_DeInit PROC
;;;221      */
;;;222    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;223    {
000002  4604              MOV      r4,r0
;;;224      /* Check the DMA handle allocation */
;;;225      if(NULL == hdma)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L5.12|
;;;226      {
;;;227        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L5.10|
;;;228      }
;;;229      
;;;230      /* Check the parameters */
;;;231      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;232    
;;;233      /* Disable the selected DMA Channelx */
;;;234      hdma->Instance->CCR &= ~DMA_CCR_EN;
;;;235    
;;;236      /* Reset DMA Channel control register */
;;;237      hdma->Instance->CCR  = 0U;
;;;238    
;;;239      /* Reset DMA Channel Number of Data to Transfer register */
;;;240      hdma->Instance->CNDTR = 0U;
;;;241    
;;;242      /* Reset DMA Channel peripheral address register */
;;;243      hdma->Instance->CPAR  = 0U;
;;;244      
;;;245      /* Reset DMA Channel memory address register */
;;;246      hdma->Instance->CMAR = 0U;
;;;247    
;;;248    /* Get DMA Base Address */  
;;;249      DMA_CalcBaseAndBitshift(hdma);
;;;250    
;;;251      /* Clear all flags */
;;;252      hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
;;;253    
;;;254      /* Initialize the error code */
;;;255      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;256    
;;;257      /* Initialize the DMA state */
;;;258      hdma->State = HAL_DMA_STATE_RESET;
;;;259    
;;;260      /* Release Lock */
;;;261      __HAL_UNLOCK(hdma);
;;;262    
;;;263      return HAL_OK;
;;;264    }
00000a  bd10              POP      {r4,pc}
                  |L5.12|
00000c  6820              LDR      r0,[r4,#0]            ;234
00000e  6800              LDR      r0,[r0,#0]            ;234
000010  0840              LSRS     r0,r0,#1              ;234
000012  0040              LSLS     r0,r0,#1              ;234
000014  6821              LDR      r1,[r4,#0]            ;234
000016  6008              STR      r0,[r1,#0]            ;234
000018  2000              MOVS     r0,#0                 ;237
00001a  6821              LDR      r1,[r4,#0]            ;237
00001c  6008              STR      r0,[r1,#0]            ;237
00001e  6821              LDR      r1,[r4,#0]            ;240
000020  6048              STR      r0,[r1,#4]            ;240
000022  6821              LDR      r1,[r4,#0]            ;243
000024  6088              STR      r0,[r1,#8]            ;243
000026  6821              LDR      r1,[r4,#0]            ;246
000028  60c8              STR      r0,[r1,#0xc]          ;246
00002a  4620              MOV      r0,r4                 ;249
00002c  f7fffffe          BL       DMA_CalcBaseAndBitshift
000030  2001              MOVS     r0,#1                 ;252
000032  6c21              LDR      r1,[r4,#0x40]         ;252
000034  4088              LSLS     r0,r0,r1              ;252
000036  6be1              LDR      r1,[r4,#0x3c]         ;252
000038  6048              STR      r0,[r1,#4]            ;252
00003a  2000              MOVS     r0,#0                 ;255
00003c  63a0              STR      r0,[r4,#0x38]         ;255
00003e  2100              MOVS     r1,#0                 ;258
000040  2021              MOVS     r0,#0x21              ;258
000042  5501              STRB     r1,[r0,r4]            ;258
000044  bf00              NOP                            ;261
000046  2020              MOVS     r0,#0x20              ;261
000048  5501              STRB     r1,[r0,r4]            ;261
00004a  bf00              NOP                            ;261
00004c  2000              MOVS     r0,#0                 ;263
00004e  e7dc              B        |L5.10|
;;;265    
                          ENDP


                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;803      */
;;;804    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;805    {
;;;806      return hdma->ErrorCode;
000002  6b88              LDR      r0,[r1,#0x38]
;;;807    }
000004  4770              BX       lr
;;;808    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;792      */
;;;793    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;794    {
;;;795      return hdma->State;
000002  2021              MOVS     r0,#0x21
000004  5c40              LDRB     r0,[r0,r1]
;;;796    }
000006  4770              BX       lr
;;;797    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_DMA_IRQHandler PROC
;;;573      */
;;;574    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;575    {
000002  4604              MOV      r4,r0
;;;576    	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
000004  6be0              LDR      r0,[r4,#0x3c]
000006  6805              LDR      r5,[r0,#0]
;;;577      uint32_t source_it = hdma->Instance->CCR;
000008  6820              LDR      r0,[r4,#0]
00000a  6806              LDR      r6,[r0,#0]
;;;578              
;;;579      /* Half Transfer Complete Interrupt management ******************************/
;;;580      if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
00000c  2004              MOVS     r0,#4
00000e  6c21              LDR      r1,[r4,#0x40]
000010  4088              LSLS     r0,r0,r1
000012  4028              ANDS     r0,r0,r5
000014  2800              CMP      r0,#0
000016  d01b              BEQ      |L8.80|
000018  2004              MOVS     r0,#4
00001a  4030              ANDS     r0,r0,r6
00001c  2800              CMP      r0,#0
00001e  d017              BEQ      |L8.80|
;;;581      {
;;;582      	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;583      	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
000020  6820              LDR      r0,[r4,#0]
000022  6800              LDR      r0,[r0,#0]
000024  2120              MOVS     r1,#0x20
000026  4008              ANDS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d105              BNE      |L8.56|
;;;584      	{
;;;585      		/* Disable the half transfer interrupt */
;;;586      		hdma->Instance->CCR &= ~DMA_IT_HT;
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  2104              MOVS     r1,#4
000032  4388              BICS     r0,r0,r1
000034  6821              LDR      r1,[r4,#0]
000036  6008              STR      r0,[r1,#0]
                  |L8.56|
;;;587      	}
;;;588      	
;;;589      	/* Clear the half transfer complete flag */
;;;590      	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
000038  2004              MOVS     r0,#4
00003a  6c21              LDR      r1,[r4,#0x40]
00003c  4088              LSLS     r0,r0,r1
00003e  6be1              LDR      r1,[r4,#0x3c]
000040  6048              STR      r0,[r1,#4]
;;;591      	
;;;592      	/* DMA peripheral state is not updated in Half Transfer */
;;;593      	/* State is updated only in Transfer Complete case */
;;;594      	
;;;595      	if(hdma->XferHalfCpltCallback != NULL)
000042  6ae0              LDR      r0,[r4,#0x2c]
000044  2800              CMP      r0,#0
000046  d052              BEQ      |L8.238|
;;;596      	{
;;;597      		/* Half transfer callback */
;;;598      		hdma->XferHalfCpltCallback(hdma);
000048  4620              MOV      r0,r4
00004a  6ae1              LDR      r1,[r4,#0x2c]
00004c  4788              BLX      r1
00004e  e04e              B        |L8.238|
                  |L8.80|
;;;599      	}
;;;600      }
;;;601      
;;;602      /* Transfer Complete Interrupt management ***********************************/
;;;603      else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
000050  2002              MOVS     r0,#2
000052  6c21              LDR      r1,[r4,#0x40]
000054  4088              LSLS     r0,r0,r1
000056  4028              ANDS     r0,r0,r5
000058  2800              CMP      r0,#0
00005a  d023              BEQ      |L8.164|
00005c  2002              MOVS     r0,#2
00005e  4030              ANDS     r0,r0,r6
000060  2800              CMP      r0,#0
000062  d01f              BEQ      |L8.164|
;;;604      {
;;;605      	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
000064  6820              LDR      r0,[r4,#0]
000066  6800              LDR      r0,[r0,#0]
000068  2120              MOVS     r1,#0x20
00006a  4008              ANDS     r0,r0,r1
00006c  2800              CMP      r0,#0
00006e  d108              BNE      |L8.130|
;;;606      	{
;;;607      		/* Disable the transfer complete  & transfer error interrupts */
;;;608      		/* if the DMA mode is not CIRCULAR */
;;;609      		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
000070  6820              LDR      r0,[r4,#0]
000072  6800              LDR      r0,[r0,#0]
000074  210a              MOVS     r1,#0xa
000076  4388              BICS     r0,r0,r1
000078  6821              LDR      r1,[r4,#0]
00007a  6008              STR      r0,[r1,#0]
;;;610      		
;;;611      		/* Change the DMA state */
;;;612      		hdma->State = HAL_DMA_STATE_READY;
00007c  2101              MOVS     r1,#1
00007e  2021              MOVS     r0,#0x21
000080  5501              STRB     r1,[r0,r4]
                  |L8.130|
;;;613      	}
;;;614      	
;;;615      	/* Clear the transfer complete flag */
;;;616      	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
000082  2002              MOVS     r0,#2
000084  6c21              LDR      r1,[r4,#0x40]
000086  4088              LSLS     r0,r0,r1
000088  6be1              LDR      r1,[r4,#0x3c]
00008a  6048              STR      r0,[r1,#4]
;;;617      	
;;;618      	/* Process Unlocked */
;;;619      	__HAL_UNLOCK(hdma);
00008c  bf00              NOP      
00008e  2100              MOVS     r1,#0
000090  2020              MOVS     r0,#0x20
000092  5501              STRB     r1,[r0,r4]
000094  bf00              NOP      
;;;620      	
;;;621      	if(hdma->XferCpltCallback != NULL)
000096  6aa0              LDR      r0,[r4,#0x28]
000098  2800              CMP      r0,#0
00009a  d028              BEQ      |L8.238|
;;;622      	{
;;;623      		/* Transfer complete callback */
;;;624      		hdma->XferCpltCallback(hdma);
00009c  4620              MOV      r0,r4
00009e  6aa1              LDR      r1,[r4,#0x28]
0000a0  4788              BLX      r1
0000a2  e024              B        |L8.238|
                  |L8.164|
;;;625      	}
;;;626      }
;;;627      
;;;628      /* Transfer Error Interrupt management ***************************************/
;;;629      else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
0000a4  2008              MOVS     r0,#8
0000a6  6c21              LDR      r1,[r4,#0x40]
0000a8  4088              LSLS     r0,r0,r1
0000aa  4028              ANDS     r0,r0,r5
0000ac  2800              CMP      r0,#0
0000ae  d01e              BEQ      |L8.238|
0000b0  2008              MOVS     r0,#8
0000b2  4030              ANDS     r0,r0,r6
0000b4  2800              CMP      r0,#0
0000b6  d01a              BEQ      |L8.238|
;;;630      {
;;;631      	/* When a DMA transfer error occurs */
;;;632        /* A hardware clear of its EN bits is performed */
;;;633        /* Then, disable all DMA interrupts */
;;;634        hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
0000b8  6820              LDR      r0,[r4,#0]
0000ba  6800              LDR      r0,[r0,#0]
0000bc  210e              MOVS     r1,#0xe
0000be  4388              BICS     r0,r0,r1
0000c0  6821              LDR      r1,[r4,#0]
0000c2  6008              STR      r0,[r1,#0]
;;;635        
;;;636        /* Clear all flags */
;;;637        hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
0000c4  2001              MOVS     r0,#1
0000c6  6c21              LDR      r1,[r4,#0x40]
0000c8  4088              LSLS     r0,r0,r1
0000ca  6be1              LDR      r1,[r4,#0x3c]
0000cc  6048              STR      r0,[r1,#4]
;;;638        
;;;639        /* Update error code */
;;;640        hdma->ErrorCode = HAL_DMA_ERROR_TE;
0000ce  2001              MOVS     r0,#1
0000d0  63a0              STR      r0,[r4,#0x38]
;;;641        
;;;642        /* Change the DMA state */
;;;643        hdma->State = HAL_DMA_STATE_READY;    
0000d2  2101              MOVS     r1,#1
0000d4  2021              MOVS     r0,#0x21
0000d6  5501              STRB     r1,[r0,r4]
;;;644        
;;;645        /* Process Unlocked */
;;;646        __HAL_UNLOCK(hdma); 
0000d8  bf00              NOP      
0000da  2100              MOVS     r1,#0
0000dc  2020              MOVS     r0,#0x20
0000de  5501              STRB     r1,[r0,r4]
0000e0  bf00              NOP      
;;;647        
;;;648        if(hdma->XferErrorCallback != NULL)
0000e2  6b20              LDR      r0,[r4,#0x30]
0000e4  2800              CMP      r0,#0
0000e6  d002              BEQ      |L8.238|
;;;649        {
;;;650        	/* Transfer error callback */
;;;651        	hdma->XferErrorCallback(hdma);
0000e8  4620              MOV      r0,r4
0000ea  6b21              LDR      r1,[r4,#0x30]
0000ec  4788              BLX      r1
                  |L8.238|
;;;652        }
;;;653       }
;;;654    }  
0000ee  bd70              POP      {r4-r6,pc}
;;;655    
                          ENDP


                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;153      */
;;;154    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;155    { 
000002  4604              MOV      r4,r0
;;;156      uint32_t tmp = 0U;
000004  2500              MOVS     r5,#0
;;;157      
;;;158      /* Check the DMA handle allocation */
;;;159      if(NULL == hdma)
000006  2c00              CMP      r4,#0
000008  d101              BNE      |L9.14|
;;;160      {
;;;161        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;162      }
;;;163      
;;;164      /* Check the parameters */
;;;165      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;166      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;167      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;168      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;169      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;170      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;171      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;172      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;173      
;;;174      /* Change DMA peripheral state */
;;;175      hdma->State = HAL_DMA_STATE_BUSY;
;;;176    
;;;177      /* Get the CR register value */
;;;178      tmp = hdma->Instance->CCR;
;;;179      
;;;180      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
;;;181      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
;;;182                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;183                          DMA_CCR_DIR));
;;;184      
;;;185      /* Prepare the DMA Channel configuration */
;;;186      tmp |=  hdma->Init.Direction        |
;;;187              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;188              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;189              hdma->Init.Mode                | hdma->Init.Priority;
;;;190    
;;;191      /* Write to DMA Channel CR register */
;;;192      hdma->Instance->CCR = tmp;  
;;;193      
;;;194      /* Initialize DmaBaseAddress and ChannelIndex parameters used 
;;;195         by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
;;;196      DMA_CalcBaseAndBitshift(hdma);
;;;197      
;;;198      /* Clean callbacks */
;;;199      hdma->XferCpltCallback = NULL;
;;;200      hdma->XferHalfCpltCallback = NULL;
;;;201      hdma->XferErrorCallback = NULL;
;;;202      hdma->XferAbortCallback = NULL;
;;;203      
;;;204      /* Initialise the error code */
;;;205      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;206    
;;;207      /* Initialize the DMA state*/
;;;208      hdma->State = HAL_DMA_STATE_READY;
;;;209      
;;;210      /* Allocate lock resource and initialize it */
;;;211      hdma->Lock = HAL_UNLOCKED;
;;;212      
;;;213      return HAL_OK;
;;;214    }  
00000c  bd70              POP      {r4-r6,pc}
                  |L9.14|
00000e  2102              MOVS     r1,#2                 ;175
000010  2021              MOVS     r0,#0x21              ;175
000012  5501              STRB     r1,[r0,r4]            ;175
000014  6820              LDR      r0,[r4,#0]            ;178
000016  6805              LDR      r5,[r0,#0]            ;178
000018  4811              LDR      r0,|L9.96|
00001a  4005              ANDS     r5,r5,r0              ;181
00001c  68a1              LDR      r1,[r4,#8]            ;186
00001e  6860              LDR      r0,[r4,#4]            ;186
000020  4308              ORRS     r0,r0,r1              ;186
000022  68e1              LDR      r1,[r4,#0xc]          ;186
000024  4308              ORRS     r0,r0,r1              ;186
000026  6921              LDR      r1,[r4,#0x10]         ;186
000028  4308              ORRS     r0,r0,r1              ;186
00002a  6961              LDR      r1,[r4,#0x14]         ;186
00002c  4308              ORRS     r0,r0,r1              ;186
00002e  69a1              LDR      r1,[r4,#0x18]         ;186
000030  4308              ORRS     r0,r0,r1              ;186
000032  69e1              LDR      r1,[r4,#0x1c]         ;186
000034  4308              ORRS     r0,r0,r1              ;186
000036  4305              ORRS     r5,r5,r0              ;186
000038  6820              LDR      r0,[r4,#0]            ;192
00003a  6005              STR      r5,[r0,#0]            ;192
00003c  4620              MOV      r0,r4                 ;196
00003e  f7fffffe          BL       DMA_CalcBaseAndBitshift
000042  2000              MOVS     r0,#0                 ;199
000044  62a0              STR      r0,[r4,#0x28]         ;199
000046  62e0              STR      r0,[r4,#0x2c]         ;200
000048  6320              STR      r0,[r4,#0x30]         ;201
00004a  6360              STR      r0,[r4,#0x34]         ;202
00004c  63a0              STR      r0,[r4,#0x38]         ;205
00004e  2101              MOVS     r1,#1                 ;208
000050  2021              MOVS     r0,#0x21              ;208
000052  5501              STRB     r1,[r0,r4]            ;208
000054  2100              MOVS     r1,#0                 ;211
000056  2020              MOVS     r0,#0x20              ;211
000058  5501              STRB     r1,[r0,r4]            ;211
00005a  2000              MOVS     r0,#0                 ;213
00005c  e7d6              B        |L9.12|
;;;215      
                          ENDP

00005e  0000              DCW      0x0000
                  |L9.96|
                          DCD      0xffffc00f

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=1

                  HAL_DMA_PollForTransfer PROC
;;;472      */
;;;473    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;474    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;475      uint32_t temp;
;;;476      uint32_t tickstart = 0U;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;477      
;;;478      if(HAL_DMA_STATE_BUSY != hdma->State)
00000c  2021              MOVS     r0,#0x21
00000e  5d00              LDRB     r0,[r0,r4]
000010  2802              CMP      r0,#2
000012  d008              BEQ      |L10.38|
;;;479      {
;;;480        /* no transfer ongoing */
;;;481        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000014  2004              MOVS     r0,#4
000016  63a0              STR      r0,[r4,#0x38]
;;;482        __HAL_UNLOCK(hdma);
000018  bf00              NOP      
00001a  2100              MOVS     r1,#0
00001c  2020              MOVS     r0,#0x20
00001e  5501              STRB     r1,[r0,r4]
000020  bf00              NOP      
;;;483        return HAL_ERROR;
000022  2001              MOVS     r0,#1
                  |L10.36|
;;;484      }
;;;485      
;;;486      /* Polling mode not supported in circular mode */
;;;487      if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
;;;488      {
;;;489        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;490        return HAL_ERROR;
;;;491      }
;;;492      
;;;493      /* Get the level transfer complete flag */
;;;494      if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
;;;495      {
;;;496        /* Transfer Complete flag */
;;;497        temp = DMA_FLAG_TC1 << hdma->ChannelIndex;
;;;498      }
;;;499      else
;;;500      {
;;;501        /* Half Transfer Complete flag */
;;;502        temp = DMA_FLAG_HT1 << hdma->ChannelIndex;
;;;503      }
;;;504    
;;;505      /* Get tick */
;;;506      tickstart = HAL_GetTick();
;;;507    
;;;508      while(RESET == (hdma->DmaBaseAddress->ISR & temp))
;;;509      {
;;;510        if(RESET != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << hdma->ChannelIndex)))
;;;511        {      
;;;512          /* When a DMA transfer error occurs */
;;;513          /* A hardware clear of its EN bits is performed */
;;;514          /* Clear all flags */
;;;515          hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
;;;516          
;;;517          /* Update error code */
;;;518          hdma->ErrorCode = HAL_DMA_ERROR_TE;
;;;519    
;;;520          /* Change the DMA state */
;;;521          hdma->State= HAL_DMA_STATE_READY;       
;;;522          
;;;523          /* Process Unlocked */
;;;524          __HAL_UNLOCK(hdma);
;;;525          
;;;526          return HAL_ERROR;      
;;;527        }      
;;;528        /* Check for the Timeout */
;;;529        if(Timeout != HAL_MAX_DELAY)
;;;530        {
;;;531          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;532          {
;;;533            /* Update error code */
;;;534            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;535            
;;;536            /* Change the DMA state */
;;;537            hdma->State = HAL_DMA_STATE_READY;
;;;538    
;;;539            /* Process Unlocked */
;;;540            __HAL_UNLOCK(hdma);
;;;541    
;;;542            return HAL_ERROR;
;;;543          }
;;;544        }
;;;545      }
;;;546    
;;;547      if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
;;;548      {
;;;549        /* Clear the transfer complete flag */
;;;550        hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
;;;551    
;;;552        /* The selected Channelx EN bit is cleared (DMA is disabled and 
;;;553        all transfers are complete) */
;;;554        hdma->State = HAL_DMA_STATE_READY;
;;;555      }
;;;556      else
;;;557      { 
;;;558        /* Clear the half transfer complete flag */
;;;559        hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
;;;560      }
;;;561      
;;;562      /* Process unlocked */
;;;563      __HAL_UNLOCK(hdma);  
;;;564    
;;;565      return HAL_OK;
;;;566    }
000024  bdf8              POP      {r3-r7,pc}
                  |L10.38|
000026  6820              LDR      r0,[r4,#0]            ;487
000028  6800              LDR      r0,[r0,#0]            ;487
00002a  2120              MOVS     r1,#0x20              ;487
00002c  4008              ANDS     r0,r0,r1              ;487
00002e  2800              CMP      r0,#0                 ;487
000030  d003              BEQ      |L10.58|
000032  00c8              LSLS     r0,r1,#3              ;489
000034  63a0              STR      r0,[r4,#0x38]         ;489
000036  2001              MOVS     r0,#1                 ;490
000038  e7f4              B        |L10.36|
                  |L10.58|
00003a  2e00              CMP      r6,#0                 ;494
00003c  d103              BNE      |L10.70|
00003e  2702              MOVS     r7,#2                 ;497
000040  6c21              LDR      r1,[r4,#0x40]         ;497
000042  408f              LSLS     r7,r7,r1              ;497
000044  e002              B        |L10.76|
                  |L10.70|
000046  2704              MOVS     r7,#4                 ;502
000048  6c21              LDR      r1,[r4,#0x40]         ;502
00004a  408f              LSLS     r7,r7,r1              ;502
                  |L10.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  9000              STR      r0,[sp,#0]            ;506
000052  e02f              B        |L10.180|
                  |L10.84|
000054  6be0              LDR      r0,[r4,#0x3c]         ;510
000056  6800              LDR      r0,[r0,#0]            ;510
000058  2108              MOVS     r1,#8                 ;510
00005a  6c22              LDR      r2,[r4,#0x40]         ;510
00005c  4091              LSLS     r1,r1,r2              ;510
00005e  4008              ANDS     r0,r0,r1              ;510
000060  2800              CMP      r0,#0                 ;510
000062  d010              BEQ      |L10.134|
000064  2001              MOVS     r0,#1                 ;515
000066  6c21              LDR      r1,[r4,#0x40]         ;515
000068  4088              LSLS     r0,r0,r1              ;515
00006a  6be1              LDR      r1,[r4,#0x3c]         ;515
00006c  6048              STR      r0,[r1,#4]            ;515
00006e  2001              MOVS     r0,#1                 ;518
000070  63a0              STR      r0,[r4,#0x38]         ;518
000072  2101              MOVS     r1,#1                 ;521
000074  2021              MOVS     r0,#0x21              ;521
000076  5501              STRB     r1,[r0,r4]            ;521
000078  bf00              NOP                            ;524
00007a  2100              MOVS     r1,#0                 ;524
00007c  2020              MOVS     r0,#0x20              ;524
00007e  5501              STRB     r1,[r0,r4]            ;524
000080  bf00              NOP                            ;524
000082  2001              MOVS     r0,#1                 ;526
000084  e7ce              B        |L10.36|
                  |L10.134|
000086  1c68              ADDS     r0,r5,#1              ;529
000088  2800              CMP      r0,#0                 ;529
00008a  d013              BEQ      |L10.180|
00008c  2d00              CMP      r5,#0                 ;531
00008e  d005              BEQ      |L10.156|
000090  f7fffffe          BL       HAL_GetTick
000094  9900              LDR      r1,[sp,#0]            ;531
000096  1a40              SUBS     r0,r0,r1              ;531
000098  42a8              CMP      r0,r5                 ;531
00009a  d90b              BLS      |L10.180|
                  |L10.156|
00009c  2020              MOVS     r0,#0x20              ;534
00009e  63a0              STR      r0,[r4,#0x38]         ;534
0000a0  2101              MOVS     r1,#1                 ;537
0000a2  2021              MOVS     r0,#0x21              ;537
0000a4  5501              STRB     r1,[r0,r4]            ;537
0000a6  bf00              NOP                            ;540
0000a8  2100              MOVS     r1,#0                 ;540
0000aa  2020              MOVS     r0,#0x20              ;540
0000ac  5501              STRB     r1,[r0,r4]            ;540
0000ae  bf00              NOP                            ;540
0000b0  2001              MOVS     r0,#1                 ;542
0000b2  e7b7              B        |L10.36|
                  |L10.180|
0000b4  6be0              LDR      r0,[r4,#0x3c]         ;508
0000b6  6800              LDR      r0,[r0,#0]            ;508
0000b8  4038              ANDS     r0,r0,r7              ;508
0000ba  2800              CMP      r0,#0                 ;508
0000bc  d0ca              BEQ      |L10.84|
0000be  2e00              CMP      r6,#0                 ;547
0000c0  d108              BNE      |L10.212|
0000c2  2002              MOVS     r0,#2                 ;550
0000c4  6c21              LDR      r1,[r4,#0x40]         ;550
0000c6  4088              LSLS     r0,r0,r1              ;550
0000c8  6be1              LDR      r1,[r4,#0x3c]         ;550
0000ca  6048              STR      r0,[r1,#4]            ;550
0000cc  2101              MOVS     r1,#1                 ;554
0000ce  2021              MOVS     r0,#0x21              ;554
0000d0  5501              STRB     r1,[r0,r4]            ;554
0000d2  e004              B        |L10.222|
                  |L10.212|
0000d4  2004              MOVS     r0,#4                 ;559
0000d6  6c21              LDR      r1,[r4,#0x40]         ;559
0000d8  4088              LSLS     r0,r0,r1              ;559
0000da  6be1              LDR      r1,[r4,#0x3c]         ;559
0000dc  6048              STR      r0,[r1,#4]            ;559
                  |L10.222|
0000de  bf00              NOP                            ;563
0000e0  2100              MOVS     r1,#0                 ;563
0000e2  2020              MOVS     r0,#0x20              ;563
0000e4  5501              STRB     r1,[r0,r4]            ;563
0000e6  bf00              NOP                            ;563
0000e8  2000              MOVS     r0,#0                 ;565
0000ea  e79b              B        |L10.36|
;;;567    
                          ENDP


                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;665      */                          
;;;666    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
000000  b530              PUSH     {r4,r5,lr}
;;;667    {
000002  4603              MOV      r3,r0
;;;668      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;669      
;;;670      /* Process locked */
;;;671      __HAL_LOCK(hdma);
000006  bf00              NOP      
000008  2020              MOVS     r0,#0x20
00000a  5cc0              LDRB     r0,[r0,r3]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L11.20|
000010  2002              MOVS     r0,#2
                  |L11.18|
;;;672      
;;;673      if(HAL_DMA_STATE_READY == hdma->State)
;;;674      {
;;;675        switch (CallbackID)
;;;676        {
;;;677         case  HAL_DMA_XFER_CPLT_CB_ID:
;;;678               hdma->XferCpltCallback = pCallback;
;;;679               break;
;;;680           
;;;681         case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;682               hdma->XferHalfCpltCallback = pCallback;
;;;683               break;         
;;;684    
;;;685         case  HAL_DMA_XFER_ERROR_CB_ID:
;;;686               hdma->XferErrorCallback = pCallback;
;;;687               break;         
;;;688               
;;;689         case  HAL_DMA_XFER_ABORT_CB_ID:
;;;690               hdma->XferAbortCallback = pCallback;
;;;691               break; 
;;;692               
;;;693         default:
;;;694               status = HAL_ERROR;
;;;695               break;                                                            
;;;696        }
;;;697      }
;;;698      else
;;;699      {
;;;700        status = HAL_ERROR;
;;;701      } 
;;;702      
;;;703      /* Release Lock */
;;;704      __HAL_UNLOCK(hdma);
;;;705      
;;;706      return status;
;;;707    }
000012  bd30              POP      {r4,r5,pc}
                  |L11.20|
000014  2501              MOVS     r5,#1                 ;671
000016  2020              MOVS     r0,#0x20              ;671
000018  54c5              STRB     r5,[r0,r3]            ;671
00001a  bf00              NOP                            ;671
00001c  2021              MOVS     r0,#0x21              ;673
00001e  5cc0              LDRB     r0,[r0,r3]            ;673
000020  2801              CMP      r0,#1                 ;673
000022  d113              BNE      |L11.76|
000024  2900              CMP      r1,#0                 ;675
000026  d006              BEQ      |L11.54|
000028  2901              CMP      r1,#1                 ;675
00002a  d006              BEQ      |L11.58|
00002c  2902              CMP      r1,#2                 ;675
00002e  d006              BEQ      |L11.62|
000030  2903              CMP      r1,#3                 ;675
000032  d108              BNE      |L11.70|
000034  e005              B        |L11.66|
                  |L11.54|
000036  629a              STR      r2,[r3,#0x28]         ;678
000038  e007              B        |L11.74|
                  |L11.58|
00003a  62da              STR      r2,[r3,#0x2c]         ;682
00003c  e005              B        |L11.74|
                  |L11.62|
00003e  631a              STR      r2,[r3,#0x30]         ;686
000040  e003              B        |L11.74|
                  |L11.66|
000042  635a              STR      r2,[r3,#0x34]         ;690
000044  e001              B        |L11.74|
                  |L11.70|
000046  2401              MOVS     r4,#1                 ;694
000048  bf00              NOP                            ;695
                  |L11.74|
00004a  e000              B        |L11.78|
                  |L11.76|
00004c  2401              MOVS     r4,#1                 ;700
                  |L11.78|
00004e  bf00              NOP                            ;704
000050  2500              MOVS     r5,#0                 ;704
000052  2020              MOVS     r0,#0x20              ;704
000054  54c5              STRB     r5,[r0,r3]            ;704
000056  bf00              NOP                            ;704
000058  4620              MOV      r0,r4                 ;706
00005a  e7da              B        |L11.18|
;;;708    
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;297      */
;;;298    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;299    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;300    	HAL_StatusTypeDef status = HAL_OK;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;301    
;;;302      /* Check the parameters */
;;;303      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;304      
;;;305      /* Process locked */
;;;306      __HAL_LOCK(hdma);
00000e  bf00              NOP      
000010  2020              MOVS     r0,#0x20
000012  5d00              LDRB     r0,[r0,r4]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L12.28|
000018  2002              MOVS     r0,#2
                  |L12.26|
;;;307      
;;;308      if(HAL_DMA_STATE_READY == hdma->State)
;;;309      {
;;;310      	/* Change DMA peripheral state */  
;;;311      	hdma->State = HAL_DMA_STATE_BUSY;
;;;312      	
;;;313      	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;314      	
;;;315      	/* Disable the peripheral */
;;;316      	hdma->Instance->CCR &= ~DMA_CCR_EN;  
;;;317      	
;;;318      	/* Configure the source, destination address and the data length */
;;;319      	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;320      	
;;;321      	/* Enable the Peripheral */
;;;322      	hdma->Instance->CCR |= DMA_CCR_EN;  
;;;323      }
;;;324      else
;;;325      {
;;;326      	/* Process Unlocked */
;;;327      	__HAL_UNLOCK(hdma);
;;;328      	
;;;329      	/* Remain BUSY */
;;;330      	status = HAL_BUSY;
;;;331      }  
;;;332    
;;;333      return status; 
;;;334    } 
00001a  bdf8              POP      {r3-r7,pc}
                  |L12.28|
00001c  2101              MOVS     r1,#1                 ;306
00001e  2020              MOVS     r0,#0x20              ;306
000020  5501              STRB     r1,[r0,r4]            ;306
000022  bf00              NOP                            ;306
000024  2021              MOVS     r0,#0x21              ;308
000026  5d00              LDRB     r0,[r0,r4]            ;308
000028  2801              CMP      r0,#1                 ;308
00002a  d117              BNE      |L12.92|
00002c  2102              MOVS     r1,#2                 ;311
00002e  2021              MOVS     r0,#0x21              ;311
000030  5501              STRB     r1,[r0,r4]            ;311
000032  2000              MOVS     r0,#0                 ;313
000034  63a0              STR      r0,[r4,#0x38]         ;313
000036  6820              LDR      r0,[r4,#0]            ;316
000038  6800              LDR      r0,[r0,#0]            ;316
00003a  0840              LSRS     r0,r0,#1              ;316
00003c  0040              LSLS     r0,r0,#1              ;316
00003e  6821              LDR      r1,[r4,#0]            ;316
000040  6008              STR      r0,[r1,#0]            ;316
000042  463b              MOV      r3,r7                 ;319
000044  4632              MOV      r2,r6                 ;319
000046  4629              MOV      r1,r5                 ;319
000048  4620              MOV      r0,r4                 ;319
00004a  f7fffffe          BL       DMA_SetConfig
00004e  6820              LDR      r0,[r4,#0]            ;322
000050  6800              LDR      r0,[r0,#0]            ;322
000052  2101              MOVS     r1,#1                 ;322
000054  4308              ORRS     r0,r0,r1              ;322
000056  6821              LDR      r1,[r4,#0]            ;322
000058  6008              STR      r0,[r1,#0]            ;322
00005a  e006              B        |L12.106|
                  |L12.92|
00005c  bf00              NOP                            ;327
00005e  2100              MOVS     r1,#0                 ;327
000060  2020              MOVS     r0,#0x20              ;327
000062  5501              STRB     r1,[r0,r4]            ;327
000064  bf00              NOP                            ;327
000066  2002              MOVS     r0,#2                 ;330
000068  9000              STR      r0,[sp,#0]            ;330
                  |L12.106|
00006a  9800              LDR      r0,[sp,#0]            ;333
00006c  e7d5              B        |L12.26|
;;;335    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;344      */
;;;345    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;346    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;347    	HAL_StatusTypeDef status = HAL_OK;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;348    
;;;349      /* Check the parameters */
;;;350      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;351      
;;;352      /* Process locked */
;;;353      __HAL_LOCK(hdma);
00000e  bf00              NOP      
000010  2020              MOVS     r0,#0x20
000012  5d00              LDRB     r0,[r0,r4]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L13.28|
000018  2002              MOVS     r0,#2
                  |L13.26|
;;;354      
;;;355      if(HAL_DMA_STATE_READY == hdma->State)
;;;356      {
;;;357      	/* Change DMA peripheral state */  
;;;358      	hdma->State = HAL_DMA_STATE_BUSY;
;;;359      	
;;;360      	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;361      	
;;;362      	/* Disable the peripheral */
;;;363      	hdma->Instance->CCR &= ~DMA_CCR_EN;
;;;364      	
;;;365      	/* Configure the source, destination address and the data length */  
;;;366      	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;367      	
;;;368      	/* Enable the transfer complete, & transfer error interrupts */
;;;369      	/* Half transfer interrupt is optional: enable it only if associated callback is available */
;;;370        if(NULL != hdma->XferHalfCpltCallback )
;;;371        {
;;;372          hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
;;;373        }
;;;374      	else
;;;375      	{
;;;376      		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
;;;377      		hdma->Instance->CCR &= ~DMA_IT_HT;
;;;378      	}
;;;379      	
;;;380      	/* Enable the Peripheral */
;;;381      	hdma->Instance->CCR |= DMA_CCR_EN;
;;;382      }
;;;383      else
;;;384      {
;;;385      	/* Process Unlocked */
;;;386        __HAL_UNLOCK(hdma); 
;;;387      
;;;388        /* Remain BUSY */
;;;389        status = HAL_BUSY;
;;;390      }     
;;;391      
;;;392      return status;    
;;;393    } 
00001a  bdf8              POP      {r3-r7,pc}
                  |L13.28|
00001c  2101              MOVS     r1,#1                 ;353
00001e  2020              MOVS     r0,#0x20              ;353
000020  5501              STRB     r1,[r0,r4]            ;353
000022  bf00              NOP                            ;353
000024  2021              MOVS     r0,#0x21              ;355
000026  5d00              LDRB     r0,[r0,r4]            ;355
000028  2801              CMP      r0,#1                 ;355
00002a  d12d              BNE      |L13.136|
00002c  2102              MOVS     r1,#2                 ;358
00002e  2021              MOVS     r0,#0x21              ;358
000030  5501              STRB     r1,[r0,r4]            ;358
000032  2000              MOVS     r0,#0                 ;360
000034  63a0              STR      r0,[r4,#0x38]         ;360
000036  6820              LDR      r0,[r4,#0]            ;363
000038  6800              LDR      r0,[r0,#0]            ;363
00003a  0840              LSRS     r0,r0,#1              ;363
00003c  0040              LSLS     r0,r0,#1              ;363
00003e  6821              LDR      r1,[r4,#0]            ;363
000040  6008              STR      r0,[r1,#0]            ;363
000042  463b              MOV      r3,r7                 ;366
000044  4632              MOV      r2,r6                 ;366
000046  4629              MOV      r1,r5                 ;366
000048  4620              MOV      r0,r4                 ;366
00004a  f7fffffe          BL       DMA_SetConfig
00004e  6ae0              LDR      r0,[r4,#0x2c]         ;370
000050  2800              CMP      r0,#0                 ;370
000052  d006              BEQ      |L13.98|
000054  6820              LDR      r0,[r4,#0]            ;372
000056  6800              LDR      r0,[r0,#0]            ;372
000058  210e              MOVS     r1,#0xe               ;372
00005a  4308              ORRS     r0,r0,r1              ;372
00005c  6821              LDR      r1,[r4,#0]            ;372
00005e  6008              STR      r0,[r1,#0]            ;372
000060  e00b              B        |L13.122|
                  |L13.98|
000062  6820              LDR      r0,[r4,#0]            ;376
000064  6800              LDR      r0,[r0,#0]            ;376
000066  210a              MOVS     r1,#0xa               ;376
000068  4308              ORRS     r0,r0,r1              ;376
00006a  6821              LDR      r1,[r4,#0]            ;376
00006c  6008              STR      r0,[r1,#0]            ;376
00006e  6820              LDR      r0,[r4,#0]            ;377
000070  6800              LDR      r0,[r0,#0]            ;377
000072  2104              MOVS     r1,#4                 ;377
000074  4388              BICS     r0,r0,r1              ;377
000076  6821              LDR      r1,[r4,#0]            ;377
000078  6008              STR      r0,[r1,#0]            ;377
                  |L13.122|
00007a  6820              LDR      r0,[r4,#0]            ;381
00007c  6800              LDR      r0,[r0,#0]            ;381
00007e  2101              MOVS     r1,#1                 ;381
000080  4308              ORRS     r0,r0,r1              ;381
000082  6821              LDR      r1,[r4,#0]            ;381
000084  6008              STR      r0,[r1,#0]            ;381
000086  e006              B        |L13.150|
                  |L13.136|
000088  bf00              NOP                            ;386
00008a  2100              MOVS     r1,#0                 ;386
00008c  2020              MOVS     r0,#0x20              ;386
00008e  5501              STRB     r1,[r0,r4]            ;386
000090  bf00              NOP                            ;386
000092  2002              MOVS     r0,#2                 ;389
000094  9000              STR      r0,[sp,#0]            ;389
                  |L13.150|
000096  9800              LDR      r0,[sp,#0]            ;392
000098  e7bf              B        |L13.26|
;;;394    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;716      */              
;;;717    HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  b510              PUSH     {r4,lr}
;;;718    {
000002  4602              MOV      r2,r0
;;;719      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;720    
;;;721        /* Process locked */
;;;722      __HAL_LOCK(hdma);
000006  bf00              NOP      
000008  2020              MOVS     r0,#0x20
00000a  5c80              LDRB     r0,[r0,r2]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L14.20|
000010  2002              MOVS     r0,#2
                  |L14.18|
;;;723      
;;;724      if(HAL_DMA_STATE_READY == hdma->State)
;;;725      {
;;;726        switch (CallbackID)
;;;727        {
;;;728         case  HAL_DMA_XFER_CPLT_CB_ID:
;;;729               hdma->XferCpltCallback = NULL;
;;;730               break;
;;;731           
;;;732         case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;733               hdma->XferHalfCpltCallback = NULL;
;;;734               break;         
;;;735    
;;;736         case  HAL_DMA_XFER_ERROR_CB_ID:
;;;737               hdma->XferErrorCallback = NULL;
;;;738               break;         
;;;739               
;;;740         case  HAL_DMA_XFER_ABORT_CB_ID:
;;;741               hdma->XferAbortCallback = NULL;
;;;742               break; 
;;;743         
;;;744        case   HAL_DMA_XFER_ALL_CB_ID:
;;;745               hdma->XferCpltCallback = NULL;
;;;746               hdma->XferHalfCpltCallback = NULL;
;;;747               hdma->XferErrorCallback = NULL;
;;;748               hdma->XferAbortCallback = NULL;
;;;749               break; 
;;;750         
;;;751        default:
;;;752               status = HAL_ERROR;
;;;753               break;                                                            
;;;754        }
;;;755      }
;;;756      else
;;;757      {
;;;758        status = HAL_ERROR;
;;;759      } 
;;;760      
;;;761      /* Release Lock */
;;;762      __HAL_UNLOCK(hdma);
;;;763      
;;;764      return status;
;;;765    }
000012  bd10              POP      {r4,pc}
                  |L14.20|
000014  2301              MOVS     r3,#1                 ;722
000016  2020              MOVS     r0,#0x20              ;722
000018  5483              STRB     r3,[r0,r2]            ;722
00001a  bf00              NOP                            ;722
00001c  2021              MOVS     r0,#0x21              ;724
00001e  5c80              LDRB     r0,[r0,r2]            ;724
000020  2801              CMP      r0,#1                 ;724
000022  d11b              BNE      |L14.92|
000024  000b              MOVS     r3,r1                 ;726
000026  f7fffffe          BL       __ARM_common_switch8
00002a  0504              DCB      0x05,0x04
00002c  070a0d10          DCB      0x07,0x0a,0x0d,0x10
000030  1600              DCB      0x16,0x00
000032  2000              MOVS     r0,#0                 ;729
000034  6290              STR      r0,[r2,#0x28]         ;729
000036  e010              B        |L14.90|
000038  2000              MOVS     r0,#0                 ;733
00003a  62d0              STR      r0,[r2,#0x2c]         ;733
00003c  e00d              B        |L14.90|
00003e  2000              MOVS     r0,#0                 ;737
000040  6310              STR      r0,[r2,#0x30]         ;737
000042  e00a              B        |L14.90|
000044  2000              MOVS     r0,#0                 ;741
000046  6350              STR      r0,[r2,#0x34]         ;741
000048  e007              B        |L14.90|
00004a  2000              MOVS     r0,#0                 ;745
00004c  6290              STR      r0,[r2,#0x28]         ;745
00004e  62d0              STR      r0,[r2,#0x2c]         ;746
000050  6310              STR      r0,[r2,#0x30]         ;747
000052  6350              STR      r0,[r2,#0x34]         ;748
000054  e001              B        |L14.90|
000056  2401              MOVS     r4,#1                 ;752
000058  bf00              NOP                            ;753
                  |L14.90|
00005a  e000              B        |L14.94|
                  |L14.92|
00005c  2401              MOVS     r4,#1                 ;758
                  |L14.94|
00005e  bf00              NOP                            ;762
000060  2300              MOVS     r3,#0                 ;762
000062  2020              MOVS     r0,#0x20              ;762
000064  5483              STRB     r3,[r0,r2]            ;762
000066  bf00              NOP                            ;762
000068  4620              MOV      r0,r4                 ;764
00006a  e7d2              B        |L14.18|
;;;766    
                          ENDP


                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L89.24|
                  |L89.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L89.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L89.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_dma_c_c25f65ec____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f0xx_hal_dma_c_c25f65ec____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_dma_c_c25f65ec____REVSH|
#line 402
|__asm___19_stm32f0xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
