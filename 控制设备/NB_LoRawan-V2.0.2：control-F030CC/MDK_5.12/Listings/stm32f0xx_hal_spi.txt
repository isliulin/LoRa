; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_spi.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_spi.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_spi.c]
                          THUMB

                          AREA ||i.HAL_SPI_Abort||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Abort PROC
;;;1989   */
;;;1990   HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1991   {
000002  4604              MOV      r4,r0
;;;1992     HAL_StatusTypeDef errorcode;
;;;1993     __IO uint32_t count, resetcount;
;;;1994   
;;;1995     /* Initialized local variable  */
;;;1996     errorcode = HAL_OK;
000004  2500              MOVS     r5,#0
;;;1997     resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
000006  2118              MOVS     r1,#0x18
000008  4870              LDR      r0,|L1.460|
00000a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  4606              MOV      r6,r0
000012  217d              MOVS     r1,#0x7d
000014  00c9              LSLS     r1,r1,#3
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  2164              MOVS     r1,#0x64
00001c  4348              MULS     r0,r1,r0
00001e  9001              STR      r0,[sp,#4]
;;;1998     count = resetcount;
000020  9801              LDR      r0,[sp,#4]
000022  9002              STR      r0,[sp,#8]
;;;1999   
;;;2000     /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
;;;2001     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
000024  6820              LDR      r0,[r4,#0]
000026  6840              LDR      r0,[r0,#4]
000028  2180              MOVS     r1,#0x80
00002a  4008              ANDS     r0,r0,r1
00002c  2800              CMP      r0,#0
00002e  d013              BEQ      |L1.88|
;;;2002     {
;;;2003       hspi->TxISR = SPI_AbortTx_ISR;
000030  4867              LDR      r0,|L1.464|
000032  6520              STR      r0,[r4,#0x50]
;;;2004       /* Wait HAL_SPI_STATE_ABORT state */
;;;2005       do
000034  bf00              NOP      
                  |L1.54|
;;;2006       {
;;;2007         if (count-- == 0U)
000036  9802              LDR      r0,[sp,#8]
000038  1e41              SUBS     r1,r0,#1
00003a  9102              STR      r1,[sp,#8]
00003c  2800              CMP      r0,#0
00003e  d104              BNE      |L1.74|
;;;2008         {
;;;2009           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
000040  6e20              LDR      r0,[r4,#0x60]
000042  2140              MOVS     r1,#0x40
000044  4308              ORRS     r0,r0,r1
000046  6620              STR      r0,[r4,#0x60]
;;;2010           break;
000048  e003              B        |L1.82|
                  |L1.74|
;;;2011         }
;;;2012       }
;;;2013       while (hspi->State != HAL_SPI_STATE_ABORT);
00004a  205d              MOVS     r0,#0x5d
00004c  5d00              LDRB     r0,[r0,r4]
00004e  2807              CMP      r0,#7
000050  d1f1              BNE      |L1.54|
                  |L1.82|
000052  bf00              NOP                            ;2010
;;;2014       /* Reset Timeout Counter */
;;;2015       count = resetcount;
000054  9801              LDR      r0,[sp,#4]
000056  9002              STR      r0,[sp,#8]
                  |L1.88|
;;;2016     }
;;;2017   
;;;2018     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
000058  6820              LDR      r0,[r4,#0]
00005a  6840              LDR      r0,[r0,#4]
00005c  2140              MOVS     r1,#0x40
00005e  4008              ANDS     r0,r0,r1
000060  2800              CMP      r0,#0
000062  d013              BEQ      |L1.140|
;;;2019     {
;;;2020       hspi->RxISR = SPI_AbortRx_ISR;
000064  485b              LDR      r0,|L1.468|
000066  64e0              STR      r0,[r4,#0x4c]
;;;2021       /* Wait HAL_SPI_STATE_ABORT state */
;;;2022       do
000068  bf00              NOP      
                  |L1.106|
;;;2023       {
;;;2024         if (count-- == 0U)
00006a  9802              LDR      r0,[sp,#8]
00006c  1e41              SUBS     r1,r0,#1
00006e  9102              STR      r1,[sp,#8]
000070  2800              CMP      r0,#0
000072  d104              BNE      |L1.126|
;;;2025         {
;;;2026           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
000074  6e20              LDR      r0,[r4,#0x60]
000076  2140              MOVS     r1,#0x40
000078  4308              ORRS     r0,r0,r1
00007a  6620              STR      r0,[r4,#0x60]
;;;2027           break;
00007c  e003              B        |L1.134|
                  |L1.126|
;;;2028         }
;;;2029       }
;;;2030       while (hspi->State != HAL_SPI_STATE_ABORT);
00007e  205d              MOVS     r0,#0x5d
000080  5d00              LDRB     r0,[r0,r4]
000082  2807              CMP      r0,#7
000084  d1f1              BNE      |L1.106|
                  |L1.134|
000086  bf00              NOP                            ;2027
;;;2031       /* Reset Timeout Counter */
;;;2032       count = resetcount;
000088  9801              LDR      r0,[sp,#4]
00008a  9002              STR      r0,[sp,#8]
                  |L1.140|
;;;2033     }
;;;2034   
;;;2035     /* Clear ERRIE interrupts in case of DMA Mode */
;;;2036     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
00008c  6820              LDR      r0,[r4,#0]
00008e  6840              LDR      r0,[r0,#4]
000090  2120              MOVS     r1,#0x20
000092  4388              BICS     r0,r0,r1
000094  6821              LDR      r1,[r4,#0]
000096  6048              STR      r0,[r1,#4]
;;;2037   
;;;2038     /* Disable the SPI DMA Tx or SPI DMA Rx request if enabled */
;;;2039     if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
000098  6820              LDR      r0,[r4,#0]
00009a  6840              LDR      r0,[r0,#4]
00009c  2102              MOVS     r1,#2
00009e  4008              ANDS     r0,r0,r1
0000a0  2800              CMP      r0,#0
0000a2  d105              BNE      |L1.176|
0000a4  6820              LDR      r0,[r4,#0]
0000a6  6840              LDR      r0,[r0,#4]
0000a8  07c0              LSLS     r0,r0,#31
0000aa  0fc0              LSRS     r0,r0,#31
0000ac  2800              CMP      r0,#0
0000ae  d069              BEQ      |L1.388|
                  |L1.176|
;;;2040     {
;;;2041       /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
;;;2042       if (hspi->hdmatx != NULL)
0000b0  6d60              LDR      r0,[r4,#0x54]
0000b2  2800              CMP      r0,#0
0000b4  d030              BEQ      |L1.280|
;;;2043       {
;;;2044         /* Set the SPI DMA Abort callback :
;;;2045         will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
;;;2046         hspi->hdmatx->XferAbortCallback = NULL;
0000b6  2000              MOVS     r0,#0
0000b8  6d61              LDR      r1,[r4,#0x54]
0000ba  6348              STR      r0,[r1,#0x34]
;;;2047   
;;;2048         /* Abort DMA Tx Handle linked to SPI Peripheral */
;;;2049         if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
0000bc  6d60              LDR      r0,[r4,#0x54]
0000be  f7fffffe          BL       HAL_DMA_Abort
0000c2  2800              CMP      r0,#0
0000c4  d001              BEQ      |L1.202|
;;;2050         {
;;;2051           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
0000c6  2040              MOVS     r0,#0x40
0000c8  6620              STR      r0,[r4,#0x60]
                  |L1.202|
;;;2052         }
;;;2053   
;;;2054         /* Disable Tx DMA Request */
;;;2055         CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
0000ca  6820              LDR      r0,[r4,#0]
0000cc  6840              LDR      r0,[r0,#4]
0000ce  2102              MOVS     r1,#2
0000d0  4388              BICS     r0,r0,r1
0000d2  6821              LDR      r1,[r4,#0]
0000d4  6048              STR      r0,[r1,#4]
;;;2056   
;;;2057         if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
0000d6  f7fffffe          BL       HAL_GetTick
0000da  4606              MOV      r6,r0
0000dc  4632              MOV      r2,r6
0000de  2164              MOVS     r1,#0x64
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       SPI_EndRxTxTransaction
0000e6  2800              CMP      r0,#0
0000e8  d001              BEQ      |L1.238|
;;;2058         {
;;;2059           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
0000ea  2040              MOVS     r0,#0x40
0000ec  6620              STR      r0,[r4,#0x60]
                  |L1.238|
;;;2060         }
;;;2061   
;;;2062         /* Disable SPI Peripheral */
;;;2063         __HAL_SPI_DISABLE(hspi);
0000ee  6820              LDR      r0,[r4,#0]
0000f0  6800              LDR      r0,[r0,#0]
0000f2  2140              MOVS     r1,#0x40
0000f4  4388              BICS     r0,r0,r1
0000f6  6821              LDR      r1,[r4,#0]
0000f8  6008              STR      r0,[r1,#0]
;;;2064   
;;;2065         /* Empty the FRLVL fifo */
;;;2066         if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
0000fa  f7fffffe          BL       HAL_GetTick
0000fe  4606              MOV      r6,r0
000100  2364              MOVS     r3,#0x64
000102  2200              MOVS     r2,#0
000104  2103              MOVS     r1,#3
000106  0249              LSLS     r1,r1,#9
000108  9000              STR      r0,[sp,#0]
00010a  4620              MOV      r0,r4
00010c  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000110  2800              CMP      r0,#0
000112  d001              BEQ      |L1.280|
;;;2067         {
;;;2068           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000114  2040              MOVS     r0,#0x40
000116  6620              STR      r0,[r4,#0x60]
                  |L1.280|
;;;2069         }
;;;2070       }
;;;2071       /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
;;;2072       if (hspi->hdmarx != NULL)
000118  6da0              LDR      r0,[r4,#0x58]
00011a  2800              CMP      r0,#0
00011c  d032              BEQ      |L1.388|
;;;2073       {
;;;2074         /* Set the SPI DMA Abort callback :
;;;2075         will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
;;;2076         hspi->hdmarx->XferAbortCallback = NULL;
00011e  2000              MOVS     r0,#0
000120  6da1              LDR      r1,[r4,#0x58]
000122  6348              STR      r0,[r1,#0x34]
;;;2077   
;;;2078         /* Abort DMA Rx Handle linked to SPI Peripheral */
;;;2079         if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
000124  6da0              LDR      r0,[r4,#0x58]
000126  f7fffffe          BL       HAL_DMA_Abort
00012a  2800              CMP      r0,#0
00012c  d001              BEQ      |L1.306|
;;;2080         {
;;;2081           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
00012e  2040              MOVS     r0,#0x40
000130  6620              STR      r0,[r4,#0x60]
                  |L1.306|
;;;2082         }
;;;2083   
;;;2084         /* Disable peripheral */
;;;2085         __HAL_SPI_DISABLE(hspi);
000132  6820              LDR      r0,[r4,#0]
000134  6800              LDR      r0,[r0,#0]
000136  2140              MOVS     r1,#0x40
000138  4388              BICS     r0,r0,r1
00013a  6821              LDR      r1,[r4,#0]
00013c  6008              STR      r0,[r1,#0]
;;;2086   
;;;2087         /* Control the BSY flag */
;;;2088         if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
00013e  f7fffffe          BL       HAL_GetTick
000142  4606              MOV      r6,r0
000144  2364              MOVS     r3,#0x64
000146  2200              MOVS     r2,#0
000148  2180              MOVS     r1,#0x80
00014a  9000              STR      r0,[sp,#0]
00014c  4620              MOV      r0,r4
00014e  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000152  2800              CMP      r0,#0
000154  d001              BEQ      |L1.346|
;;;2089         {
;;;2090           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000156  2040              MOVS     r0,#0x40
000158  6620              STR      r0,[r4,#0x60]
                  |L1.346|
;;;2091         }
;;;2092   
;;;2093         /* Empty the FRLVL fifo */
;;;2094         if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
00015a  f7fffffe          BL       HAL_GetTick
00015e  4606              MOV      r6,r0
000160  2364              MOVS     r3,#0x64
000162  2200              MOVS     r2,#0
000164  2103              MOVS     r1,#3
000166  0249              LSLS     r1,r1,#9
000168  9000              STR      r0,[sp,#0]
00016a  4620              MOV      r0,r4
00016c  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000170  2800              CMP      r0,#0
000172  d001              BEQ      |L1.376|
;;;2095         {
;;;2096           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000174  2040              MOVS     r0,#0x40
000176  6620              STR      r0,[r4,#0x60]
                  |L1.376|
;;;2097         }
;;;2098   
;;;2099         /* Disable Rx DMA Request */
;;;2100         CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
000178  6820              LDR      r0,[r4,#0]
00017a  6840              LDR      r0,[r0,#4]
00017c  0840              LSRS     r0,r0,#1
00017e  0040              LSLS     r0,r0,#1
000180  6821              LDR      r1,[r4,#0]
000182  6048              STR      r0,[r1,#4]
                  |L1.388|
;;;2101       }
;;;2102     }
;;;2103     /* Reset Tx and Rx transfer counters */
;;;2104     hspi->RxXferCount = 0U;
000184  2100              MOVS     r1,#0
000186  2046              MOVS     r0,#0x46
000188  5301              STRH     r1,[r0,r4]
;;;2105     hspi->TxXferCount = 0U;
00018a  2000              MOVS     r0,#0
00018c  87e0              STRH     r0,[r4,#0x3e]
;;;2106   
;;;2107     /* Check error during Abort procedure */
;;;2108     if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
00018e  6e20              LDR      r0,[r4,#0x60]
000190  2840              CMP      r0,#0x40
000192  d101              BNE      |L1.408|
;;;2109     {
;;;2110       /* return HAL_Error in case of error during Abort procedure */
;;;2111       errorcode = HAL_ERROR;
000194  2501              MOVS     r5,#1
000196  e001              B        |L1.412|
                  |L1.408|
;;;2112     }
;;;2113     else
;;;2114     {
;;;2115       /* Reset errorCode */
;;;2116       hspi->ErrorCode = HAL_SPI_ERROR_NONE;
000198  2000              MOVS     r0,#0
00019a  6620              STR      r0,[r4,#0x60]
                  |L1.412|
;;;2117     }
;;;2118   
;;;2119     /* Clear the Error flags in the SR register */
;;;2120     __HAL_SPI_CLEAR_OVRFLAG(hspi);
00019c  bf00              NOP      
00019e  2000              MOVS     r0,#0
0001a0  9000              STR      r0,[sp,#0]
0001a2  6820              LDR      r0,[r4,#0]
0001a4  68c0              LDR      r0,[r0,#0xc]
0001a6  9000              STR      r0,[sp,#0]
0001a8  6820              LDR      r0,[r4,#0]
0001aa  6880              LDR      r0,[r0,#8]
0001ac  9000              STR      r0,[sp,#0]
0001ae  bf00              NOP      
0001b0  bf00              NOP      
;;;2121     __HAL_SPI_CLEAR_FREFLAG(hspi);
0001b2  bf00              NOP      
0001b4  2000              MOVS     r0,#0
0001b6  9000              STR      r0,[sp,#0]
0001b8  6820              LDR      r0,[r4,#0]
0001ba  6880              LDR      r0,[r0,#8]
0001bc  9000              STR      r0,[sp,#0]
0001be  bf00              NOP      
0001c0  bf00              NOP      
;;;2122   
;;;2123     /* Restore hspi->state to ready */
;;;2124     hspi->State = HAL_SPI_STATE_READY;
0001c2  2101              MOVS     r1,#1
0001c4  205d              MOVS     r0,#0x5d
0001c6  5501              STRB     r1,[r0,r4]
;;;2125   
;;;2126     return errorcode;
0001c8  4628              MOV      r0,r5
;;;2127   }
0001ca  bdfe              POP      {r1-r7,pc}
;;;2128   
                          ENDP

                  |L1.460|
                          DCD      SystemCoreClock
                  |L1.464|
                          DCD      SPI_AbortTx_ISR
                  |L1.468|
                          DCD      SPI_AbortRx_ISR

                          AREA ||i.HAL_SPI_AbortCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_AbortCpltCallback PROC
;;;2614     */
;;;2615   __weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;2616   {
;;;2617     /* Prevent unused argument(s) compilation warning */
;;;2618     UNUSED(hspi);
;;;2619   
;;;2620     /* NOTE : This function should not be modified, when the callback is needed,
;;;2621               the HAL_SPI_AbortCpltCallback can be implemented in the user file.
;;;2622      */
;;;2623   }
;;;2624   
                          ENDP


                          AREA ||i.HAL_SPI_Abort_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Abort_IT PROC
;;;2143   */
;;;2144   HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2145   {
000002  4604              MOV      r4,r0
;;;2146     HAL_StatusTypeDef errorcode;
;;;2147     uint32_t abortcplt ;
;;;2148     __IO uint32_t count, resetcount;
;;;2149   
;;;2150     /* Initialized local variable  */
;;;2151     errorcode = HAL_OK;
000004  2500              MOVS     r5,#0
;;;2152     abortcplt = 1U;
000006  2601              MOVS     r6,#1
;;;2153     resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
000008  2118              MOVS     r1,#0x18
00000a  4873              LDR      r0,|L3.472|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  4607              MOV      r7,r0
000014  217d              MOVS     r1,#0x7d
000016  00c9              LSLS     r1,r1,#3
000018  f7fffffe          BL       __aeabi_uidivmod
00001c  2164              MOVS     r1,#0x64
00001e  4348              MULS     r0,r1,r0
000020  9001              STR      r0,[sp,#4]
;;;2154     count = resetcount;
000022  9801              LDR      r0,[sp,#4]
000024  9002              STR      r0,[sp,#8]
;;;2155   
;;;2156     /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
;;;2157     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  2180              MOVS     r1,#0x80
00002c  4008              ANDS     r0,r0,r1
00002e  2800              CMP      r0,#0
000030  d013              BEQ      |L3.90|
;;;2158     {
;;;2159       hspi->TxISR = SPI_AbortTx_ISR;
000032  486a              LDR      r0,|L3.476|
000034  6520              STR      r0,[r4,#0x50]
;;;2160       /* Wait HAL_SPI_STATE_ABORT state */
;;;2161       do
000036  bf00              NOP      
                  |L3.56|
;;;2162       {
;;;2163         if (count-- == 0U)
000038  9802              LDR      r0,[sp,#8]
00003a  1e41              SUBS     r1,r0,#1
00003c  9102              STR      r1,[sp,#8]
00003e  2800              CMP      r0,#0
000040  d104              BNE      |L3.76|
;;;2164         {
;;;2165           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
000042  6e20              LDR      r0,[r4,#0x60]
000044  2140              MOVS     r1,#0x40
000046  4308              ORRS     r0,r0,r1
000048  6620              STR      r0,[r4,#0x60]
;;;2166           break;
00004a  e003              B        |L3.84|
                  |L3.76|
;;;2167         }
;;;2168       }
;;;2169       while (hspi->State != HAL_SPI_STATE_ABORT);
00004c  205d              MOVS     r0,#0x5d
00004e  5d00              LDRB     r0,[r0,r4]
000050  2807              CMP      r0,#7
000052  d1f1              BNE      |L3.56|
                  |L3.84|
000054  bf00              NOP                            ;2166
;;;2170       /* Reset Timeout Counter */
;;;2171       count = resetcount;
000056  9801              LDR      r0,[sp,#4]
000058  9002              STR      r0,[sp,#8]
                  |L3.90|
;;;2172     }
;;;2173   
;;;2174     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
00005a  6820              LDR      r0,[r4,#0]
00005c  6840              LDR      r0,[r0,#4]
00005e  2140              MOVS     r1,#0x40
000060  4008              ANDS     r0,r0,r1
000062  2800              CMP      r0,#0
000064  d013              BEQ      |L3.142|
;;;2175     {
;;;2176       hspi->RxISR = SPI_AbortRx_ISR;
000066  485e              LDR      r0,|L3.480|
000068  64e0              STR      r0,[r4,#0x4c]
;;;2177       /* Wait HAL_SPI_STATE_ABORT state */
;;;2178       do
00006a  bf00              NOP      
                  |L3.108|
;;;2179       {
;;;2180         if (count-- == 0U)
00006c  9802              LDR      r0,[sp,#8]
00006e  1e41              SUBS     r1,r0,#1
000070  9102              STR      r1,[sp,#8]
000072  2800              CMP      r0,#0
000074  d104              BNE      |L3.128|
;;;2181         {
;;;2182           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
000076  6e20              LDR      r0,[r4,#0x60]
000078  2140              MOVS     r1,#0x40
00007a  4308              ORRS     r0,r0,r1
00007c  6620              STR      r0,[r4,#0x60]
;;;2183           break;
00007e  e003              B        |L3.136|
                  |L3.128|
;;;2184         }
;;;2185       }
;;;2186       while (hspi->State != HAL_SPI_STATE_ABORT);
000080  205d              MOVS     r0,#0x5d
000082  5d00              LDRB     r0,[r0,r4]
000084  2807              CMP      r0,#7
000086  d1f1              BNE      |L3.108|
                  |L3.136|
000088  bf00              NOP                            ;2183
;;;2187       /* Reset Timeout Counter */
;;;2188       count = resetcount;
00008a  9801              LDR      r0,[sp,#4]
00008c  9002              STR      r0,[sp,#8]
                  |L3.142|
;;;2189     }
;;;2190   
;;;2191     /* Clear ERRIE interrupts in case of DMA Mode */
;;;2192     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
00008e  6820              LDR      r0,[r4,#0]
000090  6840              LDR      r0,[r0,#4]
000092  2120              MOVS     r1,#0x20
000094  4388              BICS     r0,r0,r1
000096  6821              LDR      r1,[r4,#0]
000098  6048              STR      r0,[r1,#4]
;;;2193   
;;;2194     /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
;;;2195        before any call to DMA Abort functions */
;;;2196     /* DMA Tx Handle is valid */
;;;2197     if (hspi->hdmatx != NULL)
00009a  6d60              LDR      r0,[r4,#0x54]
00009c  2800              CMP      r0,#0
00009e  d00c              BEQ      |L3.186|
;;;2198     {
;;;2199       /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
;;;2200          Otherwise, set it to NULL */
;;;2201       if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
0000a0  6820              LDR      r0,[r4,#0]
0000a2  6840              LDR      r0,[r0,#4]
0000a4  2102              MOVS     r1,#2
0000a6  4008              ANDS     r0,r0,r1
0000a8  2800              CMP      r0,#0
0000aa  d003              BEQ      |L3.180|
;;;2202       {
;;;2203         hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
0000ac  484d              LDR      r0,|L3.484|
0000ae  6d61              LDR      r1,[r4,#0x54]
0000b0  6348              STR      r0,[r1,#0x34]
0000b2  e002              B        |L3.186|
                  |L3.180|
;;;2204       }
;;;2205       else
;;;2206       {
;;;2207         hspi->hdmatx->XferAbortCallback = NULL;
0000b4  2000              MOVS     r0,#0
0000b6  6d61              LDR      r1,[r4,#0x54]
0000b8  6348              STR      r0,[r1,#0x34]
                  |L3.186|
;;;2208       }
;;;2209     }
;;;2210     /* DMA Rx Handle is valid */
;;;2211     if (hspi->hdmarx != NULL)
0000ba  6da0              LDR      r0,[r4,#0x58]
0000bc  2800              CMP      r0,#0
0000be  d00c              BEQ      |L3.218|
;;;2212     {
;;;2213       /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
;;;2214          Otherwise, set it to NULL */
;;;2215       if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
0000c0  6820              LDR      r0,[r4,#0]
0000c2  6840              LDR      r0,[r0,#4]
0000c4  07c0              LSLS     r0,r0,#31
0000c6  0fc0              LSRS     r0,r0,#31
0000c8  2800              CMP      r0,#0
0000ca  d003              BEQ      |L3.212|
;;;2216       {
;;;2217         hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
0000cc  4846              LDR      r0,|L3.488|
0000ce  6da1              LDR      r1,[r4,#0x58]
0000d0  6348              STR      r0,[r1,#0x34]
0000d2  e002              B        |L3.218|
                  |L3.212|
;;;2218       }
;;;2219       else
;;;2220       {
;;;2221         hspi->hdmarx->XferAbortCallback = NULL;
0000d4  2000              MOVS     r0,#0
0000d6  6da1              LDR      r1,[r4,#0x58]
0000d8  6348              STR      r0,[r1,#0x34]
                  |L3.218|
;;;2222       }
;;;2223     }
;;;2224   
;;;2225     /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
;;;2226     if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) && (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
0000da  6820              LDR      r0,[r4,#0]
0000dc  6840              LDR      r0,[r0,#4]
0000de  2102              MOVS     r1,#2
0000e0  4008              ANDS     r0,r0,r1
0000e2  2800              CMP      r0,#0
0000e4  d024              BEQ      |L3.304|
0000e6  6820              LDR      r0,[r4,#0]
0000e8  6840              LDR      r0,[r0,#4]
0000ea  07c0              LSLS     r0,r0,#31
0000ec  0fc0              LSRS     r0,r0,#31
0000ee  2800              CMP      r0,#0
0000f0  d01e              BEQ      |L3.304|
;;;2227     {
;;;2228       /* Abort the SPI DMA Tx Stream/Channel */
;;;2229       if (hspi->hdmatx != NULL)
0000f2  6d60              LDR      r0,[r4,#0x54]
0000f4  2800              CMP      r0,#0
0000f6  d00b              BEQ      |L3.272|
;;;2230       {
;;;2231         /* Abort DMA Tx Handle linked to SPI Peripheral */
;;;2232         if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
0000f8  6d60              LDR      r0,[r4,#0x54]
0000fa  f7fffffe          BL       HAL_DMA_Abort_IT
0000fe  2800              CMP      r0,#0
000100  d005              BEQ      |L3.270|
;;;2233         {
;;;2234           hspi->hdmatx->XferAbortCallback = NULL;
000102  2000              MOVS     r0,#0
000104  6d61              LDR      r1,[r4,#0x54]
000106  6348              STR      r0,[r1,#0x34]
;;;2235           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000108  2040              MOVS     r0,#0x40
00010a  6620              STR      r0,[r4,#0x60]
00010c  e000              B        |L3.272|
                  |L3.270|
;;;2236         }
;;;2237         else
;;;2238         {
;;;2239           abortcplt = 0U;
00010e  2600              MOVS     r6,#0
                  |L3.272|
;;;2240         }
;;;2241       }
;;;2242       /* Abort the SPI DMA Rx Stream/Channel */
;;;2243       if (hspi->hdmarx != NULL)
000110  6da0              LDR      r0,[r4,#0x58]
000112  2800              CMP      r0,#0
000114  d00c              BEQ      |L3.304|
;;;2244       {
;;;2245         /* Abort DMA Rx Handle linked to SPI Peripheral */
;;;2246         if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
000116  6da0              LDR      r0,[r4,#0x58]
000118  f7fffffe          BL       HAL_DMA_Abort_IT
00011c  2800              CMP      r0,#0
00011e  d006              BEQ      |L3.302|
;;;2247         {
;;;2248           hspi->hdmarx->XferAbortCallback = NULL;
000120  2000              MOVS     r0,#0
000122  6da1              LDR      r1,[r4,#0x58]
000124  6348              STR      r0,[r1,#0x34]
;;;2249           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000126  2040              MOVS     r0,#0x40
000128  6620              STR      r0,[r4,#0x60]
;;;2250           abortcplt = 1U;
00012a  2601              MOVS     r6,#1
00012c  e000              B        |L3.304|
                  |L3.302|
;;;2251         }
;;;2252         else
;;;2253         {
;;;2254           abortcplt = 0U;
00012e  2600              MOVS     r6,#0
                  |L3.304|
;;;2255         }
;;;2256       }
;;;2257     }
;;;2258   
;;;2259     /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
;;;2260     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
000130  6820              LDR      r0,[r4,#0]
000132  6840              LDR      r0,[r0,#4]
000134  2102              MOVS     r1,#2
000136  4008              ANDS     r0,r0,r1
000138  2800              CMP      r0,#0
00013a  d00e              BEQ      |L3.346|
;;;2261     {
;;;2262       /* Abort the SPI DMA Tx Stream/Channel */
;;;2263       if (hspi->hdmatx != NULL)
00013c  6d60              LDR      r0,[r4,#0x54]
00013e  2800              CMP      r0,#0
000140  d00b              BEQ      |L3.346|
;;;2264       {
;;;2265         /* Abort DMA Tx Handle linked to SPI Peripheral */
;;;2266         if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
000142  6d60              LDR      r0,[r4,#0x54]
000144  f7fffffe          BL       HAL_DMA_Abort_IT
000148  2800              CMP      r0,#0
00014a  d005              BEQ      |L3.344|
;;;2267         {
;;;2268           hspi->hdmatx->XferAbortCallback = NULL;
00014c  2000              MOVS     r0,#0
00014e  6d61              LDR      r1,[r4,#0x54]
000150  6348              STR      r0,[r1,#0x34]
;;;2269           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000152  2040              MOVS     r0,#0x40
000154  6620              STR      r0,[r4,#0x60]
000156  e000              B        |L3.346|
                  |L3.344|
;;;2270         }
;;;2271         else
;;;2272         {
;;;2273           abortcplt = 0U;
000158  2600              MOVS     r6,#0
                  |L3.346|
;;;2274         }
;;;2275       }
;;;2276     }
;;;2277     /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
;;;2278     if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
00015a  6820              LDR      r0,[r4,#0]
00015c  6840              LDR      r0,[r0,#4]
00015e  07c0              LSLS     r0,r0,#31
000160  0fc0              LSRS     r0,r0,#31
000162  2800              CMP      r0,#0
000164  d00e              BEQ      |L3.388|
;;;2279     {
;;;2280       /* Abort the SPI DMA Rx Stream/Channel */
;;;2281       if (hspi->hdmarx != NULL)
000166  6da0              LDR      r0,[r4,#0x58]
000168  2800              CMP      r0,#0
00016a  d00b              BEQ      |L3.388|
;;;2282       {
;;;2283         /* Abort DMA Rx Handle linked to SPI Peripheral */
;;;2284         if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
00016c  6da0              LDR      r0,[r4,#0x58]
00016e  f7fffffe          BL       HAL_DMA_Abort_IT
000172  2800              CMP      r0,#0
000174  d005              BEQ      |L3.386|
;;;2285         {
;;;2286           hspi->hdmarx->XferAbortCallback = NULL;
000176  2000              MOVS     r0,#0
000178  6da1              LDR      r1,[r4,#0x58]
00017a  6348              STR      r0,[r1,#0x34]
;;;2287           hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
00017c  2040              MOVS     r0,#0x40
00017e  6620              STR      r0,[r4,#0x60]
000180  e000              B        |L3.388|
                  |L3.386|
;;;2288         }
;;;2289         else
;;;2290         {
;;;2291           abortcplt = 0U;
000182  2600              MOVS     r6,#0
                  |L3.388|
;;;2292         }
;;;2293       }
;;;2294     }
;;;2295   
;;;2296     if (abortcplt == 1U)
000184  2e01              CMP      r6,#1
000186  d124              BNE      |L3.466|
;;;2297     {
;;;2298       /* Reset Tx and Rx transfer counters */
;;;2299       hspi->RxXferCount = 0U;
000188  2100              MOVS     r1,#0
00018a  2046              MOVS     r0,#0x46
00018c  5301              STRH     r1,[r0,r4]
;;;2300       hspi->TxXferCount = 0U;
00018e  2000              MOVS     r0,#0
000190  87e0              STRH     r0,[r4,#0x3e]
;;;2301   
;;;2302       /* Check error during Abort procedure */
;;;2303       if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
000192  6e20              LDR      r0,[r4,#0x60]
000194  2840              CMP      r0,#0x40
000196  d101              BNE      |L3.412|
;;;2304       {
;;;2305         /* return HAL_Error in case of error during Abort procedure */
;;;2306         errorcode = HAL_ERROR;
000198  2501              MOVS     r5,#1
00019a  e001              B        |L3.416|
                  |L3.412|
;;;2307       }
;;;2308       else
;;;2309       {
;;;2310         /* Reset errorCode */
;;;2311         hspi->ErrorCode = HAL_SPI_ERROR_NONE;
00019c  2000              MOVS     r0,#0
00019e  6620              STR      r0,[r4,#0x60]
                  |L3.416|
;;;2312       }
;;;2313   
;;;2314       /* Clear the Error flags in the SR register */
;;;2315       __HAL_SPI_CLEAR_OVRFLAG(hspi);
0001a0  bf00              NOP      
0001a2  2000              MOVS     r0,#0
0001a4  9000              STR      r0,[sp,#0]
0001a6  6820              LDR      r0,[r4,#0]
0001a8  68c0              LDR      r0,[r0,#0xc]
0001aa  9000              STR      r0,[sp,#0]
0001ac  6820              LDR      r0,[r4,#0]
0001ae  6880              LDR      r0,[r0,#8]
0001b0  9000              STR      r0,[sp,#0]
0001b2  bf00              NOP      
0001b4  bf00              NOP      
;;;2316       __HAL_SPI_CLEAR_FREFLAG(hspi);
0001b6  bf00              NOP      
0001b8  2000              MOVS     r0,#0
0001ba  9000              STR      r0,[sp,#0]
0001bc  6820              LDR      r0,[r4,#0]
0001be  6880              LDR      r0,[r0,#8]
0001c0  9000              STR      r0,[sp,#0]
0001c2  bf00              NOP      
0001c4  bf00              NOP      
;;;2317   
;;;2318       /* Restore hspi->State to Ready */
;;;2319       hspi->State = HAL_SPI_STATE_READY;
0001c6  2101              MOVS     r1,#1
0001c8  205d              MOVS     r0,#0x5d
0001ca  5501              STRB     r1,[r0,r4]
;;;2320   
;;;2321       /* As no DMA to be aborted, call directly user Abort complete callback */
;;;2322       HAL_SPI_AbortCpltCallback(hspi);
0001cc  4620              MOV      r0,r4
0001ce  f7fffffe          BL       HAL_SPI_AbortCpltCallback
                  |L3.466|
;;;2323     }
;;;2324   
;;;2325     return errorcode;
0001d2  4628              MOV      r0,r5
;;;2326   }
0001d4  bdfe              POP      {r1-r7,pc}
;;;2327   
                          ENDP

0001d6  0000              DCW      0x0000
                  |L3.472|
                          DCD      SystemCoreClock
                  |L3.476|
                          DCD      SPI_AbortTx_ISR
                  |L3.480|
                          DCD      SPI_AbortRx_ISR
                  |L3.484|
                          DCD      SPI_DMATxAbortCallback
                  |L3.488|
                          DCD      SPI_DMARxAbortCallback

                          AREA ||i.HAL_SPI_DMAPause||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAPause PROC
;;;2333     */
;;;2334   HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
000000  4601              MOV      r1,r0
;;;2335   {
;;;2336     /* Process Locked */
;;;2337     __HAL_LOCK(hspi);
000002  bf00              NOP      
000004  205c              MOVS     r0,#0x5c
000006  5c40              LDRB     r0,[r0,r1]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L4.16|
00000c  2002              MOVS     r0,#2
                  |L4.14|
;;;2338   
;;;2339     /* Disable the SPI DMA Tx & Rx requests */
;;;2340     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
;;;2341   
;;;2342     /* Process Unlocked */
;;;2343     __HAL_UNLOCK(hspi);
;;;2344   
;;;2345     return HAL_OK;
;;;2346   }
00000e  4770              BX       lr
                  |L4.16|
000010  2201              MOVS     r2,#1                 ;2337
000012  205c              MOVS     r0,#0x5c              ;2337
000014  5442              STRB     r2,[r0,r1]            ;2337
000016  bf00              NOP                            ;2337
000018  6808              LDR      r0,[r1,#0]            ;2340
00001a  6840              LDR      r0,[r0,#4]            ;2340
00001c  0880              LSRS     r0,r0,#2              ;2340
00001e  0080              LSLS     r0,r0,#2              ;2340
000020  680a              LDR      r2,[r1,#0]            ;2340
000022  6050              STR      r0,[r2,#4]            ;2340
000024  bf00              NOP                            ;2343
000026  2200              MOVS     r2,#0                 ;2343
000028  205c              MOVS     r0,#0x5c              ;2343
00002a  5442              STRB     r2,[r0,r1]            ;2343
00002c  bf00              NOP                            ;2343
00002e  2000              MOVS     r0,#0                 ;2345
000030  e7ed              B        |L4.14|
;;;2347   
                          ENDP


                          AREA ||i.HAL_SPI_DMAResume||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAResume PROC
;;;2353     */
;;;2354   HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
000000  4601              MOV      r1,r0
;;;2355   {
;;;2356     /* Process Locked */
;;;2357     __HAL_LOCK(hspi);
000002  bf00              NOP      
000004  205c              MOVS     r0,#0x5c
000006  5c40              LDRB     r0,[r0,r1]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L5.16|
00000c  2002              MOVS     r0,#2
                  |L5.14|
;;;2358   
;;;2359     /* Enable the SPI DMA Tx & Rx requests */
;;;2360     SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
;;;2361   
;;;2362     /* Process Unlocked */
;;;2363     __HAL_UNLOCK(hspi);
;;;2364   
;;;2365     return HAL_OK;
;;;2366   }
00000e  4770              BX       lr
                  |L5.16|
000010  2201              MOVS     r2,#1                 ;2357
000012  205c              MOVS     r0,#0x5c              ;2357
000014  5442              STRB     r2,[r0,r1]            ;2357
000016  bf00              NOP                            ;2357
000018  6808              LDR      r0,[r1,#0]            ;2360
00001a  6840              LDR      r0,[r0,#4]            ;2360
00001c  2203              MOVS     r2,#3                 ;2360
00001e  4310              ORRS     r0,r0,r2              ;2360
000020  680a              LDR      r2,[r1,#0]            ;2360
000022  6050              STR      r0,[r2,#4]            ;2360
000024  bf00              NOP                            ;2363
000026  2200              MOVS     r2,#0                 ;2363
000028  205c              MOVS     r0,#0x5c              ;2363
00002a  5442              STRB     r2,[r0,r1]            ;2363
00002c  bf00              NOP                            ;2363
00002e  2000              MOVS     r0,#0                 ;2365
000030  e7ed              B        |L5.14|
;;;2367   
                          ENDP


                          AREA ||i.HAL_SPI_DMAStop||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAStop PROC
;;;2373     */
;;;2374   HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;2375   {
000002  4604              MOV      r4,r0
;;;2376     /* The Lock is not implemented on this API to allow the user application
;;;2377        to call the HAL SPI API under callbacks HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback():
;;;2378        when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
;;;2379        and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
;;;2380        */
;;;2381   
;;;2382     /* Abort the SPI DMA tx Stream/Channel  */
;;;2383     if (hspi->hdmatx != NULL)
000004  6d60              LDR      r0,[r4,#0x54]
000006  2800              CMP      r0,#0
000008  d002              BEQ      |L6.16|
;;;2384     {
;;;2385       HAL_DMA_Abort(hspi->hdmatx);
00000a  6d60              LDR      r0,[r4,#0x54]
00000c  f7fffffe          BL       HAL_DMA_Abort
                  |L6.16|
;;;2386     }
;;;2387     /* Abort the SPI DMA rx Stream/Channel  */
;;;2388     if (hspi->hdmarx != NULL)
000010  6da0              LDR      r0,[r4,#0x58]
000012  2800              CMP      r0,#0
000014  d002              BEQ      |L6.28|
;;;2389     {
;;;2390       HAL_DMA_Abort(hspi->hdmarx);
000016  6da0              LDR      r0,[r4,#0x58]
000018  f7fffffe          BL       HAL_DMA_Abort
                  |L6.28|
;;;2391     }
;;;2392   
;;;2393     /* Disable the SPI DMA Tx & Rx requests */
;;;2394     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
00001c  6820              LDR      r0,[r4,#0]
00001e  6840              LDR      r0,[r0,#4]
000020  0880              LSRS     r0,r0,#2
000022  0080              LSLS     r0,r0,#2
000024  6821              LDR      r1,[r4,#0]
000026  6048              STR      r0,[r1,#4]
;;;2395     hspi->State = HAL_SPI_STATE_READY;
000028  2101              MOVS     r1,#1
00002a  205d              MOVS     r0,#0x5d
00002c  5501              STRB     r1,[r0,r4]
;;;2396     return HAL_OK;
00002e  2000              MOVS     r0,#0
;;;2397   }
000030  bd10              POP      {r4,pc}
;;;2398   
                          ENDP


                          AREA ||i.HAL_SPI_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DeInit PROC
;;;405      */
;;;406    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;407    {
000002  4604              MOV      r4,r0
;;;408      /* Check the SPI handle allocation */
;;;409      if (hspi == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L7.12|
;;;410      {
;;;411        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L7.10|
;;;412      }
;;;413    
;;;414      /* Check SPI Instance parameter */
;;;415      assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
;;;416    
;;;417      hspi->State = HAL_SPI_STATE_BUSY;
;;;418    
;;;419      /* Disable the SPI Peripheral Clock */
;;;420      __HAL_SPI_DISABLE(hspi);
;;;421    
;;;422      /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
;;;423      HAL_SPI_MspDeInit(hspi);
;;;424    
;;;425      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;426      hspi->State = HAL_SPI_STATE_RESET;
;;;427    
;;;428      /* Release Lock */
;;;429      __HAL_UNLOCK(hspi);
;;;430    
;;;431      return HAL_OK;
;;;432    }
00000a  bd10              POP      {r4,pc}
                  |L7.12|
00000c  2102              MOVS     r1,#2                 ;417
00000e  205d              MOVS     r0,#0x5d              ;417
000010  5501              STRB     r1,[r0,r4]            ;417
000012  6820              LDR      r0,[r4,#0]            ;420
000014  6800              LDR      r0,[r0,#0]            ;420
000016  2140              MOVS     r1,#0x40              ;420
000018  4388              BICS     r0,r0,r1              ;420
00001a  6821              LDR      r1,[r4,#0]            ;420
00001c  6008              STR      r0,[r1,#0]            ;420
00001e  4620              MOV      r0,r4                 ;423
000020  f7fffffe          BL       HAL_SPI_MspDeInit
000024  2000              MOVS     r0,#0                 ;425
000026  6620              STR      r0,[r4,#0x60]         ;425
000028  2100              MOVS     r1,#0                 ;426
00002a  205d              MOVS     r0,#0x5d              ;426
00002c  5501              STRB     r1,[r0,r4]            ;426
00002e  bf00              NOP                            ;429
000030  205c              MOVS     r0,#0x5c              ;429
000032  5501              STRB     r1,[r0,r4]            ;429
000034  bf00              NOP                            ;429
000036  2000              MOVS     r0,#0                 ;431
000038  e7e7              B        |L7.10|
;;;433    
                          ENDP


                          AREA ||i.HAL_SPI_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_ErrorCallback PROC
;;;2596     */
;;;2597   __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;2598   {
;;;2599     /* Prevent unused argument(s) compilation warning */
;;;2600     UNUSED(hspi);
;;;2601   
;;;2602     /* NOTE : This function should not be modified, when the callback is needed,
;;;2603               the HAL_SPI_ErrorCallback should be implemented in the user file
;;;2604      */
;;;2605     /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
;;;2606               and user can use HAL_SPI_GetError() API to check the latest error occurred
;;;2607      */
;;;2608   }
;;;2609   
                          ENDP


                          AREA ||i.HAL_SPI_GetError||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetError PROC
;;;2661     */
;;;2662   uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
000000  4601              MOV      r1,r0
;;;2663   {
;;;2664     /* Return SPI ErrorCode */
;;;2665     return hspi->ErrorCode;
000002  6e08              LDR      r0,[r1,#0x60]
;;;2666   }
000004  4770              BX       lr
;;;2667   
                          ENDP


                          AREA ||i.HAL_SPI_GetState||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetState PROC
;;;2649     */
;;;2650   HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
000000  4601              MOV      r1,r0
;;;2651   {
;;;2652     /* Return SPI handle state */
;;;2653     return hspi->State;
000002  205d              MOVS     r0,#0x5d
000004  5c40              LDRB     r0,[r0,r1]
;;;2654   }
000006  4770              BX       lr
;;;2655   
                          ENDP


                          AREA ||i.HAL_SPI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_SPI_IRQHandler PROC
;;;2404     */
;;;2405   void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2406   {
000002  4604              MOV      r4,r0
;;;2407     uint32_t itsource = hspi->Instance->CR2;
000004  6820              LDR      r0,[r4,#0]
000006  6846              LDR      r6,[r0,#4]
;;;2408     uint32_t itflag   = hspi->Instance->SR;
000008  6820              LDR      r0,[r4,#0]
00000a  6885              LDR      r5,[r0,#8]
;;;2409   
;;;2410     /* SPI in mode Receiver ----------------------------------------------------*/
;;;2411     if (((itflag & SPI_FLAG_OVR) == RESET) &&
00000c  2040              MOVS     r0,#0x40
00000e  4028              ANDS     r0,r0,r5
000010  2800              CMP      r0,#0
000012  d10b              BNE      |L11.44|
;;;2412         ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
000014  07e8              LSLS     r0,r5,#31
000016  0fc0              LSRS     r0,r0,#31
000018  2800              CMP      r0,#0
00001a  d007              BEQ      |L11.44|
00001c  2040              MOVS     r0,#0x40
00001e  4030              ANDS     r0,r0,r6
000020  2800              CMP      r0,#0
000022  d003              BEQ      |L11.44|
;;;2413     {
;;;2414       hspi->RxISR(hspi);
000024  4620              MOV      r0,r4
000026  6ce1              LDR      r1,[r4,#0x4c]
000028  4788              BLX      r1
                  |L11.42|
;;;2415       return;
;;;2416     }
;;;2417   
;;;2418     /* SPI in mode Transmitter -------------------------------------------------*/
;;;2419     if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
;;;2420     {
;;;2421       hspi->TxISR(hspi);
;;;2422       return;
;;;2423     }
;;;2424   
;;;2425     /* SPI in Error Treatment --------------------------------------------------*/
;;;2426     if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
;;;2427     {
;;;2428       /* SPI Overrun error interrupt occurred ----------------------------------*/
;;;2429       if ((itflag & SPI_FLAG_OVR) != RESET)
;;;2430       {
;;;2431         if (hspi->State != HAL_SPI_STATE_BUSY_TX)
;;;2432         {
;;;2433           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
;;;2434           __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;2435         }
;;;2436         else
;;;2437         {
;;;2438           __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;2439           return;
;;;2440         }
;;;2441       }
;;;2442   
;;;2443       /* SPI Mode Fault error interrupt occurred -------------------------------*/
;;;2444       if ((itflag & SPI_FLAG_MODF) != RESET)
;;;2445       {
;;;2446         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
;;;2447         __HAL_SPI_CLEAR_MODFFLAG(hspi);
;;;2448       }
;;;2449   
;;;2450       /* SPI Frame error interrupt occurred ------------------------------------*/
;;;2451       if ((itflag & SPI_FLAG_FRE) != RESET)
;;;2452       {
;;;2453         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
;;;2454         __HAL_SPI_CLEAR_FREFLAG(hspi);
;;;2455       }
;;;2456   
;;;2457       if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
;;;2458       {
;;;2459         /* Disable all interrupts */
;;;2460         __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
;;;2461   
;;;2462         hspi->State = HAL_SPI_STATE_READY;
;;;2463         /* Disable the SPI DMA requests if enabled */
;;;2464         if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
;;;2465         {
;;;2466           CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
;;;2467   
;;;2468           /* Abort the SPI DMA Rx channel */
;;;2469           if (hspi->hdmarx != NULL)
;;;2470           {
;;;2471             /* Set the SPI DMA Abort callback :
;;;2472             will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
;;;2473             hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
;;;2474             HAL_DMA_Abort_IT(hspi->hdmarx);
;;;2475           }
;;;2476           /* Abort the SPI DMA Tx channel */
;;;2477           if (hspi->hdmatx != NULL)
;;;2478           {
;;;2479             /* Set the SPI DMA Abort callback :
;;;2480             will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
;;;2481             hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
;;;2482             HAL_DMA_Abort_IT(hspi->hdmatx);
;;;2483           }
;;;2484         }
;;;2485         else
;;;2486         {
;;;2487           /* Call user error callback */
;;;2488           HAL_SPI_ErrorCallback(hspi);
;;;2489         }
;;;2490       }
;;;2491       return;
;;;2492     }
;;;2493   }
00002a  bdf8              POP      {r3-r7,pc}
                  |L11.44|
00002c  2002              MOVS     r0,#2                 ;2419
00002e  4028              ANDS     r0,r0,r5              ;2419
000030  2800              CMP      r0,#0                 ;2419
000032  d007              BEQ      |L11.68|
000034  2080              MOVS     r0,#0x80              ;2419
000036  4030              ANDS     r0,r0,r6              ;2419
000038  2800              CMP      r0,#0                 ;2419
00003a  d003              BEQ      |L11.68|
00003c  4620              MOV      r0,r4                 ;2421
00003e  6d21              LDR      r1,[r4,#0x50]         ;2421
000040  4788              BLX      r1                    ;2421
000042  e7f2              B        |L11.42|
                  |L11.68|
000044  20ff              MOVS     r0,#0xff              ;2426
000046  3061              ADDS     r0,r0,#0x61           ;2426
000048  4028              ANDS     r0,r0,r5              ;2426
00004a  2800              CMP      r0,#0                 ;2426
00004c  d07f              BEQ      |L11.334|
00004e  2020              MOVS     r0,#0x20              ;2426
000050  4030              ANDS     r0,r0,r6              ;2426
000052  2800              CMP      r0,#0                 ;2426
000054  d07b              BEQ      |L11.334|
000056  2040              MOVS     r0,#0x40              ;2429
000058  4028              ANDS     r0,r0,r5              ;2429
00005a  2800              CMP      r0,#0                 ;2429
00005c  d01e              BEQ      |L11.156|
00005e  205d              MOVS     r0,#0x5d              ;2431
000060  5d00              LDRB     r0,[r0,r4]            ;2431
000062  2803              CMP      r0,#3                 ;2431
000064  d00e              BEQ      |L11.132|
000066  6e20              LDR      r0,[r4,#0x60]         ;2433
000068  2104              MOVS     r1,#4                 ;2433
00006a  4308              ORRS     r0,r0,r1              ;2433
00006c  6620              STR      r0,[r4,#0x60]         ;2433
00006e  bf00              NOP                            ;2434
000070  2000              MOVS     r0,#0                 ;2434
000072  9000              STR      r0,[sp,#0]            ;2434
000074  6820              LDR      r0,[r4,#0]            ;2434
000076  68c0              LDR      r0,[r0,#0xc]          ;2434
000078  9000              STR      r0,[sp,#0]            ;2434
00007a  6820              LDR      r0,[r4,#0]            ;2434
00007c  6880              LDR      r0,[r0,#8]            ;2434
00007e  9000              STR      r0,[sp,#0]            ;2434
000080  bf00              NOP                            ;2434
000082  e00b              B        |L11.156|
                  |L11.132|
000084  bf00              NOP                            ;2438
000086  2000              MOVS     r0,#0                 ;2438
000088  9000              STR      r0,[sp,#0]            ;2438
00008a  6820              LDR      r0,[r4,#0]            ;2438
00008c  68c0              LDR      r0,[r0,#0xc]          ;2438
00008e  9000              STR      r0,[sp,#0]            ;2438
000090  6820              LDR      r0,[r4,#0]            ;2438
000092  6880              LDR      r0,[r0,#8]            ;2438
000094  9000              STR      r0,[sp,#0]            ;2438
000096  bf00              NOP                            ;2438
000098  bf00              NOP                            ;2438
00009a  e7c6              B        |L11.42|
                  |L11.156|
00009c  2020              MOVS     r0,#0x20              ;2444
00009e  4028              ANDS     r0,r0,r5              ;2444
0000a0  2800              CMP      r0,#0                 ;2444
0000a2  d011              BEQ      |L11.200|
0000a4  6e20              LDR      r0,[r4,#0x60]         ;2446
0000a6  2101              MOVS     r1,#1                 ;2446
0000a8  4308              ORRS     r0,r0,r1              ;2446
0000aa  6620              STR      r0,[r4,#0x60]         ;2446
0000ac  bf00              NOP                            ;2447
0000ae  2000              MOVS     r0,#0                 ;2447
0000b0  9000              STR      r0,[sp,#0]            ;2447
0000b2  6820              LDR      r0,[r4,#0]            ;2447
0000b4  6880              LDR      r0,[r0,#8]            ;2447
0000b6  9000              STR      r0,[sp,#0]            ;2447
0000b8  6820              LDR      r0,[r4,#0]            ;2447
0000ba  6800              LDR      r0,[r0,#0]            ;2447
0000bc  2140              MOVS     r1,#0x40              ;2447
0000be  4388              BICS     r0,r0,r1              ;2447
0000c0  6821              LDR      r1,[r4,#0]            ;2447
0000c2  6008              STR      r0,[r1,#0]            ;2447
0000c4  bf00              NOP                            ;2447
0000c6  bf00              NOP                            ;2447
                  |L11.200|
0000c8  20ff              MOVS     r0,#0xff              ;2451
0000ca  3001              ADDS     r0,#1                 ;2451
0000cc  4028              ANDS     r0,r0,r5              ;2451
0000ce  2800              CMP      r0,#0                 ;2451
0000d0  d00b              BEQ      |L11.234|
0000d2  6e20              LDR      r0,[r4,#0x60]         ;2453
0000d4  2108              MOVS     r1,#8                 ;2453
0000d6  4308              ORRS     r0,r0,r1              ;2453
0000d8  6620              STR      r0,[r4,#0x60]         ;2453
0000da  bf00              NOP                            ;2454
0000dc  2000              MOVS     r0,#0                 ;2454
0000de  9000              STR      r0,[sp,#0]            ;2454
0000e0  6820              LDR      r0,[r4,#0]            ;2454
0000e2  6880              LDR      r0,[r0,#8]            ;2454
0000e4  9000              STR      r0,[sp,#0]            ;2454
0000e6  bf00              NOP                            ;2454
0000e8  bf00              NOP                            ;2454
                  |L11.234|
0000ea  6e20              LDR      r0,[r4,#0x60]         ;2457
0000ec  2800              CMP      r0,#0                 ;2457
0000ee  d02d              BEQ      |L11.332|
0000f0  6820              LDR      r0,[r4,#0]            ;2460
0000f2  6840              LDR      r0,[r0,#4]            ;2460
0000f4  21e0              MOVS     r1,#0xe0              ;2460
0000f6  4388              BICS     r0,r0,r1              ;2460
0000f8  6821              LDR      r1,[r4,#0]            ;2460
0000fa  6048              STR      r0,[r1,#4]            ;2460
0000fc  2101              MOVS     r1,#1                 ;2462
0000fe  205d              MOVS     r0,#0x5d              ;2462
000100  5501              STRB     r1,[r0,r4]            ;2462
000102  2002              MOVS     r0,#2                 ;2464
000104  4030              ANDS     r0,r0,r6              ;2464
000106  2800              CMP      r0,#0                 ;2464
000108  d103              BNE      |L11.274|
00010a  07f0              LSLS     r0,r6,#31             ;2464
00010c  0fc0              LSRS     r0,r0,#31             ;2464
00010e  2800              CMP      r0,#0                 ;2464
000110  d019              BEQ      |L11.326|
                  |L11.274|
000112  6820              LDR      r0,[r4,#0]            ;2466
000114  6840              LDR      r0,[r0,#4]            ;2466
000116  0880              LSRS     r0,r0,#2              ;2466
000118  0080              LSLS     r0,r0,#2              ;2466
00011a  6821              LDR      r1,[r4,#0]            ;2466
00011c  6048              STR      r0,[r1,#4]            ;2466
00011e  6da0              LDR      r0,[r4,#0x58]         ;2469
000120  2800              CMP      r0,#0                 ;2469
000122  d005              BEQ      |L11.304|
000124  480b              LDR      r0,|L11.340|
000126  6da1              LDR      r1,[r4,#0x58]         ;2473
000128  6348              STR      r0,[r1,#0x34]         ;2473
00012a  6da0              LDR      r0,[r4,#0x58]         ;2474
00012c  f7fffffe          BL       HAL_DMA_Abort_IT
                  |L11.304|
000130  6d60              LDR      r0,[r4,#0x54]         ;2477
000132  2800              CMP      r0,#0                 ;2477
000134  d00a              BEQ      |L11.332|
000136  4807              LDR      r0,|L11.340|
000138  6d61              LDR      r1,[r4,#0x54]         ;2481
00013a  6348              STR      r0,[r1,#0x34]         ;2481
00013c  6d60              LDR      r0,[r4,#0x54]         ;2482
00013e  f7fffffe          BL       HAL_DMA_Abort_IT
000142  e003              B        |L11.332|
000144  e003              B        |L11.334|
                  |L11.326|
000146  4620              MOV      r0,r4                 ;2488
000148  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L11.332|
00014c  e76d              B        |L11.42|
                  |L11.334|
00014e  bf00              NOP      
000150  e76b              B        |L11.42|
;;;2494   
                          ENDP

000152  0000              DCW      0x0000
                  |L11.340|
                          DCD      SPI_DMAAbortOnError

                          AREA ||i.HAL_SPI_Init||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Init PROC
;;;280      */
;;;281    HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000000  b570              PUSH     {r4-r6,lr}
;;;282    {
000002  4604              MOV      r4,r0
;;;283      uint32_t frxth;
;;;284    
;;;285      /* Check the SPI handle allocation */
;;;286      if (hspi == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L12.12|
;;;287      {
;;;288        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L12.10|
;;;289      }
;;;290    
;;;291      /* Check the parameters */
;;;292      assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
;;;293      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;294      assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
;;;295      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;296      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;297      assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
;;;298      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;299      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;300      assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
;;;301      if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
;;;302      {
;;;303        assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;304        assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;305      }
;;;306    #if (USE_SPI_CRC != 0U)
;;;307      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;308      if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;309      {
;;;310        assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;311        assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
;;;312      }
;;;313    #else
;;;314      hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
;;;315    #endif /* USE_SPI_CRC */
;;;316    
;;;317      if (hspi->State == HAL_SPI_STATE_RESET)
;;;318      {
;;;319        /* Allocate lock resource and initialize it */
;;;320        hspi->Lock = HAL_UNLOCKED;
;;;321    
;;;322        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;323        HAL_SPI_MspInit(hspi);
;;;324      }
;;;325    
;;;326      hspi->State = HAL_SPI_STATE_BUSY;
;;;327    
;;;328      /* Disable the selected SPI peripheral */
;;;329      __HAL_SPI_DISABLE(hspi);
;;;330    
;;;331      /* Align by default the rs fifo threshold on the data size */
;;;332      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;333      {
;;;334        frxth = SPI_RXFIFO_THRESHOLD_HF;
;;;335      }
;;;336      else
;;;337      {
;;;338        frxth = SPI_RXFIFO_THRESHOLD_QF;
;;;339      }
;;;340    
;;;341      /* CRC calculation is valid only for 16Bit and 8 Bit */
;;;342      if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
;;;343      {
;;;344        /* CRC must be disabled */
;;;345        hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
;;;346      }
;;;347    
;;;348      /* Align the CRC Length on the data size */
;;;349      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
;;;350      {
;;;351        /* CRC Length aligned on the data size : value set by default */
;;;352        if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;353        {
;;;354          hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
;;;355        }
;;;356        else
;;;357        {
;;;358          hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
;;;359        }
;;;360      }
;;;361    
;;;362      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;363      /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
;;;364      Communication speed, First bit and CRC calculation state */
;;;365      WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
;;;366                                      hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;367                                      hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));
;;;368    #if (USE_SPI_CRC != 0U)
;;;369      /* Configure : CRC Length */
;;;370      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
;;;371      {
;;;372        hspi->Instance->CR1 |= SPI_CR1_CRCL;
;;;373      }
;;;374    #endif /* USE_SPI_CRC */
;;;375    
;;;376      /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
;;;377      WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
;;;378                                      hspi->Init.NSSPMode | hspi->Init.DataSize) | frxth);
;;;379    
;;;380    #if (USE_SPI_CRC != 0U)
;;;381      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;382      /* Configure : CRC Polynomial */
;;;383      if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;384      {
;;;385        WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
;;;386      }
;;;387    #endif /* USE_SPI_CRC */
;;;388    
;;;389    #if defined(SPI_I2SCFGR_I2SMOD)
;;;390      /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
;;;391      CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
;;;392    #endif /* SPI_I2SCFGR_I2SMOD */
;;;393    
;;;394      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;395      hspi->State     = HAL_SPI_STATE_READY;
;;;396    
;;;397      return HAL_OK;
;;;398    }
00000a  bd70              POP      {r4-r6,pc}
                  |L12.12|
00000c  6a60              LDR      r0,[r4,#0x24]         ;301
00000e  2800              CMP      r0,#0                 ;301
000010  d100              BNE      |L12.20|
000012  bf00              NOP                            ;304
                  |L12.20|
000014  2101              MOVS     r1,#1                 ;308
000016  0349              LSLS     r1,r1,#13             ;308
000018  6aa0              LDR      r0,[r4,#0x28]         ;308
00001a  4288              CMP      r0,r1                 ;308
00001c  d100              BNE      |L12.32|
00001e  bf00              NOP                            ;311
                  |L12.32|
000020  205d              MOVS     r0,#0x5d              ;317
000022  5d00              LDRB     r0,[r0,r4]            ;317
000024  2800              CMP      r0,#0                 ;317
000026  d105              BNE      |L12.52|
000028  2100              MOVS     r1,#0                 ;320
00002a  205c              MOVS     r0,#0x5c              ;320
00002c  5501              STRB     r1,[r0,r4]            ;320
00002e  4620              MOV      r0,r4                 ;323
000030  f7fffffe          BL       HAL_SPI_MspInit
                  |L12.52|
000034  2102              MOVS     r1,#2                 ;326
000036  205d              MOVS     r0,#0x5d              ;326
000038  5501              STRB     r1,[r0,r4]            ;326
00003a  6820              LDR      r0,[r4,#0]            ;329
00003c  6800              LDR      r0,[r0,#0]            ;329
00003e  2140              MOVS     r1,#0x40              ;329
000040  4388              BICS     r0,r0,r1              ;329
000042  6821              LDR      r1,[r4,#0]            ;329
000044  6008              STR      r0,[r1,#0]            ;329
000046  2107              MOVS     r1,#7                 ;332
000048  0209              LSLS     r1,r1,#8              ;332
00004a  68e0              LDR      r0,[r4,#0xc]          ;332
00004c  4288              CMP      r0,r1                 ;332
00004e  d901              BLS      |L12.84|
000050  2500              MOVS     r5,#0                 ;334
000052  e001              B        |L12.88|
                  |L12.84|
000054  2501              MOVS     r5,#1                 ;338
000056  032d              LSLS     r5,r5,#12             ;338
                  |L12.88|
000058  210f              MOVS     r1,#0xf               ;342
00005a  0209              LSLS     r1,r1,#8              ;342
00005c  68e0              LDR      r0,[r4,#0xc]          ;342
00005e  4288              CMP      r0,r1                 ;342
000060  d006              BEQ      |L12.112|
000062  2107              MOVS     r1,#7                 ;342
000064  0209              LSLS     r1,r1,#8              ;342
000066  68e0              LDR      r0,[r4,#0xc]          ;342
000068  4288              CMP      r0,r1                 ;342
00006a  d001              BEQ      |L12.112|
00006c  2100              MOVS     r1,#0                 ;345
00006e  62a1              STR      r1,[r4,#0x28]         ;345
                  |L12.112|
000070  6b20              LDR      r0,[r4,#0x30]         ;349
000072  2800              CMP      r0,#0                 ;349
000074  d109              BNE      |L12.138|
000076  2107              MOVS     r1,#7                 ;352
000078  0209              LSLS     r1,r1,#8              ;352
00007a  68e0              LDR      r0,[r4,#0xc]          ;352
00007c  4288              CMP      r0,r1                 ;352
00007e  d902              BLS      |L12.134|
000080  2102              MOVS     r1,#2                 ;354
000082  6321              STR      r1,[r4,#0x30]         ;354
000084  e001              B        |L12.138|
                  |L12.134|
000086  2101              MOVS     r1,#1                 ;358
000088  6321              STR      r1,[r4,#0x30]         ;358
                  |L12.138|
00008a  68a1              LDR      r1,[r4,#8]            ;365
00008c  6860              LDR      r0,[r4,#4]            ;365
00008e  4308              ORRS     r0,r0,r1              ;365
000090  6921              LDR      r1,[r4,#0x10]         ;365
000092  4308              ORRS     r0,r0,r1              ;365
000094  6961              LDR      r1,[r4,#0x14]         ;365
000096  4308              ORRS     r0,r0,r1              ;365
000098  2201              MOVS     r2,#1                 ;365
00009a  0252              LSLS     r2,r2,#9              ;365
00009c  69a1              LDR      r1,[r4,#0x18]         ;365
00009e  4011              ANDS     r1,r1,r2              ;365
0000a0  4308              ORRS     r0,r0,r1              ;365
0000a2  69e1              LDR      r1,[r4,#0x1c]         ;365
0000a4  4308              ORRS     r0,r0,r1              ;365
0000a6  6a21              LDR      r1,[r4,#0x20]         ;365
0000a8  4308              ORRS     r0,r0,r1              ;365
0000aa  6aa1              LDR      r1,[r4,#0x28]         ;365
0000ac  4308              ORRS     r0,r0,r1              ;365
0000ae  6821              LDR      r1,[r4,#0]            ;365
0000b0  6008              STR      r0,[r1,#0]            ;365
0000b2  6b20              LDR      r0,[r4,#0x30]         ;370
0000b4  2802              CMP      r0,#2                 ;370
0000b6  d105              BNE      |L12.196|
0000b8  6820              LDR      r0,[r4,#0]            ;372
0000ba  6800              LDR      r0,[r0,#0]            ;372
0000bc  0091              LSLS     r1,r2,#2              ;372
0000be  4308              ORRS     r0,r0,r1              ;372
0000c0  6821              LDR      r1,[r4,#0]            ;372
0000c2  6008              STR      r0,[r1,#0]            ;372
                  |L12.196|
0000c4  69a0              LDR      r0,[r4,#0x18]         ;377
0000c6  0c00              LSRS     r0,r0,#16             ;377
0000c8  2104              MOVS     r1,#4                 ;377
0000ca  4008              ANDS     r0,r0,r1              ;377
0000cc  6a61              LDR      r1,[r4,#0x24]         ;377
0000ce  4308              ORRS     r0,r0,r1              ;377
0000d0  6b61              LDR      r1,[r4,#0x34]         ;377
0000d2  4308              ORRS     r0,r0,r1              ;377
0000d4  68e1              LDR      r1,[r4,#0xc]          ;377
0000d6  4308              ORRS     r0,r0,r1              ;377
0000d8  4328              ORRS     r0,r0,r5              ;377
0000da  6821              LDR      r1,[r4,#0]            ;377
0000dc  6048              STR      r0,[r1,#4]            ;377
0000de  2101              MOVS     r1,#1                 ;383
0000e0  0349              LSLS     r1,r1,#13             ;383
0000e2  6aa0              LDR      r0,[r4,#0x28]         ;383
0000e4  4288              CMP      r0,r1                 ;383
0000e6  d102              BNE      |L12.238|
0000e8  6821              LDR      r1,[r4,#0]            ;385
0000ea  6ae0              LDR      r0,[r4,#0x2c]         ;385
0000ec  6108              STR      r0,[r1,#0x10]         ;385
                  |L12.238|
0000ee  6820              LDR      r0,[r4,#0]            ;391
0000f0  69c0              LDR      r0,[r0,#0x1c]         ;391
0000f2  2101              MOVS     r1,#1                 ;391
0000f4  02c9              LSLS     r1,r1,#11             ;391
0000f6  4388              BICS     r0,r0,r1              ;391
0000f8  6821              LDR      r1,[r4,#0]            ;391
0000fa  61c8              STR      r0,[r1,#0x1c]         ;391
0000fc  2000              MOVS     r0,#0                 ;394
0000fe  6620              STR      r0,[r4,#0x60]         ;394
000100  2101              MOVS     r1,#1                 ;395
000102  205d              MOVS     r0,#0x5d              ;395
000104  5501              STRB     r1,[r0,r4]            ;395
000106  2000              MOVS     r0,#0                 ;397
000108  e77f              B        |L12.10|
;;;399    
                          ENDP


                          AREA ||i.HAL_SPI_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspDeInit PROC
;;;455      */
;;;456    __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;457    {
;;;458      /* Prevent unused argument(s) compilation warning */
;;;459      UNUSED(hspi);
;;;460    
;;;461      /* NOTE : This function should not be modified, when the callback is needed,
;;;462                the HAL_SPI_MspDeInit should be implemented in the user file
;;;463       */
;;;464    }
;;;465    
                          ENDP


                          AREA ||i.HAL_SPI_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspInit PROC
;;;439      */
;;;440    __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;441    {
;;;442      /* Prevent unused argument(s) compilation warning */
;;;443      UNUSED(hspi);
;;;444    
;;;445      /* NOTE : This function should not be modified, when the callback is needed,
;;;446                the HAL_SPI_MspInit should be implemented in the user file
;;;447       */
;;;448    }
;;;449    
                          ENDP


                          AREA ||i.HAL_SPI_Receive||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive PROC
;;;697      */
;;;698    HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5f0              PUSH     {r4-r7,lr}
;;;699    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
;;;700    #if (USE_SPI_CRC != 0U)
;;;701      __IO uint16_t tmpreg = 0U;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
;;;702    #endif /* USE_SPI_CRC */
;;;703      uint32_t tickstart = 0U;
000010  9002              STR      r0,[sp,#8]
;;;704      HAL_StatusTypeDef errorcode = HAL_OK;
000012  9001              STR      r0,[sp,#4]
;;;705    
;;;706      if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
000014  2107              MOVS     r1,#7
000016  0209              LSLS     r1,r1,#8
000018  68e0              LDR      r0,[r4,#0xc]
00001a  4288              CMP      r0,r1
00001c  d801              BHI      |L15.34|
00001e  2f01              CMP      r7,#1
000020  d900              BLS      |L15.36|
                  |L15.34|
;;;707      {
;;;708        /* in this case, 16-bit access is performed on Data
;;;709           So, check Data is 16-bit aligned address */
;;;710        assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
000022  bf00              NOP      
                  |L15.36|
;;;711      }
;;;712    
;;;713      if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
000024  21ff              MOVS     r1,#0xff
000026  3105              ADDS     r1,#5
000028  6860              LDR      r0,[r4,#4]
00002a  4288              CMP      r0,r1
00002c  d10e              BNE      |L15.76|
00002e  68a0              LDR      r0,[r4,#8]
000030  2800              CMP      r0,#0
000032  d10b              BNE      |L15.76|
;;;714      {
;;;715        hspi->State = HAL_SPI_STATE_BUSY_RX;
000034  2104              MOVS     r1,#4
000036  205d              MOVS     r0,#0x5d
000038  5501              STRB     r1,[r0,r4]
;;;716        /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;717        return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
00003a  463b              MOV      r3,r7
00003c  462a              MOV      r2,r5
00003e  4629              MOV      r1,r5
000040  4620              MOV      r0,r4
000042  9600              STR      r6,[sp,#0]
000044  f7fffffe          BL       HAL_SPI_TransmitReceive
                  |L15.72|
;;;718      }
;;;719    
;;;720      /* Process Locked */
;;;721      __HAL_LOCK(hspi);
;;;722    
;;;723      /* Init tickstart for timeout management*/
;;;724      tickstart = HAL_GetTick();
;;;725    
;;;726      if (hspi->State != HAL_SPI_STATE_READY)
;;;727      {
;;;728        errorcode = HAL_BUSY;
;;;729        goto error;
;;;730      }
;;;731    
;;;732      if ((pData == NULL) || (Size == 0U))
;;;733      {
;;;734        errorcode = HAL_ERROR;
;;;735        goto error;
;;;736      }
;;;737    
;;;738      /* Set the transaction information */
;;;739      hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;740      hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;741      hspi->pRxBuffPtr  = (uint8_t *)pData;
;;;742      hspi->RxXferSize  = Size;
;;;743      hspi->RxXferCount = Size;
;;;744    
;;;745      /*Init field not used in handle to zero */
;;;746      hspi->pTxBuffPtr  = (uint8_t *)NULL;
;;;747      hspi->TxXferSize  = 0U;
;;;748      hspi->TxXferCount = 0U;
;;;749      hspi->RxISR       = NULL;
;;;750      hspi->TxISR       = NULL;
;;;751    
;;;752    #if (USE_SPI_CRC != 0U)
;;;753      /* Reset CRC Calculation */
;;;754      if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;755      {
;;;756        SPI_RESET_CRC(hspi);
;;;757        /* this is done to handle the CRCNEXT before the latest data */
;;;758        hspi->RxXferCount--;
;;;759      }
;;;760    #endif /* USE_SPI_CRC */
;;;761    
;;;762      /* Set the Rx FiFo threshold */
;;;763      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;764      {
;;;765        /* set fiforxthresold according the reception data length: 16bit */
;;;766        CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;767      }
;;;768      else
;;;769      {
;;;770        /* set fiforxthresold according the reception data length: 8bit */
;;;771        SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;772      }
;;;773    
;;;774      /* Configure communication direction: 1Line */
;;;775      if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;776      {
;;;777        SPI_1LINE_RX(hspi);
;;;778      }
;;;779    
;;;780      /* Check if the SPI is already enabled */
;;;781      if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;782      {
;;;783        /* Enable SPI peripheral */
;;;784        __HAL_SPI_ENABLE(hspi);
;;;785      }
;;;786    
;;;787      /* Receive data in 8 Bit mode */
;;;788      if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
;;;789      {
;;;790        /* Transfer loop */
;;;791        while (hspi->RxXferCount > 0U)
;;;792        {
;;;793          /* Check the RXNE flag */
;;;794          if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
;;;795          {
;;;796            /* read the received data */
;;;797            (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
;;;798            pData += sizeof(uint8_t);
;;;799            hspi->RxXferCount--;
;;;800          }
;;;801          else
;;;802          {
;;;803            /* Timeout management */
;;;804            if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
;;;805            {
;;;806              errorcode = HAL_TIMEOUT;
;;;807              goto error;
;;;808            }
;;;809          }
;;;810        }
;;;811      }
;;;812      else
;;;813      {
;;;814        /* Transfer loop */
;;;815        while (hspi->RxXferCount > 0U)
;;;816        {
;;;817          /* Check the RXNE flag */
;;;818          if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
;;;819          {
;;;820            *((uint16_t *)pData) = hspi->Instance->DR;
;;;821            pData += sizeof(uint16_t);
;;;822            hspi->RxXferCount--;
;;;823          }
;;;824          else
;;;825          {
;;;826            /* Timeout management */
;;;827            if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
;;;828            {
;;;829              errorcode = HAL_TIMEOUT;
;;;830              goto error;
;;;831            }
;;;832          }
;;;833        }
;;;834      }
;;;835    
;;;836    #if (USE_SPI_CRC != 0U)
;;;837      /* Handle the CRC Transmission */
;;;838      if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;839      {
;;;840        /* freeze the CRC before the latest data */
;;;841        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;842    
;;;843        /* Read the latest data */
;;;844        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
;;;845        {
;;;846          /* the latest data has not been received */
;;;847          errorcode = HAL_TIMEOUT;
;;;848          goto error;
;;;849        }
;;;850    
;;;851        /* Receive last data in 16 Bit mode */
;;;852        if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;853        {
;;;854          *((uint16_t *)pData) = hspi->Instance->DR;
;;;855        }
;;;856        /* Receive last data in 8 Bit mode */
;;;857        else
;;;858        {
;;;859          (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
;;;860        }
;;;861    
;;;862        /* Wait the CRC data */
;;;863        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
;;;864        {
;;;865          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;866          errorcode = HAL_TIMEOUT;
;;;867          goto error;
;;;868        }
;;;869    
;;;870        /* Read CRC to Flush DR and RXNE flag */
;;;871        if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
;;;872        {
;;;873          tmpreg = hspi->Instance->DR;
;;;874          /* To avoid GCC warning */
;;;875          UNUSED(tmpreg);
;;;876        }
;;;877        else
;;;878        {
;;;879          tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
;;;880          /* To avoid GCC warning */
;;;881          UNUSED(tmpreg);
;;;882    
;;;883          if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
;;;884          {
;;;885            if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout, tickstart) != HAL_OK)
;;;886            {
;;;887              /* Error on the CRC reception */
;;;888              SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;889              errorcode = HAL_TIMEOUT;
;;;890              goto error;
;;;891            }
;;;892            tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
;;;893            /* To avoid GCC warning */
;;;894            UNUSED(tmpreg);
;;;895          }
;;;896        }
;;;897      }
;;;898    #endif /* USE_SPI_CRC */
;;;899    
;;;900      /* Check the end of the transaction */
;;;901      if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
;;;902      {
;;;903        hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
;;;904      }
;;;905    
;;;906    #if (USE_SPI_CRC != 0U)
;;;907      /* Check if CRC error occurred */
;;;908      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
;;;909      {
;;;910        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;911        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
;;;912      }
;;;913    #endif /* USE_SPI_CRC */
;;;914    
;;;915      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
;;;916      {
;;;917        errorcode = HAL_ERROR;
;;;918      }
;;;919    
;;;920    error :
;;;921      hspi->State = HAL_SPI_STATE_READY;
;;;922      __HAL_UNLOCK(hspi);
;;;923      return errorcode;
;;;924    }
000048  b005              ADD      sp,sp,#0x14
00004a  bdf0              POP      {r4-r7,pc}
                  |L15.76|
00004c  bf00              NOP                            ;721
00004e  205c              MOVS     r0,#0x5c              ;721
000050  5d00              LDRB     r0,[r0,r4]            ;721
000052  2801              CMP      r0,#1                 ;721
000054  d101              BNE      |L15.90|
000056  2002              MOVS     r0,#2                 ;721
000058  e7f6              B        |L15.72|
                  |L15.90|
00005a  2101              MOVS     r1,#1                 ;721
00005c  205c              MOVS     r0,#0x5c              ;721
00005e  5501              STRB     r1,[r0,r4]            ;721
000060  bf00              NOP                            ;721
000062  f7fffffe          BL       HAL_GetTick
000066  9002              STR      r0,[sp,#8]            ;724
000068  205d              MOVS     r0,#0x5d              ;726
00006a  5d00              LDRB     r0,[r0,r4]            ;726
00006c  2801              CMP      r0,#1                 ;726
00006e  d002              BEQ      |L15.118|
000070  2002              MOVS     r0,#2                 ;728
000072  9001              STR      r0,[sp,#4]            ;728
000074  e126              B        |L15.708|
                  |L15.118|
000076  2d00              CMP      r5,#0                 ;732
000078  d001              BEQ      |L15.126|
00007a  2f00              CMP      r7,#0                 ;732
00007c  d102              BNE      |L15.132|
                  |L15.126|
00007e  2001              MOVS     r0,#1                 ;734
000080  9001              STR      r0,[sp,#4]            ;734
000082  e11f              B        |L15.708|
                  |L15.132|
000084  2104              MOVS     r1,#4                 ;739
000086  205d              MOVS     r0,#0x5d              ;739
000088  5501              STRB     r1,[r0,r4]            ;739
00008a  2000              MOVS     r0,#0                 ;740
00008c  6620              STR      r0,[r4,#0x60]         ;740
00008e  6425              STR      r5,[r4,#0x40]         ;741
000090  2044              MOVS     r0,#0x44              ;742
000092  5307              STRH     r7,[r0,r4]            ;742
000094  2046              MOVS     r0,#0x46              ;743
000096  5307              STRH     r7,[r0,r4]            ;743
000098  2000              MOVS     r0,#0                 ;746
00009a  63a0              STR      r0,[r4,#0x38]         ;746
00009c  87a0              STRH     r0,[r4,#0x3c]         ;747
00009e  87e0              STRH     r0,[r4,#0x3e]         ;748
0000a0  64e0              STR      r0,[r4,#0x4c]         ;749
0000a2  6520              STR      r0,[r4,#0x50]         ;750
0000a4  02c9              LSLS     r1,r1,#11             ;754
0000a6  6aa0              LDR      r0,[r4,#0x28]         ;754
0000a8  4288              CMP      r0,r1                 ;754
0000aa  d113              BNE      |L15.212|
0000ac  bf00              NOP                            ;756
0000ae  6820              LDR      r0,[r4,#0]            ;756
0000b0  6800              LDR      r0,[r0,#0]            ;756
0000b2  4388              BICS     r0,r0,r1              ;756
0000b4  6821              LDR      r1,[r4,#0]            ;756
0000b6  6008              STR      r0,[r1,#0]            ;756
0000b8  6820              LDR      r0,[r4,#0]            ;756
0000ba  6800              LDR      r0,[r0,#0]            ;756
0000bc  2101              MOVS     r1,#1                 ;756
0000be  0349              LSLS     r1,r1,#13             ;756
0000c0  4308              ORRS     r0,r0,r1              ;756
0000c2  6821              LDR      r1,[r4,#0]            ;756
0000c4  6008              STR      r0,[r1,#0]            ;756
0000c6  bf00              NOP                            ;756
0000c8  2046              MOVS     r0,#0x46              ;758
0000ca  5b00              LDRH     r0,[r0,r4]            ;758
0000cc  1e40              SUBS     r0,r0,#1              ;758
0000ce  b281              UXTH     r1,r0                 ;758
0000d0  2046              MOVS     r0,#0x46              ;758
0000d2  5301              STRH     r1,[r0,r4]            ;758
                  |L15.212|
0000d4  2107              MOVS     r1,#7                 ;763
0000d6  0209              LSLS     r1,r1,#8              ;763
0000d8  68e0              LDR      r0,[r4,#0xc]          ;763
0000da  4288              CMP      r0,r1                 ;763
0000dc  d907              BLS      |L15.238|
0000de  6820              LDR      r0,[r4,#0]            ;766
0000e0  6840              LDR      r0,[r0,#4]            ;766
0000e2  2101              MOVS     r1,#1                 ;766
0000e4  0309              LSLS     r1,r1,#12             ;766
0000e6  4388              BICS     r0,r0,r1              ;766
0000e8  6821              LDR      r1,[r4,#0]            ;766
0000ea  6048              STR      r0,[r1,#4]            ;766
0000ec  e006              B        |L15.252|
                  |L15.238|
0000ee  6820              LDR      r0,[r4,#0]            ;771
0000f0  6840              LDR      r0,[r0,#4]            ;771
0000f2  2101              MOVS     r1,#1                 ;771
0000f4  0309              LSLS     r1,r1,#12             ;771
0000f6  4308              ORRS     r0,r0,r1              ;771
0000f8  6821              LDR      r1,[r4,#0]            ;771
0000fa  6048              STR      r0,[r1,#4]            ;771
                  |L15.252|
0000fc  2101              MOVS     r1,#1                 ;775
0000fe  03c9              LSLS     r1,r1,#15             ;775
000100  68a0              LDR      r0,[r4,#8]            ;775
000102  4288              CMP      r0,r1                 ;775
000104  d105              BNE      |L15.274|
000106  6820              LDR      r0,[r4,#0]            ;777
000108  6800              LDR      r0,[r0,#0]            ;777
00010a  1049              ASRS     r1,r1,#1              ;777
00010c  4388              BICS     r0,r0,r1              ;777
00010e  6821              LDR      r1,[r4,#0]            ;777
000110  6008              STR      r0,[r1,#0]            ;777
                  |L15.274|
000112  6820              LDR      r0,[r4,#0]            ;781
000114  6800              LDR      r0,[r0,#0]            ;781
000116  2140              MOVS     r1,#0x40              ;781
000118  4008              ANDS     r0,r0,r1              ;781
00011a  2840              CMP      r0,#0x40              ;781
00011c  d004              BEQ      |L15.296|
00011e  6820              LDR      r0,[r4,#0]            ;784
000120  6800              LDR      r0,[r0,#0]            ;784
000122  4308              ORRS     r0,r0,r1              ;784
000124  6821              LDR      r1,[r4,#0]            ;784
000126  6008              STR      r0,[r1,#0]            ;784
                  |L15.296|
000128  2107              MOVS     r1,#7                 ;788
00012a  0209              LSLS     r1,r1,#8              ;788
00012c  68e0              LDR      r0,[r4,#0xc]          ;788
00012e  4288              CMP      r0,r1                 ;788
000130  d824              BHI      |L15.380|
000132  e01e              B        |L15.370|
                  |L15.308|
000134  6820              LDR      r0,[r4,#0]            ;794
000136  6880              LDR      r0,[r0,#8]            ;794
000138  07c0              LSLS     r0,r0,#31             ;794
00013a  0fc0              LSRS     r0,r0,#31             ;794
00013c  2800              CMP      r0,#0                 ;794
00013e  d00a              BEQ      |L15.342|
000140  6820              LDR      r0,[r4,#0]            ;797
000142  7b00              LDRB     r0,[r0,#0xc]          ;797
000144  7028              STRB     r0,[r5,#0]            ;797
000146  1c6d              ADDS     r5,r5,#1              ;798
000148  2046              MOVS     r0,#0x46              ;799
00014a  5b00              LDRH     r0,[r0,r4]            ;799
00014c  1e40              SUBS     r0,r0,#1              ;799
00014e  b281              UXTH     r1,r0                 ;799
000150  2046              MOVS     r0,#0x46              ;799
000152  5301              STRH     r1,[r0,r4]            ;799
000154  e00d              B        |L15.370|
                  |L15.342|
000156  2e00              CMP      r6,#0                 ;804
000158  d008              BEQ      |L15.364|
00015a  1c70              ADDS     r0,r6,#1              ;804
00015c  2800              CMP      r0,#0                 ;804
00015e  d008              BEQ      |L15.370|
000160  f7fffffe          BL       HAL_GetTick
000164  9902              LDR      r1,[sp,#8]            ;804
000166  1a40              SUBS     r0,r0,r1              ;804
000168  42b0              CMP      r0,r6                 ;804
00016a  d302              BCC      |L15.370|
                  |L15.364|
00016c  2003              MOVS     r0,#3                 ;806
00016e  9001              STR      r0,[sp,#4]            ;806
000170  e0a8              B        |L15.708|
                  |L15.370|
000172  2046              MOVS     r0,#0x46              ;791
000174  5b00              LDRH     r0,[r0,r4]            ;791
000176  2800              CMP      r0,#0                 ;791
000178  d1dc              BNE      |L15.308|
00017a  e023              B        |L15.452|
                  |L15.380|
00017c  e01e              B        |L15.444|
                  |L15.382|
00017e  6820              LDR      r0,[r4,#0]            ;818
000180  6880              LDR      r0,[r0,#8]            ;818
000182  07c0              LSLS     r0,r0,#31             ;818
000184  0fc0              LSRS     r0,r0,#31             ;818
000186  2800              CMP      r0,#0                 ;818
000188  d00a              BEQ      |L15.416|
00018a  6820              LDR      r0,[r4,#0]            ;820
00018c  68c0              LDR      r0,[r0,#0xc]          ;820
00018e  8028              STRH     r0,[r5,#0]            ;820
000190  1cad              ADDS     r5,r5,#2              ;821
000192  2046              MOVS     r0,#0x46              ;822
000194  5b00              LDRH     r0,[r0,r4]            ;822
000196  1e40              SUBS     r0,r0,#1              ;822
000198  b281              UXTH     r1,r0                 ;822
00019a  2046              MOVS     r0,#0x46              ;822
00019c  5301              STRH     r1,[r0,r4]            ;822
00019e  e00d              B        |L15.444|
                  |L15.416|
0001a0  2e00              CMP      r6,#0                 ;827
0001a2  d008              BEQ      |L15.438|
0001a4  1c70              ADDS     r0,r6,#1              ;827
0001a6  2800              CMP      r0,#0                 ;827
0001a8  d008              BEQ      |L15.444|
0001aa  f7fffffe          BL       HAL_GetTick
0001ae  9902              LDR      r1,[sp,#8]            ;827
0001b0  1a40              SUBS     r0,r0,r1              ;827
0001b2  42b0              CMP      r0,r6                 ;827
0001b4  d302              BCC      |L15.444|
                  |L15.438|
0001b6  2003              MOVS     r0,#3                 ;829
0001b8  9001              STR      r0,[sp,#4]            ;829
0001ba  e083              B        |L15.708|
                  |L15.444|
0001bc  2046              MOVS     r0,#0x46              ;815
0001be  5b00              LDRH     r0,[r0,r4]            ;815
0001c0  2800              CMP      r0,#0                 ;815
0001c2  d1dc              BNE      |L15.382|
                  |L15.452|
0001c4  2101              MOVS     r1,#1                 ;838
0001c6  0349              LSLS     r1,r1,#13             ;838
0001c8  6aa0              LDR      r0,[r4,#0x28]         ;838
0001ca  4288              CMP      r0,r1                 ;838
0001cc  d15e              BNE      |L15.652|
0001ce  6820              LDR      r0,[r4,#0]            ;841
0001d0  6800              LDR      r0,[r0,#0]            ;841
0001d2  1049              ASRS     r1,r1,#1              ;841
0001d4  4308              ORRS     r0,r0,r1              ;841
0001d6  6821              LDR      r1,[r4,#0]            ;841
0001d8  6008              STR      r0,[r1,#0]            ;841
0001da  9802              LDR      r0,[sp,#8]            ;844
0001dc  4633              MOV      r3,r6                 ;844
0001de  2201              MOVS     r2,#1                 ;844
0001e0  4611              MOV      r1,r2                 ;844
0001e2  9000              STR      r0,[sp,#0]            ;844
0001e4  4620              MOV      r0,r4                 ;844
0001e6  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
0001ea  2800              CMP      r0,#0                 ;844
0001ec  d002              BEQ      |L15.500|
0001ee  2003              MOVS     r0,#3                 ;847
0001f0  9001              STR      r0,[sp,#4]            ;847
0001f2  e067              B        |L15.708|
                  |L15.500|
0001f4  2107              MOVS     r1,#7                 ;852
0001f6  0209              LSLS     r1,r1,#8              ;852
0001f8  68e0              LDR      r0,[r4,#0xc]          ;852
0001fa  4288              CMP      r0,r1                 ;852
0001fc  d903              BLS      |L15.518|
0001fe  6820              LDR      r0,[r4,#0]            ;854
000200  68c0              LDR      r0,[r0,#0xc]          ;854
000202  8028              STRH     r0,[r5,#0]            ;854
000204  e002              B        |L15.524|
                  |L15.518|
000206  6820              LDR      r0,[r4,#0]            ;859
000208  7b00              LDRB     r0,[r0,#0xc]          ;859
00020a  7028              STRB     r0,[r5,#0]            ;859
                  |L15.524|
00020c  9802              LDR      r0,[sp,#8]            ;863
00020e  4633              MOV      r3,r6                 ;863
000210  2201              MOVS     r2,#1                 ;863
000212  4611              MOV      r1,r2                 ;863
000214  9000              STR      r0,[sp,#0]            ;863
000216  4620              MOV      r0,r4                 ;863
000218  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
00021c  2800              CMP      r0,#0                 ;863
00021e  d006              BEQ      |L15.558|
000220  6e20              LDR      r0,[r4,#0x60]         ;865
000222  2102              MOVS     r1,#2                 ;865
000224  4308              ORRS     r0,r0,r1              ;865
000226  6620              STR      r0,[r4,#0x60]         ;865
000228  2003              MOVS     r0,#3                 ;866
00022a  9001              STR      r0,[sp,#4]            ;866
00022c  e04a              B        |L15.708|
                  |L15.558|
00022e  210f              MOVS     r1,#0xf               ;871
000230  0209              LSLS     r1,r1,#8              ;871
000232  68e0              LDR      r0,[r4,#0xc]          ;871
000234  4288              CMP      r0,r1                 ;871
000236  d106              BNE      |L15.582|
000238  6820              LDR      r0,[r4,#0]            ;873
00023a  68c0              LDR      r0,[r0,#0xc]          ;873
00023c  b281              UXTH     r1,r0                 ;873
00023e  9103              STR      r1,[sp,#0xc]          ;873
000240  4668              MOV      r0,sp                 ;875
000242  8980              LDRH     r0,[r0,#0xc]          ;875
000244  e022              B        |L15.652|
                  |L15.582|
000246  6820              LDR      r0,[r4,#0]            ;879
000248  7b01              LDRB     r1,[r0,#0xc]          ;879
00024a  9103              STR      r1,[sp,#0xc]          ;879
00024c  4668              MOV      r0,sp                 ;881
00024e  8980              LDRH     r0,[r0,#0xc]          ;881
000250  2107              MOVS     r1,#7                 ;883
000252  0209              LSLS     r1,r1,#8              ;883
000254  68e0              LDR      r0,[r4,#0xc]          ;883
000256  4288              CMP      r0,r1                 ;883
000258  d118              BNE      |L15.652|
00025a  6b20              LDR      r0,[r4,#0x30]         ;883
00025c  2802              CMP      r0,#2                 ;883
00025e  d115              BNE      |L15.652|
000260  9802              LDR      r0,[sp,#8]            ;885
000262  4633              MOV      r3,r6                 ;885
000264  2201              MOVS     r2,#1                 ;885
000266  4611              MOV      r1,r2                 ;885
000268  9000              STR      r0,[sp,#0]            ;885
00026a  4620              MOV      r0,r4                 ;885
00026c  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000270  2800              CMP      r0,#0                 ;885
000272  d006              BEQ      |L15.642|
000274  6e20              LDR      r0,[r4,#0x60]         ;888
000276  2102              MOVS     r1,#2                 ;888
000278  4308              ORRS     r0,r0,r1              ;888
00027a  6620              STR      r0,[r4,#0x60]         ;888
00027c  2003              MOVS     r0,#3                 ;889
00027e  9001              STR      r0,[sp,#4]            ;889
000280  e020              B        |L15.708|
                  |L15.642|
000282  6820              LDR      r0,[r4,#0]            ;892
000284  7b01              LDRB     r1,[r0,#0xc]          ;892
000286  9103              STR      r1,[sp,#0xc]          ;892
000288  4668              MOV      r0,sp                 ;894
00028a  8980              LDRH     r0,[r0,#0xc]          ;894
                  |L15.652|
00028c  4631              MOV      r1,r6                 ;901
00028e  4620              MOV      r0,r4                 ;901
000290  9a02              LDR      r2,[sp,#8]            ;901
000292  f7fffffe          BL       SPI_EndRxTransaction
000296  2800              CMP      r0,#0                 ;901
000298  d001              BEQ      |L15.670|
00029a  2020              MOVS     r0,#0x20              ;903
00029c  6620              STR      r0,[r4,#0x60]         ;903
                  |L15.670|
00029e  6820              LDR      r0,[r4,#0]            ;908
0002a0  6880              LDR      r0,[r0,#8]            ;908
0002a2  2110              MOVS     r1,#0x10              ;908
0002a4  4008              ANDS     r0,r0,r1              ;908
0002a6  2810              CMP      r0,#0x10              ;908
0002a8  d106              BNE      |L15.696|
0002aa  6e20              LDR      r0,[r4,#0x60]         ;910
0002ac  2102              MOVS     r1,#2                 ;910
0002ae  4308              ORRS     r0,r0,r1              ;910
0002b0  6620              STR      r0,[r4,#0x60]         ;910
0002b2  4809              LDR      r0,|L15.728|
0002b4  6821              LDR      r1,[r4,#0]            ;911
0002b6  6088              STR      r0,[r1,#8]            ;911
                  |L15.696|
0002b8  6e20              LDR      r0,[r4,#0x60]         ;915
0002ba  2800              CMP      r0,#0                 ;915
0002bc  d001              BEQ      |L15.706|
0002be  2001              MOVS     r0,#1                 ;917
0002c0  9001              STR      r0,[sp,#4]            ;917
                  |L15.706|
0002c2  bf00              NOP                            ;920
                  |L15.708|
0002c4  2101              MOVS     r1,#1                 ;921
0002c6  205d              MOVS     r0,#0x5d              ;921
0002c8  5501              STRB     r1,[r0,r4]            ;921
0002ca  bf00              NOP                            ;922
0002cc  2100              MOVS     r1,#0                 ;922
0002ce  205c              MOVS     r0,#0x5c              ;922
0002d0  5501              STRB     r1,[r0,r4]            ;922
0002d2  bf00              NOP                            ;922
0002d4  9801              LDR      r0,[sp,#4]            ;923
0002d6  e6b7              B        |L15.72|
;;;925    
                          ENDP

                  |L15.728|
                          DCD      0x0000ffef

                          AREA ||i.HAL_SPI_Receive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_DMA PROC
;;;1664     */
;;;1665   HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1666   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1667     HAL_StatusTypeDef errorcode = HAL_OK;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;1668   
;;;1669     /* check rx dma handle */
;;;1670     assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
;;;1671   
;;;1672     if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
00000c  68a0              LDR      r0,[r4,#8]
00000e  2800              CMP      r0,#0
000010  d10e              BNE      |L16.48|
000012  21ff              MOVS     r1,#0xff
000014  3105              ADDS     r1,#5
000016  6860              LDR      r0,[r4,#4]
000018  4288              CMP      r0,r1
00001a  d109              BNE      |L16.48|
;;;1673     {
;;;1674       hspi->State = HAL_SPI_STATE_BUSY_RX;
00001c  2104              MOVS     r1,#4
00001e  205d              MOVS     r0,#0x5d
000020  5501              STRB     r1,[r0,r4]
;;;1675   
;;;1676       /* check tx dma handle */
;;;1677       assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
;;;1678   
;;;1679       /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1680       return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
000022  462b              MOV      r3,r5
000024  4632              MOV      r2,r6
000026  4631              MOV      r1,r6
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       HAL_SPI_TransmitReceive_DMA
                  |L16.46|
;;;1681     }
;;;1682   
;;;1683     /* Process Locked */
;;;1684     __HAL_LOCK(hspi);
;;;1685   
;;;1686     if (hspi->State != HAL_SPI_STATE_READY)
;;;1687     {
;;;1688       errorcode = HAL_BUSY;
;;;1689       goto error;
;;;1690     }
;;;1691   
;;;1692     if ((pData == NULL) || (Size == 0U))
;;;1693     {
;;;1694       errorcode = HAL_ERROR;
;;;1695       goto error;
;;;1696     }
;;;1697   
;;;1698     /* Set the transaction information */
;;;1699     hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;1700     hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1701     hspi->pRxBuffPtr  = (uint8_t *)pData;
;;;1702     hspi->RxXferSize  = Size;
;;;1703     hspi->RxXferCount = Size;
;;;1704   
;;;1705     /*Init field not used in handle to zero */
;;;1706     hspi->RxISR       = NULL;
;;;1707     hspi->TxISR       = NULL;
;;;1708     hspi->TxXferSize  = 0U;
;;;1709     hspi->TxXferCount = 0U;
;;;1710   
;;;1711     /* Configure communication direction : 1Line */
;;;1712     if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1713     {
;;;1714       SPI_1LINE_RX(hspi);
;;;1715     }
;;;1716   
;;;1717   #if (USE_SPI_CRC != 0U)
;;;1718     /* Reset CRC Calculation */
;;;1719     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1720     {
;;;1721       SPI_RESET_CRC(hspi);
;;;1722     }
;;;1723   #endif /* USE_SPI_CRC */
;;;1724   
;;;1725   #if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6)|| defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
;;;1726     /* Packing mode management is enabled by the DMA settings */
;;;1727     if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
;;;1728     {
;;;1729       /* Restriction the DMA data received is not allowed in this mode */
;;;1730       errorcode = HAL_ERROR;
;;;1731       goto error;
;;;1732     }
;;;1733   #endif
;;;1734   
;;;1735     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
;;;1736     if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1737     {
;;;1738       /* Set fiforxthresold according the reception data length: 16bit */
;;;1739       CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1740     }
;;;1741     else
;;;1742     {
;;;1743       /* Set fiforxthresold according the reception data length: 8bit */
;;;1744       SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1745   
;;;1746       if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
;;;1747       {
;;;1748         /* set fiforxthresold according the reception data length: 16bit */
;;;1749         CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1750   
;;;1751         if ((hspi->RxXferCount & 0x1U) == 0x0U)
;;;1752         {
;;;1753           CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
;;;1754           hspi->RxXferCount = hspi->RxXferCount >> 1U;
;;;1755         }
;;;1756         else
;;;1757         {
;;;1758           SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
;;;1759           hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
;;;1760         }
;;;1761       }
;;;1762     }
;;;1763   
;;;1764     /* Set the SPI RxDMA Half transfer complete callback */
;;;1765     hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1766   
;;;1767     /* Set the SPI Rx DMA transfer complete callback */
;;;1768     hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1769   
;;;1770     /* Set the DMA error callback */
;;;1771     hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1772   
;;;1773     /* Set the DMA AbortCpltCallback */
;;;1774     hspi->hdmarx->XferAbortCallback = NULL;
;;;1775   
;;;1776     /* Enable the Rx DMA Stream/Channel  */
;;;1777     HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1778   
;;;1779     /* Check if the SPI is already enabled */
;;;1780     if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1781     {
;;;1782       /* Enable SPI peripheral */
;;;1783       __HAL_SPI_ENABLE(hspi);
;;;1784     }
;;;1785   
;;;1786     /* Enable the SPI Error Interrupt Bit */
;;;1787     __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
;;;1788   
;;;1789     /* Enable Rx DMA Request */
;;;1790     SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1791   
;;;1792   error:
;;;1793     /* Process Unlocked */
;;;1794     __HAL_UNLOCK(hspi);
;;;1795     return errorcode;
;;;1796   }
00002e  bdf8              POP      {r3-r7,pc}
                  |L16.48|
000030  bf00              NOP                            ;1684
000032  205c              MOVS     r0,#0x5c              ;1684
000034  5d00              LDRB     r0,[r0,r4]            ;1684
000036  2801              CMP      r0,#1                 ;1684
000038  d101              BNE      |L16.62|
00003a  2002              MOVS     r0,#2                 ;1684
00003c  e7f7              B        |L16.46|
                  |L16.62|
00003e  2101              MOVS     r1,#1                 ;1684
000040  205c              MOVS     r0,#0x5c              ;1684
000042  5501              STRB     r1,[r0,r4]            ;1684
000044  bf00              NOP                            ;1684
000046  205d              MOVS     r0,#0x5d              ;1686
000048  5d00              LDRB     r0,[r0,r4]            ;1686
00004a  2801              CMP      r0,#1                 ;1686
00004c  d002              BEQ      |L16.84|
00004e  2002              MOVS     r0,#2                 ;1688
000050  9000              STR      r0,[sp,#0]            ;1688
000052  e0a6              B        |L16.418|
                  |L16.84|
000054  2e00              CMP      r6,#0                 ;1692
000056  d001              BEQ      |L16.92|
000058  2d00              CMP      r5,#0                 ;1692
00005a  d102              BNE      |L16.98|
                  |L16.92|
00005c  2001              MOVS     r0,#1                 ;1694
00005e  9000              STR      r0,[sp,#0]            ;1694
000060  e09f              B        |L16.418|
                  |L16.98|
000062  2104              MOVS     r1,#4                 ;1699
000064  205d              MOVS     r0,#0x5d              ;1699
000066  5501              STRB     r1,[r0,r4]            ;1699
000068  2000              MOVS     r0,#0                 ;1700
00006a  6620              STR      r0,[r4,#0x60]         ;1700
00006c  6426              STR      r6,[r4,#0x40]         ;1701
00006e  2044              MOVS     r0,#0x44              ;1702
000070  5305              STRH     r5,[r0,r4]            ;1702
000072  2046              MOVS     r0,#0x46              ;1703
000074  5305              STRH     r5,[r0,r4]            ;1703
000076  2000              MOVS     r0,#0                 ;1706
000078  64e0              STR      r0,[r4,#0x4c]         ;1706
00007a  6520              STR      r0,[r4,#0x50]         ;1707
00007c  87a0              STRH     r0,[r4,#0x3c]         ;1708
00007e  87e0              STRH     r0,[r4,#0x3e]         ;1709
000080  0349              LSLS     r1,r1,#13             ;1712
000082  68a0              LDR      r0,[r4,#8]            ;1712
000084  4288              CMP      r0,r1                 ;1712
000086  d105              BNE      |L16.148|
000088  6820              LDR      r0,[r4,#0]            ;1714
00008a  6800              LDR      r0,[r0,#0]            ;1714
00008c  1049              ASRS     r1,r1,#1              ;1714
00008e  4388              BICS     r0,r0,r1              ;1714
000090  6821              LDR      r1,[r4,#0]            ;1714
000092  6008              STR      r0,[r1,#0]            ;1714
                  |L16.148|
000094  2101              MOVS     r1,#1                 ;1719
000096  0349              LSLS     r1,r1,#13             ;1719
000098  6aa0              LDR      r0,[r4,#0x28]         ;1719
00009a  4288              CMP      r0,r1                 ;1719
00009c  d10d              BNE      |L16.186|
00009e  bf00              NOP                            ;1721
0000a0  6820              LDR      r0,[r4,#0]            ;1721
0000a2  6800              LDR      r0,[r0,#0]            ;1721
0000a4  4388              BICS     r0,r0,r1              ;1721
0000a6  6821              LDR      r1,[r4,#0]            ;1721
0000a8  6008              STR      r0,[r1,#0]            ;1721
0000aa  6820              LDR      r0,[r4,#0]            ;1721
0000ac  6800              LDR      r0,[r0,#0]            ;1721
0000ae  2101              MOVS     r1,#1                 ;1721
0000b0  0349              LSLS     r1,r1,#13             ;1721
0000b2  4308              ORRS     r0,r0,r1              ;1721
0000b4  6821              LDR      r1,[r4,#0]            ;1721
0000b6  6008              STR      r0,[r1,#0]            ;1721
0000b8  bf00              NOP                            ;1721
                  |L16.186|
0000ba  6820              LDR      r0,[r4,#0]            ;1735
0000bc  6840              LDR      r0,[r0,#4]            ;1735
0000be  2101              MOVS     r1,#1                 ;1735
0000c0  0349              LSLS     r1,r1,#13             ;1735
0000c2  4388              BICS     r0,r0,r1              ;1735
0000c4  6821              LDR      r1,[r4,#0]            ;1735
0000c6  6048              STR      r0,[r1,#4]            ;1735
0000c8  2107              MOVS     r1,#7                 ;1736
0000ca  0209              LSLS     r1,r1,#8              ;1736
0000cc  68e0              LDR      r0,[r4,#0xc]          ;1736
0000ce  4288              CMP      r0,r1                 ;1736
0000d0  d907              BLS      |L16.226|
0000d2  6820              LDR      r0,[r4,#0]            ;1739
0000d4  6840              LDR      r0,[r0,#4]            ;1739
0000d6  2101              MOVS     r1,#1                 ;1739
0000d8  0309              LSLS     r1,r1,#12             ;1739
0000da  4388              BICS     r0,r0,r1              ;1739
0000dc  6821              LDR      r1,[r4,#0]            ;1739
0000de  6048              STR      r0,[r1,#4]            ;1739
0000e0  e032              B        |L16.328|
                  |L16.226|
0000e2  6820              LDR      r0,[r4,#0]            ;1744
0000e4  6840              LDR      r0,[r0,#4]            ;1744
0000e6  2101              MOVS     r1,#1                 ;1744
0000e8  0309              LSLS     r1,r1,#12             ;1744
0000ea  4308              ORRS     r0,r0,r1              ;1744
0000ec  6821              LDR      r1,[r4,#0]            ;1744
0000ee  6048              STR      r0,[r1,#4]            ;1744
0000f0  6da0              LDR      r0,[r4,#0x58]         ;1746
0000f2  6940              LDR      r0,[r0,#0x14]         ;1746
0000f4  2101              MOVS     r1,#1                 ;1746
0000f6  0289              LSLS     r1,r1,#10             ;1746
0000f8  4288              CMP      r0,r1                 ;1746
0000fa  d125              BNE      |L16.328|
0000fc  6820              LDR      r0,[r4,#0]            ;1749
0000fe  6840              LDR      r0,[r0,#4]            ;1749
000100  0089              LSLS     r1,r1,#2              ;1749
000102  4388              BICS     r0,r0,r1              ;1749
000104  6821              LDR      r1,[r4,#0]            ;1749
000106  6048              STR      r0,[r1,#4]            ;1749
000108  2046              MOVS     r0,#0x46              ;1751
00010a  5b00              LDRH     r0,[r0,r4]            ;1751
00010c  07c0              LSLS     r0,r0,#31             ;1751
00010e  0fc0              LSRS     r0,r0,#31             ;1751
000110  2800              CMP      r0,#0                 ;1751
000112  d10c              BNE      |L16.302|
000114  6820              LDR      r0,[r4,#0]            ;1753
000116  6840              LDR      r0,[r0,#4]            ;1753
000118  2101              MOVS     r1,#1                 ;1753
00011a  0349              LSLS     r1,r1,#13             ;1753
00011c  4388              BICS     r0,r0,r1              ;1753
00011e  6821              LDR      r1,[r4,#0]            ;1753
000120  6048              STR      r0,[r1,#4]            ;1753
000122  2046              MOVS     r0,#0x46              ;1754
000124  5b00              LDRH     r0,[r0,r4]            ;1754
000126  1041              ASRS     r1,r0,#1              ;1754
000128  2046              MOVS     r0,#0x46              ;1754
00012a  5301              STRH     r1,[r0,r4]            ;1754
00012c  e00c              B        |L16.328|
                  |L16.302|
00012e  6820              LDR      r0,[r4,#0]            ;1758
000130  6840              LDR      r0,[r0,#4]            ;1758
000132  2101              MOVS     r1,#1                 ;1758
000134  0349              LSLS     r1,r1,#13             ;1758
000136  4308              ORRS     r0,r0,r1              ;1758
000138  6821              LDR      r1,[r4,#0]            ;1758
00013a  6048              STR      r0,[r1,#4]            ;1758
00013c  2046              MOVS     r0,#0x46              ;1759
00013e  5b00              LDRH     r0,[r0,r4]            ;1759
000140  1040              ASRS     r0,r0,#1              ;1759
000142  1c40              ADDS     r0,r0,#1              ;1759
000144  2146              MOVS     r1,#0x46              ;1759
000146  5308              STRH     r0,[r1,r4]            ;1759
                  |L16.328|
000148  4819              LDR      r0,|L16.432|
00014a  6da1              LDR      r1,[r4,#0x58]         ;1765
00014c  62c8              STR      r0,[r1,#0x2c]         ;1765
00014e  4819              LDR      r0,|L16.436|
000150  6da1              LDR      r1,[r4,#0x58]         ;1768
000152  6288              STR      r0,[r1,#0x28]         ;1768
000154  4818              LDR      r0,|L16.440|
000156  6da1              LDR      r1,[r4,#0x58]         ;1771
000158  6308              STR      r0,[r1,#0x30]         ;1771
00015a  2000              MOVS     r0,#0                 ;1774
00015c  6da1              LDR      r1,[r4,#0x58]         ;1774
00015e  6348              STR      r0,[r1,#0x34]         ;1774
000160  2746              MOVS     r7,#0x46              ;1777
000162  5b3b              LDRH     r3,[r7,r4]            ;1777
000164  6827              LDR      r7,[r4,#0]            ;1777
000166  4639              MOV      r1,r7                 ;1777
000168  310c              ADDS     r1,r1,#0xc            ;1777
00016a  6c22              LDR      r2,[r4,#0x40]         ;1777
00016c  6da0              LDR      r0,[r4,#0x58]         ;1777
00016e  f7fffffe          BL       HAL_DMA_Start_IT
000172  6820              LDR      r0,[r4,#0]            ;1780
000174  6800              LDR      r0,[r0,#0]            ;1780
000176  2140              MOVS     r1,#0x40              ;1780
000178  4008              ANDS     r0,r0,r1              ;1780
00017a  2840              CMP      r0,#0x40              ;1780
00017c  d004              BEQ      |L16.392|
00017e  6820              LDR      r0,[r4,#0]            ;1783
000180  6800              LDR      r0,[r0,#0]            ;1783
000182  4308              ORRS     r0,r0,r1              ;1783
000184  6821              LDR      r1,[r4,#0]            ;1783
000186  6008              STR      r0,[r1,#0]            ;1783
                  |L16.392|
000188  6820              LDR      r0,[r4,#0]            ;1787
00018a  6840              LDR      r0,[r0,#4]            ;1787
00018c  2120              MOVS     r1,#0x20              ;1787
00018e  4308              ORRS     r0,r0,r1              ;1787
000190  6821              LDR      r1,[r4,#0]            ;1787
000192  6048              STR      r0,[r1,#4]            ;1787
000194  6820              LDR      r0,[r4,#0]            ;1790
000196  6840              LDR      r0,[r0,#4]            ;1790
000198  2101              MOVS     r1,#1                 ;1790
00019a  4308              ORRS     r0,r0,r1              ;1790
00019c  6821              LDR      r1,[r4,#0]            ;1790
00019e  6048              STR      r0,[r1,#4]            ;1790
0001a0  bf00              NOP                            ;1792
                  |L16.418|
0001a2  bf00              NOP                            ;1794
0001a4  2100              MOVS     r1,#0                 ;1794
0001a6  205c              MOVS     r0,#0x5c              ;1794
0001a8  5501              STRB     r1,[r0,r4]            ;1794
0001aa  bf00              NOP                            ;1794
0001ac  9800              LDR      r0,[sp,#0]            ;1795
0001ae  e73e              B        |L16.46|
;;;1797   
                          ENDP

                  |L16.432|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L16.436|
                          DCD      SPI_DMAReceiveCplt
                  |L16.440|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Receive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_IT PROC
;;;1323     */
;;;1324   HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1325   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1326     HAL_StatusTypeDef errorcode = HAL_OK;
000008  2700              MOVS     r7,#0
;;;1327   
;;;1328     if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
00000a  2107              MOVS     r1,#7
00000c  0209              LSLS     r1,r1,#8
00000e  68e0              LDR      r0,[r4,#0xc]
000010  4288              CMP      r0,r1
000012  d801              BHI      |L17.24|
000014  2d01              CMP      r5,#1
000016  d900              BLS      |L17.26|
                  |L17.24|
;;;1329     {
;;;1330       /* in this case, 16-bit access is performed on Data
;;;1331          So, check Data is 16-bit aligned address */
;;;1332       assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
000018  bf00              NOP      
                  |L17.26|
;;;1333     }
;;;1334   
;;;1335     if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
00001a  68a0              LDR      r0,[r4,#8]
00001c  2800              CMP      r0,#0
00001e  d10e              BNE      |L17.62|
000020  21ff              MOVS     r1,#0xff
000022  3105              ADDS     r1,#5
000024  6860              LDR      r0,[r4,#4]
000026  4288              CMP      r0,r1
000028  d109              BNE      |L17.62|
;;;1336     {
;;;1337       hspi->State = HAL_SPI_STATE_BUSY_RX;
00002a  2104              MOVS     r1,#4
00002c  205d              MOVS     r0,#0x5d
00002e  5501              STRB     r1,[r0,r4]
;;;1338       /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1339       return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
000030  462b              MOV      r3,r5
000032  4632              MOV      r2,r6
000034  4631              MOV      r1,r6
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       HAL_SPI_TransmitReceive_IT
                  |L17.60|
;;;1340     }
;;;1341   
;;;1342     /* Process Locked */
;;;1343     __HAL_LOCK(hspi);
;;;1344   
;;;1345     if (hspi->State != HAL_SPI_STATE_READY)
;;;1346     {
;;;1347       errorcode = HAL_BUSY;
;;;1348       goto error;
;;;1349     }
;;;1350   
;;;1351     if ((pData == NULL) || (Size == 0U))
;;;1352     {
;;;1353       errorcode = HAL_ERROR;
;;;1354       goto error;
;;;1355     }
;;;1356   
;;;1357     /* Set the transaction information */
;;;1358     hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;1359     hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1360     hspi->pRxBuffPtr  = (uint8_t *)pData;
;;;1361     hspi->RxXferSize  = Size;
;;;1362     hspi->RxXferCount = Size;
;;;1363   
;;;1364     /* Init field not used in handle to zero */
;;;1365     hspi->pTxBuffPtr  = (uint8_t *)NULL;
;;;1366     hspi->TxXferSize  = 0U;
;;;1367     hspi->TxXferCount = 0U;
;;;1368     hspi->TxISR       = NULL;
;;;1369   
;;;1370     /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
;;;1371     if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1372     {
;;;1373       /* Set fiforxthresold according the reception data length: 16 bit */
;;;1374       CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1375       hspi->RxISR = SPI_RxISR_16BIT;
;;;1376     }
;;;1377     else
;;;1378     {
;;;1379       /* Set fiforxthresold according the reception data length: 8 bit */
;;;1380       SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1381       hspi->RxISR = SPI_RxISR_8BIT;
;;;1382     }
;;;1383   
;;;1384     /* Configure communication direction : 1Line */
;;;1385     if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1386     {
;;;1387       SPI_1LINE_RX(hspi);
;;;1388     }
;;;1389   
;;;1390   #if (USE_SPI_CRC != 0U)
;;;1391     /* Reset CRC Calculation */
;;;1392     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1393     {
;;;1394       hspi->CRCSize = 1U;
;;;1395       if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
;;;1396       {
;;;1397         hspi->CRCSize = 2U;
;;;1398       }
;;;1399       SPI_RESET_CRC(hspi);
;;;1400     }
;;;1401     else
;;;1402     {
;;;1403       hspi->CRCSize = 0U;
;;;1404     }
;;;1405   #endif /* USE_SPI_CRC */
;;;1406   
;;;1407     /* Enable TXE and ERR interrupt */
;;;1408     __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
;;;1409   
;;;1410     /* Note : The SPI must be enabled after unlocking current process
;;;1411               to avoid the risk of SPI interrupt handle execution before current
;;;1412               process unlock */
;;;1413   
;;;1414     /* Check if the SPI is already enabled */
;;;1415     if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1416     {
;;;1417       /* Enable SPI peripheral */
;;;1418       __HAL_SPI_ENABLE(hspi);
;;;1419     }
;;;1420   
;;;1421   error :
;;;1422     /* Process Unlocked */
;;;1423     __HAL_UNLOCK(hspi);
;;;1424     return errorcode;
;;;1425   }
00003c  bdf0              POP      {r4-r7,pc}
                  |L17.62|
00003e  bf00              NOP                            ;1343
000040  205c              MOVS     r0,#0x5c              ;1343
000042  5d00              LDRB     r0,[r0,r4]            ;1343
000044  2801              CMP      r0,#1                 ;1343
000046  d101              BNE      |L17.76|
000048  2002              MOVS     r0,#2                 ;1343
00004a  e7f7              B        |L17.60|
                  |L17.76|
00004c  2101              MOVS     r1,#1                 ;1343
00004e  205c              MOVS     r0,#0x5c              ;1343
000050  5501              STRB     r1,[r0,r4]            ;1343
000052  bf00              NOP                            ;1343
000054  205d              MOVS     r0,#0x5d              ;1345
000056  5d00              LDRB     r0,[r0,r4]            ;1345
000058  2801              CMP      r0,#1                 ;1345
00005a  d001              BEQ      |L17.96|
00005c  2702              MOVS     r7,#2                 ;1347
00005e  e06b              B        |L17.312|
                  |L17.96|
000060  2e00              CMP      r6,#0                 ;1351
000062  d001              BEQ      |L17.104|
000064  2d00              CMP      r5,#0                 ;1351
000066  d101              BNE      |L17.108|
                  |L17.104|
000068  2701              MOVS     r7,#1                 ;1353
00006a  e065              B        |L17.312|
                  |L17.108|
00006c  2104              MOVS     r1,#4                 ;1358
00006e  205d              MOVS     r0,#0x5d              ;1358
000070  5501              STRB     r1,[r0,r4]            ;1358
000072  2000              MOVS     r0,#0                 ;1359
000074  6620              STR      r0,[r4,#0x60]         ;1359
000076  6426              STR      r6,[r4,#0x40]         ;1360
000078  2044              MOVS     r0,#0x44              ;1361
00007a  5305              STRH     r5,[r0,r4]            ;1361
00007c  2046              MOVS     r0,#0x46              ;1362
00007e  5305              STRH     r5,[r0,r4]            ;1362
000080  2000              MOVS     r0,#0                 ;1365
000082  63a0              STR      r0,[r4,#0x38]         ;1365
000084  87a0              STRH     r0,[r4,#0x3c]         ;1366
000086  87e0              STRH     r0,[r4,#0x3e]         ;1367
000088  6520              STR      r0,[r4,#0x50]         ;1368
00008a  2107              MOVS     r1,#7                 ;1371
00008c  0209              LSLS     r1,r1,#8              ;1371
00008e  68e0              LDR      r0,[r4,#0xc]          ;1371
000090  4288              CMP      r0,r1                 ;1371
000092  d909              BLS      |L17.168|
000094  6820              LDR      r0,[r4,#0]            ;1374
000096  6840              LDR      r0,[r0,#4]            ;1374
000098  2101              MOVS     r1,#1                 ;1374
00009a  0309              LSLS     r1,r1,#12             ;1374
00009c  4388              BICS     r0,r0,r1              ;1374
00009e  6821              LDR      r1,[r4,#0]            ;1374
0000a0  6048              STR      r0,[r1,#4]            ;1374
0000a2  4829              LDR      r0,|L17.328|
0000a4  64e0              STR      r0,[r4,#0x4c]         ;1375
0000a6  e008              B        |L17.186|
                  |L17.168|
0000a8  6820              LDR      r0,[r4,#0]            ;1380
0000aa  6840              LDR      r0,[r0,#4]            ;1380
0000ac  2101              MOVS     r1,#1                 ;1380
0000ae  0309              LSLS     r1,r1,#12             ;1380
0000b0  4308              ORRS     r0,r0,r1              ;1380
0000b2  6821              LDR      r1,[r4,#0]            ;1380
0000b4  6048              STR      r0,[r1,#4]            ;1380
0000b6  4825              LDR      r0,|L17.332|
0000b8  64e0              STR      r0,[r4,#0x4c]         ;1381
                  |L17.186|
0000ba  2101              MOVS     r1,#1                 ;1385
0000bc  03c9              LSLS     r1,r1,#15             ;1385
0000be  68a0              LDR      r0,[r4,#8]            ;1385
0000c0  4288              CMP      r0,r1                 ;1385
0000c2  d105              BNE      |L17.208|
0000c4  6820              LDR      r0,[r4,#0]            ;1387
0000c6  6800              LDR      r0,[r0,#0]            ;1387
0000c8  1049              ASRS     r1,r1,#1              ;1387
0000ca  4388              BICS     r0,r0,r1              ;1387
0000cc  6821              LDR      r1,[r4,#0]            ;1387
0000ce  6008              STR      r0,[r1,#0]            ;1387
                  |L17.208|
0000d0  2101              MOVS     r1,#1                 ;1392
0000d2  0349              LSLS     r1,r1,#13             ;1392
0000d4  6aa0              LDR      r0,[r4,#0x28]         ;1392
0000d6  4288              CMP      r0,r1                 ;1392
0000d8  d11a              BNE      |L17.272|
0000da  2001              MOVS     r0,#1                 ;1394
0000dc  64a0              STR      r0,[r4,#0x48]         ;1394
0000de  2107              MOVS     r1,#7                 ;1395
0000e0  0209              LSLS     r1,r1,#8              ;1395
0000e2  68e0              LDR      r0,[r4,#0xc]          ;1395
0000e4  4288              CMP      r0,r1                 ;1395
0000e6  d803              BHI      |L17.240|
0000e8  6b20              LDR      r0,[r4,#0x30]         ;1395
0000ea  2802              CMP      r0,#2                 ;1395
0000ec  d100              BNE      |L17.240|
0000ee  64a0              STR      r0,[r4,#0x48]         ;1397
                  |L17.240|
0000f0  bf00              NOP                            ;1399
0000f2  6820              LDR      r0,[r4,#0]            ;1399
0000f4  6800              LDR      r0,[r0,#0]            ;1399
0000f6  2101              MOVS     r1,#1                 ;1399
0000f8  0349              LSLS     r1,r1,#13             ;1399
0000fa  4388              BICS     r0,r0,r1              ;1399
0000fc  6821              LDR      r1,[r4,#0]            ;1399
0000fe  6008              STR      r0,[r1,#0]            ;1399
000100  6820              LDR      r0,[r4,#0]            ;1399
000102  6800              LDR      r0,[r0,#0]            ;1399
000104  2101              MOVS     r1,#1                 ;1399
000106  0349              LSLS     r1,r1,#13             ;1399
000108  4308              ORRS     r0,r0,r1              ;1399
00010a  6821              LDR      r1,[r4,#0]            ;1399
00010c  6008              STR      r0,[r1,#0]            ;1399
00010e  e001              B        |L17.276|
                  |L17.272|
000110  2000              MOVS     r0,#0                 ;1403
000112  64a0              STR      r0,[r4,#0x48]         ;1403
                  |L17.276|
000114  6820              LDR      r0,[r4,#0]            ;1408
000116  6840              LDR      r0,[r0,#4]            ;1408
000118  2160              MOVS     r1,#0x60              ;1408
00011a  4308              ORRS     r0,r0,r1              ;1408
00011c  6821              LDR      r1,[r4,#0]            ;1408
00011e  6048              STR      r0,[r1,#4]            ;1408
000120  6820              LDR      r0,[r4,#0]            ;1415
000122  6800              LDR      r0,[r0,#0]            ;1415
000124  2140              MOVS     r1,#0x40              ;1415
000126  4008              ANDS     r0,r0,r1              ;1415
000128  2840              CMP      r0,#0x40              ;1415
00012a  d004              BEQ      |L17.310|
00012c  6820              LDR      r0,[r4,#0]            ;1418
00012e  6800              LDR      r0,[r0,#0]            ;1418
000130  4308              ORRS     r0,r0,r1              ;1418
000132  6821              LDR      r1,[r4,#0]            ;1418
000134  6008              STR      r0,[r1,#0]            ;1418
                  |L17.310|
000136  bf00              NOP                            ;1421
                  |L17.312|
000138  bf00              NOP                            ;1423
00013a  2100              MOVS     r1,#0                 ;1423
00013c  205c              MOVS     r0,#0x5c              ;1423
00013e  5501              STRB     r1,[r0,r4]            ;1423
000140  bf00              NOP                            ;1423
000142  4638              MOV      r0,r7                 ;1424
000144  e77a              B        |L17.60|
;;;1426   
                          ENDP

000146  0000              DCW      0x0000
                  |L17.328|
                          DCD      SPI_RxISR_16BIT
                  |L17.332|
                          DCD      SPI_RxISR_8BIT

                          AREA ||i.HAL_SPI_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxCpltCallback PROC
;;;2516     */
;;;2517   __weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;2518   {
;;;2519     /* Prevent unused argument(s) compilation warning */
;;;2520     UNUSED(hspi);
;;;2521   
;;;2522     /* NOTE : This function should not be modified, when the callback is needed,
;;;2523               the HAL_SPI_RxCpltCallback should be implemented in the user file
;;;2524      */
;;;2525   }
;;;2526   
                          ENDP


                          AREA ||i.HAL_SPI_RxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxHalfCpltCallback PROC
;;;2564     */
;;;2565   __weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;2566   {
;;;2567     /* Prevent unused argument(s) compilation warning */
;;;2568     UNUSED(hspi);
;;;2569   
;;;2570     /* NOTE : This function should not be modified, when the callback is needed,
;;;2571               the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
;;;2572      */
;;;2573   }
;;;2574   
                          ENDP


                          AREA ||i.HAL_SPI_Transmit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Transmit PROC
;;;511      */
;;;512    HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5fe              PUSH     {r1-r7,lr}
;;;513    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4617              MOV      r7,r2
000008  461e              MOV      r6,r3
;;;514      uint32_t tickstart = 0U;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;515      HAL_StatusTypeDef errorcode = HAL_OK;
00000e  9001              STR      r0,[sp,#4]
;;;516    
;;;517      if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
000010  2107              MOVS     r1,#7
000012  0209              LSLS     r1,r1,#8
000014  68e0              LDR      r0,[r4,#0xc]
000016  4288              CMP      r0,r1
000018  d801              BHI      |L20.30|
00001a  2f01              CMP      r7,#1
00001c  d900              BLS      |L20.32|
                  |L20.30|
;;;518      {
;;;519        /* in this case, 16-bit access is performed on Data
;;;520           So, check Data is 16-bit aligned address */
;;;521        assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
00001e  bf00              NOP      
                  |L20.32|
;;;522      }
;;;523    
;;;524      /* Check Direction parameter */
;;;525      assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;526    
;;;527      /* Process Locked */
;;;528      __HAL_LOCK(hspi);
000020  bf00              NOP      
000022  205c              MOVS     r0,#0x5c
000024  5d00              LDRB     r0,[r0,r4]
000026  2801              CMP      r0,#1
000028  d101              BNE      |L20.46|
00002a  2002              MOVS     r0,#2
                  |L20.44|
;;;529    
;;;530      /* Init tickstart for timeout management*/
;;;531      tickstart = HAL_GetTick();
;;;532    
;;;533      if (hspi->State != HAL_SPI_STATE_READY)
;;;534      {
;;;535        errorcode = HAL_BUSY;
;;;536        goto error;
;;;537      }
;;;538    
;;;539      if ((pData == NULL) || (Size == 0U))
;;;540      {
;;;541        errorcode = HAL_ERROR;
;;;542        goto error;
;;;543      }
;;;544    
;;;545      /* Set the transaction information */
;;;546      hspi->State       = HAL_SPI_STATE_BUSY_TX;
;;;547      hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;548      hspi->pTxBuffPtr  = (uint8_t *)pData;
;;;549      hspi->TxXferSize  = Size;
;;;550      hspi->TxXferCount = Size;
;;;551    
;;;552      /*Init field not used in handle to zero */
;;;553      hspi->pRxBuffPtr  = (uint8_t *)NULL;
;;;554      hspi->RxXferSize  = 0U;
;;;555      hspi->RxXferCount = 0U;
;;;556      hspi->TxISR       = NULL;
;;;557      hspi->RxISR       = NULL;
;;;558    
;;;559      /* Configure communication direction : 1Line */
;;;560      if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;561      {
;;;562        SPI_1LINE_TX(hspi);
;;;563      }
;;;564    
;;;565    #if (USE_SPI_CRC != 0U)
;;;566      /* Reset CRC Calculation */
;;;567      if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;568      {
;;;569        SPI_RESET_CRC(hspi);
;;;570      }
;;;571    #endif /* USE_SPI_CRC */
;;;572    
;;;573      /* Check if the SPI is already enabled */
;;;574      if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;575      {
;;;576        /* Enable SPI peripheral */
;;;577        __HAL_SPI_ENABLE(hspi);
;;;578      }
;;;579    
;;;580      /* Transmit data in 16 Bit mode */
;;;581      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;582      {
;;;583        if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
;;;584        {
;;;585          hspi->Instance->DR = *((uint16_t *)pData);
;;;586          pData += sizeof(uint16_t);
;;;587          hspi->TxXferCount--;
;;;588        }
;;;589        /* Transmit data in 16 Bit mode */
;;;590        while (hspi->TxXferCount > 0U)
;;;591        {
;;;592          /* Wait until TXE flag is set to send data */
;;;593          if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
;;;594          {
;;;595            hspi->Instance->DR = *((uint16_t *)pData);
;;;596            pData += sizeof(uint16_t);
;;;597            hspi->TxXferCount--;
;;;598          }
;;;599          else
;;;600          {
;;;601            /* Timeout management */
;;;602            if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
;;;603            {
;;;604              errorcode = HAL_TIMEOUT;
;;;605              goto error;
;;;606            }
;;;607          }
;;;608        }
;;;609      }
;;;610      /* Transmit data in 8 Bit mode */
;;;611      else
;;;612      {
;;;613        if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
;;;614        {
;;;615          if (hspi->TxXferCount > 1U)
;;;616          {
;;;617            /* write on the data register in packing mode */
;;;618            hspi->Instance->DR = *((uint16_t *)pData);
;;;619            pData += sizeof(uint16_t);
;;;620            hspi->TxXferCount -= 2U;
;;;621          }
;;;622          else
;;;623          {
;;;624            *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
;;;625            hspi->TxXferCount--;
;;;626          }
;;;627        }
;;;628        while (hspi->TxXferCount > 0U)
;;;629        {
;;;630          /* Wait until TXE flag is set to send data */
;;;631          if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
;;;632          {
;;;633            if (hspi->TxXferCount > 1U)
;;;634            {
;;;635              /* write on the data register in packing mode */
;;;636              hspi->Instance->DR = *((uint16_t *)pData);
;;;637              pData += sizeof(uint16_t);
;;;638              hspi->TxXferCount -= 2U;
;;;639            }
;;;640            else
;;;641            {
;;;642              *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
;;;643              hspi->TxXferCount--;
;;;644            }
;;;645          }
;;;646          else
;;;647          {
;;;648            /* Timeout management */
;;;649            if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
;;;650            {
;;;651              errorcode = HAL_TIMEOUT;
;;;652              goto error;
;;;653            }
;;;654          }
;;;655        }
;;;656      }
;;;657    #if (USE_SPI_CRC != 0U)
;;;658      /* Enable CRC Transmission */
;;;659      if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;660      {
;;;661        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;662      }
;;;663    #endif /* USE_SPI_CRC */
;;;664    
;;;665      /* Check the end of the transaction */
;;;666      if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
;;;667      {
;;;668        hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
;;;669      }
;;;670    
;;;671      /* Clear overrun flag in 2 Lines communication mode because received is not read */
;;;672      if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;673      {
;;;674        __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;675      }
;;;676    
;;;677      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
;;;678      {
;;;679        errorcode = HAL_ERROR;
;;;680      }
;;;681    
;;;682    error:
;;;683      hspi->State = HAL_SPI_STATE_READY;
;;;684      /* Process Unlocked */
;;;685      __HAL_UNLOCK(hspi);
;;;686      return errorcode;
;;;687    }
00002c  bdfe              POP      {r1-r7,pc}
                  |L20.46|
00002e  2101              MOVS     r1,#1                 ;528
000030  205c              MOVS     r0,#0x5c              ;528
000032  5501              STRB     r1,[r0,r4]            ;528
000034  bf00              NOP                            ;528
000036  f7fffffe          BL       HAL_GetTick
00003a  9002              STR      r0,[sp,#8]            ;531
00003c  205d              MOVS     r0,#0x5d              ;533
00003e  5d00              LDRB     r0,[r0,r4]            ;533
000040  2801              CMP      r0,#1                 ;533
000042  d002              BEQ      |L20.74|
000044  2002              MOVS     r0,#2                 ;535
000046  9001              STR      r0,[sp,#4]            ;535
000048  e0dd              B        |L20.518|
                  |L20.74|
00004a  2d00              CMP      r5,#0                 ;539
00004c  d001              BEQ      |L20.82|
00004e  2f00              CMP      r7,#0                 ;539
000050  d102              BNE      |L20.88|
                  |L20.82|
000052  2001              MOVS     r0,#1                 ;541
000054  9001              STR      r0,[sp,#4]            ;541
000056  e0d6              B        |L20.518|
                  |L20.88|
000058  2103              MOVS     r1,#3                 ;546
00005a  205d              MOVS     r0,#0x5d              ;546
00005c  5501              STRB     r1,[r0,r4]            ;546
00005e  2000              MOVS     r0,#0                 ;547
000060  6620              STR      r0,[r4,#0x60]         ;547
000062  63a5              STR      r5,[r4,#0x38]         ;548
000064  87a7              STRH     r7,[r4,#0x3c]         ;549
000066  87e7              STRH     r7,[r4,#0x3e]         ;550
000068  6420              STR      r0,[r4,#0x40]         ;553
00006a  2100              MOVS     r1,#0                 ;554
00006c  2044              MOVS     r0,#0x44              ;554
00006e  5301              STRH     r1,[r0,r4]            ;554
000070  2046              MOVS     r0,#0x46              ;555
000072  5301              STRH     r1,[r0,r4]            ;555
000074  2000              MOVS     r0,#0                 ;556
000076  6520              STR      r0,[r4,#0x50]         ;556
000078  64e0              STR      r0,[r4,#0x4c]         ;557
00007a  2101              MOVS     r1,#1                 ;560
00007c  03c9              LSLS     r1,r1,#15             ;560
00007e  68a0              LDR      r0,[r4,#8]            ;560
000080  4288              CMP      r0,r1                 ;560
000082  d105              BNE      |L20.144|
000084  6820              LDR      r0,[r4,#0]            ;562
000086  6800              LDR      r0,[r0,#0]            ;562
000088  1049              ASRS     r1,r1,#1              ;562
00008a  4308              ORRS     r0,r0,r1              ;562
00008c  6821              LDR      r1,[r4,#0]            ;562
00008e  6008              STR      r0,[r1,#0]            ;562
                  |L20.144|
000090  2101              MOVS     r1,#1                 ;567
000092  0349              LSLS     r1,r1,#13             ;567
000094  6aa0              LDR      r0,[r4,#0x28]         ;567
000096  4288              CMP      r0,r1                 ;567
000098  d10d              BNE      |L20.182|
00009a  bf00              NOP                            ;569
00009c  6820              LDR      r0,[r4,#0]            ;569
00009e  6800              LDR      r0,[r0,#0]            ;569
0000a0  4388              BICS     r0,r0,r1              ;569
0000a2  6821              LDR      r1,[r4,#0]            ;569
0000a4  6008              STR      r0,[r1,#0]            ;569
0000a6  6820              LDR      r0,[r4,#0]            ;569
0000a8  6800              LDR      r0,[r0,#0]            ;569
0000aa  2101              MOVS     r1,#1                 ;569
0000ac  0349              LSLS     r1,r1,#13             ;569
0000ae  4308              ORRS     r0,r0,r1              ;569
0000b0  6821              LDR      r1,[r4,#0]            ;569
0000b2  6008              STR      r0,[r1,#0]            ;569
0000b4  bf00              NOP                            ;569
                  |L20.182|
0000b6  6820              LDR      r0,[r4,#0]            ;574
0000b8  6800              LDR      r0,[r0,#0]            ;574
0000ba  2140              MOVS     r1,#0x40              ;574
0000bc  4008              ANDS     r0,r0,r1              ;574
0000be  2840              CMP      r0,#0x40              ;574
0000c0  d004              BEQ      |L20.204|
0000c2  6820              LDR      r0,[r4,#0]            ;577
0000c4  6800              LDR      r0,[r0,#0]            ;577
0000c6  4308              ORRS     r0,r0,r1              ;577
0000c8  6821              LDR      r1,[r4,#0]            ;577
0000ca  6008              STR      r0,[r1,#0]            ;577
                  |L20.204|
0000cc  2107              MOVS     r1,#7                 ;581
0000ce  0209              LSLS     r1,r1,#8              ;581
0000d0  68e0              LDR      r0,[r4,#0xc]          ;581
0000d2  4288              CMP      r0,r1                 ;581
0000d4  d92d              BLS      |L20.306|
0000d6  6860              LDR      r0,[r4,#4]            ;583
0000d8  2800              CMP      r0,#0                 ;583
0000da  d002              BEQ      |L20.226|
0000dc  8fe0              LDRH     r0,[r4,#0x3e]         ;583
0000de  2801              CMP      r0,#1                 ;583
0000e0  d106              BNE      |L20.240|
                  |L20.226|
0000e2  8828              LDRH     r0,[r5,#0]            ;585
0000e4  6821              LDR      r1,[r4,#0]            ;585
0000e6  60c8              STR      r0,[r1,#0xc]          ;585
0000e8  1cad              ADDS     r5,r5,#2              ;586
0000ea  8fe0              LDRH     r0,[r4,#0x3e]         ;587
0000ec  1e40              SUBS     r0,r0,#1              ;587
0000ee  87e0              STRH     r0,[r4,#0x3e]         ;587
                  |L20.240|
0000f0  e01b              B        |L20.298|
                  |L20.242|
0000f2  6820              LDR      r0,[r4,#0]            ;593
0000f4  6880              LDR      r0,[r0,#8]            ;593
0000f6  2102              MOVS     r1,#2                 ;593
0000f8  4008              ANDS     r0,r0,r1              ;593
0000fa  2802              CMP      r0,#2                 ;593
0000fc  d107              BNE      |L20.270|
0000fe  8828              LDRH     r0,[r5,#0]            ;595
000100  6821              LDR      r1,[r4,#0]            ;595
000102  60c8              STR      r0,[r1,#0xc]          ;595
000104  1cad              ADDS     r5,r5,#2              ;596
000106  8fe0              LDRH     r0,[r4,#0x3e]         ;597
000108  1e40              SUBS     r0,r0,#1              ;597
00010a  87e0              STRH     r0,[r4,#0x3e]         ;597
00010c  e00d              B        |L20.298|
                  |L20.270|
00010e  2e00              CMP      r6,#0                 ;602
000110  d008              BEQ      |L20.292|
000112  1c70              ADDS     r0,r6,#1              ;602
000114  2800              CMP      r0,#0                 ;602
000116  d008              BEQ      |L20.298|
000118  f7fffffe          BL       HAL_GetTick
00011c  9902              LDR      r1,[sp,#8]            ;602
00011e  1a40              SUBS     r0,r0,r1              ;602
000120  42b0              CMP      r0,r6                 ;602
000122  d302              BCC      |L20.298|
                  |L20.292|
000124  2003              MOVS     r0,#3                 ;604
000126  9001              STR      r0,[sp,#4]            ;604
000128  e06d              B        |L20.518|
                  |L20.298|
00012a  8fe0              LDRH     r0,[r4,#0x3e]         ;590
00012c  2800              CMP      r0,#0                 ;590
00012e  d1e0              BNE      |L20.242|
000130  e042              B        |L20.440|
                  |L20.306|
000132  6860              LDR      r0,[r4,#4]            ;613
000134  2800              CMP      r0,#0                 ;613
000136  d002              BEQ      |L20.318|
000138  8fe0              LDRH     r0,[r4,#0x3e]         ;613
00013a  2801              CMP      r0,#1                 ;613
00013c  d111              BNE      |L20.354|
                  |L20.318|
00013e  8fe0              LDRH     r0,[r4,#0x3e]         ;615
000140  2801              CMP      r0,#1                 ;615
000142  d907              BLS      |L20.340|
000144  8828              LDRH     r0,[r5,#0]            ;618
000146  6821              LDR      r1,[r4,#0]            ;618
000148  60c8              STR      r0,[r1,#0xc]          ;618
00014a  1cad              ADDS     r5,r5,#2              ;619
00014c  8fe0              LDRH     r0,[r4,#0x3e]         ;620
00014e  1e80              SUBS     r0,r0,#2              ;620
000150  87e0              STRH     r0,[r4,#0x3e]         ;620
000152  e006              B        |L20.354|
                  |L20.340|
000154  7828              LDRB     r0,[r5,#0]            ;624
000156  6821              LDR      r1,[r4,#0]            ;624
000158  7308              STRB     r0,[r1,#0xc]          ;624
00015a  1c6d              ADDS     r5,r5,#1              ;624
00015c  8fe0              LDRH     r0,[r4,#0x3e]         ;625
00015e  1e40              SUBS     r0,r0,#1              ;625
000160  87e0              STRH     r0,[r4,#0x3e]         ;625
                  |L20.354|
000162  e026              B        |L20.434|
                  |L20.356|
000164  6820              LDR      r0,[r4,#0]            ;631
000166  6880              LDR      r0,[r0,#8]            ;631
000168  2102              MOVS     r1,#2                 ;631
00016a  4008              ANDS     r0,r0,r1              ;631
00016c  2802              CMP      r0,#2                 ;631
00016e  d112              BNE      |L20.406|
000170  8fe0              LDRH     r0,[r4,#0x3e]         ;633
000172  2801              CMP      r0,#1                 ;633
000174  d907              BLS      |L20.390|
000176  8828              LDRH     r0,[r5,#0]            ;636
000178  6821              LDR      r1,[r4,#0]            ;636
00017a  60c8              STR      r0,[r1,#0xc]          ;636
00017c  1cad              ADDS     r5,r5,#2              ;637
00017e  8fe0              LDRH     r0,[r4,#0x3e]         ;638
000180  1e80              SUBS     r0,r0,#2              ;638
000182  87e0              STRH     r0,[r4,#0x3e]         ;638
000184  e015              B        |L20.434|
                  |L20.390|
000186  7828              LDRB     r0,[r5,#0]            ;642
000188  6821              LDR      r1,[r4,#0]            ;642
00018a  7308              STRB     r0,[r1,#0xc]          ;642
00018c  1c6d              ADDS     r5,r5,#1              ;642
00018e  8fe0              LDRH     r0,[r4,#0x3e]         ;643
000190  1e40              SUBS     r0,r0,#1              ;643
000192  87e0              STRH     r0,[r4,#0x3e]         ;643
000194  e00d              B        |L20.434|
                  |L20.406|
000196  2e00              CMP      r6,#0                 ;649
000198  d008              BEQ      |L20.428|
00019a  1c70              ADDS     r0,r6,#1              ;649
00019c  2800              CMP      r0,#0                 ;649
00019e  d008              BEQ      |L20.434|
0001a0  f7fffffe          BL       HAL_GetTick
0001a4  9902              LDR      r1,[sp,#8]            ;649
0001a6  1a40              SUBS     r0,r0,r1              ;649
0001a8  42b0              CMP      r0,r6                 ;649
0001aa  d302              BCC      |L20.434|
                  |L20.428|
0001ac  2003              MOVS     r0,#3                 ;651
0001ae  9001              STR      r0,[sp,#4]            ;651
0001b0  e029              B        |L20.518|
                  |L20.434|
0001b2  8fe0              LDRH     r0,[r4,#0x3e]         ;628
0001b4  2800              CMP      r0,#0                 ;628
0001b6  d1d5              BNE      |L20.356|
                  |L20.440|
0001b8  2101              MOVS     r1,#1                 ;659
0001ba  0349              LSLS     r1,r1,#13             ;659
0001bc  6aa0              LDR      r0,[r4,#0x28]         ;659
0001be  4288              CMP      r0,r1                 ;659
0001c0  d105              BNE      |L20.462|
0001c2  6820              LDR      r0,[r4,#0]            ;661
0001c4  6800              LDR      r0,[r0,#0]            ;661
0001c6  1049              ASRS     r1,r1,#1              ;661
0001c8  4308              ORRS     r0,r0,r1              ;661
0001ca  6821              LDR      r1,[r4,#0]            ;661
0001cc  6008              STR      r0,[r1,#0]            ;661
                  |L20.462|
0001ce  4631              MOV      r1,r6                 ;666
0001d0  4620              MOV      r0,r4                 ;666
0001d2  9a02              LDR      r2,[sp,#8]            ;666
0001d4  f7fffffe          BL       SPI_EndRxTxTransaction
0001d8  2800              CMP      r0,#0                 ;666
0001da  d001              BEQ      |L20.480|
0001dc  2020              MOVS     r0,#0x20              ;668
0001de  6620              STR      r0,[r4,#0x60]         ;668
                  |L20.480|
0001e0  68a0              LDR      r0,[r4,#8]            ;672
0001e2  2800              CMP      r0,#0                 ;672
0001e4  d109              BNE      |L20.506|
0001e6  bf00              NOP                            ;674
0001e8  9000              STR      r0,[sp,#0]            ;674
0001ea  6820              LDR      r0,[r4,#0]            ;674
0001ec  68c0              LDR      r0,[r0,#0xc]          ;674
0001ee  9000              STR      r0,[sp,#0]            ;674
0001f0  6820              LDR      r0,[r4,#0]            ;674
0001f2  6880              LDR      r0,[r0,#8]            ;674
0001f4  9000              STR      r0,[sp,#0]            ;674
0001f6  bf00              NOP                            ;674
0001f8  bf00              NOP                            ;674
                  |L20.506|
0001fa  6e20              LDR      r0,[r4,#0x60]         ;677
0001fc  2800              CMP      r0,#0                 ;677
0001fe  d001              BEQ      |L20.516|
000200  2001              MOVS     r0,#1                 ;679
000202  9001              STR      r0,[sp,#4]            ;679
                  |L20.516|
000204  bf00              NOP                            ;682
                  |L20.518|
000206  2101              MOVS     r1,#1                 ;683
000208  205d              MOVS     r0,#0x5d              ;683
00020a  5501              STRB     r1,[r0,r4]            ;683
00020c  bf00              NOP                            ;685
00020e  2100              MOVS     r1,#0                 ;685
000210  205c              MOVS     r0,#0x5c              ;685
000212  5501              STRB     r1,[r0,r4]            ;685
000214  bf00              NOP                            ;685
000216  9801              LDR      r0,[sp,#4]            ;686
000218  e708              B        |L20.44|
;;;688    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive PROC
;;;935      */
;;;936    HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
000000  b5f0              PUSH     {r4-r7,lr}
;;;937                                              uint32_t Timeout)
;;;938    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;939      uint32_t tmp = 0U, tmp1 = 0U;
00000c  2000              MOVS     r0,#0
00000e  9006              STR      r0,[sp,#0x18]
000010  9005              STR      r0,[sp,#0x14]
;;;940    #if (USE_SPI_CRC != 0U)
;;;941      __IO uint16_t tmpreg = 0U;
000012  9004              STR      r0,[sp,#0x10]
;;;942    #endif /* USE_SPI_CRC */
;;;943      uint32_t tickstart = 0U;
000014  9003              STR      r0,[sp,#0xc]
;;;944      /* Variable used to alternate Rx and Tx during transfer */
;;;945      uint32_t txallowed = 1U;
000016  2001              MOVS     r0,#1
000018  9002              STR      r0,[sp,#8]
;;;946      HAL_StatusTypeDef errorcode = HAL_OK;
00001a  2000              MOVS     r0,#0
00001c  9001              STR      r0,[sp,#4]
;;;947    
;;;948      if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
00001e  2107              MOVS     r1,#7
000020  0209              LSLS     r1,r1,#8
000022  68e0              LDR      r0,[r4,#0xc]
000024  4288              CMP      r0,r1
000026  d801              BHI      |L21.44|
000028  2f01              CMP      r7,#1
00002a  d900              BLS      |L21.46|
                  |L21.44|
;;;949      {
;;;950        /* in this case, 16-bit access is performed on Data
;;;951           So, check Data is 16-bit aligned address */
;;;952        assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pTxData));
;;;953        assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pRxData));
00002c  bf00              NOP      
                  |L21.46|
;;;954      }
;;;955    
;;;956      /* Check Direction parameter */
;;;957      assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;958    
;;;959      /* Process Locked */
;;;960      __HAL_LOCK(hspi);
00002e  bf00              NOP      
000030  205c              MOVS     r0,#0x5c
000032  5d00              LDRB     r0,[r0,r4]
000034  2801              CMP      r0,#1
000036  d102              BNE      |L21.62|
000038  2002              MOVS     r0,#2
                  |L21.58|
;;;961    
;;;962      /* Init tickstart for timeout management*/
;;;963      tickstart = HAL_GetTick();
;;;964    
;;;965      tmp  = hspi->State;
;;;966      tmp1 = hspi->Init.Mode;
;;;967    
;;;968      if (!((tmp == HAL_SPI_STATE_READY) || \
;;;969            ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
;;;970      {
;;;971        errorcode = HAL_BUSY;
;;;972        goto error;
;;;973      }
;;;974    
;;;975      if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
;;;976      {
;;;977        errorcode = HAL_ERROR;
;;;978        goto error;
;;;979      }
;;;980    
;;;981      /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;982      if (hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;983      {
;;;984        hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;985      }
;;;986    
;;;987      /* Set the transaction information */
;;;988      hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;989      hspi->pRxBuffPtr  = (uint8_t *)pRxData;
;;;990      hspi->RxXferCount = Size;
;;;991      hspi->RxXferSize  = Size;
;;;992      hspi->pTxBuffPtr  = (uint8_t *)pTxData;
;;;993      hspi->TxXferCount = Size;
;;;994      hspi->TxXferSize  = Size;
;;;995    
;;;996      /*Init field not used in handle to zero */
;;;997      hspi->RxISR       = NULL;
;;;998      hspi->TxISR       = NULL;
;;;999    
;;;1000   #if (USE_SPI_CRC != 0U)
;;;1001     /* Reset CRC Calculation */
;;;1002     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1003     {
;;;1004       SPI_RESET_CRC(hspi);
;;;1005     }
;;;1006   #endif /* USE_SPI_CRC */
;;;1007   
;;;1008     /* Set the Rx Fifo threshold */
;;;1009     if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
;;;1010     {
;;;1011       /* set fiforxthreshold according the reception data length: 16bit */
;;;1012       CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1013     }
;;;1014     else
;;;1015     {
;;;1016       /* set fiforxthreshold according the reception data length: 8bit */
;;;1017       SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1018     }
;;;1019   
;;;1020     /* Check if the SPI is already enabled */
;;;1021     if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1022     {
;;;1023       /* Enable SPI peripheral */
;;;1024       __HAL_SPI_ENABLE(hspi);
;;;1025     }
;;;1026   
;;;1027     /* Transmit and Receive data in 16 Bit mode */
;;;1028     if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1029     {
;;;1030       if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
;;;1031       {
;;;1032         hspi->Instance->DR = *((uint16_t *)pTxData);
;;;1033         pTxData += sizeof(uint16_t);
;;;1034         hspi->TxXferCount--;
;;;1035       }
;;;1036       while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
;;;1037       {
;;;1038         /* Check TXE flag */
;;;1039         if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
;;;1040         {
;;;1041           hspi->Instance->DR = *((uint16_t *)pTxData);
;;;1042           pTxData += sizeof(uint16_t);
;;;1043           hspi->TxXferCount--;
;;;1044           /* Next Data is a reception (Rx). Tx not allowed */
;;;1045           txallowed = 0U;
;;;1046   
;;;1047   #if (USE_SPI_CRC != 0U)
;;;1048           /* Enable CRC Transmission */
;;;1049           if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;1050           {
;;;1051             /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
;;;1052             if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
;;;1053             {
;;;1054               SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
;;;1055             }
;;;1056             SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;1057           }
;;;1058   #endif /* USE_SPI_CRC */
;;;1059         }
;;;1060   
;;;1061         /* Check RXNE flag */
;;;1062         if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
;;;1063         {
;;;1064           *((uint16_t *)pRxData) = hspi->Instance->DR;
;;;1065           pRxData += sizeof(uint16_t);
;;;1066           hspi->RxXferCount--;
;;;1067           /* Next Data is a Transmission (Tx). Tx is allowed */
;;;1068           txallowed = 1U;
;;;1069         }
;;;1070         if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
;;;1071         {
;;;1072           errorcode = HAL_TIMEOUT;
;;;1073           goto error;
;;;1074         }
;;;1075       }
;;;1076     }
;;;1077     /* Transmit and Receive data in 8 Bit mode */
;;;1078     else
;;;1079     {
;;;1080       if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
;;;1081       {
;;;1082         if (hspi->TxXferCount > 1U)
;;;1083         {
;;;1084           hspi->Instance->DR = *((uint16_t *)pTxData);
;;;1085           pTxData += sizeof(uint16_t);
;;;1086           hspi->TxXferCount -= 2U;
;;;1087         }
;;;1088         else
;;;1089         {
;;;1090           *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
;;;1091           hspi->TxXferCount--;
;;;1092         }
;;;1093       }
;;;1094       while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
;;;1095       {
;;;1096         /* check TXE flag */
;;;1097         if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
;;;1098         {
;;;1099           if (hspi->TxXferCount > 1U)
;;;1100           {
;;;1101             hspi->Instance->DR = *((uint16_t *)pTxData);
;;;1102             pTxData += sizeof(uint16_t);
;;;1103             hspi->TxXferCount -= 2U;
;;;1104           }
;;;1105           else
;;;1106           {
;;;1107             *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
;;;1108             hspi->TxXferCount--;
;;;1109           }
;;;1110           /* Next Data is a reception (Rx). Tx not allowed */
;;;1111           txallowed = 0U;
;;;1112   
;;;1113   #if (USE_SPI_CRC != 0U)
;;;1114           /* Enable CRC Transmission */
;;;1115           if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;1116           {
;;;1117             /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
;;;1118             if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
;;;1119             {
;;;1120               SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
;;;1121             }
;;;1122             SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
;;;1123           }
;;;1124   #endif /* USE_SPI_CRC */
;;;1125         }
;;;1126   
;;;1127         /* Wait until RXNE flag is reset */
;;;1128         if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
;;;1129         {
;;;1130           if (hspi->RxXferCount > 1U)
;;;1131           {
;;;1132             *((uint16_t *)pRxData) = hspi->Instance->DR;
;;;1133             pRxData += sizeof(uint16_t);
;;;1134             hspi->RxXferCount -= 2U;
;;;1135             if (hspi->RxXferCount <= 1U)
;;;1136             {
;;;1137               /* set fiforxthresold before to switch on 8 bit data size */
;;;1138               SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1139             }
;;;1140           }
;;;1141           else
;;;1142           {
;;;1143             (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
;;;1144             hspi->RxXferCount--;
;;;1145           }
;;;1146           /* Next Data is a Transmission (Tx). Tx is allowed */
;;;1147           txallowed = 1U;
;;;1148         }
;;;1149         if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
;;;1150         {
;;;1151           errorcode = HAL_TIMEOUT;
;;;1152           goto error;
;;;1153         }
;;;1154       }
;;;1155     }
;;;1156   
;;;1157   #if (USE_SPI_CRC != 0U)
;;;1158     /* Read CRC from DR to close CRC calculation process */
;;;1159     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1160     {
;;;1161       /* Wait until TXE flag */
;;;1162       if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
;;;1163       {
;;;1164         /* Error on the CRC reception */
;;;1165         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;1166         errorcode = HAL_TIMEOUT;
;;;1167         goto error;
;;;1168       }
;;;1169       /* Read CRC */
;;;1170       if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
;;;1171       {
;;;1172         tmpreg = hspi->Instance->DR;
;;;1173         /* To avoid GCC warning */
;;;1174         UNUSED(tmpreg);
;;;1175       }
;;;1176       else
;;;1177       {
;;;1178         tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
;;;1179         /* To avoid GCC warning */
;;;1180         UNUSED(tmpreg);
;;;1181   
;;;1182         if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
;;;1183         {
;;;1184           if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
;;;1185           {
;;;1186             /* Error on the CRC reception */
;;;1187             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;1188             errorcode = HAL_TIMEOUT;
;;;1189             goto error;
;;;1190           }
;;;1191           tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
;;;1192           /* To avoid GCC warning */
;;;1193           UNUSED(tmpreg);
;;;1194         }
;;;1195       }
;;;1196     }
;;;1197   
;;;1198     /* Check if CRC error occurred */
;;;1199     if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
;;;1200     {
;;;1201       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
;;;1202       /* Clear CRC Flag */
;;;1203       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
;;;1204   
;;;1205       errorcode = HAL_ERROR;
;;;1206     }
;;;1207   #endif /* USE_SPI_CRC */
;;;1208   
;;;1209     /* Check the end of the transaction */
;;;1210     if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
;;;1211     {
;;;1212       hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
;;;1213     }
;;;1214   
;;;1215     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
;;;1216     {
;;;1217       errorcode = HAL_ERROR;
;;;1218     }
;;;1219   
;;;1220   error :
;;;1221     hspi->State = HAL_SPI_STATE_READY;
;;;1222     __HAL_UNLOCK(hspi);
;;;1223     return errorcode;
;;;1224   }
00003a  b007              ADD      sp,sp,#0x1c
00003c  bdf0              POP      {r4-r7,pc}
                  |L21.62|
00003e  2101              MOVS     r1,#1                 ;960
000040  205c              MOVS     r0,#0x5c              ;960
000042  5501              STRB     r1,[r0,r4]            ;960
000044  bf00              NOP                            ;960
000046  f7fffffe          BL       HAL_GetTick
00004a  9003              STR      r0,[sp,#0xc]          ;963
00004c  205d              MOVS     r0,#0x5d              ;965
00004e  5d00              LDRB     r0,[r0,r4]            ;965
000050  9006              STR      r0,[sp,#0x18]         ;965
000052  6860              LDR      r0,[r4,#4]            ;966
000054  9005              STR      r0,[sp,#0x14]         ;966
000056  9806              LDR      r0,[sp,#0x18]         ;968
000058  2801              CMP      r0,#1                 ;968
00005a  d00d              BEQ      |L21.120|
00005c  21ff              MOVS     r1,#0xff              ;968
00005e  3105              ADDS     r1,#5                 ;968
000060  9805              LDR      r0,[sp,#0x14]         ;968
000062  4288              CMP      r0,r1                 ;968
000064  d105              BNE      |L21.114|
000066  68a0              LDR      r0,[r4,#8]            ;968
000068  2800              CMP      r0,#0                 ;968
00006a  d102              BNE      |L21.114|
00006c  9806              LDR      r0,[sp,#0x18]         ;968
00006e  2804              CMP      r0,#4                 ;968
000070  d002              BEQ      |L21.120|
                  |L21.114|
000072  2002              MOVS     r0,#2                 ;971
000074  9001              STR      r0,[sp,#4]            ;971
000076  e1c5              B        |L21.1028|
                  |L21.120|
000078  2d00              CMP      r5,#0                 ;975
00007a  d003              BEQ      |L21.132|
00007c  2e00              CMP      r6,#0                 ;975
00007e  d001              BEQ      |L21.132|
000080  2f00              CMP      r7,#0                 ;975
000082  d102              BNE      |L21.138|
                  |L21.132|
000084  2001              MOVS     r0,#1                 ;977
000086  9001              STR      r0,[sp,#4]            ;977
000088  e1bc              B        |L21.1028|
                  |L21.138|
00008a  205d              MOVS     r0,#0x5d              ;982
00008c  5d00              LDRB     r0,[r0,r4]            ;982
00008e  2804              CMP      r0,#4                 ;982
000090  d002              BEQ      |L21.152|
000092  2105              MOVS     r1,#5                 ;984
000094  205d              MOVS     r0,#0x5d              ;984
000096  5501              STRB     r1,[r0,r4]            ;984
                  |L21.152|
000098  2000              MOVS     r0,#0                 ;988
00009a  6620              STR      r0,[r4,#0x60]         ;988
00009c  6426              STR      r6,[r4,#0x40]         ;989
00009e  2046              MOVS     r0,#0x46              ;990
0000a0  5307              STRH     r7,[r0,r4]            ;990
0000a2  2044              MOVS     r0,#0x44              ;991
0000a4  5307              STRH     r7,[r0,r4]            ;991
0000a6  63a5              STR      r5,[r4,#0x38]         ;992
0000a8  87e7              STRH     r7,[r4,#0x3e]         ;993
0000aa  87a7              STRH     r7,[r4,#0x3c]         ;994
0000ac  2000              MOVS     r0,#0                 ;997
0000ae  64e0              STR      r0,[r4,#0x4c]         ;997
0000b0  6520              STR      r0,[r4,#0x50]         ;998
0000b2  2101              MOVS     r1,#1                 ;1002
0000b4  0349              LSLS     r1,r1,#13             ;1002
0000b6  6aa0              LDR      r0,[r4,#0x28]         ;1002
0000b8  4288              CMP      r0,r1                 ;1002
0000ba  d10d              BNE      |L21.216|
0000bc  bf00              NOP                            ;1004
0000be  6820              LDR      r0,[r4,#0]            ;1004
0000c0  6800              LDR      r0,[r0,#0]            ;1004
0000c2  4388              BICS     r0,r0,r1              ;1004
0000c4  6821              LDR      r1,[r4,#0]            ;1004
0000c6  6008              STR      r0,[r1,#0]            ;1004
0000c8  6820              LDR      r0,[r4,#0]            ;1004
0000ca  6800              LDR      r0,[r0,#0]            ;1004
0000cc  2101              MOVS     r1,#1                 ;1004
0000ce  0349              LSLS     r1,r1,#13             ;1004
0000d0  4308              ORRS     r0,r0,r1              ;1004
0000d2  6821              LDR      r1,[r4,#0]            ;1004
0000d4  6008              STR      r0,[r1,#0]            ;1004
0000d6  bf00              NOP                            ;1004
                  |L21.216|
0000d8  2107              MOVS     r1,#7                 ;1009
0000da  0209              LSLS     r1,r1,#8              ;1009
0000dc  68e0              LDR      r0,[r4,#0xc]          ;1009
0000de  4288              CMP      r0,r1                 ;1009
0000e0  d803              BHI      |L21.234|
0000e2  2046              MOVS     r0,#0x46              ;1009
0000e4  5b00              LDRH     r0,[r0,r4]            ;1009
0000e6  2801              CMP      r0,#1                 ;1009
0000e8  d907              BLS      |L21.250|
                  |L21.234|
0000ea  6820              LDR      r0,[r4,#0]            ;1012
0000ec  6840              LDR      r0,[r0,#4]            ;1012
0000ee  2101              MOVS     r1,#1                 ;1012
0000f0  0309              LSLS     r1,r1,#12             ;1012
0000f2  4388              BICS     r0,r0,r1              ;1012
0000f4  6821              LDR      r1,[r4,#0]            ;1012
0000f6  6048              STR      r0,[r1,#4]            ;1012
0000f8  e006              B        |L21.264|
                  |L21.250|
0000fa  6820              LDR      r0,[r4,#0]            ;1017
0000fc  6840              LDR      r0,[r0,#4]            ;1017
0000fe  2101              MOVS     r1,#1                 ;1017
000100  0309              LSLS     r1,r1,#12             ;1017
000102  4308              ORRS     r0,r0,r1              ;1017
000104  6821              LDR      r1,[r4,#0]            ;1017
000106  6048              STR      r0,[r1,#4]            ;1017
                  |L21.264|
000108  6820              LDR      r0,[r4,#0]            ;1021
00010a  6800              LDR      r0,[r0,#0]            ;1021
00010c  2140              MOVS     r1,#0x40              ;1021
00010e  4008              ANDS     r0,r0,r1              ;1021
000110  2840              CMP      r0,#0x40              ;1021
000112  d004              BEQ      |L21.286|
000114  6820              LDR      r0,[r4,#0]            ;1024
000116  6800              LDR      r0,[r0,#0]            ;1024
000118  4308              ORRS     r0,r0,r1              ;1024
00011a  6821              LDR      r1,[r4,#0]            ;1024
00011c  6008              STR      r0,[r1,#0]            ;1024
                  |L21.286|
00011e  2107              MOVS     r1,#7                 ;1028
000120  0209              LSLS     r1,r1,#8              ;1028
000122  68e0              LDR      r0,[r4,#0xc]          ;1028
000124  4288              CMP      r0,r1                 ;1028
000126  d970              BLS      |L21.522|
000128  6860              LDR      r0,[r4,#4]            ;1030
00012a  2800              CMP      r0,#0                 ;1030
00012c  d002              BEQ      |L21.308|
00012e  8fe0              LDRH     r0,[r4,#0x3e]         ;1030
000130  2801              CMP      r0,#1                 ;1030
000132  d106              BNE      |L21.322|
                  |L21.308|
000134  8828              LDRH     r0,[r5,#0]            ;1032
000136  6821              LDR      r1,[r4,#0]            ;1032
000138  60c8              STR      r0,[r1,#0xc]          ;1032
00013a  1cad              ADDS     r5,r5,#2              ;1033
00013c  8fe0              LDRH     r0,[r4,#0x3e]         ;1034
00013e  1e40              SUBS     r0,r0,#1              ;1034
000140  87e0              STRH     r0,[r4,#0x3e]         ;1034
                  |L21.322|
000142  e059              B        |L21.504|
                  |L21.324|
000144  9802              LDR      r0,[sp,#8]            ;1039
000146  2800              CMP      r0,#0                 ;1039
000148  d032              BEQ      |L21.432|
00014a  8fe0              LDRH     r0,[r4,#0x3e]         ;1039
00014c  2800              CMP      r0,#0                 ;1039
00014e  d02f              BEQ      |L21.432|
000150  6820              LDR      r0,[r4,#0]            ;1039
000152  6880              LDR      r0,[r0,#8]            ;1039
000154  2102              MOVS     r1,#2                 ;1039
000156  4008              ANDS     r0,r0,r1              ;1039
000158  2802              CMP      r0,#2                 ;1039
00015a  d129              BNE      |L21.432|
00015c  8828              LDRH     r0,[r5,#0]            ;1041
00015e  6821              LDR      r1,[r4,#0]            ;1041
000160  60c8              STR      r0,[r1,#0xc]          ;1041
000162  1cad              ADDS     r5,r5,#2              ;1042
000164  8fe0              LDRH     r0,[r4,#0x3e]         ;1043
000166  1e40              SUBS     r0,r0,#1              ;1043
000168  87e0              STRH     r0,[r4,#0x3e]         ;1043
00016a  2000              MOVS     r0,#0                 ;1045
00016c  9002              STR      r0,[sp,#8]            ;1045
00016e  8fe0              LDRH     r0,[r4,#0x3e]         ;1049
000170  2800              CMP      r0,#0                 ;1049
000172  d11d              BNE      |L21.432|
000174  2101              MOVS     r1,#1                 ;1049
000176  0349              LSLS     r1,r1,#13             ;1049
000178  6aa0              LDR      r0,[r4,#0x28]         ;1049
00017a  4288              CMP      r0,r1                 ;1049
00017c  d118              BNE      |L21.432|
00017e  6820              LDR      r0,[r4,#0]            ;1052
000180  6800              LDR      r0,[r0,#0]            ;1052
000182  2104              MOVS     r1,#4                 ;1052
000184  4008              ANDS     r0,r0,r1              ;1052
000186  2800              CMP      r0,#0                 ;1052
000188  d10b              BNE      |L21.418|
00018a  6820              LDR      r0,[r4,#0]            ;1052
00018c  6840              LDR      r0,[r0,#4]            ;1052
00018e  2108              MOVS     r1,#8                 ;1052
000190  4008              ANDS     r0,r0,r1              ;1052
000192  2808              CMP      r0,#8                 ;1052
000194  d105              BNE      |L21.418|
000196  6820              LDR      r0,[r4,#0]            ;1054
000198  6800              LDR      r0,[r0,#0]            ;1054
00019a  0189              LSLS     r1,r1,#6              ;1054
00019c  4308              ORRS     r0,r0,r1              ;1054
00019e  6821              LDR      r1,[r4,#0]            ;1054
0001a0  6008              STR      r0,[r1,#0]            ;1054
                  |L21.418|
0001a2  6820              LDR      r0,[r4,#0]            ;1056
0001a4  6800              LDR      r0,[r0,#0]            ;1056
0001a6  2101              MOVS     r1,#1                 ;1056
0001a8  0309              LSLS     r1,r1,#12             ;1056
0001aa  4308              ORRS     r0,r0,r1              ;1056
0001ac  6821              LDR      r1,[r4,#0]            ;1056
0001ae  6008              STR      r0,[r1,#0]            ;1056
                  |L21.432|
0001b0  2046              MOVS     r0,#0x46              ;1062
0001b2  5b00              LDRH     r0,[r0,r4]            ;1062
0001b4  2800              CMP      r0,#0                 ;1062
0001b6  d011              BEQ      |L21.476|
0001b8  6820              LDR      r0,[r4,#0]            ;1062
0001ba  6880              LDR      r0,[r0,#8]            ;1062
0001bc  07c0              LSLS     r0,r0,#31             ;1062
0001be  0fc0              LSRS     r0,r0,#31             ;1062
0001c0  2800              CMP      r0,#0                 ;1062
0001c2  d00b              BEQ      |L21.476|
0001c4  6820              LDR      r0,[r4,#0]            ;1064
0001c6  68c0              LDR      r0,[r0,#0xc]          ;1064
0001c8  8030              STRH     r0,[r6,#0]            ;1064
0001ca  1cb6              ADDS     r6,r6,#2              ;1065
0001cc  2046              MOVS     r0,#0x46              ;1066
0001ce  5b00              LDRH     r0,[r0,r4]            ;1066
0001d0  1e40              SUBS     r0,r0,#1              ;1066
0001d2  b281              UXTH     r1,r0                 ;1066
0001d4  2046              MOVS     r0,#0x46              ;1066
0001d6  5301              STRH     r1,[r0,r4]            ;1066
0001d8  2001              MOVS     r0,#1                 ;1068
0001da  9002              STR      r0,[sp,#8]            ;1068
                  |L21.476|
0001dc  980c              LDR      r0,[sp,#0x30]         ;1070
0001de  1c40              ADDS     r0,r0,#1              ;1070
0001e0  2800              CMP      r0,#0                 ;1070
0001e2  d009              BEQ      |L21.504|
0001e4  f7fffffe          BL       HAL_GetTick
0001e8  9903              LDR      r1,[sp,#0xc]          ;1070
0001ea  1a41              SUBS     r1,r0,r1              ;1070
0001ec  980c              LDR      r0,[sp,#0x30]         ;1070
0001ee  4281              CMP      r1,r0                 ;1070
0001f0  d302              BCC      |L21.504|
0001f2  2003              MOVS     r0,#3                 ;1072
0001f4  9001              STR      r0,[sp,#4]            ;1072
0001f6  e105              B        |L21.1028|
                  |L21.504|
0001f8  8fe0              LDRH     r0,[r4,#0x3e]         ;1036
0001fa  2800              CMP      r0,#0                 ;1036
0001fc  d1a2              BNE      |L21.324|
0001fe  2046              MOVS     r0,#0x46              ;1036
000200  5b00              LDRH     r0,[r0,r4]            ;1036
000202  2800              CMP      r0,#0                 ;1036
000204  d19e              BNE      |L21.324|
000206  e09f              B        |L21.840|
000208  e7ff              B        |L21.522|
                  |L21.522|
00020a  6860              LDR      r0,[r4,#4]            ;1080
00020c  2800              CMP      r0,#0                 ;1080
00020e  d002              BEQ      |L21.534|
000210  8fe0              LDRH     r0,[r4,#0x3e]         ;1080
000212  2801              CMP      r0,#1                 ;1080
000214  d111              BNE      |L21.570|
                  |L21.534|
000216  8fe0              LDRH     r0,[r4,#0x3e]         ;1082
000218  2801              CMP      r0,#1                 ;1082
00021a  d907              BLS      |L21.556|
00021c  8828              LDRH     r0,[r5,#0]            ;1084
00021e  6821              LDR      r1,[r4,#0]            ;1084
000220  60c8              STR      r0,[r1,#0xc]          ;1084
000222  1cad              ADDS     r5,r5,#2              ;1085
000224  8fe0              LDRH     r0,[r4,#0x3e]         ;1086
000226  1e80              SUBS     r0,r0,#2              ;1086
000228  87e0              STRH     r0,[r4,#0x3e]         ;1086
00022a  e006              B        |L21.570|
                  |L21.556|
00022c  7828              LDRB     r0,[r5,#0]            ;1090
00022e  6821              LDR      r1,[r4,#0]            ;1090
000230  7308              STRB     r0,[r1,#0xc]          ;1090
000232  1c6d              ADDS     r5,r5,#1              ;1090
000234  8fe0              LDRH     r0,[r4,#0x3e]         ;1091
000236  1e40              SUBS     r0,r0,#1              ;1091
000238  87e0              STRH     r0,[r4,#0x3e]         ;1091
                  |L21.570|
00023a  e07d              B        |L21.824|
                  |L21.572|
00023c  9802              LDR      r0,[sp,#8]            ;1097
00023e  2800              CMP      r0,#0                 ;1097
000240  d03d              BEQ      |L21.702|
000242  8fe0              LDRH     r0,[r4,#0x3e]         ;1097
000244  2800              CMP      r0,#0                 ;1097
000246  d03a              BEQ      |L21.702|
000248  6820              LDR      r0,[r4,#0]            ;1097
00024a  6880              LDR      r0,[r0,#8]            ;1097
00024c  2102              MOVS     r1,#2                 ;1097
00024e  4008              ANDS     r0,r0,r1              ;1097
000250  2802              CMP      r0,#2                 ;1097
000252  d134              BNE      |L21.702|
000254  8fe0              LDRH     r0,[r4,#0x3e]         ;1099
000256  2801              CMP      r0,#1                 ;1099
000258  d907              BLS      |L21.618|
00025a  8828              LDRH     r0,[r5,#0]            ;1101
00025c  6821              LDR      r1,[r4,#0]            ;1101
00025e  60c8              STR      r0,[r1,#0xc]          ;1101
000260  1cad              ADDS     r5,r5,#2              ;1102
000262  8fe0              LDRH     r0,[r4,#0x3e]         ;1103
000264  1e80              SUBS     r0,r0,#2              ;1103
000266  87e0              STRH     r0,[r4,#0x3e]         ;1103
000268  e006              B        |L21.632|
                  |L21.618|
00026a  7828              LDRB     r0,[r5,#0]            ;1107
00026c  6821              LDR      r1,[r4,#0]            ;1107
00026e  7308              STRB     r0,[r1,#0xc]          ;1107
000270  1c6d              ADDS     r5,r5,#1              ;1107
000272  8fe0              LDRH     r0,[r4,#0x3e]         ;1108
000274  1e40              SUBS     r0,r0,#1              ;1108
000276  87e0              STRH     r0,[r4,#0x3e]         ;1108
                  |L21.632|
000278  2000              MOVS     r0,#0                 ;1111
00027a  9002              STR      r0,[sp,#8]            ;1111
00027c  8fe0              LDRH     r0,[r4,#0x3e]         ;1115
00027e  2800              CMP      r0,#0                 ;1115
000280  d11d              BNE      |L21.702|
000282  2101              MOVS     r1,#1                 ;1115
000284  0349              LSLS     r1,r1,#13             ;1115
000286  6aa0              LDR      r0,[r4,#0x28]         ;1115
000288  4288              CMP      r0,r1                 ;1115
00028a  d118              BNE      |L21.702|
00028c  6820              LDR      r0,[r4,#0]            ;1118
00028e  6800              LDR      r0,[r0,#0]            ;1118
000290  2104              MOVS     r1,#4                 ;1118
000292  4008              ANDS     r0,r0,r1              ;1118
000294  2800              CMP      r0,#0                 ;1118
000296  d10b              BNE      |L21.688|
000298  6820              LDR      r0,[r4,#0]            ;1118
00029a  6840              LDR      r0,[r0,#4]            ;1118
00029c  2108              MOVS     r1,#8                 ;1118
00029e  4008              ANDS     r0,r0,r1              ;1118
0002a0  2808              CMP      r0,#8                 ;1118
0002a2  d105              BNE      |L21.688|
0002a4  6820              LDR      r0,[r4,#0]            ;1120
0002a6  6800              LDR      r0,[r0,#0]            ;1120
0002a8  0189              LSLS     r1,r1,#6              ;1120
0002aa  4308              ORRS     r0,r0,r1              ;1120
0002ac  6821              LDR      r1,[r4,#0]            ;1120
0002ae  6008              STR      r0,[r1,#0]            ;1120
                  |L21.688|
0002b0  6820              LDR      r0,[r4,#0]            ;1122
0002b2  6800              LDR      r0,[r0,#0]            ;1122
0002b4  2101              MOVS     r1,#1                 ;1122
0002b6  0309              LSLS     r1,r1,#12             ;1122
0002b8  4308              ORRS     r0,r0,r1              ;1122
0002ba  6821              LDR      r1,[r4,#0]            ;1122
0002bc  6008              STR      r0,[r1,#0]            ;1122
                  |L21.702|
0002be  2046              MOVS     r0,#0x46              ;1128
0002c0  5b00              LDRH     r0,[r0,r4]            ;1128
0002c2  2800              CMP      r0,#0                 ;1128
0002c4  d02a              BEQ      |L21.796|
0002c6  6820              LDR      r0,[r4,#0]            ;1128
0002c8  6880              LDR      r0,[r0,#8]            ;1128
0002ca  07c0              LSLS     r0,r0,#31             ;1128
0002cc  0fc0              LSRS     r0,r0,#31             ;1128
0002ce  2800              CMP      r0,#0                 ;1128
0002d0  d024              BEQ      |L21.796|
0002d2  2046              MOVS     r0,#0x46              ;1130
0002d4  5b00              LDRH     r0,[r0,r4]            ;1130
0002d6  2801              CMP      r0,#1                 ;1130
0002d8  d914              BLS      |L21.772|
0002da  6820              LDR      r0,[r4,#0]            ;1132
0002dc  68c0              LDR      r0,[r0,#0xc]          ;1132
0002de  8030              STRH     r0,[r6,#0]            ;1132
0002e0  1cb6              ADDS     r6,r6,#2              ;1133
0002e2  2046              MOVS     r0,#0x46              ;1134
0002e4  5b00              LDRH     r0,[r0,r4]            ;1134
0002e6  1e80              SUBS     r0,r0,#2              ;1134
0002e8  b281              UXTH     r1,r0                 ;1134
0002ea  2046              MOVS     r0,#0x46              ;1134
0002ec  5301              STRH     r1,[r0,r4]            ;1134
0002ee  5b00              LDRH     r0,[r0,r4]            ;1135
0002f0  2801              CMP      r0,#1                 ;1135
0002f2  d811              BHI      |L21.792|
0002f4  6820              LDR      r0,[r4,#0]            ;1138
0002f6  6840              LDR      r0,[r0,#4]            ;1138
0002f8  2101              MOVS     r1,#1                 ;1138
0002fa  0309              LSLS     r1,r1,#12             ;1138
0002fc  4308              ORRS     r0,r0,r1              ;1138
0002fe  6821              LDR      r1,[r4,#0]            ;1138
000300  6048              STR      r0,[r1,#4]            ;1138
000302  e009              B        |L21.792|
                  |L21.772|
000304  6820              LDR      r0,[r4,#0]            ;1143
000306  7b00              LDRB     r0,[r0,#0xc]          ;1143
000308  7030              STRB     r0,[r6,#0]            ;1143
00030a  1c76              ADDS     r6,r6,#1              ;1143
00030c  2046              MOVS     r0,#0x46              ;1144
00030e  5b00              LDRH     r0,[r0,r4]            ;1144
000310  1e40              SUBS     r0,r0,#1              ;1144
000312  b281              UXTH     r1,r0                 ;1144
000314  2046              MOVS     r0,#0x46              ;1144
000316  5301              STRH     r1,[r0,r4]            ;1144
                  |L21.792|
000318  2001              MOVS     r0,#1                 ;1147
00031a  9002              STR      r0,[sp,#8]            ;1147
                  |L21.796|
00031c  980c              LDR      r0,[sp,#0x30]         ;1149
00031e  1c40              ADDS     r0,r0,#1              ;1149
000320  2800              CMP      r0,#0                 ;1149
000322  d009              BEQ      |L21.824|
000324  f7fffffe          BL       HAL_GetTick
000328  9903              LDR      r1,[sp,#0xc]          ;1149
00032a  1a41              SUBS     r1,r0,r1              ;1149
00032c  980c              LDR      r0,[sp,#0x30]         ;1149
00032e  4281              CMP      r1,r0                 ;1149
000330  d302              BCC      |L21.824|
000332  2003              MOVS     r0,#3                 ;1151
000334  9001              STR      r0,[sp,#4]            ;1151
000336  e065              B        |L21.1028|
                  |L21.824|
000338  8fe0              LDRH     r0,[r4,#0x3e]         ;1094
00033a  2800              CMP      r0,#0                 ;1094
00033c  d000              BEQ      |L21.832|
                  |L21.830|
00033e  e77d              B        |L21.572|
                  |L21.832|
000340  2046              MOVS     r0,#0x46              ;1094
000342  5b00              LDRH     r0,[r0,r4]            ;1094
000344  2800              CMP      r0,#0                 ;1094
000346  d1fa              BNE      |L21.830|
                  |L21.840|
000348  2101              MOVS     r1,#1                 ;1159
00034a  0349              LSLS     r1,r1,#13             ;1159
00034c  6aa0              LDR      r0,[r4,#0x28]         ;1159
00034e  4288              CMP      r0,r1                 ;1159
000350  d13a              BNE      |L21.968|
000352  9803              LDR      r0,[sp,#0xc]          ;1162
000354  9000              STR      r0,[sp,#0]            ;1162
000356  2201              MOVS     r2,#1                 ;1162
000358  4611              MOV      r1,r2                 ;1162
00035a  4620              MOV      r0,r4                 ;1162
00035c  9b0c              LDR      r3,[sp,#0x30]         ;1162
00035e  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000362  2800              CMP      r0,#0                 ;1162
000364  d006              BEQ      |L21.884|
000366  6e20              LDR      r0,[r4,#0x60]         ;1165
000368  2102              MOVS     r1,#2                 ;1165
00036a  4308              ORRS     r0,r0,r1              ;1165
00036c  6620              STR      r0,[r4,#0x60]         ;1165
00036e  2003              MOVS     r0,#3                 ;1166
000370  9001              STR      r0,[sp,#4]            ;1166
000372  e047              B        |L21.1028|
                  |L21.884|
000374  210f              MOVS     r1,#0xf               ;1170
000376  0209              LSLS     r1,r1,#8              ;1170
000378  68e0              LDR      r0,[r4,#0xc]          ;1170
00037a  4288              CMP      r0,r1                 ;1170
00037c  d106              BNE      |L21.908|
00037e  6820              LDR      r0,[r4,#0]            ;1172
000380  68c0              LDR      r0,[r0,#0xc]          ;1172
000382  b281              UXTH     r1,r0                 ;1172
000384  9104              STR      r1,[sp,#0x10]         ;1172
000386  4668              MOV      r0,sp                 ;1174
000388  8a00              LDRH     r0,[r0,#0x10]         ;1174
00038a  e01d              B        |L21.968|
                  |L21.908|
00038c  6820              LDR      r0,[r4,#0]            ;1178
00038e  7b01              LDRB     r1,[r0,#0xc]          ;1178
000390  9104              STR      r1,[sp,#0x10]         ;1178
000392  4668              MOV      r0,sp                 ;1180
000394  8a00              LDRH     r0,[r0,#0x10]         ;1180
000396  6b20              LDR      r0,[r4,#0x30]         ;1182
000398  2802              CMP      r0,#2                 ;1182
00039a  d115              BNE      |L21.968|
00039c  9803              LDR      r0,[sp,#0xc]          ;1184
00039e  9000              STR      r0,[sp,#0]            ;1184
0003a0  2201              MOVS     r2,#1                 ;1184
0003a2  4611              MOV      r1,r2                 ;1184
0003a4  4620              MOV      r0,r4                 ;1184
0003a6  9b0c              LDR      r3,[sp,#0x30]         ;1184
0003a8  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
0003ac  2800              CMP      r0,#0                 ;1184
0003ae  d006              BEQ      |L21.958|
0003b0  6e20              LDR      r0,[r4,#0x60]         ;1187
0003b2  2102              MOVS     r1,#2                 ;1187
0003b4  4308              ORRS     r0,r0,r1              ;1187
0003b6  6620              STR      r0,[r4,#0x60]         ;1187
0003b8  2003              MOVS     r0,#3                 ;1188
0003ba  9001              STR      r0,[sp,#4]            ;1188
0003bc  e022              B        |L21.1028|
                  |L21.958|
0003be  6820              LDR      r0,[r4,#0]            ;1191
0003c0  7b01              LDRB     r1,[r0,#0xc]          ;1191
0003c2  9104              STR      r1,[sp,#0x10]         ;1191
0003c4  4668              MOV      r0,sp                 ;1193
0003c6  8a00              LDRH     r0,[r0,#0x10]         ;1193
                  |L21.968|
0003c8  6820              LDR      r0,[r4,#0]            ;1199
0003ca  6880              LDR      r0,[r0,#8]            ;1199
0003cc  2110              MOVS     r1,#0x10              ;1199
0003ce  4008              ANDS     r0,r0,r1              ;1199
0003d0  2810              CMP      r0,#0x10              ;1199
0003d2  d108              BNE      |L21.998|
0003d4  6e20              LDR      r0,[r4,#0x60]         ;1201
0003d6  2102              MOVS     r1,#2                 ;1201
0003d8  4308              ORRS     r0,r0,r1              ;1201
0003da  6620              STR      r0,[r4,#0x60]         ;1201
0003dc  480e              LDR      r0,|L21.1048|
0003de  6821              LDR      r1,[r4,#0]            ;1203
0003e0  6088              STR      r0,[r1,#8]            ;1203
0003e2  2001              MOVS     r0,#1                 ;1205
0003e4  9001              STR      r0,[sp,#4]            ;1205
                  |L21.998|
0003e6  4620              MOV      r0,r4                 ;1210
0003e8  9a03              LDR      r2,[sp,#0xc]          ;1210
0003ea  990c              LDR      r1,[sp,#0x30]         ;1210
0003ec  f7fffffe          BL       SPI_EndRxTxTransaction
0003f0  2800              CMP      r0,#0                 ;1210
0003f2  d001              BEQ      |L21.1016|
0003f4  2020              MOVS     r0,#0x20              ;1212
0003f6  6620              STR      r0,[r4,#0x60]         ;1212
                  |L21.1016|
0003f8  6e20              LDR      r0,[r4,#0x60]         ;1215
0003fa  2800              CMP      r0,#0                 ;1215
0003fc  d001              BEQ      |L21.1026|
0003fe  2001              MOVS     r0,#1                 ;1217
000400  9001              STR      r0,[sp,#4]            ;1217
                  |L21.1026|
000402  bf00              NOP                            ;1220
                  |L21.1028|
000404  2101              MOVS     r1,#1                 ;1221
000406  205d              MOVS     r0,#0x5d              ;1221
000408  5501              STRB     r1,[r0,r4]            ;1221
00040a  bf00              NOP                            ;1222
00040c  2100              MOVS     r1,#0                 ;1222
00040e  205c              MOVS     r0,#0x5c              ;1222
000410  5501              STRB     r1,[r0,r4]            ;1222
000412  bf00              NOP                            ;1222
000414  9801              LDR      r0,[sp,#4]            ;1223
000416  e610              B        |L21.58|
;;;1225   
                          ENDP

                  |L21.1048|
                          DCD      0x0000ffef

                          AREA ||i.HAL_SPI_TransmitReceive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_DMA PROC
;;;1807     */
;;;1808   HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
000000  b5f0              PUSH     {r4-r7,lr}
;;;1809                                                 uint16_t Size)
;;;1810   {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;1811     uint32_t tmp = 0U, tmp1 = 0U;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
000010  9002              STR      r0,[sp,#8]
;;;1812     HAL_StatusTypeDef errorcode = HAL_OK;
000012  9001              STR      r0,[sp,#4]
;;;1813   
;;;1814     /* check rx & tx dma handles */
;;;1815     assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
;;;1816     assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
;;;1817   
;;;1818     /* Check Direction parameter */
;;;1819     assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1820   
;;;1821     /* Process locked */
;;;1822     __HAL_LOCK(hspi);
000014  bf00              NOP      
000016  205c              MOVS     r0,#0x5c
000018  5d00              LDRB     r0,[r0,r4]
00001a  2801              CMP      r0,#1
00001c  d102              BNE      |L22.36|
00001e  2002              MOVS     r0,#2
                  |L22.32|
;;;1823   
;;;1824     tmp  = hspi->State;
;;;1825     tmp1 = hspi->Init.Mode;
;;;1826     if (!((tmp == HAL_SPI_STATE_READY) ||
;;;1827           ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
;;;1828     {
;;;1829       errorcode = HAL_BUSY;
;;;1830       goto error;
;;;1831     }
;;;1832   
;;;1833     if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
;;;1834     {
;;;1835       errorcode = HAL_ERROR;
;;;1836       goto error;
;;;1837     }
;;;1838   
;;;1839     /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1840     if (hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;1841     {
;;;1842       hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1843     }
;;;1844   
;;;1845     /* Set the transaction information */
;;;1846     hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1847     hspi->pTxBuffPtr  = (uint8_t *)pTxData;
;;;1848     hspi->TxXferSize  = Size;
;;;1849     hspi->TxXferCount = Size;
;;;1850     hspi->pRxBuffPtr  = (uint8_t *)pRxData;
;;;1851     hspi->RxXferSize  = Size;
;;;1852     hspi->RxXferCount = Size;
;;;1853   
;;;1854     /* Init field not used in handle to zero */
;;;1855     hspi->RxISR       = NULL;
;;;1856     hspi->TxISR       = NULL;
;;;1857   
;;;1858   #if (USE_SPI_CRC != 0U)
;;;1859     /* Reset CRC Calculation */
;;;1860     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1861     {
;;;1862       SPI_RESET_CRC(hspi);
;;;1863     }
;;;1864   #endif /* USE_SPI_CRC */
;;;1865   
;;;1866   #if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
;;;1867     /* packing mode management is enabled by the DMA settings */
;;;1868     if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
;;;1869     {
;;;1870       /* Restriction the DMA data received is not allowed in this mode */
;;;1871       errorcode = HAL_ERROR;
;;;1872       goto error;
;;;1873     }
;;;1874   #endif
;;;1875   
;;;1876   
;;;1877     /* Reset the threshold bit */
;;;1878     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
;;;1879   
;;;1880     /* The packing mode management is enabled by the DMA settings according the spi data size */
;;;1881     if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1882     {
;;;1883       /* Set fiforxthreshold according the reception data length: 16bit */
;;;1884       CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1885     }
;;;1886     else
;;;1887     {
;;;1888       /* Set fiforxthresold according the reception data length: 8bit */
;;;1889       SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1890   
;;;1891       if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
;;;1892       {
;;;1893         if ((hspi->TxXferSize & 0x1U) == 0x0U)
;;;1894         {
;;;1895           CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
;;;1896           hspi->TxXferCount = hspi->TxXferCount >> 1U;
;;;1897         }
;;;1898         else
;;;1899         {
;;;1900           SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
;;;1901           hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
;;;1902         }
;;;1903       }
;;;1904   
;;;1905       if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
;;;1906       {
;;;1907         /* Set fiforxthresold according the reception data length: 16bit */
;;;1908         CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1909   
;;;1910         if ((hspi->RxXferCount & 0x1U) == 0x0U)
;;;1911         {
;;;1912           CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
;;;1913           hspi->RxXferCount = hspi->RxXferCount >> 1U;
;;;1914         }
;;;1915         else
;;;1916         {
;;;1917           SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
;;;1918           hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
;;;1919         }
;;;1920       }
;;;1921     }
;;;1922   
;;;1923     /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
;;;1924     if (hspi->State == HAL_SPI_STATE_BUSY_RX)
;;;1925     {
;;;1926       /* Set the SPI Rx DMA Half transfer complete callback */
;;;1927       hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1928       hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
;;;1929     }
;;;1930     else
;;;1931     {
;;;1932       /* Set the SPI Tx/Rx DMA Half transfer complete callback */
;;;1933       hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
;;;1934       hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
;;;1935     }
;;;1936   
;;;1937     /* Set the DMA error callback */
;;;1938     hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1939   
;;;1940     /* Set the DMA AbortCpltCallback */
;;;1941     hspi->hdmarx->XferAbortCallback = NULL;
;;;1942   
;;;1943     /* Enable the Rx DMA Stream/Channel  */
;;;1944     HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1945   
;;;1946     /* Enable Rx DMA Request */
;;;1947     SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
;;;1948   
;;;1949     /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
;;;1950     is performed in DMA reception complete callback  */
;;;1951     hspi->hdmatx->XferHalfCpltCallback = NULL;
;;;1952     hspi->hdmatx->XferCpltCallback     = NULL;
;;;1953     hspi->hdmatx->XferErrorCallback    = NULL;
;;;1954     hspi->hdmatx->XferAbortCallback    = NULL;
;;;1955   
;;;1956     /* Enable the Tx DMA Stream/Channel  */
;;;1957     HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1958   
;;;1959     /* Check if the SPI is already enabled */
;;;1960     if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1961     {
;;;1962       /* Enable SPI peripheral */
;;;1963       __HAL_SPI_ENABLE(hspi);
;;;1964     }
;;;1965     /* Enable the SPI Error Interrupt Bit */
;;;1966     __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
;;;1967   
;;;1968     /* Enable Tx DMA Request */
;;;1969     SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1970   
;;;1971   error :
;;;1972     /* Process Unlocked */
;;;1973     __HAL_UNLOCK(hspi);
;;;1974     return errorcode;
;;;1975   }
000020  b005              ADD      sp,sp,#0x14
000022  bdf0              POP      {r4-r7,pc}
                  |L22.36|
000024  2101              MOVS     r1,#1                 ;1822
000026  205c              MOVS     r0,#0x5c              ;1822
000028  5501              STRB     r1,[r0,r4]            ;1822
00002a  bf00              NOP                            ;1822
00002c  205d              MOVS     r0,#0x5d              ;1824
00002e  5d00              LDRB     r0,[r0,r4]            ;1824
000030  9003              STR      r0,[sp,#0xc]          ;1824
000032  6860              LDR      r0,[r4,#4]            ;1825
000034  9002              STR      r0,[sp,#8]            ;1825
000036  9803              LDR      r0,[sp,#0xc]          ;1826
000038  2801              CMP      r0,#1                 ;1826
00003a  d00d              BEQ      |L22.88|
00003c  21ff              MOVS     r1,#0xff              ;1826
00003e  3105              ADDS     r1,#5                 ;1826
000040  9802              LDR      r0,[sp,#8]            ;1826
000042  4288              CMP      r0,r1                 ;1826
000044  d105              BNE      |L22.82|
000046  68a0              LDR      r0,[r4,#8]            ;1826
000048  2800              CMP      r0,#0                 ;1826
00004a  d102              BNE      |L22.82|
00004c  9803              LDR      r0,[sp,#0xc]          ;1826
00004e  2804              CMP      r0,#4                 ;1826
000050  d002              BEQ      |L22.88|
                  |L22.82|
000052  2002              MOVS     r0,#2                 ;1829
000054  9001              STR      r0,[sp,#4]            ;1829
000056  e0e7              B        |L22.552|
                  |L22.88|
000058  2e00              CMP      r6,#0                 ;1833
00005a  d003              BEQ      |L22.100|
00005c  2f00              CMP      r7,#0                 ;1833
00005e  d001              BEQ      |L22.100|
000060  2d00              CMP      r5,#0                 ;1833
000062  d102              BNE      |L22.106|
                  |L22.100|
000064  2001              MOVS     r0,#1                 ;1835
000066  9001              STR      r0,[sp,#4]            ;1835
000068  e0de              B        |L22.552|
                  |L22.106|
00006a  205d              MOVS     r0,#0x5d              ;1840
00006c  5d00              LDRB     r0,[r0,r4]            ;1840
00006e  2804              CMP      r0,#4                 ;1840
000070  d002              BEQ      |L22.120|
000072  2105              MOVS     r1,#5                 ;1842
000074  205d              MOVS     r0,#0x5d              ;1842
000076  5501              STRB     r1,[r0,r4]            ;1842
                  |L22.120|
000078  2000              MOVS     r0,#0                 ;1846
00007a  6620              STR      r0,[r4,#0x60]         ;1846
00007c  63a6              STR      r6,[r4,#0x38]         ;1847
00007e  87a5              STRH     r5,[r4,#0x3c]         ;1848
000080  87e5              STRH     r5,[r4,#0x3e]         ;1849
000082  6427              STR      r7,[r4,#0x40]         ;1850
000084  2044              MOVS     r0,#0x44              ;1851
000086  5305              STRH     r5,[r0,r4]            ;1851
000088  2046              MOVS     r0,#0x46              ;1852
00008a  5305              STRH     r5,[r0,r4]            ;1852
00008c  2000              MOVS     r0,#0                 ;1855
00008e  64e0              STR      r0,[r4,#0x4c]         ;1855
000090  6520              STR      r0,[r4,#0x50]         ;1856
000092  2101              MOVS     r1,#1                 ;1860
000094  0349              LSLS     r1,r1,#13             ;1860
000096  6aa0              LDR      r0,[r4,#0x28]         ;1860
000098  4288              CMP      r0,r1                 ;1860
00009a  d10d              BNE      |L22.184|
00009c  bf00              NOP                            ;1862
00009e  6820              LDR      r0,[r4,#0]            ;1862
0000a0  6800              LDR      r0,[r0,#0]            ;1862
0000a2  4388              BICS     r0,r0,r1              ;1862
0000a4  6821              LDR      r1,[r4,#0]            ;1862
0000a6  6008              STR      r0,[r1,#0]            ;1862
0000a8  6820              LDR      r0,[r4,#0]            ;1862
0000aa  6800              LDR      r0,[r0,#0]            ;1862
0000ac  2101              MOVS     r1,#1                 ;1862
0000ae  0349              LSLS     r1,r1,#13             ;1862
0000b0  4308              ORRS     r0,r0,r1              ;1862
0000b2  6821              LDR      r1,[r4,#0]            ;1862
0000b4  6008              STR      r0,[r1,#0]            ;1862
0000b6  bf00              NOP                            ;1862
                  |L22.184|
0000b8  6820              LDR      r0,[r4,#0]            ;1878
0000ba  6840              LDR      r0,[r0,#4]            ;1878
0000bc  2103              MOVS     r1,#3                 ;1878
0000be  0349              LSLS     r1,r1,#13             ;1878
0000c0  4388              BICS     r0,r0,r1              ;1878
0000c2  6821              LDR      r1,[r4,#0]            ;1878
0000c4  6048              STR      r0,[r1,#4]            ;1878
0000c6  2107              MOVS     r1,#7                 ;1881
0000c8  0209              LSLS     r1,r1,#8              ;1881
0000ca  68e0              LDR      r0,[r4,#0xc]          ;1881
0000cc  4288              CMP      r0,r1                 ;1881
0000ce  d907              BLS      |L22.224|
0000d0  6820              LDR      r0,[r4,#0]            ;1884
0000d2  6840              LDR      r0,[r0,#4]            ;1884
0000d4  2101              MOVS     r1,#1                 ;1884
0000d6  0309              LSLS     r1,r1,#12             ;1884
0000d8  4388              BICS     r0,r0,r1              ;1884
0000da  6821              LDR      r1,[r4,#0]            ;1884
0000dc  6048              STR      r0,[r1,#4]            ;1884
0000de  e052              B        |L22.390|
                  |L22.224|
0000e0  6820              LDR      r0,[r4,#0]            ;1889
0000e2  6840              LDR      r0,[r0,#4]            ;1889
0000e4  2101              MOVS     r1,#1                 ;1889
0000e6  0309              LSLS     r1,r1,#12             ;1889
0000e8  4308              ORRS     r0,r0,r1              ;1889
0000ea  6821              LDR      r1,[r4,#0]            ;1889
0000ec  6048              STR      r0,[r1,#4]            ;1889
0000ee  6d60              LDR      r0,[r4,#0x54]         ;1891
0000f0  6940              LDR      r0,[r0,#0x14]         ;1891
0000f2  2101              MOVS     r1,#1                 ;1891
0000f4  0289              LSLS     r1,r1,#10             ;1891
0000f6  4288              CMP      r0,r1                 ;1891
0000f8  d119              BNE      |L22.302|
0000fa  8fa0              LDRH     r0,[r4,#0x3c]         ;1893
0000fc  07c0              LSLS     r0,r0,#31             ;1893
0000fe  0fc0              LSRS     r0,r0,#31             ;1893
000100  2800              CMP      r0,#0                 ;1893
000102  d109              BNE      |L22.280|
000104  6820              LDR      r0,[r4,#0]            ;1895
000106  6840              LDR      r0,[r0,#4]            ;1895
000108  0109              LSLS     r1,r1,#4              ;1895
00010a  4388              BICS     r0,r0,r1              ;1895
00010c  6821              LDR      r1,[r4,#0]            ;1895
00010e  6048              STR      r0,[r1,#4]            ;1895
000110  8fe0              LDRH     r0,[r4,#0x3e]         ;1896
000112  1040              ASRS     r0,r0,#1              ;1896
000114  87e0              STRH     r0,[r4,#0x3e]         ;1896
000116  e00a              B        |L22.302|
                  |L22.280|
000118  6820              LDR      r0,[r4,#0]            ;1900
00011a  6840              LDR      r0,[r0,#4]            ;1900
00011c  2101              MOVS     r1,#1                 ;1900
00011e  0389              LSLS     r1,r1,#14             ;1900
000120  4308              ORRS     r0,r0,r1              ;1900
000122  6821              LDR      r1,[r4,#0]            ;1900
000124  6048              STR      r0,[r1,#4]            ;1900
000126  8fe0              LDRH     r0,[r4,#0x3e]         ;1901
000128  1040              ASRS     r0,r0,#1              ;1901
00012a  1c40              ADDS     r0,r0,#1              ;1901
00012c  87e0              STRH     r0,[r4,#0x3e]         ;1901
                  |L22.302|
00012e  6da0              LDR      r0,[r4,#0x58]         ;1905
000130  6940              LDR      r0,[r0,#0x14]         ;1905
000132  2101              MOVS     r1,#1                 ;1905
000134  0289              LSLS     r1,r1,#10             ;1905
000136  4288              CMP      r0,r1                 ;1905
000138  d125              BNE      |L22.390|
00013a  6820              LDR      r0,[r4,#0]            ;1908
00013c  6840              LDR      r0,[r0,#4]            ;1908
00013e  0089              LSLS     r1,r1,#2              ;1908
000140  4388              BICS     r0,r0,r1              ;1908
000142  6821              LDR      r1,[r4,#0]            ;1908
000144  6048              STR      r0,[r1,#4]            ;1908
000146  2046              MOVS     r0,#0x46              ;1910
000148  5b00              LDRH     r0,[r0,r4]            ;1910
00014a  07c0              LSLS     r0,r0,#31             ;1910
00014c  0fc0              LSRS     r0,r0,#31             ;1910
00014e  2800              CMP      r0,#0                 ;1910
000150  d10c              BNE      |L22.364|
000152  6820              LDR      r0,[r4,#0]            ;1912
000154  6840              LDR      r0,[r0,#4]            ;1912
000156  2101              MOVS     r1,#1                 ;1912
000158  0349              LSLS     r1,r1,#13             ;1912
00015a  4388              BICS     r0,r0,r1              ;1912
00015c  6821              LDR      r1,[r4,#0]            ;1912
00015e  6048              STR      r0,[r1,#4]            ;1912
000160  2046              MOVS     r0,#0x46              ;1913
000162  5b00              LDRH     r0,[r0,r4]            ;1913
000164  1041              ASRS     r1,r0,#1              ;1913
000166  2046              MOVS     r0,#0x46              ;1913
000168  5301              STRH     r1,[r0,r4]            ;1913
00016a  e00c              B        |L22.390|
                  |L22.364|
00016c  6820              LDR      r0,[r4,#0]            ;1917
00016e  6840              LDR      r0,[r0,#4]            ;1917
000170  2101              MOVS     r1,#1                 ;1917
000172  0349              LSLS     r1,r1,#13             ;1917
000174  4308              ORRS     r0,r0,r1              ;1917
000176  6821              LDR      r1,[r4,#0]            ;1917
000178  6048              STR      r0,[r1,#4]            ;1917
00017a  2046              MOVS     r0,#0x46              ;1918
00017c  5b00              LDRH     r0,[r0,r4]            ;1918
00017e  1040              ASRS     r0,r0,#1              ;1918
000180  1c40              ADDS     r0,r0,#1              ;1918
000182  2146              MOVS     r1,#0x46              ;1918
000184  5308              STRH     r0,[r1,r4]            ;1918
                  |L22.390|
000186  205d              MOVS     r0,#0x5d              ;1924
000188  5d00              LDRB     r0,[r0,r4]            ;1924
00018a  2804              CMP      r0,#4                 ;1924
00018c  d106              BNE      |L22.412|
00018e  482a              LDR      r0,|L22.568|
000190  6da1              LDR      r1,[r4,#0x58]         ;1927
000192  62c8              STR      r0,[r1,#0x2c]         ;1927
000194  4829              LDR      r0,|L22.572|
000196  6da1              LDR      r1,[r4,#0x58]         ;1928
000198  6288              STR      r0,[r1,#0x28]         ;1928
00019a  e005              B        |L22.424|
                  |L22.412|
00019c  4828              LDR      r0,|L22.576|
00019e  6da1              LDR      r1,[r4,#0x58]         ;1933
0001a0  62c8              STR      r0,[r1,#0x2c]         ;1933
0001a2  4828              LDR      r0,|L22.580|
0001a4  6da1              LDR      r1,[r4,#0x58]         ;1934
0001a6  6288              STR      r0,[r1,#0x28]         ;1934
                  |L22.424|
0001a8  4827              LDR      r0,|L22.584|
0001aa  6da1              LDR      r1,[r4,#0x58]         ;1938
0001ac  6308              STR      r0,[r1,#0x30]         ;1938
0001ae  2000              MOVS     r0,#0                 ;1941
0001b0  6da1              LDR      r1,[r4,#0x58]         ;1941
0001b2  6348              STR      r0,[r1,#0x34]         ;1941
0001b4  2046              MOVS     r0,#0x46              ;1944
0001b6  5b03              LDRH     r3,[r0,r4]            ;1944
0001b8  6820              LDR      r0,[r4,#0]            ;1944
0001ba  4601              MOV      r1,r0                 ;1944
0001bc  310c              ADDS     r1,r1,#0xc            ;1944
0001be  6c22              LDR      r2,[r4,#0x40]         ;1944
0001c0  6da0              LDR      r0,[r4,#0x58]         ;1944
0001c2  9000              STR      r0,[sp,#0]            ;1944
0001c4  f7fffffe          BL       HAL_DMA_Start_IT
0001c8  6820              LDR      r0,[r4,#0]            ;1947
0001ca  6840              LDR      r0,[r0,#4]            ;1947
0001cc  2101              MOVS     r1,#1                 ;1947
0001ce  4308              ORRS     r0,r0,r1              ;1947
0001d0  6821              LDR      r1,[r4,#0]            ;1947
0001d2  6048              STR      r0,[r1,#4]            ;1947
0001d4  2000              MOVS     r0,#0                 ;1951
0001d6  6d61              LDR      r1,[r4,#0x54]         ;1951
0001d8  62c8              STR      r0,[r1,#0x2c]         ;1951
0001da  6d61              LDR      r1,[r4,#0x54]         ;1952
0001dc  6288              STR      r0,[r1,#0x28]         ;1952
0001de  6d61              LDR      r1,[r4,#0x54]         ;1953
0001e0  6308              STR      r0,[r1,#0x30]         ;1953
0001e2  6d61              LDR      r1,[r4,#0x54]         ;1954
0001e4  6348              STR      r0,[r1,#0x34]         ;1954
0001e6  8fe3              LDRH     r3,[r4,#0x3e]         ;1957
0001e8  6820              LDR      r0,[r4,#0]            ;1957
0001ea  4602              MOV      r2,r0                 ;1957
0001ec  320c              ADDS     r2,r2,#0xc            ;1957
0001ee  6ba1              LDR      r1,[r4,#0x38]         ;1957
0001f0  6d60              LDR      r0,[r4,#0x54]         ;1957
0001f2  9000              STR      r0,[sp,#0]            ;1957
0001f4  f7fffffe          BL       HAL_DMA_Start_IT
0001f8  6820              LDR      r0,[r4,#0]            ;1960
0001fa  6800              LDR      r0,[r0,#0]            ;1960
0001fc  2140              MOVS     r1,#0x40              ;1960
0001fe  4008              ANDS     r0,r0,r1              ;1960
000200  2840              CMP      r0,#0x40              ;1960
000202  d004              BEQ      |L22.526|
000204  6820              LDR      r0,[r4,#0]            ;1963
000206  6800              LDR      r0,[r0,#0]            ;1963
000208  4308              ORRS     r0,r0,r1              ;1963
00020a  6821              LDR      r1,[r4,#0]            ;1963
00020c  6008              STR      r0,[r1,#0]            ;1963
                  |L22.526|
00020e  6820              LDR      r0,[r4,#0]            ;1966
000210  6840              LDR      r0,[r0,#4]            ;1966
000212  2120              MOVS     r1,#0x20              ;1966
000214  4308              ORRS     r0,r0,r1              ;1966
000216  6821              LDR      r1,[r4,#0]            ;1966
000218  6048              STR      r0,[r1,#4]            ;1966
00021a  6820              LDR      r0,[r4,#0]            ;1969
00021c  6840              LDR      r0,[r0,#4]            ;1969
00021e  2102              MOVS     r1,#2                 ;1969
000220  4308              ORRS     r0,r0,r1              ;1969
000222  6821              LDR      r1,[r4,#0]            ;1969
000224  6048              STR      r0,[r1,#4]            ;1969
000226  bf00              NOP                            ;1971
                  |L22.552|
000228  bf00              NOP                            ;1973
00022a  2100              MOVS     r1,#0                 ;1973
00022c  205c              MOVS     r0,#0x5c              ;1973
00022e  5501              STRB     r1,[r0,r4]            ;1973
000230  bf00              NOP                            ;1973
000232  9801              LDR      r0,[sp,#4]            ;1974
000234  e6f4              B        |L22.32|
;;;1976   
                          ENDP

000236  0000              DCW      0x0000
                  |L22.568|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L22.572|
                          DCD      SPI_DMAReceiveCplt
                  |L22.576|
                          DCD      SPI_DMAHalfTransmitReceiveCplt
                  |L22.580|
                          DCD      SPI_DMATransmitReceiveCplt
                  |L22.584|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_TransmitReceive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_IT PROC
;;;1435     */
;;;1436   HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1437   {
000002  4604              MOV      r4,r0
;;;1438     uint32_t tmp = 0U, tmp1 = 0U;
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;1439     HAL_StatusTypeDef errorcode = HAL_OK;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;1440   
;;;1441     if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
00000c  2707              MOVS     r7,#7
00000e  023f              LSLS     r7,r7,#8
000010  68e0              LDR      r0,[r4,#0xc]
000012  42b8              CMP      r0,r7
000014  d801              BHI      |L23.26|
000016  2b01              CMP      r3,#1
000018  d900              BLS      |L23.28|
                  |L23.26|
;;;1442     {
;;;1443       /* in this case, 16-bit access is performed on Data
;;;1444          So, check Data is 16-bit aligned address */
;;;1445       assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pTxData));
;;;1446       assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pRxData));
00001a  bf00              NOP      
                  |L23.28|
;;;1447     }
;;;1448   
;;;1449     /* Check Direction parameter */
;;;1450     assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1451   
;;;1452     /* Process locked */
;;;1453     __HAL_LOCK(hspi);
00001c  bf00              NOP      
00001e  205c              MOVS     r0,#0x5c
000020  5d00              LDRB     r0,[r0,r4]
000022  2801              CMP      r0,#1
000024  d101              BNE      |L23.42|
000026  2002              MOVS     r0,#2
                  |L23.40|
;;;1454   
;;;1455     tmp  = hspi->State;
;;;1456     tmp1 = hspi->Init.Mode;
;;;1457   
;;;1458     if (!((tmp == HAL_SPI_STATE_READY) || \
;;;1459           ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
;;;1460     {
;;;1461       errorcode = HAL_BUSY;
;;;1462       goto error;
;;;1463     }
;;;1464   
;;;1465     if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
;;;1466     {
;;;1467       errorcode = HAL_ERROR;
;;;1468       goto error;
;;;1469     }
;;;1470   
;;;1471     /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1472     if (hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;1473     {
;;;1474       hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1475     }
;;;1476   
;;;1477     /* Set the transaction information */
;;;1478     hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1479     hspi->pTxBuffPtr  = (uint8_t *)pTxData;
;;;1480     hspi->TxXferSize  = Size;
;;;1481     hspi->TxXferCount = Size;
;;;1482     hspi->pRxBuffPtr  = (uint8_t *)pRxData;
;;;1483     hspi->RxXferSize  = Size;
;;;1484     hspi->RxXferCount = Size;
;;;1485   
;;;1486     /* Set the function for IT treatment */
;;;1487     if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1488     {
;;;1489       hspi->RxISR     = SPI_2linesRxISR_16BIT;
;;;1490       hspi->TxISR     = SPI_2linesTxISR_16BIT;
;;;1491     }
;;;1492     else
;;;1493     {
;;;1494       hspi->RxISR     = SPI_2linesRxISR_8BIT;
;;;1495       hspi->TxISR     = SPI_2linesTxISR_8BIT;
;;;1496     }
;;;1497   
;;;1498   #if (USE_SPI_CRC != 0U)
;;;1499     /* Reset CRC Calculation */
;;;1500     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1501     {
;;;1502       hspi->CRCSize = 1U;
;;;1503       if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
;;;1504       {
;;;1505         hspi->CRCSize = 2U;
;;;1506       }
;;;1507       SPI_RESET_CRC(hspi);
;;;1508     }
;;;1509     else
;;;1510     {
;;;1511       hspi->CRCSize = 0U;
;;;1512     }
;;;1513   #endif /* USE_SPI_CRC */
;;;1514   
;;;1515     /* Check if packing mode is enabled and if there is more than 2 data to receive */
;;;1516     if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
;;;1517     {
;;;1518       /* Set fiforxthresold according the reception data length: 16 bit */
;;;1519       CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1520     }
;;;1521     else
;;;1522     {
;;;1523       /* Set fiforxthresold according the reception data length: 8 bit */
;;;1524       SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
;;;1525     }
;;;1526   
;;;1527     /* Enable TXE, RXNE and ERR interrupt */
;;;1528     __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1529   
;;;1530     /* Check if the SPI is already enabled */
;;;1531     if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1532     {
;;;1533       /* Enable SPI peripheral */
;;;1534       __HAL_SPI_ENABLE(hspi);
;;;1535     }
;;;1536   
;;;1537   error :
;;;1538     /* Process Unlocked */
;;;1539     __HAL_UNLOCK(hspi);
;;;1540     return errorcode;
;;;1541   }
000028  bdf8              POP      {r3-r7,pc}
                  |L23.42|
00002a  2001              MOVS     r0,#1                 ;1453
00002c  275c              MOVS     r7,#0x5c              ;1453
00002e  5538              STRB     r0,[r7,r4]            ;1453
000030  bf00              NOP                            ;1453
000032  205d              MOVS     r0,#0x5d              ;1455
000034  5d05              LDRB     r5,[r0,r4]            ;1455
000036  6866              LDR      r6,[r4,#4]            ;1456
000038  2d01              CMP      r5,#1                 ;1458
00003a  d00b              BEQ      |L23.84|
00003c  20ff              MOVS     r0,#0xff              ;1458
00003e  3005              ADDS     r0,#5                 ;1458
000040  4286              CMP      r6,r0                 ;1458
000042  d104              BNE      |L23.78|
000044  68a0              LDR      r0,[r4,#8]            ;1458
000046  2800              CMP      r0,#0                 ;1458
000048  d101              BNE      |L23.78|
00004a  2d04              CMP      r5,#4                 ;1458
00004c  d002              BEQ      |L23.84|
                  |L23.78|
00004e  2002              MOVS     r0,#2                 ;1461
000050  9000              STR      r0,[sp,#0]            ;1461
000052  e073              B        |L23.316|
                  |L23.84|
000054  2900              CMP      r1,#0                 ;1465
000056  d003              BEQ      |L23.96|
000058  2a00              CMP      r2,#0                 ;1465
00005a  d001              BEQ      |L23.96|
00005c  2b00              CMP      r3,#0                 ;1465
00005e  d102              BNE      |L23.102|
                  |L23.96|
000060  2001              MOVS     r0,#1                 ;1467
000062  9000              STR      r0,[sp,#0]            ;1467
000064  e06a              B        |L23.316|
                  |L23.102|
000066  205d              MOVS     r0,#0x5d              ;1472
000068  5d00              LDRB     r0,[r0,r4]            ;1472
00006a  2804              CMP      r0,#4                 ;1472
00006c  d002              BEQ      |L23.116|
00006e  2005              MOVS     r0,#5                 ;1474
000070  275d              MOVS     r7,#0x5d              ;1474
000072  5538              STRB     r0,[r7,r4]            ;1474
                  |L23.116|
000074  2000              MOVS     r0,#0                 ;1478
000076  6620              STR      r0,[r4,#0x60]         ;1478
000078  63a1              STR      r1,[r4,#0x38]         ;1479
00007a  87a3              STRH     r3,[r4,#0x3c]         ;1480
00007c  87e3              STRH     r3,[r4,#0x3e]         ;1481
00007e  6422              STR      r2,[r4,#0x40]         ;1482
000080  2044              MOVS     r0,#0x44              ;1483
000082  5303              STRH     r3,[r0,r4]            ;1483
000084  2046              MOVS     r0,#0x46              ;1484
000086  5303              STRH     r3,[r0,r4]            ;1484
000088  2707              MOVS     r7,#7                 ;1487
00008a  023f              LSLS     r7,r7,#8              ;1487
00008c  68e0              LDR      r0,[r4,#0xc]          ;1487
00008e  42b8              CMP      r0,r7                 ;1487
000090  d904              BLS      |L23.156|
000092  482e              LDR      r0,|L23.332|
000094  64e0              STR      r0,[r4,#0x4c]         ;1489
000096  482e              LDR      r0,|L23.336|
000098  6520              STR      r0,[r4,#0x50]         ;1490
00009a  e003              B        |L23.164|
                  |L23.156|
00009c  482d              LDR      r0,|L23.340|
00009e  64e0              STR      r0,[r4,#0x4c]         ;1494
0000a0  482d              LDR      r0,|L23.344|
0000a2  6520              STR      r0,[r4,#0x50]         ;1495
                  |L23.164|
0000a4  2701              MOVS     r7,#1                 ;1500
0000a6  037f              LSLS     r7,r7,#13             ;1500
0000a8  6aa0              LDR      r0,[r4,#0x28]         ;1500
0000aa  42b8              CMP      r0,r7                 ;1500
0000ac  d11a              BNE      |L23.228|
0000ae  2001              MOVS     r0,#1                 ;1502
0000b0  64a0              STR      r0,[r4,#0x48]         ;1502
0000b2  2707              MOVS     r7,#7                 ;1503
0000b4  023f              LSLS     r7,r7,#8              ;1503
0000b6  68e0              LDR      r0,[r4,#0xc]          ;1503
0000b8  42b8              CMP      r0,r7                 ;1503
0000ba  d803              BHI      |L23.196|
0000bc  6b20              LDR      r0,[r4,#0x30]         ;1503
0000be  2802              CMP      r0,#2                 ;1503
0000c0  d100              BNE      |L23.196|
0000c2  64a0              STR      r0,[r4,#0x48]         ;1505
                  |L23.196|
0000c4  bf00              NOP                            ;1507
0000c6  6820              LDR      r0,[r4,#0]            ;1507
0000c8  6800              LDR      r0,[r0,#0]            ;1507
0000ca  2701              MOVS     r7,#1                 ;1507
0000cc  037f              LSLS     r7,r7,#13             ;1507
0000ce  43b8              BICS     r0,r0,r7              ;1507
0000d0  6827              LDR      r7,[r4,#0]            ;1507
0000d2  6038              STR      r0,[r7,#0]            ;1507
0000d4  6820              LDR      r0,[r4,#0]            ;1507
0000d6  6800              LDR      r0,[r0,#0]            ;1507
0000d8  2701              MOVS     r7,#1                 ;1507
0000da  037f              LSLS     r7,r7,#13             ;1507
0000dc  4338              ORRS     r0,r0,r7              ;1507
0000de  6827              LDR      r7,[r4,#0]            ;1507
0000e0  6038              STR      r0,[r7,#0]            ;1507
0000e2  e001              B        |L23.232|
                  |L23.228|
0000e4  2000              MOVS     r0,#0                 ;1511
0000e6  64a0              STR      r0,[r4,#0x48]         ;1511
                  |L23.232|
0000e8  2707              MOVS     r7,#7                 ;1516
0000ea  023f              LSLS     r7,r7,#8              ;1516
0000ec  68e0              LDR      r0,[r4,#0xc]          ;1516
0000ee  42b8              CMP      r0,r7                 ;1516
0000f0  d803              BHI      |L23.250|
0000f2  2046              MOVS     r0,#0x46              ;1516
0000f4  5b00              LDRH     r0,[r0,r4]            ;1516
0000f6  2802              CMP      r0,#2                 ;1516
0000f8  d307              BCC      |L23.266|
                  |L23.250|
0000fa  6820              LDR      r0,[r4,#0]            ;1519
0000fc  6840              LDR      r0,[r0,#4]            ;1519
0000fe  2701              MOVS     r7,#1                 ;1519
000100  033f              LSLS     r7,r7,#12             ;1519
000102  43b8              BICS     r0,r0,r7              ;1519
000104  6827              LDR      r7,[r4,#0]            ;1519
000106  6078              STR      r0,[r7,#4]            ;1519
000108  e006              B        |L23.280|
                  |L23.266|
00010a  6820              LDR      r0,[r4,#0]            ;1524
00010c  6840              LDR      r0,[r0,#4]            ;1524
00010e  2701              MOVS     r7,#1                 ;1524
000110  033f              LSLS     r7,r7,#12             ;1524
000112  4338              ORRS     r0,r0,r7              ;1524
000114  6827              LDR      r7,[r4,#0]            ;1524
000116  6078              STR      r0,[r7,#4]            ;1524
                  |L23.280|
000118  6820              LDR      r0,[r4,#0]            ;1528
00011a  6840              LDR      r0,[r0,#4]            ;1528
00011c  27e0              MOVS     r7,#0xe0              ;1528
00011e  4338              ORRS     r0,r0,r7              ;1528
000120  6827              LDR      r7,[r4,#0]            ;1528
000122  6078              STR      r0,[r7,#4]            ;1528
000124  6820              LDR      r0,[r4,#0]            ;1531
000126  6800              LDR      r0,[r0,#0]            ;1531
000128  2740              MOVS     r7,#0x40              ;1531
00012a  4038              ANDS     r0,r0,r7              ;1531
00012c  2840              CMP      r0,#0x40              ;1531
00012e  d004              BEQ      |L23.314|
000130  6820              LDR      r0,[r4,#0]            ;1534
000132  6800              LDR      r0,[r0,#0]            ;1534
000134  4338              ORRS     r0,r0,r7              ;1534
000136  6827              LDR      r7,[r4,#0]            ;1534
000138  6038              STR      r0,[r7,#0]            ;1534
                  |L23.314|
00013a  bf00              NOP                            ;1537
                  |L23.316|
00013c  bf00              NOP                            ;1539
00013e  2000              MOVS     r0,#0                 ;1539
000140  275c              MOVS     r7,#0x5c              ;1539
000142  5538              STRB     r0,[r7,r4]            ;1539
000144  bf00              NOP                            ;1539
000146  9800              LDR      r0,[sp,#0]            ;1540
000148  e76e              B        |L23.40|
;;;1542   
                          ENDP

00014a  0000              DCW      0x0000
                  |L23.332|
                          DCD      SPI_2linesRxISR_16BIT
                  |L23.336|
                          DCD      SPI_2linesTxISR_16BIT
                  |L23.340|
                          DCD      SPI_2linesRxISR_8BIT
                  |L23.344|
                          DCD      SPI_2linesTxISR_8BIT

                          AREA ||i.HAL_SPI_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_DMA PROC
;;;1550     */
;;;1551   HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1552   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1553     HAL_StatusTypeDef errorcode = HAL_OK;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;1554   
;;;1555     /* check tx dma handle */
;;;1556     assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
;;;1557   
;;;1558     /* Check Direction parameter */
;;;1559     assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;1560   
;;;1561     /* Process Locked */
;;;1562     __HAL_LOCK(hspi);
00000c  bf00              NOP      
00000e  205c              MOVS     r0,#0x5c
000010  5d00              LDRB     r0,[r0,r4]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L24.26|
000016  2002              MOVS     r0,#2
                  |L24.24|
;;;1563   
;;;1564     if (hspi->State != HAL_SPI_STATE_READY)
;;;1565     {
;;;1566       errorcode = HAL_BUSY;
;;;1567       goto error;
;;;1568     }
;;;1569   
;;;1570     if ((pData == NULL) || (Size == 0U))
;;;1571     {
;;;1572       errorcode = HAL_ERROR;
;;;1573       goto error;
;;;1574     }
;;;1575   
;;;1576     /* Set the transaction information */
;;;1577     hspi->State       = HAL_SPI_STATE_BUSY_TX;
;;;1578     hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1579     hspi->pTxBuffPtr  = (uint8_t *)pData;
;;;1580     hspi->TxXferSize  = Size;
;;;1581     hspi->TxXferCount = Size;
;;;1582   
;;;1583     /* Init field not used in handle to zero */
;;;1584     hspi->pRxBuffPtr  = (uint8_t *)NULL;
;;;1585     hspi->TxISR       = NULL;
;;;1586     hspi->RxISR       = NULL;
;;;1587     hspi->RxXferSize  = 0U;
;;;1588     hspi->RxXferCount = 0U;
;;;1589   
;;;1590     /* Configure communication direction : 1Line */
;;;1591     if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1592     {
;;;1593       SPI_1LINE_TX(hspi);
;;;1594     }
;;;1595   
;;;1596   #if (USE_SPI_CRC != 0U)
;;;1597     /* Reset CRC Calculation */
;;;1598     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1599     {
;;;1600       SPI_RESET_CRC(hspi);
;;;1601     }
;;;1602   #endif /* USE_SPI_CRC */
;;;1603   
;;;1604     /* Set the SPI TxDMA Half transfer complete callback */
;;;1605     hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
;;;1606   
;;;1607     /* Set the SPI TxDMA transfer complete callback */
;;;1608     hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
;;;1609   
;;;1610     /* Set the DMA error callback */
;;;1611     hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1612   
;;;1613     /* Set the DMA AbortCpltCallback */
;;;1614     hspi->hdmatx->XferAbortCallback = NULL;
;;;1615   
;;;1616     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
;;;1617     /* Packing mode is enabled only if the DMA setting is HALWORD */
;;;1618     if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
;;;1619     {
;;;1620       /* Check the even/odd of the data size + crc if enabled */
;;;1621       if ((hspi->TxXferCount & 0x1U) == 0U)
;;;1622       {
;;;1623         CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
;;;1624         hspi->TxXferCount = (hspi->TxXferCount >> 1U);
;;;1625       }
;;;1626       else
;;;1627       {
;;;1628         SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
;;;1629         hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
;;;1630       }
;;;1631     }
;;;1632   
;;;1633     /* Enable the Tx DMA Stream/Channel */
;;;1634     HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1635   
;;;1636     /* Check if the SPI is already enabled */
;;;1637     if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1638     {
;;;1639       /* Enable SPI peripheral */
;;;1640       __HAL_SPI_ENABLE(hspi);
;;;1641     }
;;;1642   
;;;1643     /* Enable the SPI Error Interrupt Bit */
;;;1644     __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
;;;1645   
;;;1646     /* Enable Tx DMA Request */
;;;1647     SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
;;;1648   
;;;1649   error :
;;;1650     /* Process Unlocked */
;;;1651     __HAL_UNLOCK(hspi);
;;;1652     return errorcode;
;;;1653   }
000018  bdf8              POP      {r3-r7,pc}
                  |L24.26|
00001a  2101              MOVS     r1,#1                 ;1562
00001c  205c              MOVS     r0,#0x5c              ;1562
00001e  5501              STRB     r1,[r0,r4]            ;1562
000020  bf00              NOP                            ;1562
000022  205d              MOVS     r0,#0x5d              ;1564
000024  5d00              LDRB     r0,[r0,r4]            ;1564
000026  2801              CMP      r0,#1                 ;1564
000028  d002              BEQ      |L24.48|
00002a  2002              MOVS     r0,#2                 ;1566
00002c  9000              STR      r0,[sp,#0]            ;1566
00002e  e08c              B        |L24.330|
                  |L24.48|
000030  2e00              CMP      r6,#0                 ;1570
000032  d001              BEQ      |L24.56|
000034  2d00              CMP      r5,#0                 ;1570
000036  d102              BNE      |L24.62|
                  |L24.56|
000038  2001              MOVS     r0,#1                 ;1572
00003a  9000              STR      r0,[sp,#0]            ;1572
00003c  e085              B        |L24.330|
                  |L24.62|
00003e  2103              MOVS     r1,#3                 ;1577
000040  205d              MOVS     r0,#0x5d              ;1577
000042  5501              STRB     r1,[r0,r4]            ;1577
000044  2000              MOVS     r0,#0                 ;1578
000046  6620              STR      r0,[r4,#0x60]         ;1578
000048  63a6              STR      r6,[r4,#0x38]         ;1579
00004a  87a5              STRH     r5,[r4,#0x3c]         ;1580
00004c  87e5              STRH     r5,[r4,#0x3e]         ;1581
00004e  6420              STR      r0,[r4,#0x40]         ;1584
000050  6520              STR      r0,[r4,#0x50]         ;1585
000052  64e0              STR      r0,[r4,#0x4c]         ;1586
000054  2100              MOVS     r1,#0                 ;1587
000056  2044              MOVS     r0,#0x44              ;1587
000058  5301              STRH     r1,[r0,r4]            ;1587
00005a  2046              MOVS     r0,#0x46              ;1588
00005c  5301              STRH     r1,[r0,r4]            ;1588
00005e  2101              MOVS     r1,#1                 ;1591
000060  03c9              LSLS     r1,r1,#15             ;1591
000062  68a0              LDR      r0,[r4,#8]            ;1591
000064  4288              CMP      r0,r1                 ;1591
000066  d105              BNE      |L24.116|
000068  6820              LDR      r0,[r4,#0]            ;1593
00006a  6800              LDR      r0,[r0,#0]            ;1593
00006c  1049              ASRS     r1,r1,#1              ;1593
00006e  4308              ORRS     r0,r0,r1              ;1593
000070  6821              LDR      r1,[r4,#0]            ;1593
000072  6008              STR      r0,[r1,#0]            ;1593
                  |L24.116|
000074  2101              MOVS     r1,#1                 ;1598
000076  0349              LSLS     r1,r1,#13             ;1598
000078  6aa0              LDR      r0,[r4,#0x28]         ;1598
00007a  4288              CMP      r0,r1                 ;1598
00007c  d10d              BNE      |L24.154|
00007e  bf00              NOP                            ;1600
000080  6820              LDR      r0,[r4,#0]            ;1600
000082  6800              LDR      r0,[r0,#0]            ;1600
000084  4388              BICS     r0,r0,r1              ;1600
000086  6821              LDR      r1,[r4,#0]            ;1600
000088  6008              STR      r0,[r1,#0]            ;1600
00008a  6820              LDR      r0,[r4,#0]            ;1600
00008c  6800              LDR      r0,[r0,#0]            ;1600
00008e  2101              MOVS     r1,#1                 ;1600
000090  0349              LSLS     r1,r1,#13             ;1600
000092  4308              ORRS     r0,r0,r1              ;1600
000094  6821              LDR      r1,[r4,#0]            ;1600
000096  6008              STR      r0,[r1,#0]            ;1600
000098  bf00              NOP                            ;1600
                  |L24.154|
00009a  482f              LDR      r0,|L24.344|
00009c  6d61              LDR      r1,[r4,#0x54]         ;1605
00009e  62c8              STR      r0,[r1,#0x2c]         ;1605
0000a0  482e              LDR      r0,|L24.348|
0000a2  6d61              LDR      r1,[r4,#0x54]         ;1608
0000a4  6288              STR      r0,[r1,#0x28]         ;1608
0000a6  482e              LDR      r0,|L24.352|
0000a8  6d61              LDR      r1,[r4,#0x54]         ;1611
0000aa  6308              STR      r0,[r1,#0x30]         ;1611
0000ac  2000              MOVS     r0,#0                 ;1614
0000ae  6d61              LDR      r1,[r4,#0x54]         ;1614
0000b0  6348              STR      r0,[r1,#0x34]         ;1614
0000b2  6820              LDR      r0,[r4,#0]            ;1616
0000b4  6840              LDR      r0,[r0,#4]            ;1616
0000b6  2101              MOVS     r1,#1                 ;1616
0000b8  0389              LSLS     r1,r1,#14             ;1616
0000ba  4388              BICS     r0,r0,r1              ;1616
0000bc  6821              LDR      r1,[r4,#0]            ;1616
0000be  6048              STR      r0,[r1,#4]            ;1616
0000c0  2107              MOVS     r1,#7                 ;1618
0000c2  0209              LSLS     r1,r1,#8              ;1618
0000c4  68e0              LDR      r0,[r4,#0xc]          ;1618
0000c6  4288              CMP      r0,r1                 ;1618
0000c8  d81f              BHI      |L24.266|
0000ca  6d60              LDR      r0,[r4,#0x54]         ;1618
0000cc  6940              LDR      r0,[r0,#0x14]         ;1618
0000ce  2101              MOVS     r1,#1                 ;1618
0000d0  0289              LSLS     r1,r1,#10             ;1618
0000d2  4288              CMP      r0,r1                 ;1618
0000d4  d119              BNE      |L24.266|
0000d6  8fe0              LDRH     r0,[r4,#0x3e]         ;1621
0000d8  07c0              LSLS     r0,r0,#31             ;1621
0000da  0fc0              LSRS     r0,r0,#31             ;1621
0000dc  2800              CMP      r0,#0                 ;1621
0000de  d109              BNE      |L24.244|
0000e0  6820              LDR      r0,[r4,#0]            ;1623
0000e2  6840              LDR      r0,[r0,#4]            ;1623
0000e4  0109              LSLS     r1,r1,#4              ;1623
0000e6  4388              BICS     r0,r0,r1              ;1623
0000e8  6821              LDR      r1,[r4,#0]            ;1623
0000ea  6048              STR      r0,[r1,#4]            ;1623
0000ec  8fe0              LDRH     r0,[r4,#0x3e]         ;1624
0000ee  1040              ASRS     r0,r0,#1              ;1624
0000f0  87e0              STRH     r0,[r4,#0x3e]         ;1624
0000f2  e00a              B        |L24.266|
                  |L24.244|
0000f4  6820              LDR      r0,[r4,#0]            ;1628
0000f6  6840              LDR      r0,[r0,#4]            ;1628
0000f8  2101              MOVS     r1,#1                 ;1628
0000fa  0389              LSLS     r1,r1,#14             ;1628
0000fc  4308              ORRS     r0,r0,r1              ;1628
0000fe  6821              LDR      r1,[r4,#0]            ;1628
000100  6048              STR      r0,[r1,#4]            ;1628
000102  8fe0              LDRH     r0,[r4,#0x3e]         ;1629
000104  1040              ASRS     r0,r0,#1              ;1629
000106  1c40              ADDS     r0,r0,#1              ;1629
000108  87e0              STRH     r0,[r4,#0x3e]         ;1629
                  |L24.266|
00010a  8fe3              LDRH     r3,[r4,#0x3e]         ;1634
00010c  6827              LDR      r7,[r4,#0]            ;1634
00010e  463a              MOV      r2,r7                 ;1634
000110  320c              ADDS     r2,r2,#0xc            ;1634
000112  6ba1              LDR      r1,[r4,#0x38]         ;1634
000114  6d60              LDR      r0,[r4,#0x54]         ;1634
000116  f7fffffe          BL       HAL_DMA_Start_IT
00011a  6820              LDR      r0,[r4,#0]            ;1637
00011c  6800              LDR      r0,[r0,#0]            ;1637
00011e  2140              MOVS     r1,#0x40              ;1637
000120  4008              ANDS     r0,r0,r1              ;1637
000122  2840              CMP      r0,#0x40              ;1637
000124  d004              BEQ      |L24.304|
000126  6820              LDR      r0,[r4,#0]            ;1640
000128  6800              LDR      r0,[r0,#0]            ;1640
00012a  4308              ORRS     r0,r0,r1              ;1640
00012c  6821              LDR      r1,[r4,#0]            ;1640
00012e  6008              STR      r0,[r1,#0]            ;1640
                  |L24.304|
000130  6820              LDR      r0,[r4,#0]            ;1644
000132  6840              LDR      r0,[r0,#4]            ;1644
000134  2120              MOVS     r1,#0x20              ;1644
000136  4308              ORRS     r0,r0,r1              ;1644
000138  6821              LDR      r1,[r4,#0]            ;1644
00013a  6048              STR      r0,[r1,#4]            ;1644
00013c  6820              LDR      r0,[r4,#0]            ;1647
00013e  6840              LDR      r0,[r0,#4]            ;1647
000140  2102              MOVS     r1,#2                 ;1647
000142  4308              ORRS     r0,r0,r1              ;1647
000144  6821              LDR      r1,[r4,#0]            ;1647
000146  6048              STR      r0,[r1,#4]            ;1647
000148  bf00              NOP                            ;1649
                  |L24.330|
00014a  bf00              NOP                            ;1651
00014c  2100              MOVS     r1,#0                 ;1651
00014e  205c              MOVS     r0,#0x5c              ;1651
000150  5501              STRB     r1,[r0,r4]            ;1651
000152  bf00              NOP                            ;1651
000154  9800              LDR      r0,[sp,#0]            ;1652
000156  e75f              B        |L24.24|
;;;1654   
                          ENDP

                  |L24.344|
                          DCD      SPI_DMAHalfTransmitCplt
                  |L24.348|
                          DCD      SPI_DMATransmitCplt
                  |L24.352|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Transmit_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_IT PROC
;;;1233     */
;;;1234   HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b530              PUSH     {r4,r5,lr}
;;;1235   {
000002  4603              MOV      r3,r0
;;;1236     HAL_StatusTypeDef errorcode = HAL_OK;
000004  2400              MOVS     r4,#0
;;;1237   
;;;1238     if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
000006  2507              MOVS     r5,#7
000008  022d              LSLS     r5,r5,#8
00000a  68d8              LDR      r0,[r3,#0xc]
00000c  42a8              CMP      r0,r5
00000e  d801              BHI      |L25.20|
000010  2a01              CMP      r2,#1
000012  d900              BLS      |L25.22|
                  |L25.20|
;;;1239     {
;;;1240       /* in this case, 16-bit access is performed on Data
;;;1241          So, check Data is 16-bit aligned address */
;;;1242       assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
000014  bf00              NOP      
                  |L25.22|
;;;1243     }
;;;1244   
;;;1245     /* Check Direction parameter */
;;;1246     assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;1247   
;;;1248     /* Process Locked */
;;;1249     __HAL_LOCK(hspi);
000016  bf00              NOP      
000018  205c              MOVS     r0,#0x5c
00001a  5cc0              LDRB     r0,[r0,r3]
00001c  2801              CMP      r0,#1
00001e  d101              BNE      |L25.36|
000020  2002              MOVS     r0,#2
                  |L25.34|
;;;1250   
;;;1251     if ((pData == NULL) || (Size == 0U))
;;;1252     {
;;;1253       errorcode = HAL_ERROR;
;;;1254       goto error;
;;;1255     }
;;;1256   
;;;1257     if (hspi->State != HAL_SPI_STATE_READY)
;;;1258     {
;;;1259       errorcode = HAL_BUSY;
;;;1260       goto error;
;;;1261     }
;;;1262   
;;;1263     /* Set the transaction information */
;;;1264     hspi->State       = HAL_SPI_STATE_BUSY_TX;
;;;1265     hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1266     hspi->pTxBuffPtr  = (uint8_t *)pData;
;;;1267     hspi->TxXferSize  = Size;
;;;1268     hspi->TxXferCount = Size;
;;;1269   
;;;1270     /* Init field not used in handle to zero */
;;;1271     hspi->pRxBuffPtr  = (uint8_t *)NULL;
;;;1272     hspi->RxXferSize  = 0U;
;;;1273     hspi->RxXferCount = 0U;
;;;1274     hspi->RxISR       = NULL;
;;;1275   
;;;1276     /* Set the function for IT treatment */
;;;1277     if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
;;;1278     {
;;;1279       hspi->TxISR = SPI_TxISR_16BIT;
;;;1280     }
;;;1281     else
;;;1282     {
;;;1283       hspi->TxISR = SPI_TxISR_8BIT;
;;;1284     }
;;;1285   
;;;1286     /* Configure communication direction : 1Line */
;;;1287     if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1288     {
;;;1289       SPI_1LINE_TX(hspi);
;;;1290     }
;;;1291   
;;;1292   #if (USE_SPI_CRC != 0U)
;;;1293     /* Reset CRC Calculation */
;;;1294     if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1295     {
;;;1296       SPI_RESET_CRC(hspi);
;;;1297     }
;;;1298   #endif /* USE_SPI_CRC */
;;;1299   
;;;1300     /* Enable TXE and ERR interrupt */
;;;1301     __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
;;;1302   
;;;1303   
;;;1304     /* Check if the SPI is already enabled */
;;;1305     if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1306     {
;;;1307       /* Enable SPI peripheral */
;;;1308       __HAL_SPI_ENABLE(hspi);
;;;1309     }
;;;1310   
;;;1311   error :
;;;1312     __HAL_UNLOCK(hspi);
;;;1313     return errorcode;
;;;1314   }
000022  bd30              POP      {r4,r5,pc}
                  |L25.36|
000024  2501              MOVS     r5,#1                 ;1249
000026  205c              MOVS     r0,#0x5c              ;1249
000028  54c5              STRB     r5,[r0,r3]            ;1249
00002a  bf00              NOP                            ;1249
00002c  2900              CMP      r1,#0                 ;1251
00002e  d001              BEQ      |L25.52|
000030  2a00              CMP      r2,#0                 ;1251
000032  d101              BNE      |L25.56|
                  |L25.52|
000034  2401              MOVS     r4,#1                 ;1253
000036  e04f              B        |L25.216|
                  |L25.56|
000038  205d              MOVS     r0,#0x5d              ;1257
00003a  5cc0              LDRB     r0,[r0,r3]            ;1257
00003c  2801              CMP      r0,#1                 ;1257
00003e  d001              BEQ      |L25.68|
000040  2402              MOVS     r4,#2                 ;1259
000042  e049              B        |L25.216|
                  |L25.68|
000044  2503              MOVS     r5,#3                 ;1264
000046  205d              MOVS     r0,#0x5d              ;1264
000048  54c5              STRB     r5,[r0,r3]            ;1264
00004a  2000              MOVS     r0,#0                 ;1265
00004c  6618              STR      r0,[r3,#0x60]         ;1265
00004e  6399              STR      r1,[r3,#0x38]         ;1266
000050  879a              STRH     r2,[r3,#0x3c]         ;1267
000052  87da              STRH     r2,[r3,#0x3e]         ;1268
000054  6418              STR      r0,[r3,#0x40]         ;1271
000056  2500              MOVS     r5,#0                 ;1272
000058  2044              MOVS     r0,#0x44              ;1272
00005a  52c5              STRH     r5,[r0,r3]            ;1272
00005c  2046              MOVS     r0,#0x46              ;1273
00005e  52c5              STRH     r5,[r0,r3]            ;1273
000060  2000              MOVS     r0,#0                 ;1274
000062  64d8              STR      r0,[r3,#0x4c]         ;1274
000064  2507              MOVS     r5,#7                 ;1277
000066  022d              LSLS     r5,r5,#8              ;1277
000068  68d8              LDR      r0,[r3,#0xc]          ;1277
00006a  42a8              CMP      r0,r5                 ;1277
00006c  d902              BLS      |L25.116|
00006e  481e              LDR      r0,|L25.232|
000070  6518              STR      r0,[r3,#0x50]         ;1279
000072  e001              B        |L25.120|
                  |L25.116|
000074  481d              LDR      r0,|L25.236|
000076  6518              STR      r0,[r3,#0x50]         ;1283
                  |L25.120|
000078  2501              MOVS     r5,#1                 ;1287
00007a  03ed              LSLS     r5,r5,#15             ;1287
00007c  6898              LDR      r0,[r3,#8]            ;1287
00007e  42a8              CMP      r0,r5                 ;1287
000080  d105              BNE      |L25.142|
000082  6818              LDR      r0,[r3,#0]            ;1289
000084  6800              LDR      r0,[r0,#0]            ;1289
000086  106d              ASRS     r5,r5,#1              ;1289
000088  4328              ORRS     r0,r0,r5              ;1289
00008a  681d              LDR      r5,[r3,#0]            ;1289
00008c  6028              STR      r0,[r5,#0]            ;1289
                  |L25.142|
00008e  2501              MOVS     r5,#1                 ;1294
000090  036d              LSLS     r5,r5,#13             ;1294
000092  6a98              LDR      r0,[r3,#0x28]         ;1294
000094  42a8              CMP      r0,r5                 ;1294
000096  d10d              BNE      |L25.180|
000098  bf00              NOP                            ;1296
00009a  6818              LDR      r0,[r3,#0]            ;1296
00009c  6800              LDR      r0,[r0,#0]            ;1296
00009e  43a8              BICS     r0,r0,r5              ;1296
0000a0  681d              LDR      r5,[r3,#0]            ;1296
0000a2  6028              STR      r0,[r5,#0]            ;1296
0000a4  6818              LDR      r0,[r3,#0]            ;1296
0000a6  6800              LDR      r0,[r0,#0]            ;1296
0000a8  2501              MOVS     r5,#1                 ;1296
0000aa  036d              LSLS     r5,r5,#13             ;1296
0000ac  4328              ORRS     r0,r0,r5              ;1296
0000ae  681d              LDR      r5,[r3,#0]            ;1296
0000b0  6028              STR      r0,[r5,#0]            ;1296
0000b2  bf00              NOP                            ;1296
                  |L25.180|
0000b4  6818              LDR      r0,[r3,#0]            ;1301
0000b6  6840              LDR      r0,[r0,#4]            ;1301
0000b8  25a0              MOVS     r5,#0xa0              ;1301
0000ba  4328              ORRS     r0,r0,r5              ;1301
0000bc  681d              LDR      r5,[r3,#0]            ;1301
0000be  6068              STR      r0,[r5,#4]            ;1301
0000c0  6818              LDR      r0,[r3,#0]            ;1305
0000c2  6800              LDR      r0,[r0,#0]            ;1305
0000c4  2540              MOVS     r5,#0x40              ;1305
0000c6  4028              ANDS     r0,r0,r5              ;1305
0000c8  2840              CMP      r0,#0x40              ;1305
0000ca  d004              BEQ      |L25.214|
0000cc  6818              LDR      r0,[r3,#0]            ;1308
0000ce  6800              LDR      r0,[r0,#0]            ;1308
0000d0  4328              ORRS     r0,r0,r5              ;1308
0000d2  681d              LDR      r5,[r3,#0]            ;1308
0000d4  6028              STR      r0,[r5,#0]            ;1308
                  |L25.214|
0000d6  bf00              NOP                            ;1311
                  |L25.216|
0000d8  bf00              NOP                            ;1312
0000da  2500              MOVS     r5,#0                 ;1312
0000dc  205c              MOVS     r0,#0x5c              ;1312
0000de  54c5              STRB     r5,[r0,r3]            ;1312
0000e0  bf00              NOP                            ;1312
0000e2  4620              MOV      r0,r4                 ;1313
0000e4  e79d              B        |L25.34|
;;;1315   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L25.232|
                          DCD      SPI_TxISR_16BIT
                  |L25.236|
                          DCD      SPI_TxISR_8BIT

                          AREA ||i.HAL_SPI_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxCpltCallback PROC
;;;2500     */
;;;2501   __weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;2502   {
;;;2503     /* Prevent unused argument(s) compilation warning */
;;;2504     UNUSED(hspi);
;;;2505   
;;;2506     /* NOTE : This function should not be modified, when the callback is needed,
;;;2507               the HAL_SPI_TxCpltCallback should be implemented in the user file
;;;2508      */
;;;2509   }
;;;2510   
                          ENDP


                          AREA ||i.HAL_SPI_TxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxHalfCpltCallback PROC
;;;2548     */
;;;2549   __weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;2550   {
;;;2551     /* Prevent unused argument(s) compilation warning */
;;;2552     UNUSED(hspi);
;;;2553   
;;;2554     /* NOTE : This function should not be modified, when the callback is needed,
;;;2555               the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
;;;2556      */
;;;2557   }
;;;2558   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxCpltCallback PROC
;;;2532     */
;;;2533   __weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;2534   {
;;;2535     /* Prevent unused argument(s) compilation warning */
;;;2536     UNUSED(hspi);
;;;2537   
;;;2538     /* NOTE : This function should not be modified, when the callback is needed,
;;;2539               the HAL_SPI_TxRxCpltCallback should be implemented in the user file
;;;2540      */
;;;2541   }
;;;2542   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxHalfCpltCallback PROC
;;;2580     */
;;;2581   __weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;2582   {
;;;2583     /* Prevent unused argument(s) compilation warning */
;;;2584     UNUSED(hspi);
;;;2585   
;;;2586     /* NOTE : This function should not be modified, when the callback is needed,
;;;2587               the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
;;;2588      */
;;;2589   }
;;;2590   
                          ENDP


                          AREA ||i.SPI_2linesRxISR_16BIT||, CODE, READONLY, ALIGN=2

                  SPI_2linesRxISR_16BIT PROC
;;;3234     */
;;;3235   static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;3236   {
000002  4604              MOV      r4,r0
;;;3237     /* Receive data in 16 Bit mode */
;;;3238     *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  6c21              LDR      r1,[r4,#0x40]
00000a  8008              STRH     r0,[r1,#0]
;;;3239     hspi->pRxBuffPtr += sizeof(uint16_t);
00000c  6c20              LDR      r0,[r4,#0x40]
00000e  1c80              ADDS     r0,r0,#2
000010  6420              STR      r0,[r4,#0x40]
;;;3240     hspi->RxXferCount--;
000012  2046              MOVS     r0,#0x46
000014  5b00              LDRH     r0,[r0,r4]
000016  1e40              SUBS     r0,r0,#1
000018  b281              UXTH     r1,r0
00001a  2046              MOVS     r0,#0x46
00001c  5301              STRH     r1,[r0,r4]
;;;3241   
;;;3242     if (hspi->RxXferCount == 0U)
00001e  5b00              LDRH     r0,[r0,r4]
000020  2800              CMP      r0,#0
000022  d113              BNE      |L30.76|
;;;3243     {
;;;3244   #if (USE_SPI_CRC != 0U)
;;;3245       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000024  2101              MOVS     r1,#1
000026  0349              LSLS     r1,r1,#13
000028  6aa0              LDR      r0,[r4,#0x28]
00002a  4288              CMP      r0,r1
00002c  d102              BNE      |L30.52|
;;;3246       {
;;;3247         hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
00002e  4808              LDR      r0,|L30.80|
000030  64e0              STR      r0,[r4,#0x4c]
                  |L30.50|
;;;3248         return;
;;;3249       }
;;;3250   #endif /* USE_SPI_CRC */
;;;3251   
;;;3252       /* Disable RXNE interrupt */
;;;3253       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
;;;3254   
;;;3255       if (hspi->TxXferCount == 0U)
;;;3256       {
;;;3257         SPI_CloseRxTx_ISR(hspi);
;;;3258       }
;;;3259     }
;;;3260   }
000032  bd10              POP      {r4,pc}
                  |L30.52|
000034  6820              LDR      r0,[r4,#0]            ;3253
000036  6840              LDR      r0,[r0,#4]            ;3253
000038  2140              MOVS     r1,#0x40              ;3253
00003a  4388              BICS     r0,r0,r1              ;3253
00003c  6821              LDR      r1,[r4,#0]            ;3253
00003e  6048              STR      r0,[r1,#4]            ;3253
000040  8fe0              LDRH     r0,[r4,#0x3e]         ;3255
000042  2800              CMP      r0,#0                 ;3255
000044  d102              BNE      |L30.76|
000046  4620              MOV      r0,r4                 ;3257
000048  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L30.76|
00004c  bf00              NOP      
00004e  e7f0              B        |L30.50|
;;;3261   
                          ENDP

                  |L30.80|
                          DCD      SPI_2linesRxISR_16BITCRC

                          AREA ||i.SPI_2linesRxISR_16BITCRC||, CODE, READONLY, ALIGN=1

                  SPI_2linesRxISR_16BITCRC PROC
;;;3268     */
;;;3269   static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;3270   {
000002  4604              MOV      r4,r0
;;;3271     /* Receive data in 16 Bit mode */
;;;3272     __IO uint16_t tmpreg = 0U;
000004  2100              MOVS     r1,#0
000006  9100              STR      r1,[sp,#0]
;;;3273   
;;;3274     /* Read data register to flush CRC */
;;;3275     tmpreg = hspi->Instance->DR;
000008  6820              LDR      r0,[r4,#0]
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  b281              UXTH     r1,r0
00000e  9100              STR      r1,[sp,#0]
;;;3276   
;;;3277     /* To avoid GCC warning */
;;;3278     UNUSED(tmpreg);
000010  4668              MOV      r0,sp
000012  8800              LDRH     r0,[r0,#0]
;;;3279   
;;;3280     /* Disable RXNE interrupt */
;;;3281     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
000014  6820              LDR      r0,[r4,#0]
000016  6840              LDR      r0,[r0,#4]
000018  2140              MOVS     r1,#0x40
00001a  4388              BICS     r0,r0,r1
00001c  6821              LDR      r1,[r4,#0]
00001e  6048              STR      r0,[r1,#4]
;;;3282   
;;;3283     SPI_CloseRxTx_ISR(hspi);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SPI_CloseRxTx_ISR
;;;3284   }
000026  bd38              POP      {r3-r5,pc}
;;;3285   #endif /* USE_SPI_CRC */
                          ENDP


                          AREA ||i.SPI_2linesRxISR_8BIT||, CODE, READONLY, ALIGN=2

                  SPI_2linesRxISR_8BIT PROC
;;;3106     */
;;;3107   static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;3108   {
000002  4604              MOV      r4,r0
;;;3109     /* Receive data in packing mode */
;;;3110     if (hspi->RxXferCount > 1U)
000004  2046              MOVS     r0,#0x46
000006  5b00              LDRH     r0,[r0,r4]
000008  2801              CMP      r0,#1
00000a  d917              BLS      |L32.60|
;;;3111     {
;;;3112       *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
00000c  6820              LDR      r0,[r4,#0]
00000e  68c0              LDR      r0,[r0,#0xc]
000010  6c21              LDR      r1,[r4,#0x40]
000012  8008              STRH     r0,[r1,#0]
;;;3113       hspi->pRxBuffPtr += sizeof(uint16_t);
000014  6c20              LDR      r0,[r4,#0x40]
000016  1c80              ADDS     r0,r0,#2
000018  6420              STR      r0,[r4,#0x40]
;;;3114       hspi->RxXferCount -= 2U;
00001a  2046              MOVS     r0,#0x46
00001c  5b00              LDRH     r0,[r0,r4]
00001e  1e80              SUBS     r0,r0,#2
000020  b281              UXTH     r1,r0
000022  2046              MOVS     r0,#0x46
000024  5301              STRH     r1,[r0,r4]
;;;3115       if (hspi->RxXferCount == 1U)
000026  5b00              LDRH     r0,[r0,r4]
000028  2801              CMP      r0,#1
00002a  d113              BNE      |L32.84|
;;;3116       {
;;;3117         /* set fiforxthresold according the reception data length: 8bit */
;;;3118         SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
00002c  6820              LDR      r0,[r4,#0]
00002e  6840              LDR      r0,[r0,#4]
000030  2101              MOVS     r1,#1
000032  0309              LSLS     r1,r1,#12
000034  4308              ORRS     r0,r0,r1
000036  6821              LDR      r1,[r4,#0]
000038  6048              STR      r0,[r1,#4]
00003a  e00b              B        |L32.84|
                  |L32.60|
;;;3119       }
;;;3120     }
;;;3121     /* Receive data in 8 Bit mode */
;;;3122     else
;;;3123     {
;;;3124       *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
00003c  6820              LDR      r0,[r4,#0]
00003e  7b01              LDRB     r1,[r0,#0xc]
000040  6c22              LDR      r2,[r4,#0x40]
000042  1c50              ADDS     r0,r2,#1
000044  6420              STR      r0,[r4,#0x40]
000046  7011              STRB     r1,[r2,#0]
;;;3125       hspi->RxXferCount--;
000048  2046              MOVS     r0,#0x46
00004a  5b00              LDRH     r0,[r0,r4]
00004c  1e40              SUBS     r0,r0,#1
00004e  b281              UXTH     r1,r0
000050  2046              MOVS     r0,#0x46
000052  5301              STRH     r1,[r0,r4]
                  |L32.84|
;;;3126     }
;;;3127   
;;;3128     /* check end of the reception */
;;;3129     if (hspi->RxXferCount == 0U)
000054  2046              MOVS     r0,#0x46
000056  5b00              LDRH     r0,[r0,r4]
000058  2800              CMP      r0,#0
00005a  d119              BNE      |L32.144|
;;;3130     {
;;;3131   #if (USE_SPI_CRC != 0U)
;;;3132       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00005c  2101              MOVS     r1,#1
00005e  0349              LSLS     r1,r1,#13
000060  6aa0              LDR      r0,[r4,#0x28]
000062  4288              CMP      r0,r1
000064  d108              BNE      |L32.120|
;;;3133       {
;;;3134         SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
000066  6820              LDR      r0,[r4,#0]
000068  6840              LDR      r0,[r0,#4]
00006a  1049              ASRS     r1,r1,#1
00006c  4308              ORRS     r0,r0,r1
00006e  6821              LDR      r1,[r4,#0]
000070  6048              STR      r0,[r1,#4]
;;;3135         hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
000072  4808              LDR      r0,|L32.148|
000074  64e0              STR      r0,[r4,#0x4c]
                  |L32.118|
;;;3136         return;
;;;3137       }
;;;3138   #endif /* USE_SPI_CRC */
;;;3139   
;;;3140       /* Disable RXNE  and ERR interrupt */
;;;3141       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
;;;3142   
;;;3143       if (hspi->TxXferCount == 0U)
;;;3144       {
;;;3145         SPI_CloseRxTx_ISR(hspi);
;;;3146       }
;;;3147     }
;;;3148   }
000076  bd10              POP      {r4,pc}
                  |L32.120|
000078  6820              LDR      r0,[r4,#0]            ;3141
00007a  6840              LDR      r0,[r0,#4]            ;3141
00007c  2160              MOVS     r1,#0x60              ;3141
00007e  4388              BICS     r0,r0,r1              ;3141
000080  6821              LDR      r1,[r4,#0]            ;3141
000082  6048              STR      r0,[r1,#4]            ;3141
000084  8fe0              LDRH     r0,[r4,#0x3e]         ;3143
000086  2800              CMP      r0,#0                 ;3143
000088  d102              BNE      |L32.144|
00008a  4620              MOV      r0,r4                 ;3145
00008c  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L32.144|
000090  bf00              NOP      
000092  e7f0              B        |L32.118|
;;;3149   
                          ENDP

                  |L32.148|
                          DCD      SPI_2linesRxISR_8BITCRC

                          AREA ||i.SPI_2linesRxISR_8BITCRC||, CODE, READONLY, ALIGN=1

                  SPI_2linesRxISR_8BITCRC PROC
;;;3156     */
;;;3157   static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;3158   {
000002  4604              MOV      r4,r0
;;;3159     __IO uint8_t tmpreg = 0U;
000004  2100              MOVS     r1,#0
000006  9100              STR      r1,[sp,#0]
;;;3160   
;;;3161     /* Read data register to flush CRC */
;;;3162     tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
000008  6820              LDR      r0,[r4,#0]
00000a  7b01              LDRB     r1,[r0,#0xc]
00000c  9100              STR      r1,[sp,#0]
;;;3163   
;;;3164     /* To avoid GCC warning */
;;;3165     UNUSED(tmpreg);
00000e  4668              MOV      r0,sp
000010  7800              LDRB     r0,[r0,#0]
;;;3166   
;;;3167     hspi->CRCSize--;
000012  6ca0              LDR      r0,[r4,#0x48]
000014  1e40              SUBS     r0,r0,#1
000016  64a0              STR      r0,[r4,#0x48]
;;;3168   
;;;3169     /* check end of the reception */
;;;3170     if (hspi->CRCSize == 0U)
000018  6ca0              LDR      r0,[r4,#0x48]
00001a  2800              CMP      r0,#0
00001c  d10b              BNE      |L33.54|
;;;3171     {
;;;3172       /* Disable RXNE and ERR interrupt */
;;;3173       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
00001e  6820              LDR      r0,[r4,#0]
000020  6840              LDR      r0,[r0,#4]
000022  2160              MOVS     r1,#0x60
000024  4388              BICS     r0,r0,r1
000026  6821              LDR      r1,[r4,#0]
000028  6048              STR      r0,[r1,#4]
;;;3174   
;;;3175       if (hspi->TxXferCount == 0U)
00002a  8fe0              LDRH     r0,[r4,#0x3e]
00002c  2800              CMP      r0,#0
00002e  d102              BNE      |L33.54|
;;;3176       {
;;;3177         SPI_CloseRxTx_ISR(hspi);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L33.54|
;;;3178       }
;;;3179     }
;;;3180   }
000036  bd38              POP      {r3-r5,pc}
;;;3181   #endif /* USE_SPI_CRC */
                          ENDP


                          AREA ||i.SPI_2linesTxISR_16BIT||, CODE, READONLY, ALIGN=1

                  SPI_2linesTxISR_16BIT PROC
;;;3292     */
;;;3293   static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;3294   {
000002  4604              MOV      r4,r0
;;;3295     /* Transmit data in 16 Bit mode */
;;;3296     hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
000004  6ba0              LDR      r0,[r4,#0x38]
000006  8800              LDRH     r0,[r0,#0]
000008  6821              LDR      r1,[r4,#0]
00000a  60c8              STR      r0,[r1,#0xc]
;;;3297     hspi->pTxBuffPtr += sizeof(uint16_t);
00000c  6ba0              LDR      r0,[r4,#0x38]
00000e  1c80              ADDS     r0,r0,#2
000010  63a0              STR      r0,[r4,#0x38]
;;;3298     hspi->TxXferCount--;
000012  8fe0              LDRH     r0,[r4,#0x3e]
000014  1e40              SUBS     r0,r0,#1
000016  87e0              STRH     r0,[r4,#0x3e]
;;;3299   
;;;3300     /* Enable CRC Transmission */
;;;3301     if (hspi->TxXferCount == 0U)
000018  8fe0              LDRH     r0,[r4,#0x3e]
00001a  2800              CMP      r0,#0
00001c  d11e              BNE      |L34.92|
;;;3302     {
;;;3303   #if (USE_SPI_CRC != 0U)
;;;3304       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00001e  2101              MOVS     r1,#1
000020  0349              LSLS     r1,r1,#13
000022  6aa0              LDR      r0,[r4,#0x28]
000024  4288              CMP      r0,r1
000026  d10c              BNE      |L34.66|
;;;3305       {
;;;3306         /* Set CRC Next Bit to send CRC */
;;;3307         SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000028  6820              LDR      r0,[r4,#0]
00002a  6800              LDR      r0,[r0,#0]
00002c  1049              ASRS     r1,r1,#1
00002e  4308              ORRS     r0,r0,r1
000030  6821              LDR      r1,[r4,#0]
000032  6008              STR      r0,[r1,#0]
;;;3308         /* Disable TXE interrupt */
;;;3309         __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
000034  6820              LDR      r0,[r4,#0]
000036  6840              LDR      r0,[r0,#4]
000038  2180              MOVS     r1,#0x80
00003a  4388              BICS     r0,r0,r1
00003c  6821              LDR      r1,[r4,#0]
00003e  6048              STR      r0,[r1,#4]
                  |L34.64|
;;;3310         return;
;;;3311       }
;;;3312   #endif /* USE_SPI_CRC */
;;;3313   
;;;3314       /* Disable TXE interrupt */
;;;3315       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
;;;3316   
;;;3317       if (hspi->RxXferCount == 0U)
;;;3318       {
;;;3319         SPI_CloseRxTx_ISR(hspi);
;;;3320       }
;;;3321     }
;;;3322   }
000040  bd10              POP      {r4,pc}
                  |L34.66|
000042  6820              LDR      r0,[r4,#0]            ;3315
000044  6840              LDR      r0,[r0,#4]            ;3315
000046  2180              MOVS     r1,#0x80              ;3315
000048  4388              BICS     r0,r0,r1              ;3315
00004a  6821              LDR      r1,[r4,#0]            ;3315
00004c  6048              STR      r0,[r1,#4]            ;3315
00004e  2046              MOVS     r0,#0x46              ;3317
000050  5b00              LDRH     r0,[r0,r4]            ;3317
000052  2800              CMP      r0,#0                 ;3317
000054  d102              BNE      |L34.92|
000056  4620              MOV      r0,r4                 ;3319
000058  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L34.92|
00005c  bf00              NOP      
00005e  e7ef              B        |L34.64|
;;;3323   
                          ENDP


                          AREA ||i.SPI_2linesTxISR_8BIT||, CODE, READONLY, ALIGN=1

                  SPI_2linesTxISR_8BIT PROC
;;;3188     */
;;;3189   static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;3190   {
000002  4604              MOV      r4,r0
;;;3191     /* Transmit data in packing Bit mode */
;;;3192     if (hspi->TxXferCount >= 2U)
000004  8fe0              LDRH     r0,[r4,#0x3e]
000006  2802              CMP      r0,#2
000008  d30a              BCC      |L35.32|
;;;3193     {
;;;3194       hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
00000a  6ba0              LDR      r0,[r4,#0x38]
00000c  8800              LDRH     r0,[r0,#0]
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;3195       hspi->pTxBuffPtr += sizeof(uint16_t);
000012  6ba0              LDR      r0,[r4,#0x38]
000014  1c80              ADDS     r0,r0,#2
000016  63a0              STR      r0,[r4,#0x38]
;;;3196       hspi->TxXferCount -= 2U;
000018  8fe0              LDRH     r0,[r4,#0x3e]
00001a  1e80              SUBS     r0,r0,#2
00001c  87e0              STRH     r0,[r4,#0x3e]
00001e  e008              B        |L35.50|
                  |L35.32|
;;;3197     }
;;;3198     /* Transmit data in 8 Bit mode */
;;;3199     else
;;;3200     {
;;;3201       *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
000020  6ba1              LDR      r1,[r4,#0x38]
000022  1c48              ADDS     r0,r1,#1
000024  63a0              STR      r0,[r4,#0x38]
000026  7808              LDRB     r0,[r1,#0]
000028  6821              LDR      r1,[r4,#0]
00002a  7308              STRB     r0,[r1,#0xc]
;;;3202       hspi->TxXferCount--;
00002c  8fe0              LDRH     r0,[r4,#0x3e]
00002e  1e40              SUBS     r0,r0,#1
000030  87e0              STRH     r0,[r4,#0x3e]
                  |L35.50|
;;;3203     }
;;;3204   
;;;3205     /* check the end of the transmission */
;;;3206     if (hspi->TxXferCount == 0U)
000032  8fe0              LDRH     r0,[r4,#0x3e]
000034  2800              CMP      r0,#0
000036  d11e              BNE      |L35.118|
;;;3207     {
;;;3208   #if (USE_SPI_CRC != 0U)
;;;3209       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000038  2101              MOVS     r1,#1
00003a  0349              LSLS     r1,r1,#13
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  4288              CMP      r0,r1
000040  d10c              BNE      |L35.92|
;;;3210       {
;;;3211         /* Set CRC Next Bit to send CRC */
;;;3212         SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000042  6820              LDR      r0,[r4,#0]
000044  6800              LDR      r0,[r0,#0]
000046  1049              ASRS     r1,r1,#1
000048  4308              ORRS     r0,r0,r1
00004a  6821              LDR      r1,[r4,#0]
00004c  6008              STR      r0,[r1,#0]
;;;3213         /* Disable TXE interrupt */
;;;3214         __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
00004e  6820              LDR      r0,[r4,#0]
000050  6840              LDR      r0,[r0,#4]
000052  2180              MOVS     r1,#0x80
000054  4388              BICS     r0,r0,r1
000056  6821              LDR      r1,[r4,#0]
000058  6048              STR      r0,[r1,#4]
                  |L35.90|
;;;3215         return;
;;;3216       }
;;;3217   #endif /* USE_SPI_CRC */
;;;3218   
;;;3219       /* Disable TXE interrupt */
;;;3220       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
;;;3221   
;;;3222       if (hspi->RxXferCount == 0U)
;;;3223       {
;;;3224         SPI_CloseRxTx_ISR(hspi);
;;;3225       }
;;;3226     }
;;;3227   }
00005a  bd10              POP      {r4,pc}
                  |L35.92|
00005c  6820              LDR      r0,[r4,#0]            ;3220
00005e  6840              LDR      r0,[r0,#4]            ;3220
000060  2180              MOVS     r1,#0x80              ;3220
000062  4388              BICS     r0,r0,r1              ;3220
000064  6821              LDR      r1,[r4,#0]            ;3220
000066  6048              STR      r0,[r1,#4]            ;3220
000068  2046              MOVS     r0,#0x46              ;3222
00006a  5b00              LDRH     r0,[r0,r4]            ;3222
00006c  2800              CMP      r0,#0                 ;3222
00006e  d102              BNE      |L35.118|
000070  4620              MOV      r0,r4                 ;3224
000072  f7fffffe          BL       SPI_CloseRxTx_ISR
                  |L35.118|
000076  bf00              NOP      
000078  e7ef              B        |L35.90|
;;;3228   
                          ENDP


                          AREA ||i.SPI_AbortRx_ISR||, CODE, READONLY, ALIGN=2

                  SPI_AbortRx_ISR PROC
;;;3814     */
;;;3815   static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
000000  b57c              PUSH     {r2-r6,lr}
;;;3816   {
000002  4604              MOV      r4,r0
;;;3817     __IO uint32_t count;
;;;3818   
;;;3819     /* Disable SPI Peripheral */
;;;3820     __HAL_SPI_DISABLE(hspi);
000004  6820              LDR      r0,[r4,#0]
000006  6800              LDR      r0,[r0,#0]
000008  2140              MOVS     r1,#0x40
00000a  4388              BICS     r0,r0,r1
00000c  6821              LDR      r1,[r4,#0]
00000e  6008              STR      r0,[r1,#0]
;;;3821   
;;;3822     count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
000010  2118              MOVS     r1,#0x18
000012  4822              LDR      r0,|L36.156|
000014  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  4605              MOV      r5,r0
00001c  217d              MOVS     r1,#0x7d
00001e  00c9              LSLS     r1,r1,#3
000020  f7fffffe          BL       __aeabi_uidivmod
000024  2164              MOVS     r1,#0x64
000026  4348              MULS     r0,r1,r0
000028  9001              STR      r0,[sp,#4]
;;;3823   
;;;3824     /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
;;;3825     CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
00002a  6820              LDR      r0,[r4,#0]
00002c  6840              LDR      r0,[r0,#4]
00002e  21e0              MOVS     r1,#0xe0
000030  4388              BICS     r0,r0,r1
000032  6821              LDR      r1,[r4,#0]
000034  6048              STR      r0,[r1,#4]
;;;3826   
;;;3827     /* Check RXNEIE is disabled */
;;;3828     do
000036  bf00              NOP      
                  |L36.56|
;;;3829     {
;;;3830       if (count-- == 0U)
000038  9801              LDR      r0,[sp,#4]
00003a  1e41              SUBS     r1,r0,#1
00003c  9101              STR      r1,[sp,#4]
00003e  2800              CMP      r0,#0
000040  d104              BNE      |L36.76|
;;;3831       {
;;;3832         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
000042  6e20              LDR      r0,[r4,#0x60]
000044  2140              MOVS     r1,#0x40
000046  4308              ORRS     r0,r0,r1
000048  6620              STR      r0,[r4,#0x60]
;;;3833         break;
00004a  e005              B        |L36.88|
                  |L36.76|
;;;3834       }
;;;3835     }
;;;3836     while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
00004c  6820              LDR      r0,[r4,#0]
00004e  6840              LDR      r0,[r0,#4]
000050  2140              MOVS     r1,#0x40
000052  4008              ANDS     r0,r0,r1
000054  2800              CMP      r0,#0
000056  d1ef              BNE      |L36.56|
                  |L36.88|
000058  bf00              NOP                            ;3833
;;;3837   
;;;3838     /* Control the BSY flag */
;;;3839     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
00005a  f7fffffe          BL       HAL_GetTick
00005e  4605              MOV      r5,r0
000060  2364              MOVS     r3,#0x64
000062  2200              MOVS     r2,#0
000064  2180              MOVS     r1,#0x80
000066  9000              STR      r0,[sp,#0]
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
00006e  2800              CMP      r0,#0
000070  d001              BEQ      |L36.118|
;;;3840     {
;;;3841       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000072  2040              MOVS     r0,#0x40
000074  6620              STR      r0,[r4,#0x60]
                  |L36.118|
;;;3842     }
;;;3843   
;;;3844     /* Empty the FRLVL fifo */
;;;3845     if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
000076  f7fffffe          BL       HAL_GetTick
00007a  4605              MOV      r5,r0
00007c  2364              MOVS     r3,#0x64
00007e  2200              MOVS     r2,#0
000080  2103              MOVS     r1,#3
000082  0249              LSLS     r1,r1,#9
000084  9000              STR      r0,[sp,#0]
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
00008c  2800              CMP      r0,#0
00008e  d001              BEQ      |L36.148|
;;;3846     {
;;;3847       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000090  2040              MOVS     r0,#0x40
000092  6620              STR      r0,[r4,#0x60]
                  |L36.148|
;;;3848     }
;;;3849   
;;;3850     hspi->State = HAL_SPI_STATE_ABORT;
000094  2107              MOVS     r1,#7
000096  205d              MOVS     r0,#0x5d
000098  5501              STRB     r1,[r0,r4]
;;;3851   }
00009a  bd7c              POP      {r2-r6,pc}
;;;3852   
                          ENDP

                  |L36.156|
                          DCD      SystemCoreClock

                          AREA ||i.SPI_AbortTx_ISR||, CODE, READONLY, ALIGN=2

                  SPI_AbortTx_ISR PROC
;;;3858     */
;;;3859   static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
000000  b57c              PUSH     {r2-r6,lr}
;;;3860   {
000002  4604              MOV      r4,r0
;;;3861     __IO uint32_t count;
;;;3862   
;;;3863     count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
000004  2118              MOVS     r1,#0x18
000006  4824              LDR      r0,|L37.152|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000a  f7fffffe          BL       __aeabi_uidivmod
00000e  4605              MOV      r5,r0
000010  217d              MOVS     r1,#0x7d
000012  00c9              LSLS     r1,r1,#3
000014  f7fffffe          BL       __aeabi_uidivmod
000018  2164              MOVS     r1,#0x64
00001a  4348              MULS     r0,r1,r0
00001c  9001              STR      r0,[sp,#4]
;;;3864   
;;;3865     /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
;;;3866     CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
00001e  6820              LDR      r0,[r4,#0]
000020  6840              LDR      r0,[r0,#4]
000022  21e0              MOVS     r1,#0xe0
000024  4388              BICS     r0,r0,r1
000026  6821              LDR      r1,[r4,#0]
000028  6048              STR      r0,[r1,#4]
;;;3867   
;;;3868     /* Check TXEIE is disabled */
;;;3869     do
00002a  bf00              NOP      
                  |L37.44|
;;;3870     {
;;;3871       if (count-- == 0U)
00002c  9801              LDR      r0,[sp,#4]
00002e  1e41              SUBS     r1,r0,#1
000030  9101              STR      r1,[sp,#4]
000032  2800              CMP      r0,#0
000034  d104              BNE      |L37.64|
;;;3872       {
;;;3873         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
000036  6e20              LDR      r0,[r4,#0x60]
000038  2140              MOVS     r1,#0x40
00003a  4308              ORRS     r0,r0,r1
00003c  6620              STR      r0,[r4,#0x60]
;;;3874         break;
00003e  e005              B        |L37.76|
                  |L37.64|
;;;3875       }
;;;3876     }
;;;3877     while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
000040  6820              LDR      r0,[r4,#0]
000042  6840              LDR      r0,[r0,#4]
000044  2180              MOVS     r1,#0x80
000046  4008              ANDS     r0,r0,r1
000048  2800              CMP      r0,#0
00004a  d1ef              BNE      |L37.44|
                  |L37.76|
00004c  bf00              NOP                            ;3874
;;;3878   
;;;3879     if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
00004e  f7fffffe          BL       HAL_GetTick
000052  4605              MOV      r5,r0
000054  462a              MOV      r2,r5
000056  2164              MOVS     r1,#0x64
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       SPI_EndRxTxTransaction
00005e  2800              CMP      r0,#0
000060  d001              BEQ      |L37.102|
;;;3880     {
;;;3881       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000062  2040              MOVS     r0,#0x40
000064  6620              STR      r0,[r4,#0x60]
                  |L37.102|
;;;3882     }
;;;3883   
;;;3884     /* Disable SPI Peripheral */
;;;3885     __HAL_SPI_DISABLE(hspi);
000066  6820              LDR      r0,[r4,#0]
000068  6800              LDR      r0,[r0,#0]
00006a  2140              MOVS     r1,#0x40
00006c  4388              BICS     r0,r0,r1
00006e  6821              LDR      r1,[r4,#0]
000070  6008              STR      r0,[r1,#0]
;;;3886   
;;;3887     /* Empty the FRLVL fifo */
;;;3888     if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
000072  f7fffffe          BL       HAL_GetTick
000076  4605              MOV      r5,r0
000078  2364              MOVS     r3,#0x64
00007a  2200              MOVS     r2,#0
00007c  2103              MOVS     r1,#3
00007e  0249              LSLS     r1,r1,#9
000080  9000              STR      r0,[sp,#0]
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000088  2800              CMP      r0,#0
00008a  d001              BEQ      |L37.144|
;;;3889     {
;;;3890       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
00008c  2040              MOVS     r0,#0x40
00008e  6620              STR      r0,[r4,#0x60]
                  |L37.144|
;;;3891     }
;;;3892   
;;;3893     hspi->State = HAL_SPI_STATE_ABORT;
000090  2107              MOVS     r1,#7
000092  205d              MOVS     r0,#0x5d
000094  5501              STRB     r1,[r0,r4]
;;;3894   }
000096  bd7c              POP      {r2-r6,pc}
;;;3895   
                          ENDP

                  |L37.152|
                          DCD      SystemCoreClock

                          AREA ||i.SPI_CloseRxTx_ISR||, CODE, READONLY, ALIGN=2

                  SPI_CloseRxTx_ISR PROC
;;;3676     */
;;;3677   static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
000000  b570              PUSH     {r4-r6,lr}
;;;3678   {
000002  4604              MOV      r4,r0
;;;3679     uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;3680   
;;;3681     /* Init tickstart for timeout managment*/
;;;3682     tickstart = HAL_GetTick();
000006  f7fffffe          BL       HAL_GetTick
00000a  4605              MOV      r5,r0
;;;3683   
;;;3684     /* Disable ERR interrupt */
;;;3685     __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
00000c  6820              LDR      r0,[r4,#0]
00000e  6840              LDR      r0,[r0,#4]
000010  2120              MOVS     r1,#0x20
000012  4388              BICS     r0,r0,r1
000014  6821              LDR      r1,[r4,#0]
000016  6048              STR      r0,[r1,#4]
;;;3686   
;;;3687     /* Check the end of the transaction */
;;;3688     if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
000018  462a              MOV      r2,r5
00001a  2164              MOVS     r1,#0x64
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SPI_EndRxTxTransaction
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L38.46|
;;;3689     {
;;;3690       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000026  6e20              LDR      r0,[r4,#0x60]
000028  2120              MOVS     r1,#0x20
00002a  4308              ORRS     r0,r0,r1
00002c  6620              STR      r0,[r4,#0x60]
                  |L38.46|
;;;3691     }
;;;3692   
;;;3693   #if (USE_SPI_CRC != 0U)
;;;3694     /* Check if CRC error occurred */
;;;3695     if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
00002e  6820              LDR      r0,[r4,#0]
000030  6880              LDR      r0,[r0,#8]
000032  2110              MOVS     r1,#0x10
000034  4008              ANDS     r0,r0,r1
000036  0900              LSRS     r0,r0,#4
000038  2800              CMP      r0,#0
00003a  d00d              BEQ      |L38.88|
;;;3696     {
;;;3697       hspi->State = HAL_SPI_STATE_READY;
00003c  2101              MOVS     r1,#1
00003e  205d              MOVS     r0,#0x5d
000040  5501              STRB     r1,[r0,r4]
;;;3698       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000042  6e20              LDR      r0,[r4,#0x60]
000044  2102              MOVS     r1,#2
000046  4308              ORRS     r0,r0,r1
000048  6620              STR      r0,[r4,#0x60]
;;;3699       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
00004a  4811              LDR      r0,|L38.144|
00004c  6821              LDR      r1,[r4,#0]
00004e  6088              STR      r0,[r1,#8]
;;;3700       HAL_SPI_ErrorCallback(hspi);
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       HAL_SPI_ErrorCallback
000056  e01a              B        |L38.142|
                  |L38.88|
;;;3701     }
;;;3702     else
;;;3703     {
;;;3704   #endif /* USE_SPI_CRC */
;;;3705       if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
000058  6e20              LDR      r0,[r4,#0x60]
00005a  2800              CMP      r0,#0
00005c  d111              BNE      |L38.130|
;;;3706       {
;;;3707         if (hspi->State == HAL_SPI_STATE_BUSY_RX)
00005e  205d              MOVS     r0,#0x5d
000060  5d00              LDRB     r0,[r0,r4]
000062  2804              CMP      r0,#4
000064  d106              BNE      |L38.116|
;;;3708         {
;;;3709           hspi->State = HAL_SPI_STATE_READY;
000066  2101              MOVS     r1,#1
000068  205d              MOVS     r0,#0x5d
00006a  5501              STRB     r1,[r0,r4]
;;;3710           HAL_SPI_RxCpltCallback(hspi);
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       HAL_SPI_RxCpltCallback
000072  e00c              B        |L38.142|
                  |L38.116|
;;;3711         }
;;;3712         else
;;;3713         {
;;;3714           hspi->State = HAL_SPI_STATE_READY;
000074  2101              MOVS     r1,#1
000076  205d              MOVS     r0,#0x5d
000078  5501              STRB     r1,[r0,r4]
;;;3715           HAL_SPI_TxRxCpltCallback(hspi);
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
000080  e005              B        |L38.142|
                  |L38.130|
;;;3716         }
;;;3717       }
;;;3718       else
;;;3719       {
;;;3720         hspi->State = HAL_SPI_STATE_READY;
000082  2101              MOVS     r1,#1
000084  205d              MOVS     r0,#0x5d
000086  5501              STRB     r1,[r0,r4]
;;;3721         HAL_SPI_ErrorCallback(hspi);
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L38.142|
;;;3722       }
;;;3723   #if (USE_SPI_CRC != 0U)
;;;3724     }
;;;3725   #endif /* USE_SPI_CRC */
;;;3726   }
00008e  bd70              POP      {r4-r6,pc}
;;;3727   
                          ENDP

                  |L38.144|
                          DCD      0x0000ffef

                          AREA ||i.SPI_CloseRx_ISR||, CODE, READONLY, ALIGN=2

                  SPI_CloseRx_ISR PROC
;;;3733     */
;;;3734   static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
000000  b570              PUSH     {r4-r6,lr}
;;;3735   {
000002  4604              MOV      r4,r0
;;;3736     /* Disable RXNE and ERR interrupt */
;;;3737     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
000004  6820              LDR      r0,[r4,#0]
000006  6840              LDR      r0,[r0,#4]
000008  2160              MOVS     r1,#0x60
00000a  4388              BICS     r0,r0,r1
00000c  6821              LDR      r1,[r4,#0]
00000e  6048              STR      r0,[r1,#4]
;;;3738   
;;;3739     /* Check the end of the transaction */
;;;3740     if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
000010  f7fffffe          BL       HAL_GetTick
000014  4605              MOV      r5,r0
000016  462a              MOV      r2,r5
000018  2164              MOVS     r1,#0x64
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       SPI_EndRxTransaction
000020  2800              CMP      r0,#0
000022  d003              BEQ      |L39.44|
;;;3741     {
;;;3742       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000024  6e20              LDR      r0,[r4,#0x60]
000026  2120              MOVS     r1,#0x20
000028  4308              ORRS     r0,r0,r1
00002a  6620              STR      r0,[r4,#0x60]
                  |L39.44|
;;;3743     }
;;;3744     hspi->State = HAL_SPI_STATE_READY;
00002c  2101              MOVS     r1,#1
00002e  205d              MOVS     r0,#0x5d
000030  5501              STRB     r1,[r0,r4]
;;;3745   
;;;3746   #if (USE_SPI_CRC != 0U)
;;;3747     /* Check if CRC error occurred */
;;;3748     if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000032  6820              LDR      r0,[r4,#0]
000034  6880              LDR      r0,[r0,#8]
000036  2110              MOVS     r1,#0x10
000038  4008              ANDS     r0,r0,r1
00003a  0900              LSRS     r0,r0,#4
00003c  2800              CMP      r0,#0
00003e  d00a              BEQ      |L39.86|
;;;3749     {
;;;3750       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000040  6e20              LDR      r0,[r4,#0x60]
000042  2102              MOVS     r1,#2
000044  4308              ORRS     r0,r0,r1
000046  6620              STR      r0,[r4,#0x60]
;;;3751       __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
000048  4808              LDR      r0,|L39.108|
00004a  6821              LDR      r1,[r4,#0]
00004c  6088              STR      r0,[r1,#8]
;;;3752       HAL_SPI_ErrorCallback(hspi);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       HAL_SPI_ErrorCallback
000054  e009              B        |L39.106|
                  |L39.86|
;;;3753     }
;;;3754     else
;;;3755     {
;;;3756   #endif /* USE_SPI_CRC */
;;;3757       if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
000056  6e20              LDR      r0,[r4,#0x60]
000058  2800              CMP      r0,#0
00005a  d103              BNE      |L39.100|
;;;3758       {
;;;3759         HAL_SPI_RxCpltCallback(hspi);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       HAL_SPI_RxCpltCallback
000062  e002              B        |L39.106|
                  |L39.100|
;;;3760       }
;;;3761       else
;;;3762       {
;;;3763         HAL_SPI_ErrorCallback(hspi);
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L39.106|
;;;3764       }
;;;3765   #if (USE_SPI_CRC != 0U)
;;;3766     }
;;;3767   #endif /* USE_SPI_CRC */
;;;3768   }
00006a  bd70              POP      {r4-r6,pc}
;;;3769   
                          ENDP

                  |L39.108|
                          DCD      0x0000ffef

                          AREA ||i.SPI_CloseTx_ISR||, CODE, READONLY, ALIGN=1

                  SPI_CloseTx_ISR PROC
;;;3775     */
;;;3776   static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;3777   {
000002  4604              MOV      r4,r0
;;;3778     uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;3779   
;;;3780     /* Init tickstart for timeout management*/
;;;3781     tickstart = HAL_GetTick();
000006  f7fffffe          BL       HAL_GetTick
00000a  4605              MOV      r5,r0
;;;3782   
;;;3783     /* Disable TXE and ERR interrupt */
;;;3784     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
00000c  6820              LDR      r0,[r4,#0]
00000e  6840              LDR      r0,[r0,#4]
000010  21a0              MOVS     r1,#0xa0
000012  4388              BICS     r0,r0,r1
000014  6821              LDR      r1,[r4,#0]
000016  6048              STR      r0,[r1,#4]
;;;3785   
;;;3786     /* Check the end of the transaction */
;;;3787     if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
000018  462a              MOV      r2,r5
00001a  2164              MOVS     r1,#0x64
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SPI_EndRxTxTransaction
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L40.46|
;;;3788     {
;;;3789       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000026  6e20              LDR      r0,[r4,#0x60]
000028  2120              MOVS     r1,#0x20
00002a  4308              ORRS     r0,r0,r1
00002c  6620              STR      r0,[r4,#0x60]
                  |L40.46|
;;;3790     }
;;;3791   
;;;3792     /* Clear overrun flag in 2 Lines communication mode because received is not read */
;;;3793     if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
00002e  68a0              LDR      r0,[r4,#8]
000030  2800              CMP      r0,#0
000032  d109              BNE      |L40.72|
;;;3794     {
;;;3795       __HAL_SPI_CLEAR_OVRFLAG(hspi);
000034  bf00              NOP      
000036  9000              STR      r0,[sp,#0]
000038  6820              LDR      r0,[r4,#0]
00003a  68c0              LDR      r0,[r0,#0xc]
00003c  9000              STR      r0,[sp,#0]
00003e  6820              LDR      r0,[r4,#0]
000040  6880              LDR      r0,[r0,#8]
000042  9000              STR      r0,[sp,#0]
000044  bf00              NOP      
000046  bf00              NOP      
                  |L40.72|
;;;3796     }
;;;3797   
;;;3798     hspi->State = HAL_SPI_STATE_READY;
000048  2101              MOVS     r1,#1
00004a  205d              MOVS     r0,#0x5d
00004c  5501              STRB     r1,[r0,r4]
;;;3799     if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
00004e  6e20              LDR      r0,[r4,#0x60]
000050  2800              CMP      r0,#0
000052  d003              BEQ      |L40.92|
;;;3800     {
;;;3801       HAL_SPI_ErrorCallback(hspi);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       HAL_SPI_ErrorCallback
00005a  e002              B        |L40.98|
                  |L40.92|
;;;3802     }
;;;3803     else
;;;3804     {
;;;3805       HAL_SPI_TxCpltCallback(hspi);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       HAL_SPI_TxCpltCallback
                  |L40.98|
;;;3806     }
;;;3807   }
000062  bd38              POP      {r3-r5,pc}
;;;3808   
                          ENDP


                          AREA ||i.SPI_DMAAbortOnError||, CODE, READONLY, ALIGN=1

                  SPI_DMAAbortOnError PROC
;;;2966     */
;;;2967   static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2968   {
000002  4605              MOV      r5,r0
;;;2969     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a6c              LDR      r4,[r5,#0x24]
;;;2970     hspi->RxXferCount = 0U;
000006  2100              MOVS     r1,#0
000008  2046              MOVS     r0,#0x46
00000a  5301              STRH     r1,[r0,r4]
;;;2971     hspi->TxXferCount = 0U;
00000c  2000              MOVS     r0,#0
00000e  87e0              STRH     r0,[r4,#0x3e]
;;;2972   
;;;2973     HAL_SPI_ErrorCallback(hspi);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2974   }
000016  bd70              POP      {r4-r6,pc}
;;;2975   
                          ENDP


                          AREA ||i.SPI_DMAError||, CODE, READONLY, ALIGN=1

                  SPI_DMAError PROC
;;;2948     */
;;;2949   static void SPI_DMAError(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2950   {
000002  4605              MOV      r5,r0
;;;2951     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a6c              LDR      r4,[r5,#0x24]
;;;2952   
;;;2953     /* Stop the disable DMA transfer on SPI side */
;;;2954     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
000006  6820              LDR      r0,[r4,#0]
000008  6840              LDR      r0,[r0,#4]
00000a  0880              LSRS     r0,r0,#2
00000c  0080              LSLS     r0,r0,#2
00000e  6821              LDR      r1,[r4,#0]
000010  6048              STR      r0,[r1,#4]
;;;2955   
;;;2956     SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
000012  6e20              LDR      r0,[r4,#0x60]
000014  2110              MOVS     r1,#0x10
000016  4308              ORRS     r0,r0,r1
000018  6620              STR      r0,[r4,#0x60]
;;;2957     hspi->State = HAL_SPI_STATE_READY;
00001a  2101              MOVS     r1,#1
00001c  205d              MOVS     r0,#0x5d
00001e  5501              STRB     r1,[r0,r4]
;;;2958     HAL_SPI_ErrorCallback(hspi);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2959   }
000026  bd70              POP      {r4-r6,pc}
;;;2960   
                          ENDP


                          AREA ||i.SPI_DMAHalfReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfReceiveCplt PROC
;;;2922     */
;;;2923   static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2924   {
000002  4604              MOV      r4,r0
;;;2925     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a65              LDR      r5,[r4,#0x24]
;;;2926   
;;;2927     HAL_SPI_RxHalfCpltCallback(hspi);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_SPI_RxHalfCpltCallback
;;;2928   }
00000c  bd70              POP      {r4-r6,pc}
;;;2929   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitCplt PROC
;;;2909     */
;;;2910   static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2911   {
000002  4604              MOV      r4,r0
;;;2912     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a65              LDR      r5,[r4,#0x24]
;;;2913   
;;;2914     HAL_SPI_TxHalfCpltCallback(hspi);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_SPI_TxHalfCpltCallback
;;;2915   }
00000c  bd70              POP      {r4-r6,pc}
;;;2916   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitReceiveCplt PROC
;;;2935     */
;;;2936   static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2937   {
000002  4604              MOV      r4,r0
;;;2938     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a65              LDR      r5,[r4,#0x24]
;;;2939   
;;;2940     HAL_SPI_TxRxHalfCpltCallback(hspi);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_SPI_TxRxHalfCpltCallback
;;;2941   }
00000c  bd70              POP      {r4-r6,pc}
;;;2942   
                          ENDP


                          AREA ||i.SPI_DMAReceiveCplt||, CODE, READONLY, ALIGN=2

                  SPI_DMAReceiveCplt PROC
;;;2733     */
;;;2734   static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b57c              PUSH     {r2-r6,lr}
;;;2735   {
000002  4605              MOV      r5,r0
;;;2736     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a6c              LDR      r4,[r5,#0x24]
;;;2737     uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;2738   #if (USE_SPI_CRC != 0U)
;;;2739     __IO uint16_t tmpreg = 0U;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;2740   #endif /* USE_SPI_CRC */
;;;2741   
;;;2742     /* Init tickstart for timeout management*/
;;;2743     tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4606              MOV      r6,r0
;;;2744   
;;;2745     /* DMA Normal Mode */
;;;2746     if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
000012  6828              LDR      r0,[r5,#0]
000014  6800              LDR      r0,[r0,#0]
000016  2120              MOVS     r1,#0x20
000018  4008              ANDS     r0,r0,r1
00001a  2820              CMP      r0,#0x20
00001c  d065              BEQ      |L46.234|
;;;2747     {
;;;2748       /* Disable ERR interrupt */
;;;2749       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
00001e  6820              LDR      r0,[r4,#0]
000020  6840              LDR      r0,[r0,#4]
000022  4388              BICS     r0,r0,r1
000024  6821              LDR      r1,[r4,#0]
000026  6048              STR      r0,[r1,#4]
;;;2750   
;;;2751   #if (USE_SPI_CRC != 0U)
;;;2752       /* CRC handling */
;;;2753       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000028  2101              MOVS     r1,#1
00002a  0349              LSLS     r1,r1,#13
00002c  6aa0              LDR      r0,[r4,#0x28]
00002e  4288              CMP      r0,r1
000030  d132              BNE      |L46.152|
;;;2754       {
;;;2755         /* Wait until RXNE flag */
;;;2756         if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
000032  2364              MOVS     r3,#0x64
000034  2201              MOVS     r2,#1
000036  4611              MOV      r1,r2
000038  4620              MOV      r0,r4
00003a  9600              STR      r6,[sp,#0]
00003c  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000040  2800              CMP      r0,#0
000042  d003              BEQ      |L46.76|
;;;2757         {
;;;2758           /* Error on the CRC reception */
;;;2759           SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000044  6e20              LDR      r0,[r4,#0x60]
000046  2102              MOVS     r1,#2
000048  4308              ORRS     r0,r0,r1
00004a  6620              STR      r0,[r4,#0x60]
                  |L46.76|
;;;2760         }
;;;2761         /* Read CRC */
;;;2762         if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
00004c  2107              MOVS     r1,#7
00004e  0209              LSLS     r1,r1,#8
000050  68e0              LDR      r0,[r4,#0xc]
000052  4288              CMP      r0,r1
000054  d906              BLS      |L46.100|
;;;2763         {
;;;2764           tmpreg = hspi->Instance->DR;
000056  6820              LDR      r0,[r4,#0]
000058  68c0              LDR      r0,[r0,#0xc]
00005a  b281              UXTH     r1,r0
00005c  9101              STR      r1,[sp,#4]
;;;2765           /* To avoid GCC warning */
;;;2766           UNUSED(tmpreg);
00005e  4668              MOV      r0,sp
000060  8880              LDRH     r0,[r0,#4]
000062  e019              B        |L46.152|
                  |L46.100|
;;;2767         }
;;;2768         else
;;;2769         {
;;;2770           tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
000064  6820              LDR      r0,[r4,#0]
000066  7b01              LDRB     r1,[r0,#0xc]
000068  9101              STR      r1,[sp,#4]
;;;2771           /* To avoid GCC warning */
;;;2772           UNUSED(tmpreg);
00006a  4668              MOV      r0,sp
00006c  8880              LDRH     r0,[r0,#4]
;;;2773   
;;;2774           if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
00006e  6b20              LDR      r0,[r4,#0x30]
000070  2802              CMP      r0,#2
000072  d111              BNE      |L46.152|
;;;2775           {
;;;2776             if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
000074  2364              MOVS     r3,#0x64
000076  2201              MOVS     r2,#1
000078  4611              MOV      r1,r2
00007a  4620              MOV      r0,r4
00007c  9600              STR      r6,[sp,#0]
00007e  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000082  2800              CMP      r0,#0
000084  d003              BEQ      |L46.142|
;;;2777             {
;;;2778               /* Error on the CRC reception */
;;;2779               SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000086  6e20              LDR      r0,[r4,#0x60]
000088  2102              MOVS     r1,#2
00008a  4308              ORRS     r0,r0,r1
00008c  6620              STR      r0,[r4,#0x60]
                  |L46.142|
;;;2780             }
;;;2781             tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
00008e  6820              LDR      r0,[r4,#0]
000090  7b01              LDRB     r1,[r0,#0xc]
000092  9101              STR      r1,[sp,#4]
;;;2782             /* To avoid GCC warning */
;;;2783             UNUSED(tmpreg);
000094  4668              MOV      r0,sp
000096  8880              LDRH     r0,[r0,#4]
                  |L46.152|
;;;2784           }
;;;2785         }
;;;2786       }
;;;2787   #endif /* USE_SPI_CRC */
;;;2788   
;;;2789       /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
;;;2790       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
000098  6820              LDR      r0,[r4,#0]
00009a  6840              LDR      r0,[r0,#4]
00009c  0880              LSRS     r0,r0,#2
00009e  0080              LSLS     r0,r0,#2
0000a0  6821              LDR      r1,[r4,#0]
0000a2  6048              STR      r0,[r1,#4]
;;;2791   
;;;2792       /* Check the end of the transaction */
;;;2793       if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
0000a4  4632              MOV      r2,r6
0000a6  2164              MOVS     r1,#0x64
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       SPI_EndRxTransaction
0000ae  2800              CMP      r0,#0
0000b0  d001              BEQ      |L46.182|
;;;2794       {
;;;2795         hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
0000b2  2020              MOVS     r0,#0x20
0000b4  6620              STR      r0,[r4,#0x60]
                  |L46.182|
;;;2796       }
;;;2797   
;;;2798       hspi->RxXferCount = 0U;
0000b6  2100              MOVS     r1,#0
0000b8  2046              MOVS     r0,#0x46
0000ba  5301              STRH     r1,[r0,r4]
;;;2799       hspi->State = HAL_SPI_STATE_READY;
0000bc  2101              MOVS     r1,#1
0000be  205d              MOVS     r0,#0x5d
0000c0  5501              STRB     r1,[r0,r4]
;;;2800   
;;;2801   #if (USE_SPI_CRC != 0U)
;;;2802       /* Check if CRC error occurred */
;;;2803       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
0000c2  6820              LDR      r0,[r4,#0]
0000c4  6880              LDR      r0,[r0,#8]
0000c6  2110              MOVS     r1,#0x10
0000c8  4008              ANDS     r0,r0,r1
0000ca  2810              CMP      r0,#0x10
0000cc  d106              BNE      |L46.220|
;;;2804       {
;;;2805         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
0000ce  6e20              LDR      r0,[r4,#0x60]
0000d0  2102              MOVS     r1,#2
0000d2  4308              ORRS     r0,r0,r1
0000d4  6620              STR      r0,[r4,#0x60]
;;;2806         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
0000d6  4807              LDR      r0,|L46.244|
0000d8  6821              LDR      r1,[r4,#0]
0000da  6088              STR      r0,[r1,#8]
                  |L46.220|
;;;2807       }
;;;2808   #endif /* USE_SPI_CRC */
;;;2809   
;;;2810       if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
0000dc  6e20              LDR      r0,[r4,#0x60]
0000de  2800              CMP      r0,#0
0000e0  d003              BEQ      |L46.234|
;;;2811       {
;;;2812         HAL_SPI_ErrorCallback(hspi);
0000e2  4620              MOV      r0,r4
0000e4  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L46.232|
;;;2813         return;
;;;2814       }
;;;2815     }
;;;2816     HAL_SPI_RxCpltCallback(hspi);
;;;2817   }
0000e8  bd7c              POP      {r2-r6,pc}
                  |L46.234|
0000ea  4620              MOV      r0,r4                 ;2816
0000ec  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000f0  bf00              NOP      
0000f2  e7f9              B        |L46.232|
;;;2818   
                          ENDP

                  |L46.244|
                          DCD      0x0000ffef

                          AREA ||i.SPI_DMARxAbortCallback||, CODE, READONLY, ALIGN=1

                  SPI_DMARxAbortCallback PROC
;;;3045     */
;;;3046   static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3047   {
000002  4605              MOV      r5,r0
;;;3048     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a6c              LDR      r4,[r5,#0x24]
;;;3049   
;;;3050     /* Disable SPI Peripheral */
;;;3051     __HAL_SPI_DISABLE(hspi);
000006  6820              LDR      r0,[r4,#0]
000008  6800              LDR      r0,[r0,#0]
00000a  2140              MOVS     r1,#0x40
00000c  4388              BICS     r0,r0,r1
00000e  6821              LDR      r1,[r4,#0]
000010  6008              STR      r0,[r1,#0]
;;;3052   
;;;3053     hspi->hdmarx->XferAbortCallback = NULL;
000012  2000              MOVS     r0,#0
000014  6da1              LDR      r1,[r4,#0x58]
000016  6348              STR      r0,[r1,#0x34]
;;;3054   
;;;3055     /* Disable Rx DMA Request */
;;;3056     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  0840              LSRS     r0,r0,#1
00001e  0040              LSLS     r0,r0,#1
000020  6821              LDR      r1,[r4,#0]
000022  6048              STR      r0,[r1,#4]
;;;3057   
;;;3058     /* Control the BSY flag */
;;;3059     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
000024  f7fffffe          BL       HAL_GetTick
000028  4606              MOV      r6,r0
00002a  2364              MOVS     r3,#0x64
00002c  2200              MOVS     r2,#0
00002e  2180              MOVS     r1,#0x80
000030  9000              STR      r0,[sp,#0]
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000038  2800              CMP      r0,#0
00003a  d001              BEQ      |L47.64|
;;;3060     {
;;;3061       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
00003c  2040              MOVS     r0,#0x40
00003e  6620              STR      r0,[r4,#0x60]
                  |L47.64|
;;;3062     }
;;;3063   
;;;3064     /* Empty the FRLVL fifo */
;;;3065     if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
000040  f7fffffe          BL       HAL_GetTick
000044  4606              MOV      r6,r0
000046  2364              MOVS     r3,#0x64
000048  2200              MOVS     r2,#0
00004a  2103              MOVS     r1,#3
00004c  0249              LSLS     r1,r1,#9
00004e  9000              STR      r0,[sp,#0]
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000056  2800              CMP      r0,#0
000058  d001              BEQ      |L47.94|
;;;3066     {
;;;3067       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
00005a  2040              MOVS     r0,#0x40
00005c  6620              STR      r0,[r4,#0x60]
                  |L47.94|
;;;3068     }
;;;3069   
;;;3070     /* Check if an Abort process is still ongoing */
;;;3071     if (hspi->hdmatx != NULL)
00005e  6d60              LDR      r0,[r4,#0x54]
000060  2800              CMP      r0,#0
000062  d004              BEQ      |L47.110|
;;;3072     {
;;;3073       if (hspi->hdmatx->XferAbortCallback != NULL)
000064  6d60              LDR      r0,[r4,#0x54]
000066  6b40              LDR      r0,[r0,#0x34]
000068  2800              CMP      r0,#0
00006a  d000              BEQ      |L47.110|
                  |L47.108|
;;;3074       {
;;;3075         return;
;;;3076       }
;;;3077     }
;;;3078   
;;;3079     /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
;;;3080     hspi->RxXferCount = 0U;
;;;3081     hspi->TxXferCount = 0U;
;;;3082   
;;;3083     /* Check no error during Abort procedure */
;;;3084     if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
;;;3085     {
;;;3086       /* Reset errorCode */
;;;3087       hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;3088     }
;;;3089   
;;;3090     /* Clear the Error flags in the SR register */
;;;3091     __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;3092     __HAL_SPI_CLEAR_FREFLAG(hspi);
;;;3093   
;;;3094     /* Restore hspi->State to Ready */
;;;3095     hspi->State  = HAL_SPI_STATE_READY;
;;;3096   
;;;3097     /* Call user Abort complete callback */
;;;3098     HAL_SPI_AbortCpltCallback(hspi);
;;;3099   }
00006c  bdf8              POP      {r3-r7,pc}
                  |L47.110|
00006e  2100              MOVS     r1,#0                 ;3080
000070  2046              MOVS     r0,#0x46              ;3080
000072  5301              STRH     r1,[r0,r4]            ;3080
000074  2000              MOVS     r0,#0                 ;3081
000076  87e0              STRH     r0,[r4,#0x3e]         ;3081
000078  6e20              LDR      r0,[r4,#0x60]         ;3084
00007a  2840              CMP      r0,#0x40              ;3084
00007c  d001              BEQ      |L47.130|
00007e  2000              MOVS     r0,#0                 ;3087
000080  6620              STR      r0,[r4,#0x60]         ;3087
                  |L47.130|
000082  bf00              NOP                            ;3091
000084  2000              MOVS     r0,#0                 ;3091
000086  9000              STR      r0,[sp,#0]            ;3091
000088  6820              LDR      r0,[r4,#0]            ;3091
00008a  68c0              LDR      r0,[r0,#0xc]          ;3091
00008c  9000              STR      r0,[sp,#0]            ;3091
00008e  6820              LDR      r0,[r4,#0]            ;3091
000090  6880              LDR      r0,[r0,#8]            ;3091
000092  9000              STR      r0,[sp,#0]            ;3091
000094  bf00              NOP                            ;3091
000096  bf00              NOP                            ;3091
000098  bf00              NOP                            ;3092
00009a  2000              MOVS     r0,#0                 ;3092
00009c  9000              STR      r0,[sp,#0]            ;3092
00009e  6820              LDR      r0,[r4,#0]            ;3092
0000a0  6880              LDR      r0,[r0,#8]            ;3092
0000a2  9000              STR      r0,[sp,#0]            ;3092
0000a4  bf00              NOP                            ;3092
0000a6  bf00              NOP                            ;3092
0000a8  2101              MOVS     r1,#1                 ;3095
0000aa  205d              MOVS     r0,#0x5d              ;3095
0000ac  5501              STRB     r1,[r0,r4]            ;3095
0000ae  4620              MOV      r0,r4                 ;3098
0000b0  f7fffffe          BL       HAL_SPI_AbortCpltCallback
0000b4  bf00              NOP      
0000b6  e7d9              B        |L47.108|
;;;3100   
                          ENDP


                          AREA ||i.SPI_DMATransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitCplt PROC
;;;2686     */
;;;2687   static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2688   {
000002  4605              MOV      r5,r0
;;;2689     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a6c              LDR      r4,[r5,#0x24]
;;;2690     uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;2691   
;;;2692     /* Init tickstart for timeout managment*/
;;;2693     tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4606              MOV      r6,r0
;;;2694   
;;;2695     /* DMA Normal Mode */
;;;2696     if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
00000e  6828              LDR      r0,[r5,#0]
000010  6800              LDR      r0,[r0,#0]
000012  2120              MOVS     r1,#0x20
000014  4008              ANDS     r0,r0,r1
000016  2820              CMP      r0,#0x20
000018  d02e              BEQ      |L48.120|
;;;2697     {
;;;2698       /* Disable ERR interrupt */
;;;2699       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
00001a  6820              LDR      r0,[r4,#0]
00001c  6840              LDR      r0,[r0,#4]
00001e  4388              BICS     r0,r0,r1
000020  6821              LDR      r1,[r4,#0]
000022  6048              STR      r0,[r1,#4]
;;;2700   
;;;2701       /* Disable Tx DMA Request */
;;;2702       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
000024  6820              LDR      r0,[r4,#0]
000026  6840              LDR      r0,[r0,#4]
000028  2102              MOVS     r1,#2
00002a  4388              BICS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6048              STR      r0,[r1,#4]
;;;2703   
;;;2704       /* Check the end of the transaction */
;;;2705       if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
000030  4632              MOV      r2,r6
000032  2164              MOVS     r1,#0x64
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_EndRxTxTransaction
00003a  2800              CMP      r0,#0
00003c  d003              BEQ      |L48.70|
;;;2706       {
;;;2707         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00003e  6e20              LDR      r0,[r4,#0x60]
000040  2120              MOVS     r1,#0x20
000042  4308              ORRS     r0,r0,r1
000044  6620              STR      r0,[r4,#0x60]
                  |L48.70|
;;;2708       }
;;;2709   
;;;2710       /* Clear overrun flag in 2 Lines communication mode because received data is not read */
;;;2711       if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
000046  68a0              LDR      r0,[r4,#8]
000048  2800              CMP      r0,#0
00004a  d109              BNE      |L48.96|
;;;2712       {
;;;2713         __HAL_SPI_CLEAR_OVRFLAG(hspi);
00004c  bf00              NOP      
00004e  9000              STR      r0,[sp,#0]
000050  6820              LDR      r0,[r4,#0]
000052  68c0              LDR      r0,[r0,#0xc]
000054  9000              STR      r0,[sp,#0]
000056  6820              LDR      r0,[r4,#0]
000058  6880              LDR      r0,[r0,#8]
00005a  9000              STR      r0,[sp,#0]
00005c  bf00              NOP      
00005e  bf00              NOP      
                  |L48.96|
;;;2714       }
;;;2715   
;;;2716       hspi->TxXferCount = 0U;
000060  2000              MOVS     r0,#0
000062  87e0              STRH     r0,[r4,#0x3e]
;;;2717       hspi->State = HAL_SPI_STATE_READY;
000064  2101              MOVS     r1,#1
000066  205d              MOVS     r0,#0x5d
000068  5501              STRB     r1,[r0,r4]
;;;2718   
;;;2719       if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
00006a  6e20              LDR      r0,[r4,#0x60]
00006c  2800              CMP      r0,#0
00006e  d003              BEQ      |L48.120|
;;;2720       {
;;;2721         HAL_SPI_ErrorCallback(hspi);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L48.118|
;;;2722         return;
;;;2723       }
;;;2724     }
;;;2725     HAL_SPI_TxCpltCallback(hspi);
;;;2726   }
000076  bdf8              POP      {r3-r7,pc}
                  |L48.120|
000078  4620              MOV      r0,r4                 ;2725
00007a  f7fffffe          BL       HAL_SPI_TxCpltCallback
00007e  bf00              NOP      
000080  e7f9              B        |L48.118|
;;;2727   
                          ENDP


                          AREA ||i.SPI_DMATransmitReceiveCplt||, CODE, READONLY, ALIGN=2

                  SPI_DMATransmitReceiveCplt PROC
;;;2824     */
;;;2825   static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b57c              PUSH     {r2-r6,lr}
;;;2826   {
000002  4605              MOV      r5,r0
;;;2827     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a6c              LDR      r4,[r5,#0x24]
;;;2828     uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;2829   #if (USE_SPI_CRC != 0U)
;;;2830     __IO int16_t tmpreg = 0U;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;2831   #endif /* USE_SPI_CRC */
;;;2832     /* Init tickstart for timeout management*/
;;;2833     tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4606              MOV      r6,r0
;;;2834   
;;;2835     /* DMA Normal Mode */
;;;2836     if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
000012  6828              LDR      r0,[r5,#0]
000014  6800              LDR      r0,[r0,#0]
000016  2120              MOVS     r1,#0x20
000018  4008              ANDS     r0,r0,r1
00001a  2820              CMP      r0,#0x20
00001c  d069              BEQ      |L49.242|
;;;2837     {
;;;2838       /* Disable ERR interrupt */
;;;2839       __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
00001e  6820              LDR      r0,[r4,#0]
000020  6840              LDR      r0,[r0,#4]
000022  4388              BICS     r0,r0,r1
000024  6821              LDR      r1,[r4,#0]
000026  6048              STR      r0,[r1,#4]
;;;2840   
;;;2841   #if (USE_SPI_CRC != 0U)
;;;2842       /* CRC handling */
;;;2843       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000028  2101              MOVS     r1,#1
00002a  0349              LSLS     r1,r1,#13
00002c  6aa0              LDR      r0,[r4,#0x28]
00002e  4288              CMP      r0,r1
000030  d132              BNE      |L49.152|
;;;2844       {
;;;2845         if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
000032  2107              MOVS     r1,#7
000034  0209              LSLS     r1,r1,#8
000036  68e0              LDR      r0,[r4,#0xc]
000038  4288              CMP      r0,r1
00003a  d117              BNE      |L49.108|
00003c  6b20              LDR      r0,[r4,#0x30]
00003e  2801              CMP      r0,#1
000040  d114              BNE      |L49.108|
;;;2846         {
;;;2847           if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
000042  2364              MOVS     r3,#0x64
000044  0242              LSLS     r2,r0,#9
000046  2103              MOVS     r1,#3
000048  0249              LSLS     r1,r1,#9
00004a  4620              MOV      r0,r4
00004c  9600              STR      r6,[sp,#0]
00004e  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000052  2800              CMP      r0,#0
000054  d003              BEQ      |L49.94|
;;;2848                                             tickstart) != HAL_OK)
;;;2849           {
;;;2850             /* Error on the CRC reception */
;;;2851             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000056  6e20              LDR      r0,[r4,#0x60]
000058  2102              MOVS     r1,#2
00005a  4308              ORRS     r0,r0,r1
00005c  6620              STR      r0,[r4,#0x60]
                  |L49.94|
;;;2852           }
;;;2853           /* Read CRC to Flush DR and RXNE flag */
;;;2854           tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
00005e  6820              LDR      r0,[r4,#0]
000060  7b01              LDRB     r1,[r0,#0xc]
000062  9101              STR      r1,[sp,#4]
;;;2855           /* To avoid GCC warning */
;;;2856           UNUSED(tmpreg);
000064  4668              MOV      r0,sp
000066  2104              MOVS     r1,#4
000068  5e41              LDRSH    r1,[r0,r1]
00006a  e015              B        |L49.152|
                  |L49.108|
;;;2857         }
;;;2858         else
;;;2859         {
;;;2860           if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
00006c  2364              MOVS     r3,#0x64
00006e  2201              MOVS     r2,#1
000070  0292              LSLS     r2,r2,#10
000072  2103              MOVS     r1,#3
000074  0249              LSLS     r1,r1,#9
000076  4620              MOV      r0,r4
000078  9600              STR      r6,[sp,#0]
00007a  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
00007e  2800              CMP      r0,#0
000080  d003              BEQ      |L49.138|
;;;2861           {
;;;2862             /* Error on the CRC reception */
;;;2863             SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
000082  6e20              LDR      r0,[r4,#0x60]
000084  2102              MOVS     r1,#2
000086  4308              ORRS     r0,r0,r1
000088  6620              STR      r0,[r4,#0x60]
                  |L49.138|
;;;2864           }
;;;2865           /* Read CRC to Flush DR and RXNE flag */
;;;2866           tmpreg = hspi->Instance->DR;
00008a  6820              LDR      r0,[r4,#0]
00008c  68c0              LDR      r0,[r0,#0xc]
00008e  b201              SXTH     r1,r0
000090  9101              STR      r1,[sp,#4]
;;;2867           /* To avoid GCC warning */
;;;2868           UNUSED(tmpreg);
000092  4668              MOV      r0,sp
000094  2104              MOVS     r1,#4
000096  5e41              LDRSH    r1,[r0,r1]
                  |L49.152|
;;;2869         }
;;;2870       }
;;;2871   #endif /* USE_SPI_CRC */
;;;2872   
;;;2873       /* Check the end of the transaction */
;;;2874       if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
000098  4632              MOV      r2,r6
00009a  2164              MOVS     r1,#0x64
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       SPI_EndRxTxTransaction
0000a2  2800              CMP      r0,#0
0000a4  d003              BEQ      |L49.174|
;;;2875       {
;;;2876         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
0000a6  6e20              LDR      r0,[r4,#0x60]
0000a8  2120              MOVS     r1,#0x20
0000aa  4308              ORRS     r0,r0,r1
0000ac  6620              STR      r0,[r4,#0x60]
                  |L49.174|
;;;2877       }
;;;2878   
;;;2879       /* Disable Rx/Tx DMA Request */
;;;2880       CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
0000ae  6820              LDR      r0,[r4,#0]
0000b0  6840              LDR      r0,[r0,#4]
0000b2  0880              LSRS     r0,r0,#2
0000b4  0080              LSLS     r0,r0,#2
0000b6  6821              LDR      r1,[r4,#0]
0000b8  6048              STR      r0,[r1,#4]
;;;2881   
;;;2882       hspi->TxXferCount = 0U;
0000ba  2000              MOVS     r0,#0
0000bc  87e0              STRH     r0,[r4,#0x3e]
;;;2883       hspi->RxXferCount = 0U;
0000be  2100              MOVS     r1,#0
0000c0  2046              MOVS     r0,#0x46
0000c2  5301              STRH     r1,[r0,r4]
;;;2884       hspi->State = HAL_SPI_STATE_READY;
0000c4  2101              MOVS     r1,#1
0000c6  205d              MOVS     r0,#0x5d
0000c8  5501              STRB     r1,[r0,r4]
;;;2885   
;;;2886   #if (USE_SPI_CRC != 0U)
;;;2887       /* Check if CRC error occurred */
;;;2888       if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
0000ca  6820              LDR      r0,[r4,#0]
0000cc  6880              LDR      r0,[r0,#8]
0000ce  2110              MOVS     r1,#0x10
0000d0  4008              ANDS     r0,r0,r1
0000d2  2810              CMP      r0,#0x10
0000d4  d106              BNE      |L49.228|
;;;2889       {
;;;2890         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
0000d6  6e20              LDR      r0,[r4,#0x60]
0000d8  2102              MOVS     r1,#2
0000da  4308              ORRS     r0,r0,r1
0000dc  6620              STR      r0,[r4,#0x60]
;;;2891         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
0000de  4807              LDR      r0,|L49.252|
0000e0  6821              LDR      r1,[r4,#0]
0000e2  6088              STR      r0,[r1,#8]
                  |L49.228|
;;;2892       }
;;;2893   #endif /* USE_SPI_CRC */
;;;2894   
;;;2895       if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
0000e4  6e20              LDR      r0,[r4,#0x60]
0000e6  2800              CMP      r0,#0
0000e8  d003              BEQ      |L49.242|
;;;2896       {
;;;2897         HAL_SPI_ErrorCallback(hspi);
0000ea  4620              MOV      r0,r4
0000ec  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L49.240|
;;;2898         return;
;;;2899       }
;;;2900     }
;;;2901     HAL_SPI_TxRxCpltCallback(hspi);
;;;2902   }
0000f0  bd7c              POP      {r2-r6,pc}
                  |L49.242|
0000f2  4620              MOV      r0,r4                 ;2901
0000f4  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
0000f8  bf00              NOP      
0000fa  e7f9              B        |L49.240|
;;;2903   
                          ENDP

                  |L49.252|
                          DCD      0x0000ffef

                          AREA ||i.SPI_DMATxAbortCallback||, CODE, READONLY, ALIGN=1

                  SPI_DMATxAbortCallback PROC
;;;2983     */
;;;2984   static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2985   {
000002  4605              MOV      r5,r0
;;;2986     SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6a6c              LDR      r4,[r5,#0x24]
;;;2987   
;;;2988     hspi->hdmatx->XferAbortCallback = NULL;
000006  2000              MOVS     r0,#0
000008  6d61              LDR      r1,[r4,#0x54]
00000a  6348              STR      r0,[r1,#0x34]
;;;2989   
;;;2990     /* Disable Tx DMA Request */
;;;2991     CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
00000c  6820              LDR      r0,[r4,#0]
00000e  6840              LDR      r0,[r0,#4]
000010  2102              MOVS     r1,#2
000012  4388              BICS     r0,r0,r1
000014  6821              LDR      r1,[r4,#0]
000016  6048              STR      r0,[r1,#4]
;;;2992   
;;;2993     if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
000018  f7fffffe          BL       HAL_GetTick
00001c  4606              MOV      r6,r0
00001e  4632              MOV      r2,r6
000020  2164              MOVS     r1,#0x64
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       SPI_EndRxTxTransaction
000028  2800              CMP      r0,#0
00002a  d001              BEQ      |L50.48|
;;;2994     {
;;;2995       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
00002c  2040              MOVS     r0,#0x40
00002e  6620              STR      r0,[r4,#0x60]
                  |L50.48|
;;;2996     }
;;;2997   
;;;2998     /* Disable SPI Peripheral */
;;;2999     __HAL_SPI_DISABLE(hspi);
000030  6820              LDR      r0,[r4,#0]
000032  6800              LDR      r0,[r0,#0]
000034  2140              MOVS     r1,#0x40
000036  4388              BICS     r0,r0,r1
000038  6821              LDR      r1,[r4,#0]
00003a  6008              STR      r0,[r1,#0]
;;;3000   
;;;3001     /* Empty the FRLVL fifo */
;;;3002     if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
00003c  f7fffffe          BL       HAL_GetTick
000040  4606              MOV      r6,r0
000042  2364              MOVS     r3,#0x64
000044  2200              MOVS     r2,#0
000046  2103              MOVS     r1,#3
000048  0249              LSLS     r1,r1,#9
00004a  9000              STR      r0,[sp,#0]
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000052  2800              CMP      r0,#0
000054  d001              BEQ      |L50.90|
;;;3003     {
;;;3004       hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
000056  2040              MOVS     r0,#0x40
000058  6620              STR      r0,[r4,#0x60]
                  |L50.90|
;;;3005     }
;;;3006   
;;;3007     /* Check if an Abort process is still ongoing */
;;;3008     if (hspi->hdmarx != NULL)
00005a  6da0              LDR      r0,[r4,#0x58]
00005c  2800              CMP      r0,#0
00005e  d004              BEQ      |L50.106|
;;;3009     {
;;;3010       if (hspi->hdmarx->XferAbortCallback != NULL)
000060  6da0              LDR      r0,[r4,#0x58]
000062  6b40              LDR      r0,[r0,#0x34]
000064  2800              CMP      r0,#0
000066  d000              BEQ      |L50.106|
                  |L50.104|
;;;3011       {
;;;3012         return;
;;;3013       }
;;;3014     }
;;;3015   
;;;3016     /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
;;;3017     hspi->RxXferCount = 0U;
;;;3018     hspi->TxXferCount = 0U;
;;;3019   
;;;3020     /* Check no error during Abort procedure */
;;;3021     if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
;;;3022     {
;;;3023       /* Reset errorCode */
;;;3024       hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;3025     }
;;;3026   
;;;3027     /* Clear the Error flags in the SR register */
;;;3028     __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;3029     __HAL_SPI_CLEAR_FREFLAG(hspi);
;;;3030   
;;;3031     /* Restore hspi->State to Ready */
;;;3032     hspi->State  = HAL_SPI_STATE_READY;
;;;3033   
;;;3034     /* Call user Abort complete callback */
;;;3035     HAL_SPI_AbortCpltCallback(hspi);
;;;3036   }
000068  bdf8              POP      {r3-r7,pc}
                  |L50.106|
00006a  2100              MOVS     r1,#0                 ;3017
00006c  2046              MOVS     r0,#0x46              ;3017
00006e  5301              STRH     r1,[r0,r4]            ;3017
000070  2000              MOVS     r0,#0                 ;3018
000072  87e0              STRH     r0,[r4,#0x3e]         ;3018
000074  6e20              LDR      r0,[r4,#0x60]         ;3021
000076  2840              CMP      r0,#0x40              ;3021
000078  d001              BEQ      |L50.126|
00007a  2000              MOVS     r0,#0                 ;3024
00007c  6620              STR      r0,[r4,#0x60]         ;3024
                  |L50.126|
00007e  bf00              NOP                            ;3028
000080  2000              MOVS     r0,#0                 ;3028
000082  9000              STR      r0,[sp,#0]            ;3028
000084  6820              LDR      r0,[r4,#0]            ;3028
000086  68c0              LDR      r0,[r0,#0xc]          ;3028
000088  9000              STR      r0,[sp,#0]            ;3028
00008a  6820              LDR      r0,[r4,#0]            ;3028
00008c  6880              LDR      r0,[r0,#8]            ;3028
00008e  9000              STR      r0,[sp,#0]            ;3028
000090  bf00              NOP                            ;3028
000092  bf00              NOP                            ;3028
000094  bf00              NOP                            ;3029
000096  2000              MOVS     r0,#0                 ;3029
000098  9000              STR      r0,[sp,#0]            ;3029
00009a  6820              LDR      r0,[r4,#0]            ;3029
00009c  6880              LDR      r0,[r0,#8]            ;3029
00009e  9000              STR      r0,[sp,#0]            ;3029
0000a0  bf00              NOP                            ;3029
0000a2  bf00              NOP                            ;3029
0000a4  2101              MOVS     r1,#1                 ;3032
0000a6  205d              MOVS     r0,#0x5d              ;3032
0000a8  5501              STRB     r1,[r0,r4]            ;3032
0000aa  4620              MOV      r0,r4                 ;3035
0000ac  f7fffffe          BL       HAL_SPI_AbortCpltCallback
0000b0  bf00              NOP      
0000b2  e7d9              B        |L50.104|
;;;3037   
                          ENDP


                          AREA ||i.SPI_EndRxTransaction||, CODE, READONLY, ALIGN=1

                  SPI_EndRxTransaction PROC
;;;3609     */
;;;3610   static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3611   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;3612     if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
000008  21ff              MOVS     r1,#0xff
00000a  3105              ADDS     r1,#5
00000c  6860              LDR      r0,[r4,#4]
00000e  4288              CMP      r0,r1
000010  d10e              BNE      |L51.48|
000012  2101              MOVS     r1,#1
000014  03c9              LSLS     r1,r1,#15
000016  68a0              LDR      r0,[r4,#8]
000018  4288              CMP      r0,r1
00001a  d003              BEQ      |L51.36|
;;;3613                                                  || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
00001c  1149              ASRS     r1,r1,#5
00001e  68a0              LDR      r0,[r4,#8]
000020  4288              CMP      r0,r1
000022  d105              BNE      |L51.48|
                  |L51.36|
;;;3614     {
;;;3615       /* Disable SPI peripheral */
;;;3616       __HAL_SPI_DISABLE(hspi);
000024  6820              LDR      r0,[r4,#0]
000026  6800              LDR      r0,[r0,#0]
000028  2140              MOVS     r1,#0x40
00002a  4388              BICS     r0,r0,r1
00002c  6821              LDR      r1,[r4,#0]
00002e  6008              STR      r0,[r1,#0]
                  |L51.48|
;;;3617     }
;;;3618   
;;;3619     /* Control the BSY flag */
;;;3620     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
000030  4633              MOV      r3,r6
000032  2200              MOVS     r2,#0
000034  2180              MOVS     r1,#0x80
000036  4620              MOV      r0,r4
000038  9500              STR      r5,[sp,#0]
00003a  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
00003e  2800              CMP      r0,#0
000040  d005              BEQ      |L51.78|
;;;3621     {
;;;3622       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
000042  6e20              LDR      r0,[r4,#0x60]
000044  2120              MOVS     r1,#0x20
000046  4308              ORRS     r0,r0,r1
000048  6620              STR      r0,[r4,#0x60]
;;;3623       return HAL_TIMEOUT;
00004a  2003              MOVS     r0,#3
                  |L51.76|
;;;3624     }
;;;3625   
;;;3626     if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;3627                                                  || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
;;;3628     {
;;;3629       /* Empty the FRLVL fifo */
;;;3630       if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
;;;3631       {
;;;3632         SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;3633         return HAL_TIMEOUT;
;;;3634       }
;;;3635     }
;;;3636     return HAL_OK;
;;;3637   }
00004c  bdf8              POP      {r3-r7,pc}
                  |L51.78|
00004e  21ff              MOVS     r1,#0xff              ;3626
000050  3105              ADDS     r1,#5                 ;3626
000052  6860              LDR      r0,[r4,#4]            ;3626
000054  4288              CMP      r0,r1                 ;3626
000056  d118              BNE      |L51.138|
000058  2101              MOVS     r1,#1                 ;3626
00005a  03c9              LSLS     r1,r1,#15             ;3626
00005c  68a0              LDR      r0,[r4,#8]            ;3626
00005e  4288              CMP      r0,r1                 ;3626
000060  d003              BEQ      |L51.106|
000062  1149              ASRS     r1,r1,#5              ;3627
000064  68a0              LDR      r0,[r4,#8]            ;3627
000066  4288              CMP      r0,r1                 ;3627
000068  d10f              BNE      |L51.138|
                  |L51.106|
00006a  4633              MOV      r3,r6                 ;3630
00006c  2200              MOVS     r2,#0                 ;3630
00006e  2103              MOVS     r1,#3                 ;3630
000070  0249              LSLS     r1,r1,#9              ;3630
000072  4620              MOV      r0,r4                 ;3630
000074  9500              STR      r5,[sp,#0]            ;3630
000076  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
00007a  2800              CMP      r0,#0                 ;3630
00007c  d005              BEQ      |L51.138|
00007e  6e20              LDR      r0,[r4,#0x60]         ;3632
000080  2120              MOVS     r1,#0x20              ;3632
000082  4308              ORRS     r0,r0,r1              ;3632
000084  6620              STR      r0,[r4,#0x60]         ;3632
000086  2003              MOVS     r0,#3                 ;3633
000088  e7e0              B        |L51.76|
                  |L51.138|
00008a  2000              MOVS     r0,#0                 ;3636
00008c  e7de              B        |L51.76|
;;;3638   
                          ENDP


                          AREA ||i.SPI_EndRxTxTransaction||, CODE, READONLY, ALIGN=1

                  SPI_EndRxTxTransaction PROC
;;;3645     */
;;;3646   static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3647   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;3648     /* Control if the TX fifo is empty */
;;;3649     if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
000008  4633              MOV      r3,r6
00000a  2200              MOVS     r2,#0
00000c  2103              MOVS     r1,#3
00000e  02c9              LSLS     r1,r1,#11
000010  4620              MOV      r0,r4
000012  9500              STR      r5,[sp,#0]
000014  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000018  2800              CMP      r0,#0
00001a  d005              BEQ      |L52.40|
;;;3650     {
;;;3651       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
00001c  6e20              LDR      r0,[r4,#0x60]
00001e  2120              MOVS     r1,#0x20
000020  4308              ORRS     r0,r0,r1
000022  6620              STR      r0,[r4,#0x60]
;;;3652       return HAL_TIMEOUT;
000024  2003              MOVS     r0,#3
                  |L52.38|
;;;3653     }
;;;3654   
;;;3655     /* Control the BSY flag */
;;;3656     if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
;;;3657     {
;;;3658       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;3659       return HAL_TIMEOUT;
;;;3660     }
;;;3661   
;;;3662     /* Control if the RX fifo is empty */
;;;3663     if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
;;;3664     {
;;;3665       SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
;;;3666       return HAL_TIMEOUT;
;;;3667     }
;;;3668     return HAL_OK;
;;;3669   }
000026  bdf8              POP      {r3-r7,pc}
                  |L52.40|
000028  4633              MOV      r3,r6                 ;3656
00002a  2200              MOVS     r2,#0                 ;3656
00002c  2180              MOVS     r1,#0x80              ;3656
00002e  4620              MOV      r0,r4                 ;3656
000030  9500              STR      r5,[sp,#0]            ;3656
000032  f7fffffe          BL       SPI_WaitFlagStateUntilTimeout
000036  2800              CMP      r0,#0                 ;3656
000038  d005              BEQ      |L52.70|
00003a  6e20              LDR      r0,[r4,#0x60]         ;3658
00003c  2120              MOVS     r1,#0x20              ;3658
00003e  4308              ORRS     r0,r0,r1              ;3658
000040  6620              STR      r0,[r4,#0x60]         ;3658
000042  2003              MOVS     r0,#3                 ;3659
000044  e7ef              B        |L52.38|
                  |L52.70|
000046  4633              MOV      r3,r6                 ;3663
000048  2200              MOVS     r2,#0                 ;3663
00004a  2103              MOVS     r1,#3                 ;3663
00004c  0249              LSLS     r1,r1,#9              ;3663
00004e  4620              MOV      r0,r4                 ;3663
000050  9500              STR      r5,[sp,#0]            ;3663
000052  f7fffffe          BL       SPI_WaitFifoStateUntilTimeout
000056  2800              CMP      r0,#0                 ;3663
000058  d005              BEQ      |L52.102|
00005a  6e20              LDR      r0,[r4,#0x60]         ;3665
00005c  2120              MOVS     r1,#0x20              ;3665
00005e  4308              ORRS     r0,r0,r1              ;3665
000060  6620              STR      r0,[r4,#0x60]         ;3665
000062  2003              MOVS     r0,#3                 ;3666
000064  e7df              B        |L52.38|
                  |L52.102|
000066  2000              MOVS     r0,#0                 ;3668
000068  e7dd              B        |L52.38|
;;;3670   
                          ENDP


                          AREA ||i.SPI_RxISR_16BIT||, CODE, READONLY, ALIGN=2

                  SPI_RxISR_16BIT PROC
;;;3411     */
;;;3412   static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;3413   {
000002  4604              MOV      r4,r0
;;;3414     *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  6c21              LDR      r1,[r4,#0x40]
00000a  8008              STRH     r0,[r1,#0]
;;;3415     hspi->pRxBuffPtr += sizeof(uint16_t);
00000c  6c20              LDR      r0,[r4,#0x40]
00000e  1c80              ADDS     r0,r0,#2
000010  6420              STR      r0,[r4,#0x40]
;;;3416     hspi->RxXferCount--;
000012  2046              MOVS     r0,#0x46
000014  5b00              LDRH     r0,[r0,r4]
000016  1e40              SUBS     r0,r0,#1
000018  b281              UXTH     r1,r0
00001a  2046              MOVS     r0,#0x46
00001c  5301              STRH     r1,[r0,r4]
;;;3417   
;;;3418   #if (USE_SPI_CRC != 0U)
;;;3419     /* Enable CRC Transmission */
;;;3420     if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
00001e  5b00              LDRH     r0,[r0,r4]
000020  2801              CMP      r0,#1
000022  d10a              BNE      |L53.58|
000024  2101              MOVS     r1,#1
000026  0349              LSLS     r1,r1,#13
000028  6aa0              LDR      r0,[r4,#0x28]
00002a  4288              CMP      r0,r1
00002c  d105              BNE      |L53.58|
;;;3421     {
;;;3422       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
00002e  6820              LDR      r0,[r4,#0]
000030  6800              LDR      r0,[r0,#0]
000032  1049              ASRS     r1,r1,#1
000034  4308              ORRS     r0,r0,r1
000036  6821              LDR      r1,[r4,#0]
000038  6008              STR      r0,[r1,#0]
                  |L53.58|
;;;3423     }
;;;3424   #endif /* USE_SPI_CRC */
;;;3425   
;;;3426     if (hspi->RxXferCount == 0U)
00003a  2046              MOVS     r0,#0x46
00003c  5b00              LDRH     r0,[r0,r4]
00003e  2800              CMP      r0,#0
000040  d10a              BNE      |L53.88|
;;;3427     {
;;;3428   #if (USE_SPI_CRC != 0U)
;;;3429       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000042  2101              MOVS     r1,#1
000044  0349              LSLS     r1,r1,#13
000046  6aa0              LDR      r0,[r4,#0x28]
000048  4288              CMP      r0,r1
00004a  d102              BNE      |L53.82|
;;;3430       {
;;;3431         hspi->RxISR = SPI_RxISR_16BITCRC;
00004c  4803              LDR      r0,|L53.92|
00004e  64e0              STR      r0,[r4,#0x4c]
                  |L53.80|
;;;3432         return;
;;;3433       }
;;;3434   #endif /* USE_SPI_CRC */
;;;3435       SPI_CloseRx_ISR(hspi);
;;;3436     }
;;;3437   }
000050  bd10              POP      {r4,pc}
                  |L53.82|
000052  4620              MOV      r0,r4                 ;3435
000054  f7fffffe          BL       SPI_CloseRx_ISR
                  |L53.88|
000058  bf00              NOP      
00005a  e7f9              B        |L53.80|
;;;3438   
                          ENDP

                  |L53.92|
                          DCD      SPI_RxISR_16BITCRC

                          AREA ||i.SPI_RxISR_16BITCRC||, CODE, READONLY, ALIGN=1

                  SPI_RxISR_16BITCRC PROC
;;;3388     */
;;;3389   static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;3390   {
000002  4604              MOV      r4,r0
;;;3391     __IO uint16_t tmpreg = 0U;
000004  2100              MOVS     r1,#0
000006  9100              STR      r1,[sp,#0]
;;;3392   
;;;3393     /* Read data register to flush CRC */
;;;3394     tmpreg = hspi->Instance->DR;
000008  6820              LDR      r0,[r4,#0]
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  b281              UXTH     r1,r0
00000e  9100              STR      r1,[sp,#0]
;;;3395   
;;;3396     /* To avoid GCC warning */
;;;3397     UNUSED(tmpreg);
000010  4668              MOV      r0,sp
000012  8800              LDRH     r0,[r0,#0]
;;;3398   
;;;3399     /* Disable RXNE and ERR interrupt */
;;;3400     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
000014  6820              LDR      r0,[r4,#0]
000016  6840              LDR      r0,[r0,#4]
000018  2160              MOVS     r1,#0x60
00001a  4388              BICS     r0,r0,r1
00001c  6821              LDR      r1,[r4,#0]
00001e  6048              STR      r0,[r1,#4]
;;;3401   
;;;3402     SPI_CloseRx_ISR(hspi);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SPI_CloseRx_ISR
;;;3403   }
000026  bd38              POP      {r3-r5,pc}
;;;3404   #endif /* USE_SPI_CRC */
                          ENDP


                          AREA ||i.SPI_RxISR_8BIT||, CODE, READONLY, ALIGN=2

                  SPI_RxISR_8BIT PROC
;;;3355     */
;;;3356   static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;3357   {
000002  4604              MOV      r4,r0
;;;3358     *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
000004  6820              LDR      r0,[r4,#0]
000006  7b01              LDRB     r1,[r0,#0xc]
000008  6c22              LDR      r2,[r4,#0x40]
00000a  1c50              ADDS     r0,r2,#1
00000c  6420              STR      r0,[r4,#0x40]
00000e  7011              STRB     r1,[r2,#0]
;;;3359     hspi->RxXferCount--;
000010  2046              MOVS     r0,#0x46
000012  5b00              LDRH     r0,[r0,r4]
000014  1e40              SUBS     r0,r0,#1
000016  b281              UXTH     r1,r0
000018  2046              MOVS     r0,#0x46
00001a  5301              STRH     r1,[r0,r4]
;;;3360   
;;;3361   #if (USE_SPI_CRC != 0U)
;;;3362     /* Enable CRC Transmission */
;;;3363     if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
00001c  5b00              LDRH     r0,[r0,r4]
00001e  2801              CMP      r0,#1
000020  d10a              BNE      |L55.56|
000022  2101              MOVS     r1,#1
000024  0349              LSLS     r1,r1,#13
000026  6aa0              LDR      r0,[r4,#0x28]
000028  4288              CMP      r0,r1
00002a  d105              BNE      |L55.56|
;;;3364     {
;;;3365       SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  1049              ASRS     r1,r1,#1
000032  4308              ORRS     r0,r0,r1
000034  6821              LDR      r1,[r4,#0]
000036  6008              STR      r0,[r1,#0]
                  |L55.56|
;;;3366     }
;;;3367   #endif /* USE_SPI_CRC */
;;;3368   
;;;3369     if (hspi->RxXferCount == 0U)
000038  2046              MOVS     r0,#0x46
00003a  5b00              LDRH     r0,[r0,r4]
00003c  2800              CMP      r0,#0
00003e  d10a              BNE      |L55.86|
;;;3370     {
;;;3371   #if (USE_SPI_CRC != 0U)
;;;3372       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000040  2101              MOVS     r1,#1
000042  0349              LSLS     r1,r1,#13
000044  6aa0              LDR      r0,[r4,#0x28]
000046  4288              CMP      r0,r1
000048  d102              BNE      |L55.80|
;;;3373       {
;;;3374         hspi->RxISR =  SPI_RxISR_8BITCRC;
00004a  4804              LDR      r0,|L55.92|
00004c  64e0              STR      r0,[r4,#0x4c]
                  |L55.78|
;;;3375         return;
;;;3376       }
;;;3377   #endif /* USE_SPI_CRC */
;;;3378       SPI_CloseRx_ISR(hspi);
;;;3379     }
;;;3380   }
00004e  bd10              POP      {r4,pc}
                  |L55.80|
000050  4620              MOV      r0,r4                 ;3378
000052  f7fffffe          BL       SPI_CloseRx_ISR
                  |L55.86|
000056  bf00              NOP      
000058  e7f9              B        |L55.78|
;;;3381   
                          ENDP

00005a  0000              DCW      0x0000
                  |L55.92|
                          DCD      SPI_RxISR_8BITCRC

                          AREA ||i.SPI_RxISR_8BITCRC||, CODE, READONLY, ALIGN=1

                  SPI_RxISR_8BITCRC PROC
;;;3330     */
;;;3331   static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;3332   {
000002  4604              MOV      r4,r0
;;;3333     __IO uint8_t tmpreg = 0U;
000004  2100              MOVS     r1,#0
000006  9100              STR      r1,[sp,#0]
;;;3334   
;;;3335     /* Read data register to flush CRC */
;;;3336     tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
000008  6820              LDR      r0,[r4,#0]
00000a  7b01              LDRB     r1,[r0,#0xc]
00000c  9100              STR      r1,[sp,#0]
;;;3337   
;;;3338     /* To avoid GCC warning */
;;;3339     UNUSED(tmpreg);
00000e  4668              MOV      r0,sp
000010  7800              LDRB     r0,[r0,#0]
;;;3340   
;;;3341     hspi->CRCSize--;
000012  6ca0              LDR      r0,[r4,#0x48]
000014  1e40              SUBS     r0,r0,#1
000016  64a0              STR      r0,[r4,#0x48]
;;;3342   
;;;3343     if (hspi->CRCSize == 0U)
000018  6ca0              LDR      r0,[r4,#0x48]
00001a  2800              CMP      r0,#0
00001c  d102              BNE      |L56.36|
;;;3344     {
;;;3345       SPI_CloseRx_ISR(hspi);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SPI_CloseRx_ISR
                  |L56.36|
;;;3346     }
;;;3347   }
000024  bd38              POP      {r3-r5,pc}
;;;3348   #endif /* USE_SPI_CRC */
                          ENDP


                          AREA ||i.SPI_TxISR_16BIT||, CODE, READONLY, ALIGN=1

                  SPI_TxISR_16BIT PROC
;;;3468     */
;;;3469   static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;3470   {
000002  4604              MOV      r4,r0
;;;3471     /* Transmit data in 16 Bit mode */
;;;3472     hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
000004  6ba0              LDR      r0,[r4,#0x38]
000006  8800              LDRH     r0,[r0,#0]
000008  6821              LDR      r1,[r4,#0]
00000a  60c8              STR      r0,[r1,#0xc]
;;;3473     hspi->pTxBuffPtr += sizeof(uint16_t);
00000c  6ba0              LDR      r0,[r4,#0x38]
00000e  1c80              ADDS     r0,r0,#2
000010  63a0              STR      r0,[r4,#0x38]
;;;3474     hspi->TxXferCount--;
000012  8fe0              LDRH     r0,[r4,#0x3e]
000014  1e40              SUBS     r0,r0,#1
000016  87e0              STRH     r0,[r4,#0x3e]
;;;3475   
;;;3476     if (hspi->TxXferCount == 0U)
000018  8fe0              LDRH     r0,[r4,#0x3e]
00001a  2800              CMP      r0,#0
00001c  d10d              BNE      |L57.58|
;;;3477     {
;;;3478   #if (USE_SPI_CRC != 0U)
;;;3479       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00001e  2101              MOVS     r1,#1
000020  0349              LSLS     r1,r1,#13
000022  6aa0              LDR      r0,[r4,#0x28]
000024  4288              CMP      r0,r1
000026  d105              BNE      |L57.52|
;;;3480       {
;;;3481         /* Enable CRC Transmission */
;;;3482         SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000028  6820              LDR      r0,[r4,#0]
00002a  6800              LDR      r0,[r0,#0]
00002c  1049              ASRS     r1,r1,#1
00002e  4308              ORRS     r0,r0,r1
000030  6821              LDR      r1,[r4,#0]
000032  6008              STR      r0,[r1,#0]
                  |L57.52|
;;;3483       }
;;;3484   #endif /* USE_SPI_CRC */
;;;3485       SPI_CloseTx_ISR(hspi);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_CloseTx_ISR
                  |L57.58|
;;;3486     }
;;;3487   }
00003a  bd10              POP      {r4,pc}
;;;3488   
                          ENDP


                          AREA ||i.SPI_TxISR_8BIT||, CODE, READONLY, ALIGN=1

                  SPI_TxISR_8BIT PROC
;;;3444     */
;;;3445   static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;3446   {
000002  4604              MOV      r4,r0
;;;3447     *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
000004  6ba1              LDR      r1,[r4,#0x38]
000006  1c48              ADDS     r0,r1,#1
000008  63a0              STR      r0,[r4,#0x38]
00000a  7808              LDRB     r0,[r1,#0]
00000c  6821              LDR      r1,[r4,#0]
00000e  7308              STRB     r0,[r1,#0xc]
;;;3448     hspi->TxXferCount--;
000010  8fe0              LDRH     r0,[r4,#0x3e]
000012  1e40              SUBS     r0,r0,#1
000014  87e0              STRH     r0,[r4,#0x3e]
;;;3449   
;;;3450     if (hspi->TxXferCount == 0U)
000016  8fe0              LDRH     r0,[r4,#0x3e]
000018  2800              CMP      r0,#0
00001a  d10d              BNE      |L58.56|
;;;3451     {
;;;3452   #if (USE_SPI_CRC != 0U)
;;;3453       if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00001c  2101              MOVS     r1,#1
00001e  0349              LSLS     r1,r1,#13
000020  6aa0              LDR      r0,[r4,#0x28]
000022  4288              CMP      r0,r1
000024  d105              BNE      |L58.50|
;;;3454       {
;;;3455         /* Enable CRC Transmission */
;;;3456         SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
000026  6820              LDR      r0,[r4,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  1049              ASRS     r1,r1,#1
00002c  4308              ORRS     r0,r0,r1
00002e  6821              LDR      r1,[r4,#0]
000030  6008              STR      r0,[r1,#0]
                  |L58.50|
;;;3457       }
;;;3458   #endif /* USE_SPI_CRC */
;;;3459       SPI_CloseTx_ISR(hspi);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       SPI_CloseTx_ISR
                  |L58.56|
;;;3460     }
;;;3461   }
000038  bd10              POP      {r4,pc}
;;;3462   
                          ENDP


                          AREA ||i.SPI_WaitFifoStateUntilTimeout||, CODE, READONLY, ALIGN=1

                  SPI_WaitFifoStateUntilTimeout PROC
;;;3550     */
;;;3551   static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3552                                                          uint32_t Timeout, uint32_t Tickstart)
;;;3553   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461d              MOV      r5,r3
;;;3554     __IO uint8_t tmpreg;
;;;3555   
;;;3556     while ((hspi->Instance->SR & Fifo) != State)
00000a  e04c              B        |L59.166|
                  |L59.12|
;;;3557     {
;;;3558       if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
00000c  2003              MOVS     r0,#3
00000e  0240              LSLS     r0,r0,#9
000010  4286              CMP      r6,r0
000012  d106              BNE      |L59.34|
000014  2f00              CMP      r7,#0
000016  d104              BNE      |L59.34|
;;;3559       {
;;;3560         tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
000018  6820              LDR      r0,[r4,#0]
00001a  7b01              LDRB     r1,[r0,#0xc]
00001c  9100              STR      r1,[sp,#0]
;;;3561         /* To avoid GCC warning */
;;;3562         UNUSED(tmpreg);
00001e  4668              MOV      r0,sp
000020  7800              LDRB     r0,[r0,#0]
                  |L59.34|
;;;3563       }
;;;3564   
;;;3565       if (Timeout != HAL_MAX_DELAY)
000022  1c68              ADDS     r0,r5,#1
000024  2800              CMP      r0,#0
000026  d03e              BEQ      |L59.166|
;;;3566       {
;;;3567         if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
000028  2d00              CMP      r5,#0
00002a  d005              BEQ      |L59.56|
00002c  f7fffffe          BL       HAL_GetTick
000030  9906              LDR      r1,[sp,#0x18]
000032  1a40              SUBS     r0,r0,r1
000034  42a8              CMP      r0,r5
000036  d336              BCC      |L59.166|
                  |L59.56|
;;;3568         {
;;;3569           /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;3570              on both master and slave sides in order to resynchronize the master
;;;3571              and slave for their respective CRC calculation */
;;;3572   
;;;3573           /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;3574           __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  21e0              MOVS     r1,#0xe0
00003e  4388              BICS     r0,r0,r1
000040  6821              LDR      r1,[r4,#0]
000042  6048              STR      r0,[r1,#4]
;;;3575   
;;;3576           if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
000044  21ff              MOVS     r1,#0xff
000046  3105              ADDS     r1,#5
000048  6860              LDR      r0,[r4,#4]
00004a  4288              CMP      r0,r1
00004c  d10e              BNE      |L59.108|
00004e  2101              MOVS     r1,#1
000050  03c9              LSLS     r1,r1,#15
000052  68a0              LDR      r0,[r4,#8]
000054  4288              CMP      r0,r1
000056  d003              BEQ      |L59.96|
;;;3577                                                        || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
000058  1149              ASRS     r1,r1,#5
00005a  68a0              LDR      r0,[r4,#8]
00005c  4288              CMP      r0,r1
00005e  d105              BNE      |L59.108|
                  |L59.96|
;;;3578           {
;;;3579             /* Disable SPI peripheral */
;;;3580             __HAL_SPI_DISABLE(hspi);
000060  6820              LDR      r0,[r4,#0]
000062  6800              LDR      r0,[r0,#0]
000064  2140              MOVS     r1,#0x40
000066  4388              BICS     r0,r0,r1
000068  6821              LDR      r1,[r4,#0]
00006a  6008              STR      r0,[r1,#0]
                  |L59.108|
;;;3581           }
;;;3582   
;;;3583           /* Reset CRC Calculation */
;;;3584           if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00006c  2101              MOVS     r1,#1
00006e  0349              LSLS     r1,r1,#13
000070  6aa0              LDR      r0,[r4,#0x28]
000072  4288              CMP      r0,r1
000074  d10d              BNE      |L59.146|
;;;3585           {
;;;3586             SPI_RESET_CRC(hspi);
000076  bf00              NOP      
000078  6820              LDR      r0,[r4,#0]
00007a  6800              LDR      r0,[r0,#0]
00007c  4388              BICS     r0,r0,r1
00007e  6821              LDR      r1,[r4,#0]
000080  6008              STR      r0,[r1,#0]
000082  6820              LDR      r0,[r4,#0]
000084  6800              LDR      r0,[r0,#0]
000086  2101              MOVS     r1,#1
000088  0349              LSLS     r1,r1,#13
00008a  4308              ORRS     r0,r0,r1
00008c  6821              LDR      r1,[r4,#0]
00008e  6008              STR      r0,[r1,#0]
000090  bf00              NOP      
                  |L59.146|
;;;3587           }
;;;3588   
;;;3589           hspi->State = HAL_SPI_STATE_READY;
000092  2101              MOVS     r1,#1
000094  205d              MOVS     r0,#0x5d
000096  5501              STRB     r1,[r0,r4]
;;;3590   
;;;3591           /* Process Unlocked */
;;;3592           __HAL_UNLOCK(hspi);
000098  bf00              NOP      
00009a  2100              MOVS     r1,#0
00009c  205c              MOVS     r0,#0x5c
00009e  5501              STRB     r1,[r0,r4]
0000a0  bf00              NOP      
;;;3593   
;;;3594           return HAL_TIMEOUT;
0000a2  2003              MOVS     r0,#3
                  |L59.164|
;;;3595         }
;;;3596       }
;;;3597     }
;;;3598   
;;;3599     return HAL_OK;
;;;3600   }
0000a4  bdf8              POP      {r3-r7,pc}
                  |L59.166|
0000a6  6820              LDR      r0,[r4,#0]            ;3556
0000a8  6880              LDR      r0,[r0,#8]            ;3556
0000aa  4030              ANDS     r0,r0,r6              ;3556
0000ac  42b8              CMP      r0,r7                 ;3556
0000ae  d1ad              BNE      |L59.12|
0000b0  2000              MOVS     r0,#0                 ;3599
0000b2  e7f7              B        |L59.164|
;;;3601   
                          ENDP


                          AREA ||i.SPI_WaitFlagStateUntilTimeout||, CODE, READONLY, ALIGN=1

                  SPI_WaitFlagStateUntilTimeout PROC
;;;3498     */
;;;3499   static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3500                                                          uint32_t Timeout, uint32_t Tickstart)
;;;3501   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461d              MOV      r5,r3
;;;3502     while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
00000a  e041              B        |L60.144|
                  |L60.12|
;;;3503     {
;;;3504       if (Timeout != HAL_MAX_DELAY)
00000c  1c68              ADDS     r0,r5,#1
00000e  2800              CMP      r0,#0
000010  d03e              BEQ      |L60.144|
;;;3505       {
;;;3506         if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
000012  2d00              CMP      r5,#0
000014  d005              BEQ      |L60.34|
000016  f7fffffe          BL       HAL_GetTick
00001a  9906              LDR      r1,[sp,#0x18]
00001c  1a40              SUBS     r0,r0,r1
00001e  42a8              CMP      r0,r5
000020  d336              BCC      |L60.144|
                  |L60.34|
;;;3507         {
;;;3508           /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;3509           on both master and slave sides in order to resynchronize the master
;;;3510           and slave for their respective CRC calculation */
;;;3511   
;;;3512           /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;3513           __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
000022  6820              LDR      r0,[r4,#0]
000024  6840              LDR      r0,[r0,#4]
000026  21e0              MOVS     r1,#0xe0
000028  4388              BICS     r0,r0,r1
00002a  6821              LDR      r1,[r4,#0]
00002c  6048              STR      r0,[r1,#4]
;;;3514   
;;;3515           if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
00002e  21ff              MOVS     r1,#0xff
000030  3105              ADDS     r1,#5
000032  6860              LDR      r0,[r4,#4]
000034  4288              CMP      r0,r1
000036  d10e              BNE      |L60.86|
000038  2101              MOVS     r1,#1
00003a  03c9              LSLS     r1,r1,#15
00003c  68a0              LDR      r0,[r4,#8]
00003e  4288              CMP      r0,r1
000040  d003              BEQ      |L60.74|
;;;3516                                                        || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
000042  1149              ASRS     r1,r1,#5
000044  68a0              LDR      r0,[r4,#8]
000046  4288              CMP      r0,r1
000048  d105              BNE      |L60.86|
                  |L60.74|
;;;3517           {
;;;3518             /* Disable SPI peripheral */
;;;3519             __HAL_SPI_DISABLE(hspi);
00004a  6820              LDR      r0,[r4,#0]
00004c  6800              LDR      r0,[r0,#0]
00004e  2140              MOVS     r1,#0x40
000050  4388              BICS     r0,r0,r1
000052  6821              LDR      r1,[r4,#0]
000054  6008              STR      r0,[r1,#0]
                  |L60.86|
;;;3520           }
;;;3521   
;;;3522           /* Reset CRC Calculation */
;;;3523           if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000056  2101              MOVS     r1,#1
000058  0349              LSLS     r1,r1,#13
00005a  6aa0              LDR      r0,[r4,#0x28]
00005c  4288              CMP      r0,r1
00005e  d10d              BNE      |L60.124|
;;;3524           {
;;;3525             SPI_RESET_CRC(hspi);
000060  bf00              NOP      
000062  6820              LDR      r0,[r4,#0]
000064  6800              LDR      r0,[r0,#0]
000066  4388              BICS     r0,r0,r1
000068  6821              LDR      r1,[r4,#0]
00006a  6008              STR      r0,[r1,#0]
00006c  6820              LDR      r0,[r4,#0]
00006e  6800              LDR      r0,[r0,#0]
000070  2101              MOVS     r1,#1
000072  0349              LSLS     r1,r1,#13
000074  4308              ORRS     r0,r0,r1
000076  6821              LDR      r1,[r4,#0]
000078  6008              STR      r0,[r1,#0]
00007a  bf00              NOP      
                  |L60.124|
;;;3526           }
;;;3527   
;;;3528           hspi->State = HAL_SPI_STATE_READY;
00007c  2101              MOVS     r1,#1
00007e  205d              MOVS     r0,#0x5d
000080  5501              STRB     r1,[r0,r4]
;;;3529   
;;;3530           /* Process Unlocked */
;;;3531           __HAL_UNLOCK(hspi);
000082  bf00              NOP      
000084  2100              MOVS     r1,#0
000086  205c              MOVS     r0,#0x5c
000088  5501              STRB     r1,[r0,r4]
00008a  bf00              NOP      
;;;3532   
;;;3533           return HAL_TIMEOUT;
00008c  2003              MOVS     r0,#3
                  |L60.142|
;;;3534         }
;;;3535       }
;;;3536     }
;;;3537   
;;;3538     return HAL_OK;
;;;3539   }
00008e  bdf8              POP      {r3-r7,pc}
                  |L60.144|
000090  6820              LDR      r0,[r4,#0]            ;3502
000092  6880              LDR      r0,[r0,#8]            ;3502
000094  4030              ANDS     r0,r0,r6              ;3502
000096  42b0              CMP      r0,r6                 ;3502
000098  d101              BNE      |L60.158|
00009a  2001              MOVS     r0,#1                 ;3502
00009c  e000              B        |L60.160|
                  |L60.158|
00009e  2000              MOVS     r0,#0                 ;3502
                  |L60.160|
0000a0  42b8              CMP      r0,r7                 ;3502
0000a2  d1b3              BNE      |L60.12|
0000a4  2000              MOVS     r0,#0                 ;3538
0000a6  e7f2              B        |L60.142|
;;;3540   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_spi_c_5e7b22bd____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f0xx_hal_spi_c_5e7b22bd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f0xx_hal_spi_c_5e7b22bd____REVSH|
#line 402
|__asm___19_stm32f0xx_hal_spi_c_5e7b22bd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
