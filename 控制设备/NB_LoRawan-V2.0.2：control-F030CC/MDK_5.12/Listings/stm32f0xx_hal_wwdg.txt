; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\stm32f0xx_hal_wwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f0xx_hal_wwdg.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\stm32f0xx_hal_wwdg.crf ..\stm32f03xx_HAL\Src\stm32f0xx_hal_wwdg.c]
                          THUMB

                          AREA ||i.HAL_WWDG_EarlyWakeupCallback||, CODE, READONLY, ALIGN=1

                  HAL_WWDG_EarlyWakeupCallback PROC
;;;292      */
;;;293    __weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef* hwwdg)
000000  4770              BX       lr
;;;294    {
;;;295      /* Prevent unused argument(s) compilation warning */
;;;296      UNUSED(hwwdg);
;;;297    
;;;298      /* NOTE: This function should not be modified, when the callback is needed,
;;;299               the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
;;;300       */
;;;301    }
;;;302    
                          ENDP


                          AREA ||i.HAL_WWDG_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_WWDG_IRQHandler PROC
;;;268      */
;;;269    void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
000000  b510              PUSH     {r4,lr}
;;;270    {
000002  4604              MOV      r4,r0
;;;271      /* Check if Early Wakeup Interrupt is enable */
;;;272      if(__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
000004  6820              LDR      r0,[r4,#0]
000006  6840              LDR      r0,[r0,#4]
000008  2101              MOVS     r1,#1
00000a  0249              LSLS     r1,r1,#9
00000c  4008              ANDS     r0,r0,r1
00000e  0a40              LSRS     r0,r0,#9
000010  2800              CMP      r0,#0
000012  d00e              BEQ      |L2.50|
;;;273      {
;;;274        /* Check if WWDG Early Wakeup Interrupt occurred */
;;;275        if(__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
000014  6820              LDR      r0,[r4,#0]
000016  6880              LDR      r0,[r0,#8]
000018  07c0              LSLS     r0,r0,#31
00001a  0fc0              LSRS     r0,r0,#31
00001c  2101              MOVS     r1,#1
00001e  4048              EORS     r0,r0,r1
000020  4048              EORS     r0,r0,r1
000022  2800              CMP      r0,#0
000024  d005              BEQ      |L2.50|
;;;276        {
;;;277          /* Clear the WWDG Early Wakeup flag */
;;;278          __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
000026  1ec8              SUBS     r0,r1,#3
000028  6821              LDR      r1,[r4,#0]
00002a  6088              STR      r0,[r1,#8]
;;;279    
;;;280          /* Early Wakeup callback */ 
;;;281          HAL_WWDG_EarlyWakeupCallback(hwwdg);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       HAL_WWDG_EarlyWakeupCallback
                  |L2.50|
;;;282        }
;;;283      }
;;;284    }
000032  bd10              POP      {r4,pc}
;;;285    
                          ENDP


                          AREA ||i.HAL_WWDG_Init||, CODE, READONLY, ALIGN=1

                  HAL_WWDG_Init PROC
;;;171      */
;;;172    HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
000000  b510              PUSH     {r4,lr}
;;;173    {
000002  4604              MOV      r4,r0
;;;174      /* Check the WWDG handle allocation */
;;;175      if(hwwdg == NULL)
000004  2c00              CMP      r4,#0
000006  d101              BNE      |L3.12|
;;;176      {
;;;177        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L3.10|
;;;178      }
;;;179    
;;;180      /* Check the parameters */
;;;181      assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
;;;182      assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
;;;183      assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
;;;184      assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
;;;185      assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
;;;186    
;;;187      /* Init the low level hardware */
;;;188      HAL_WWDG_MspInit(hwwdg);
;;;189    
;;;190      /* Set WWDG Counter */
;;;191      WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
;;;192    
;;;193      /* Set WWDG Prescaler and Window */
;;;194      WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
;;;195    
;;;196      /* Return function status */
;;;197      return HAL_OK;
;;;198    }
00000a  bd10              POP      {r4,pc}
                  |L3.12|
00000c  4620              MOV      r0,r4                 ;188
00000e  f7fffffe          BL       HAL_WWDG_MspInit
000012  2180              MOVS     r1,#0x80              ;191
000014  68e0              LDR      r0,[r4,#0xc]          ;191
000016  4308              ORRS     r0,r0,r1              ;191
000018  6821              LDR      r1,[r4,#0]            ;191
00001a  6008              STR      r0,[r1,#0]            ;191
00001c  6861              LDR      r1,[r4,#4]            ;194
00001e  6920              LDR      r0,[r4,#0x10]         ;194
000020  4308              ORRS     r0,r0,r1              ;194
000022  68a1              LDR      r1,[r4,#8]            ;194
000024  4308              ORRS     r0,r0,r1              ;194
000026  6821              LDR      r1,[r4,#0]            ;194
000028  6048              STR      r0,[r1,#4]            ;194
00002a  2000              MOVS     r0,#0                 ;197
00002c  e7ed              B        |L3.10|
;;;199    
                          ENDP


                          AREA ||i.HAL_WWDG_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_WWDG_MspInit PROC
;;;209      */
;;;210    __weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
000000  4770              BX       lr
;;;211    {
;;;212      /* Prevent unused argument(s) compilation warning */
;;;213      UNUSED(hwwdg);
;;;214    
;;;215      /* NOTE: This function should not be modified, when the callback is needed,
;;;216               the HAL_WWDG_MspInit could be implemented in the user file
;;;217       */
;;;218    }
;;;219    
                          ENDP


                          AREA ||i.HAL_WWDG_Refresh||, CODE, READONLY, ALIGN=1

                  HAL_WWDG_Refresh PROC
;;;245      */
;;;246    HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
000000  4601              MOV      r1,r0
;;;247    {
;;;248      /* Write to WWDG CR the WWDG Counter value to refresh with */
;;;249      WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
000002  680a              LDR      r2,[r1,#0]
000004  68c8              LDR      r0,[r1,#0xc]
000006  6010              STR      r0,[r2,#0]
;;;250    
;;;251      /* Return function status */
;;;252      return HAL_OK;
000008  2000              MOVS     r0,#0
;;;253    }
00000a  4770              BX       lr
;;;254    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32f03xx_HAL\\Src\\stm32f0xx_hal_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f0xx_hal_wwdg_c_c1f9d8a4____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f0xx_hal_wwdg_c_c1f9d8a4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f0xx_hal_wwdg_c_c1f9d8a4____REVSH|
#line 402
|__asm___20_stm32f0xx_hal_wwdg_c_c1f9d8a4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
