; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\utilities.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\utilities.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS\Device\ST\STM32F0xx\Include -I..\CMSIS\Include -I..\stm32f03xx_HAL\Inc -I..\USER -I..\HAL\inc -I..\HAL\system -I..\Lib\LoRawan-node\misc -I..\Lib\LoRawan-node\crypto -I..\Lib\LoRawan-node\mac -I..\Lib\LoRawan-node\radio -I..\Lib\LoRawan-node\radio\sx1276 -I..\Lib -IE:\NBI项目\NBI_LoRa\LoRa版本备份\NB_LoRawan-V2.0.2：control-F030CC\MDK_5.12\RTE -ID:\mysaftware\keil_5.12\ARM\PACK\Keil\STM32F0xx_DFP\1.5.0\Device\Include -ID:\mysaftware\keil_5.12\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=518 -DSTM32F030xC -DUSE_HAL_DRIVER -DSTM32F030xC -DUSE_MODEM_LORA -DUSE_BAND_433 --omf_browse=.\objects\utilities.crf ..\Lib\LoRawan-node\misc\utilities.c]
                          THUMB

                          AREA ||i.Nibble2HexChar||, CODE, READONLY, ALIGN=1

                  Nibble2HexChar PROC
;;;71     
;;;72     int8_t Nibble2HexChar( uint8_t a )
000000  4601              MOV      r1,r0
;;;73     {
;;;74         if( a < 10 )
000002  290a              CMP      r1,#0xa
000004  da03              BGE      |L1.14|
;;;75         {
;;;76             return '0' + a;
000006  4608              MOV      r0,r1
000008  3030              ADDS     r0,r0,#0x30
00000a  b240              SXTB     r0,r0
                  |L1.12|
;;;77         }
;;;78         else if( a < 16 )
;;;79         {
;;;80             return 'A' + ( a - 10 );
;;;81         }
;;;82         else
;;;83         {
;;;84             return '?';
;;;85         }
;;;86     }
00000c  4770              BX       lr
                  |L1.14|
00000e  2910              CMP      r1,#0x10              ;78
000010  da03              BGE      |L1.26|
000012  4608              MOV      r0,r1                 ;80
000014  3037              ADDS     r0,r0,#0x37           ;80
000016  b240              SXTB     r0,r0                 ;80
000018  e7f8              B        |L1.12|
                  |L1.26|
00001a  203f              MOVS     r0,#0x3f              ;84
00001c  e7f6              B        |L1.12|
                          ENDP


                          AREA ||i.memcpy1||, CODE, READONLY, ALIGN=1

                  memcpy1 PROC
;;;45     
;;;46     void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
000000  b510              PUSH     {r4,lr}
;;;47     {
;;;48         while( size-- )
000002  e003              B        |L2.12|
                  |L2.4|
;;;49         {
;;;50             *dst++ = *src++;
000004  780b              LDRB     r3,[r1,#0]
000006  7003              STRB     r3,[r0,#0]
000008  1c49              ADDS     r1,r1,#1
00000a  1c40              ADDS     r0,r0,#1
                  |L2.12|
00000c  4613              MOV      r3,r2                 ;48
00000e  1e54              SUBS     r4,r2,#1              ;48
000010  b2a2              UXTH     r2,r4                 ;48
000012  2b00              CMP      r3,#0                 ;48
000014  d1f6              BNE      |L2.4|
;;;51         }
;;;52     }
000016  bd10              POP      {r4,pc}
;;;53     
                          ENDP


                          AREA ||i.memcpyr||, CODE, READONLY, ALIGN=1

                  memcpyr PROC
;;;53     
;;;54     void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
000000  b510              PUSH     {r4,lr}
;;;55     {
;;;56         dst = dst + ( size - 1 );
000002  1e53              SUBS     r3,r2,#1
000004  1818              ADDS     r0,r3,r0
;;;57         while( size-- )
000006  e003              B        |L3.16|
                  |L3.8|
;;;58         {
;;;59             *dst-- = *src++;
000008  780b              LDRB     r3,[r1,#0]
00000a  7003              STRB     r3,[r0,#0]
00000c  1c49              ADDS     r1,r1,#1
00000e  1e40              SUBS     r0,r0,#1
                  |L3.16|
000010  4613              MOV      r3,r2                 ;57
000012  1e54              SUBS     r4,r2,#1              ;57
000014  b2a2              UXTH     r2,r4                 ;57
000016  2b00              CMP      r3,#0                 ;57
000018  d1f6              BNE      |L3.8|
;;;60         }
;;;61     }
00001a  bd10              POP      {r4,pc}
;;;62     
                          ENDP


                          AREA ||i.memset1||, CODE, READONLY, ALIGN=1

                  memset1 PROC
;;;62     
;;;63     void memset1( uint8_t *dst, uint8_t value, uint16_t size )
000000  e003              B        |L4.10|
                  |L4.2|
;;;64     {
;;;65         while( size )
;;;66         {
;;;67             *dst++ = value;
000002  7001              STRB     r1,[r0,#0]
000004  1c40              ADDS     r0,r0,#1
;;;68             size--;
000006  1e53              SUBS     r3,r2,#1
000008  b29a              UXTH     r2,r3
                  |L4.10|
00000a  2a00              CMP      r2,#0                 ;65
00000c  d1f9              BNE      |L4.2|
;;;69         }
;;;70     }
00000e  4770              BX       lr
;;;71     
                          ENDP


                          AREA ||i.rand1||, CODE, READONLY, ALIGN=2

                  rand1 PROC
;;;29     
;;;30     int32_t rand1( void )
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32         return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
000002  4907              LDR      r1,|L5.32|
000004  6809              LDR      r1,[r1,#0]  ; next
000006  4a07              LDR      r2,|L5.36|
000008  4351              MULS     r1,r2,r1
00000a  4a07              LDR      r2,|L5.40|
00000c  1889              ADDS     r1,r1,r2
00000e  4a04              LDR      r2,|L5.32|
000010  4608              MOV      r0,r1
000012  6011              STR      r1,[r2,#0]  ; next
000014  4905              LDR      r1,|L5.44|
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  4608              MOV      r0,r1
;;;33     }
00001c  bd10              POP      {r4,pc}
;;;34     
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      next
                  |L5.36|
                          DCD      0x41c64e6d
                  |L5.40|
                          DCD      0x00003039
                  |L5.44|
                          DCD      0x7fffffff

                          AREA ||i.randr||, CODE, READONLY, ALIGN=1

                  randr PROC
;;;40     
;;;41     int32_t randr( int32_t min, int32_t max )
000000  b570              PUSH     {r4-r6,lr}
;;;42     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;43         return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
000006  f7fffffe          BL       rand1
00000a  4606              MOV      r6,r0
00000c  1b28              SUBS     r0,r5,r4
00000e  1c41              ADDS     r1,r0,#1
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       __aeabi_idivmod
000016  1908              ADDS     r0,r1,r4
;;;44     }
000018  bd70              POP      {r4-r6,pc}
;;;45     
                          ENDP


                          AREA ||i.srand1||, CODE, READONLY, ALIGN=2

                  srand1 PROC
;;;34     
;;;35     void srand1( uint32_t seed )
000000  4901              LDR      r1,|L7.8|
;;;36     {
;;;37         next = seed;
000002  6008              STR      r0,[r1,#0]  ; next
;;;38     }
000004  4770              BX       lr
;;;39     // Standard random functions redefinition end
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      next

                          AREA ||.data||, DATA, ALIGN=2

                  next
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\Lib\\LoRawan-node\\misc\\utilities.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_utilities_c_rand1____REV16|
#line 388 "..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_utilities_c_rand1____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_utilities_c_rand1____REVSH|
#line 402
|__asm___11_utilities_c_rand1____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
